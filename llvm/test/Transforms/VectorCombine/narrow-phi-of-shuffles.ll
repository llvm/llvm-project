; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=vector-combine -S %s | FileCheck %s --check-prefixes=CHECK
; RUN: opt -mtriple=aarch64 -passes=vector-combine -S %s | FileCheck %s --check-prefixes=CHECK-AARCH64
; RUN: opt -mtriple=amdgcn-amd-amdhsa -passes=vector-combine -S %s | FileCheck %s --check-prefixes=CHECK-AMDGPU
; RUN: opt -mtriple=arm -passes=vector-combine -S %s | FileCheck %s --check-prefixes=CHECK-ARM
; RUN: opt -mtriple=hexagon-- -passes=vector-combine -S %s | FileCheck %s --check-prefixes=CHECK-HEXAGON
; RUN: opt -mtriple=riscv64 -passes=vector-combine -S %s | FileCheck %s --check-prefixes=CHECK-RISCV
; RUN: opt -mtriple=x86_64-- -mcpu=x86-64 -passes=vector-combine -S %s | FileCheck %s --check-prefixes=CHECK-X86-V1
; RUN: opt -mtriple=x86_64-- -mcpu=x86-64-v2 -passes=vector-combine -S %s | FileCheck %s --check-prefixes=CHECK-X86-V2
; RUN: opt -mtriple=x86_64-- -mcpu=x86-64-v3 -passes=vector-combine -S %s | FileCheck %s --check-prefixes=CHECK-X86-V3
; RUN: opt -mtriple=x86_64-- -mcpu=x86-64-v4 -passes=vector-combine -S %s | FileCheck %s --check-prefixes=CHECK-X86-V4

define <2 x i8> @shuffle_v2i8(<2 x i8> %arg0, i1 %cond) {
; CHECK-LABEL: define <2 x i8> @shuffle_v2i8(
; CHECK-SAME: <2 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <2 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <2 x i8> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <2 x i8> @shuffle_v2i8(
; CHECK-AARCH64-SAME: <2 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <2 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <2 x i8> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <2 x i8> @shuffle_v2i8(
; CHECK-AMDGPU-SAME: <2 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <2 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <2 x i8> [[VAL3]]
;
; CHECK-ARM-LABEL: define <2 x i8> @shuffle_v2i8(
; CHECK-ARM-SAME: <2 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <2 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <2 x i8> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <2 x i8> @shuffle_v2i8(
; CHECK-HEXAGON-SAME: <2 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <2 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <2 x i8> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <2 x i8> @shuffle_v2i8(
; CHECK-RISCV-SAME: <2 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <2 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <2 x i8> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <2 x i8> @shuffle_v2i8(
; CHECK-X86-V1-SAME: <2 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <2 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <2 x i8> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <2 x i8> @shuffle_v2i8(
; CHECK-X86-V2-SAME: <2 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <2 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <2 x i8> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <2 x i8> @shuffle_v2i8(
; CHECK-X86-V3-SAME: <2 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <2 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <2 x i8> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <2 x i8> @shuffle_v2i8(
; CHECK-X86-V4-SAME: <2 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i8> [[ARG0]], <2 x i8> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <2 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <2 x i8> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <2 x i8> %arg0, <2 x i8> poison, <2 x i32> <i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <2 x i8> %arg0, <2 x i8> poison, <2 x i32> <i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <2 x i8> [ %val1, %then ], [ %val2, %else ]
  ret <2 x i8> %val3
}

define <4 x i8> @shuffle_v4i8(<3 x i8> %arg0, i1 %cond) {
; CHECK-LABEL: define <4 x i8> @shuffle_v4i8(
; CHECK-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <4 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <4 x i8> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <4 x i8> @shuffle_v4i8(
; CHECK-AARCH64-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <4 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <4 x i8> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <4 x i8> @shuffle_v4i8(
; CHECK-AMDGPU-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <4 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <4 x i8> [[VAL3]]
;
; CHECK-ARM-LABEL: define <4 x i8> @shuffle_v4i8(
; CHECK-ARM-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <4 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <4 x i8> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <4 x i8> @shuffle_v4i8(
; CHECK-HEXAGON-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <4 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <4 x i8> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <4 x i8> @shuffle_v4i8(
; CHECK-RISCV-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <4 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <4 x i8> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <4 x i8> @shuffle_v4i8(
; CHECK-X86-V1-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <4 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <4 x i8> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <4 x i8> @shuffle_v4i8(
; CHECK-X86-V2-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <4 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <4 x i8> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <4 x i8> @shuffle_v4i8(
; CHECK-X86-V3-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <4 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <4 x i8> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <4 x i8> @shuffle_v4i8(
; CHECK-X86-V4-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <4 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <4 x i8> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i8> %arg0, <3 x i8> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i8> %arg0, <3 x i8> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <4 x i8> [ %val1, %then ], [ %val2, %else ]
  ret <4 x i8> %val3
}

define <8 x i8> @shuffle_v8i8(<3 x i8> %arg0, i1 %cond) {
; CHECK-LABEL: define <8 x i8> @shuffle_v8i8(
; CHECK-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <8 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <8 x i8> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <8 x i8> @shuffle_v8i8(
; CHECK-AARCH64-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <8 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <8 x i8> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <8 x i8> @shuffle_v8i8(
; CHECK-AMDGPU-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <8 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <8 x i8> [[VAL3]]
;
; CHECK-ARM-LABEL: define <8 x i8> @shuffle_v8i8(
; CHECK-ARM-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <8 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <8 x i8> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <8 x i8> @shuffle_v8i8(
; CHECK-HEXAGON-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <8 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <8 x i8> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <8 x i8> @shuffle_v8i8(
; CHECK-RISCV-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <8 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <8 x i8> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <8 x i8> @shuffle_v8i8(
; CHECK-X86-V1-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <8 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <8 x i8> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <8 x i8> @shuffle_v8i8(
; CHECK-X86-V2-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <8 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <8 x i8> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <8 x i8> @shuffle_v8i8(
; CHECK-X86-V3-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <8 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <8 x i8> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <8 x i8> @shuffle_v8i8(
; CHECK-X86-V4-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <8 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <8 x i8> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i8> %arg0, <3 x i8> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i8> %arg0, <3 x i8> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <8 x i8> [ %val1, %then ], [ %val2, %else ]
  ret <8 x i8> %val3
}

define <16 x i8> @shuffle_v16i8(<3 x i8> %arg0, i1 %cond) {
; CHECK-LABEL: define <16 x i8> @shuffle_v16i8(
; CHECK-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <16 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <16 x i8> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <16 x i8> @shuffle_v16i8(
; CHECK-AARCH64-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <16 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <16 x i8> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <16 x i8> @shuffle_v16i8(
; CHECK-AMDGPU-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <16 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <16 x i8> [[VAL3]]
;
; CHECK-ARM-LABEL: define <16 x i8> @shuffle_v16i8(
; CHECK-ARM-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <16 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <16 x i8> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <16 x i8> @shuffle_v16i8(
; CHECK-HEXAGON-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <16 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <16 x i8> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <16 x i8> @shuffle_v16i8(
; CHECK-RISCV-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <16 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <16 x i8> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <16 x i8> @shuffle_v16i8(
; CHECK-X86-V1-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <16 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <16 x i8> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <16 x i8> @shuffle_v16i8(
; CHECK-X86-V2-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <16 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <16 x i8> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <16 x i8> @shuffle_v16i8(
; CHECK-X86-V3-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <16 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <16 x i8> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <16 x i8> @shuffle_v16i8(
; CHECK-X86-V4-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <16 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <16 x i8> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i8> %arg0, <3 x i8> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i8> %arg0, <3 x i8> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <16 x i8> [ %val1, %then ], [ %val2, %else ]
  ret <16 x i8> %val3
}

define <32 x i8> @shuffle_v32i8(<3 x i8> %arg0, i1 %cond) {
; CHECK-LABEL: define <32 x i8> @shuffle_v32i8(
; CHECK-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <32 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <32 x i8> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <32 x i8> @shuffle_v32i8(
; CHECK-AARCH64-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <32 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <32 x i8> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <32 x i8> @shuffle_v32i8(
; CHECK-AMDGPU-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <32 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <32 x i8> [[VAL3]]
;
; CHECK-ARM-LABEL: define <32 x i8> @shuffle_v32i8(
; CHECK-ARM-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <32 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <32 x i8> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <32 x i8> @shuffle_v32i8(
; CHECK-HEXAGON-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <32 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <32 x i8> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <32 x i8> @shuffle_v32i8(
; CHECK-RISCV-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <32 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <32 x i8> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <32 x i8> @shuffle_v32i8(
; CHECK-X86-V1-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <32 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <32 x i8> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <32 x i8> @shuffle_v32i8(
; CHECK-X86-V2-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <32 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <32 x i8> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <32 x i8> @shuffle_v32i8(
; CHECK-X86-V3-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <32 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <32 x i8> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <32 x i8> @shuffle_v32i8(
; CHECK-X86-V4-SAME: <3 x i8> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i8> [[ARG0]], <3 x i8> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <32 x i8> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <32 x i8> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i8> %arg0, <3 x i8> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i8> %arg0, <3 x i8> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <32 x i8> [ %val1, %then ], [ %val2, %else ]
  ret <32 x i8> %val3
}

define <2 x i16> @shuffle_v2i16(<2 x i16> %arg0, i1 %cond) {
; CHECK-LABEL: define <2 x i16> @shuffle_v2i16(
; CHECK-SAME: <2 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <2 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <2 x i16> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <2 x i16> @shuffle_v2i16(
; CHECK-AARCH64-SAME: <2 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <2 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <2 x i16> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <2 x i16> @shuffle_v2i16(
; CHECK-AMDGPU-SAME: <2 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <2 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <2 x i16> [[VAL3]]
;
; CHECK-ARM-LABEL: define <2 x i16> @shuffle_v2i16(
; CHECK-ARM-SAME: <2 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <2 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <2 x i16> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <2 x i16> @shuffle_v2i16(
; CHECK-HEXAGON-SAME: <2 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <2 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <2 x i16> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <2 x i16> @shuffle_v2i16(
; CHECK-RISCV-SAME: <2 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <2 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <2 x i16> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <2 x i16> @shuffle_v2i16(
; CHECK-X86-V1-SAME: <2 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <2 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <2 x i16> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <2 x i16> @shuffle_v2i16(
; CHECK-X86-V2-SAME: <2 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <2 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <2 x i16> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <2 x i16> @shuffle_v2i16(
; CHECK-X86-V3-SAME: <2 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <2 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <2 x i16> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <2 x i16> @shuffle_v2i16(
; CHECK-X86-V4-SAME: <2 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i16> [[ARG0]], <2 x i16> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <2 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <2 x i16> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <2 x i16> %arg0, <2 x i16> poison, <2 x i32> <i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <2 x i16> %arg0, <2 x i16> poison, <2 x i32> <i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <2 x i16> [ %val1, %then ], [ %val2, %else ]
  ret <2 x i16> %val3
}

define <4 x i16> @shuffle_v4i16(<3 x i16> %arg0, i1 %cond) {
; CHECK-LABEL: define <4 x i16> @shuffle_v4i16(
; CHECK-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <4 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <4 x i16> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <4 x i16> @shuffle_v4i16(
; CHECK-AARCH64-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <4 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <4 x i16> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <4 x i16> @shuffle_v4i16(
; CHECK-AMDGPU-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <4 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <4 x i16> [[VAL3]]
;
; CHECK-ARM-LABEL: define <4 x i16> @shuffle_v4i16(
; CHECK-ARM-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <4 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <4 x i16> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <4 x i16> @shuffle_v4i16(
; CHECK-HEXAGON-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <4 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <4 x i16> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <4 x i16> @shuffle_v4i16(
; CHECK-RISCV-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <4 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <4 x i16> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <4 x i16> @shuffle_v4i16(
; CHECK-X86-V1-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <4 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <4 x i16> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <4 x i16> @shuffle_v4i16(
; CHECK-X86-V2-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <4 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <4 x i16> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <4 x i16> @shuffle_v4i16(
; CHECK-X86-V3-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <4 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <4 x i16> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <4 x i16> @shuffle_v4i16(
; CHECK-X86-V4-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <4 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <4 x i16> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i16> %arg0, <3 x i16> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i16> %arg0, <3 x i16> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <4 x i16> [ %val1, %then ], [ %val2, %else ]
  ret <4 x i16> %val3
}

define <8 x i16> @shuffle_v8i16(<3 x i16> %arg0, i1 %cond) {
; CHECK-LABEL: define <8 x i16> @shuffle_v8i16(
; CHECK-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <8 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <8 x i16> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <8 x i16> @shuffle_v8i16(
; CHECK-AARCH64-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <8 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <8 x i16> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <8 x i16> @shuffle_v8i16(
; CHECK-AMDGPU-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <8 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <8 x i16> [[VAL3]]
;
; CHECK-ARM-LABEL: define <8 x i16> @shuffle_v8i16(
; CHECK-ARM-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <8 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <8 x i16> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <8 x i16> @shuffle_v8i16(
; CHECK-HEXAGON-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <8 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <8 x i16> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <8 x i16> @shuffle_v8i16(
; CHECK-RISCV-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <8 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <8 x i16> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <8 x i16> @shuffle_v8i16(
; CHECK-X86-V1-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <8 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <8 x i16> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <8 x i16> @shuffle_v8i16(
; CHECK-X86-V2-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <8 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <8 x i16> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <8 x i16> @shuffle_v8i16(
; CHECK-X86-V3-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <8 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <8 x i16> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <8 x i16> @shuffle_v8i16(
; CHECK-X86-V4-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <8 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <8 x i16> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i16> %arg0, <3 x i16> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i16> %arg0, <3 x i16> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <8 x i16> [ %val1, %then ], [ %val2, %else ]
  ret <8 x i16> %val3
}

define <16 x i16> @shuffle_v16i16(<3 x i16> %arg0, i1 %cond) {
; CHECK-LABEL: define <16 x i16> @shuffle_v16i16(
; CHECK-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <16 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <16 x i16> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <16 x i16> @shuffle_v16i16(
; CHECK-AARCH64-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <16 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <16 x i16> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <16 x i16> @shuffle_v16i16(
; CHECK-AMDGPU-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <16 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <16 x i16> [[VAL3]]
;
; CHECK-ARM-LABEL: define <16 x i16> @shuffle_v16i16(
; CHECK-ARM-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <16 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <16 x i16> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <16 x i16> @shuffle_v16i16(
; CHECK-HEXAGON-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <16 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <16 x i16> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <16 x i16> @shuffle_v16i16(
; CHECK-RISCV-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <16 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <16 x i16> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <16 x i16> @shuffle_v16i16(
; CHECK-X86-V1-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <16 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <16 x i16> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <16 x i16> @shuffle_v16i16(
; CHECK-X86-V2-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <16 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <16 x i16> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <16 x i16> @shuffle_v16i16(
; CHECK-X86-V3-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <16 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <16 x i16> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <16 x i16> @shuffle_v16i16(
; CHECK-X86-V4-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <16 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <16 x i16> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i16> %arg0, <3 x i16> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i16> %arg0, <3 x i16> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <16 x i16> [ %val1, %then ], [ %val2, %else ]
  ret <16 x i16> %val3
}

define <32 x i16> @shuffle_v32i16(<3 x i16> %arg0, i1 %cond) {
; CHECK-LABEL: define <32 x i16> @shuffle_v32i16(
; CHECK-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <32 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <32 x i16> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <32 x i16> @shuffle_v32i16(
; CHECK-AARCH64-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <32 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <32 x i16> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <32 x i16> @shuffle_v32i16(
; CHECK-AMDGPU-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <32 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <32 x i16> [[VAL3]]
;
; CHECK-ARM-LABEL: define <32 x i16> @shuffle_v32i16(
; CHECK-ARM-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <32 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <32 x i16> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <32 x i16> @shuffle_v32i16(
; CHECK-HEXAGON-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <32 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <32 x i16> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <32 x i16> @shuffle_v32i16(
; CHECK-RISCV-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <32 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <32 x i16> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <32 x i16> @shuffle_v32i16(
; CHECK-X86-V1-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <32 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <32 x i16> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <32 x i16> @shuffle_v32i16(
; CHECK-X86-V2-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <32 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <32 x i16> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <32 x i16> @shuffle_v32i16(
; CHECK-X86-V3-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <32 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <32 x i16> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <32 x i16> @shuffle_v32i16(
; CHECK-X86-V4-SAME: <3 x i16> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i16> [[ARG0]], <3 x i16> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <32 x i16> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <32 x i16> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i16> %arg0, <3 x i16> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i16> %arg0, <3 x i16> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <32 x i16> [ %val1, %then ], [ %val2, %else ]
  ret <32 x i16> %val3
}

define <2 x i32> @shuffle_v2i32(<2 x i32> %arg0, i1 %cond) {
; CHECK-LABEL: define <2 x i32> @shuffle_v2i32(
; CHECK-SAME: <2 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <2 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <2 x i32> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <2 x i32> @shuffle_v2i32(
; CHECK-AARCH64-SAME: <2 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <2 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <2 x i32> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <2 x i32> @shuffle_v2i32(
; CHECK-AMDGPU-SAME: <2 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <2 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <2 x i32> [[VAL3]]
;
; CHECK-ARM-LABEL: define <2 x i32> @shuffle_v2i32(
; CHECK-ARM-SAME: <2 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <2 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <2 x i32> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <2 x i32> @shuffle_v2i32(
; CHECK-HEXAGON-SAME: <2 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <2 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <2 x i32> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <2 x i32> @shuffle_v2i32(
; CHECK-RISCV-SAME: <2 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <2 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <2 x i32> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <2 x i32> @shuffle_v2i32(
; CHECK-X86-V1-SAME: <2 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <2 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <2 x i32> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <2 x i32> @shuffle_v2i32(
; CHECK-X86-V2-SAME: <2 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <2 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <2 x i32> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <2 x i32> @shuffle_v2i32(
; CHECK-X86-V3-SAME: <2 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <2 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <2 x i32> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <2 x i32> @shuffle_v2i32(
; CHECK-X86-V4-SAME: <2 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <2 x i32> [[ARG0]], <2 x i32> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <2 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <2 x i32> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <2 x i32> %arg0, <2 x i32> poison, <2 x i32> <i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <2 x i32> %arg0, <2 x i32> poison, <2 x i32> <i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <2 x i32> [ %val1, %then ], [ %val2, %else ]
  ret <2 x i32> %val3
}

define <4 x i32> @shuffle_v4i32(<3 x i32> %arg0, i1 %cond) {
; CHECK-LABEL: define <4 x i32> @shuffle_v4i32(
; CHECK-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <4 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <4 x i32> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <4 x i32> @shuffle_v4i32(
; CHECK-AARCH64-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <4 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <4 x i32> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <4 x i32> @shuffle_v4i32(
; CHECK-AMDGPU-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[TMP0:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[TMP1:%.*]] = phi <3 x i32> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = shufflevector <3 x i32> [[TMP1]], <3 x i32> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    ret <4 x i32> [[VAL3]]
;
; CHECK-ARM-LABEL: define <4 x i32> @shuffle_v4i32(
; CHECK-ARM-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <4 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <4 x i32> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <4 x i32> @shuffle_v4i32(
; CHECK-HEXAGON-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <4 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <4 x i32> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <4 x i32> @shuffle_v4i32(
; CHECK-RISCV-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <4 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <4 x i32> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <4 x i32> @shuffle_v4i32(
; CHECK-X86-V1-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <4 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <4 x i32> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <4 x i32> @shuffle_v4i32(
; CHECK-X86-V2-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <4 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <4 x i32> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <4 x i32> @shuffle_v4i32(
; CHECK-X86-V3-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <4 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <4 x i32> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <4 x i32> @shuffle_v4i32(
; CHECK-X86-V4-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <4 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <4 x i32> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i32> %arg0, <3 x i32> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i32> %arg0, <3 x i32> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <4 x i32> [ %val1, %then ], [ %val2, %else ]
  ret <4 x i32> %val3
}

define <8 x i32> @shuffle_v8i32(<3 x i32> %arg0, i1 %cond) {
; CHECK-LABEL: define <8 x i32> @shuffle_v8i32(
; CHECK-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <8 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <8 x i32> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <8 x i32> @shuffle_v8i32(
; CHECK-AARCH64-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <8 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <8 x i32> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <8 x i32> @shuffle_v8i32(
; CHECK-AMDGPU-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[TMP0:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[TMP1:%.*]] = phi <3 x i32> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = shufflevector <3 x i32> [[TMP1]], <3 x i32> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    ret <8 x i32> [[VAL3]]
;
; CHECK-ARM-LABEL: define <8 x i32> @shuffle_v8i32(
; CHECK-ARM-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <8 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <8 x i32> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <8 x i32> @shuffle_v8i32(
; CHECK-HEXAGON-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <8 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <8 x i32> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <8 x i32> @shuffle_v8i32(
; CHECK-RISCV-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <8 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <8 x i32> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <8 x i32> @shuffle_v8i32(
; CHECK-X86-V1-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <8 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <8 x i32> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <8 x i32> @shuffle_v8i32(
; CHECK-X86-V2-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <8 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <8 x i32> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <8 x i32> @shuffle_v8i32(
; CHECK-X86-V3-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <8 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <8 x i32> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <8 x i32> @shuffle_v8i32(
; CHECK-X86-V4-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <8 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <8 x i32> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i32> %arg0, <3 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i32> %arg0, <3 x i32> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <8 x i32> [ %val1, %then ], [ %val2, %else ]
  ret <8 x i32> %val3
}

define <16 x i32> @shuffle_v16i32(<3 x i32> %arg0, i1 %cond) {
; CHECK-LABEL: define <16 x i32> @shuffle_v16i32(
; CHECK-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <16 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <16 x i32> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <16 x i32> @shuffle_v16i32(
; CHECK-AARCH64-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <16 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <16 x i32> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <16 x i32> @shuffle_v16i32(
; CHECK-AMDGPU-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[TMP0:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[TMP1:%.*]] = phi <3 x i32> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = shufflevector <3 x i32> [[TMP1]], <3 x i32> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    ret <16 x i32> [[VAL3]]
;
; CHECK-ARM-LABEL: define <16 x i32> @shuffle_v16i32(
; CHECK-ARM-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <16 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <16 x i32> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <16 x i32> @shuffle_v16i32(
; CHECK-HEXAGON-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <16 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <16 x i32> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <16 x i32> @shuffle_v16i32(
; CHECK-RISCV-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <16 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <16 x i32> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <16 x i32> @shuffle_v16i32(
; CHECK-X86-V1-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <16 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <16 x i32> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <16 x i32> @shuffle_v16i32(
; CHECK-X86-V2-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <16 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <16 x i32> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <16 x i32> @shuffle_v16i32(
; CHECK-X86-V3-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <16 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <16 x i32> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <16 x i32> @shuffle_v16i32(
; CHECK-X86-V4-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <16 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <16 x i32> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i32> %arg0, <3 x i32> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i32> %arg0, <3 x i32> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <16 x i32> [ %val1, %then ], [ %val2, %else ]
  ret <16 x i32> %val3
}

define <32 x i32> @shuffle_v32i32(<3 x i32> %arg0, i1 %cond) {
; CHECK-LABEL: define <32 x i32> @shuffle_v32i32(
; CHECK-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <32 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <32 x i32> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <32 x i32> @shuffle_v32i32(
; CHECK-AARCH64-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <32 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <32 x i32> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <32 x i32> @shuffle_v32i32(
; CHECK-AMDGPU-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[TMP0:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[TMP1:%.*]] = phi <3 x i32> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = shufflevector <3 x i32> [[TMP1]], <3 x i32> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    ret <32 x i32> [[VAL3]]
;
; CHECK-ARM-LABEL: define <32 x i32> @shuffle_v32i32(
; CHECK-ARM-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <32 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <32 x i32> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <32 x i32> @shuffle_v32i32(
; CHECK-HEXAGON-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <32 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <32 x i32> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <32 x i32> @shuffle_v32i32(
; CHECK-RISCV-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <32 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <32 x i32> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <32 x i32> @shuffle_v32i32(
; CHECK-X86-V1-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <32 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <32 x i32> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <32 x i32> @shuffle_v32i32(
; CHECK-X86-V2-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <32 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <32 x i32> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <32 x i32> @shuffle_v32i32(
; CHECK-X86-V3-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <32 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <32 x i32> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <32 x i32> @shuffle_v32i32(
; CHECK-X86-V4-SAME: <3 x i32> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x i32> [[ARG0]], <3 x i32> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <32 x i32> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <32 x i32> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x i32> %arg0, <3 x i32> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x i32> %arg0, <3 x i32> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <32 x i32> [ %val1, %then ], [ %val2, %else ]
  ret <32 x i32> %val3
}

define <2 x bfloat> @shuffle_v2bf16(<2 x bfloat> %arg0, i1 %cond) {
; CHECK-LABEL: define <2 x bfloat> @shuffle_v2bf16(
; CHECK-SAME: <2 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <2 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <2 x bfloat> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <2 x bfloat> @shuffle_v2bf16(
; CHECK-AARCH64-SAME: <2 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <2 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <2 x bfloat> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <2 x bfloat> @shuffle_v2bf16(
; CHECK-AMDGPU-SAME: <2 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <2 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <2 x bfloat> [[VAL3]]
;
; CHECK-ARM-LABEL: define <2 x bfloat> @shuffle_v2bf16(
; CHECK-ARM-SAME: <2 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <2 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <2 x bfloat> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <2 x bfloat> @shuffle_v2bf16(
; CHECK-HEXAGON-SAME: <2 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <2 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <2 x bfloat> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <2 x bfloat> @shuffle_v2bf16(
; CHECK-RISCV-SAME: <2 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <2 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <2 x bfloat> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <2 x bfloat> @shuffle_v2bf16(
; CHECK-X86-V1-SAME: <2 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <2 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <2 x bfloat> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <2 x bfloat> @shuffle_v2bf16(
; CHECK-X86-V2-SAME: <2 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <2 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <2 x bfloat> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <2 x bfloat> @shuffle_v2bf16(
; CHECK-X86-V3-SAME: <2 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <2 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <2 x bfloat> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <2 x bfloat> @shuffle_v2bf16(
; CHECK-X86-V4-SAME: <2 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <2 x bfloat> [[ARG0]], <2 x bfloat> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <2 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <2 x bfloat> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <2 x bfloat> %arg0, <2 x bfloat> poison, <2 x i32> <i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <2 x bfloat> %arg0, <2 x bfloat> poison, <2 x i32> <i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <2 x bfloat> [ %val1, %then ], [ %val2, %else ]
  ret <2 x bfloat> %val3
}

define <3 x bfloat> @shuffle_v3bf16(<3 x bfloat> %arg0, i1 %cond) {
; CHECK-LABEL: define <3 x bfloat> @shuffle_v3bf16(
; CHECK-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <3 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <3 x bfloat> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <3 x bfloat> @shuffle_v3bf16(
; CHECK-AARCH64-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <3 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <3 x bfloat> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <3 x bfloat> @shuffle_v3bf16(
; CHECK-AMDGPU-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <3 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <3 x bfloat> [[VAL3]]
;
; CHECK-ARM-LABEL: define <3 x bfloat> @shuffle_v3bf16(
; CHECK-ARM-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <3 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <3 x bfloat> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <3 x bfloat> @shuffle_v3bf16(
; CHECK-HEXAGON-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <3 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <3 x bfloat> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <3 x bfloat> @shuffle_v3bf16(
; CHECK-RISCV-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <3 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <3 x bfloat> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <3 x bfloat> @shuffle_v3bf16(
; CHECK-X86-V1-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <3 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <3 x bfloat> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <3 x bfloat> @shuffle_v3bf16(
; CHECK-X86-V2-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <3 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <3 x bfloat> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <3 x bfloat> @shuffle_v3bf16(
; CHECK-X86-V3-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <3 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <3 x bfloat> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <3 x bfloat> @shuffle_v3bf16(
; CHECK-X86-V4-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <3 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <3 x bfloat> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <3 x i32> <i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <3 x i32> <i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <3 x bfloat> [ %val1, %then ], [ %val2, %else ]
  ret <3 x bfloat> %val3
}

define <4 x bfloat> @shuffle_v4bf16(<3 x bfloat> %arg0, i1 %cond) {
; CHECK-LABEL: define <4 x bfloat> @shuffle_v4bf16(
; CHECK-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <4 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <4 x bfloat> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <4 x bfloat> @shuffle_v4bf16(
; CHECK-AARCH64-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <4 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <4 x bfloat> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <4 x bfloat> @shuffle_v4bf16(
; CHECK-AMDGPU-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <4 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <4 x bfloat> [[VAL3]]
;
; CHECK-ARM-LABEL: define <4 x bfloat> @shuffle_v4bf16(
; CHECK-ARM-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <4 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <4 x bfloat> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <4 x bfloat> @shuffle_v4bf16(
; CHECK-HEXAGON-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <4 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <4 x bfloat> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <4 x bfloat> @shuffle_v4bf16(
; CHECK-RISCV-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <4 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <4 x bfloat> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <4 x bfloat> @shuffle_v4bf16(
; CHECK-X86-V1-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    ret <4 x bfloat> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <4 x bfloat> @shuffle_v4bf16(
; CHECK-X86-V2-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    ret <4 x bfloat> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <4 x bfloat> @shuffle_v4bf16(
; CHECK-X86-V3-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    ret <4 x bfloat> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <4 x bfloat> @shuffle_v4bf16(
; CHECK-X86-V4-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    ret <4 x bfloat> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <4 x bfloat> [ %val1, %then ], [ %val2, %else ]
  ret <4 x bfloat> %val3
}

define <6 x bfloat> @shuffle_v6bf16(<3 x bfloat> %arg0, i1 %cond) {
; CHECK-LABEL: define <6 x bfloat> @shuffle_v6bf16(
; CHECK-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <6 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <6 x bfloat> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <6 x bfloat> @shuffle_v6bf16(
; CHECK-AARCH64-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <6 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <6 x bfloat> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <6 x bfloat> @shuffle_v6bf16(
; CHECK-AMDGPU-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <6 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <6 x bfloat> [[VAL3]]
;
; CHECK-ARM-LABEL: define <6 x bfloat> @shuffle_v6bf16(
; CHECK-ARM-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <6 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <6 x bfloat> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <6 x bfloat> @shuffle_v6bf16(
; CHECK-HEXAGON-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <6 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <6 x bfloat> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <6 x bfloat> @shuffle_v6bf16(
; CHECK-RISCV-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <6 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <6 x bfloat> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <6 x bfloat> @shuffle_v6bf16(
; CHECK-X86-V1-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    ret <6 x bfloat> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <6 x bfloat> @shuffle_v6bf16(
; CHECK-X86-V2-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    ret <6 x bfloat> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <6 x bfloat> @shuffle_v6bf16(
; CHECK-X86-V3-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    ret <6 x bfloat> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <6 x bfloat> @shuffle_v6bf16(
; CHECK-X86-V4-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    ret <6 x bfloat> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <6 x bfloat> [ %val1, %then ], [ %val2, %else ]
  ret <6 x bfloat> %val3
}

define <8 x bfloat> @shuffle_v8bf16(<3 x bfloat> %arg0, i1 %cond) {
; CHECK-LABEL: define <8 x bfloat> @shuffle_v8bf16(
; CHECK-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <8 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <8 x bfloat> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <8 x bfloat> @shuffle_v8bf16(
; CHECK-AARCH64-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <8 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <8 x bfloat> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <8 x bfloat> @shuffle_v8bf16(
; CHECK-AMDGPU-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <8 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <8 x bfloat> [[VAL3]]
;
; CHECK-ARM-LABEL: define <8 x bfloat> @shuffle_v8bf16(
; CHECK-ARM-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <8 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <8 x bfloat> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <8 x bfloat> @shuffle_v8bf16(
; CHECK-HEXAGON-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <8 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <8 x bfloat> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <8 x bfloat> @shuffle_v8bf16(
; CHECK-RISCV-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <8 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <8 x bfloat> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <8 x bfloat> @shuffle_v8bf16(
; CHECK-X86-V1-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    ret <8 x bfloat> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <8 x bfloat> @shuffle_v8bf16(
; CHECK-X86-V2-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    ret <8 x bfloat> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <8 x bfloat> @shuffle_v8bf16(
; CHECK-X86-V3-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    ret <8 x bfloat> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <8 x bfloat> @shuffle_v8bf16(
; CHECK-X86-V4-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    ret <8 x bfloat> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <8 x bfloat> [ %val1, %then ], [ %val2, %else ]
  ret <8 x bfloat> %val3
}

define <16 x bfloat> @shuffle_v16bf16(<3 x bfloat> %arg0, i1 %cond) {
; CHECK-LABEL: define <16 x bfloat> @shuffle_v16bf16(
; CHECK-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <16 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <16 x bfloat> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <16 x bfloat> @shuffle_v16bf16(
; CHECK-AARCH64-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <16 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <16 x bfloat> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <16 x bfloat> @shuffle_v16bf16(
; CHECK-AMDGPU-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <16 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <16 x bfloat> [[VAL3]]
;
; CHECK-ARM-LABEL: define <16 x bfloat> @shuffle_v16bf16(
; CHECK-ARM-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <16 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <16 x bfloat> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <16 x bfloat> @shuffle_v16bf16(
; CHECK-HEXAGON-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <16 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <16 x bfloat> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <16 x bfloat> @shuffle_v16bf16(
; CHECK-RISCV-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <16 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <16 x bfloat> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <16 x bfloat> @shuffle_v16bf16(
; CHECK-X86-V1-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    ret <16 x bfloat> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <16 x bfloat> @shuffle_v16bf16(
; CHECK-X86-V2-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    ret <16 x bfloat> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <16 x bfloat> @shuffle_v16bf16(
; CHECK-X86-V3-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    ret <16 x bfloat> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <16 x bfloat> @shuffle_v16bf16(
; CHECK-X86-V4-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    ret <16 x bfloat> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <16 x bfloat> [ %val1, %then ], [ %val2, %else ]
  ret <16 x bfloat> %val3
}

define <32 x bfloat> @shuffle_v32bf16(<3 x bfloat> %arg0, i1 %cond) {
; CHECK-LABEL: define <32 x bfloat> @shuffle_v32bf16(
; CHECK-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <32 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <32 x bfloat> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <32 x bfloat> @shuffle_v32bf16(
; CHECK-AARCH64-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <32 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <32 x bfloat> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <32 x bfloat> @shuffle_v32bf16(
; CHECK-AMDGPU-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <32 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <32 x bfloat> [[VAL3]]
;
; CHECK-ARM-LABEL: define <32 x bfloat> @shuffle_v32bf16(
; CHECK-ARM-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <32 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <32 x bfloat> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <32 x bfloat> @shuffle_v32bf16(
; CHECK-HEXAGON-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <32 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <32 x bfloat> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <32 x bfloat> @shuffle_v32bf16(
; CHECK-RISCV-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <32 x bfloat> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <32 x bfloat> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <32 x bfloat> @shuffle_v32bf16(
; CHECK-X86-V1-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    ret <32 x bfloat> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <32 x bfloat> @shuffle_v32bf16(
; CHECK-X86-V2-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    ret <32 x bfloat> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <32 x bfloat> @shuffle_v32bf16(
; CHECK-X86-V3-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    ret <32 x bfloat> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <32 x bfloat> @shuffle_v32bf16(
; CHECK-X86-V4-SAME: <3 x bfloat> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[TMP0:%.*]] = shufflevector <3 x bfloat> [[ARG0]], <3 x bfloat> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[TMP1:%.*]] = phi <3 x bfloat> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = shufflevector <3 x bfloat> [[TMP1]], <3 x bfloat> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    ret <32 x bfloat> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x bfloat> %arg0, <3 x bfloat> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <32 x bfloat> [ %val1, %then ], [ %val2, %else ]
  ret <32 x bfloat> %val3
}

define <2 x half> @shuffle_v2f16(<2 x half> %arg0, i1 %cond) {
; CHECK-LABEL: define <2 x half> @shuffle_v2f16(
; CHECK-SAME: <2 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <2 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <2 x half> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <2 x half> @shuffle_v2f16(
; CHECK-AARCH64-SAME: <2 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <2 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <2 x half> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <2 x half> @shuffle_v2f16(
; CHECK-AMDGPU-SAME: <2 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <2 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <2 x half> [[VAL3]]
;
; CHECK-ARM-LABEL: define <2 x half> @shuffle_v2f16(
; CHECK-ARM-SAME: <2 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <2 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <2 x half> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <2 x half> @shuffle_v2f16(
; CHECK-HEXAGON-SAME: <2 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <2 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <2 x half> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <2 x half> @shuffle_v2f16(
; CHECK-RISCV-SAME: <2 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <2 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <2 x half> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <2 x half> @shuffle_v2f16(
; CHECK-X86-V1-SAME: <2 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <2 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <2 x half> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <2 x half> @shuffle_v2f16(
; CHECK-X86-V2-SAME: <2 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <2 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <2 x half> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <2 x half> @shuffle_v2f16(
; CHECK-X86-V3-SAME: <2 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <2 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <2 x half> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <2 x half> @shuffle_v2f16(
; CHECK-X86-V4-SAME: <2 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <2 x half> [[ARG0]], <2 x half> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <2 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <2 x half> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <2 x half> %arg0, <2 x half> poison, <2 x i32> <i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <2 x half> %arg0, <2 x half> poison, <2 x i32> <i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <2 x half> [ %val1, %then ], [ %val2, %else ]
  ret <2 x half> %val3
}

define <3 x half> @shuffle_v3f16(<3 x half> %arg0, i1 %cond) {
; CHECK-LABEL: define <3 x half> @shuffle_v3f16(
; CHECK-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <3 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <3 x half> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <3 x half> @shuffle_v3f16(
; CHECK-AARCH64-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <3 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <3 x half> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <3 x half> @shuffle_v3f16(
; CHECK-AMDGPU-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <3 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <3 x half> [[VAL3]]
;
; CHECK-ARM-LABEL: define <3 x half> @shuffle_v3f16(
; CHECK-ARM-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <3 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <3 x half> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <3 x half> @shuffle_v3f16(
; CHECK-HEXAGON-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <3 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <3 x half> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <3 x half> @shuffle_v3f16(
; CHECK-RISCV-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <3 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <3 x half> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <3 x half> @shuffle_v3f16(
; CHECK-X86-V1-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <3 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <3 x half> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <3 x half> @shuffle_v3f16(
; CHECK-X86-V2-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <3 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <3 x half> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <3 x half> @shuffle_v3f16(
; CHECK-X86-V3-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <3 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <3 x half> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <3 x half> @shuffle_v3f16(
; CHECK-X86-V4-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <3 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <3 x half> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x half> %arg0, <3 x half> poison, <3 x i32> <i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x half> %arg0, <3 x half> poison, <3 x i32> <i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <3 x half> [ %val1, %then ], [ %val2, %else ]
  ret <3 x half> %val3
}

define <4 x half> @shuffle_v4f16(<3 x half> %arg0, i1 %cond) {
; CHECK-LABEL: define <4 x half> @shuffle_v4f16(
; CHECK-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <4 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <4 x half> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <4 x half> @shuffle_v4f16(
; CHECK-AARCH64-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <4 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <4 x half> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <4 x half> @shuffle_v4f16(
; CHECK-AMDGPU-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <4 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <4 x half> [[VAL3]]
;
; CHECK-ARM-LABEL: define <4 x half> @shuffle_v4f16(
; CHECK-ARM-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <4 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <4 x half> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <4 x half> @shuffle_v4f16(
; CHECK-HEXAGON-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <4 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <4 x half> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <4 x half> @shuffle_v4f16(
; CHECK-RISCV-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <4 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <4 x half> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <4 x half> @shuffle_v4f16(
; CHECK-X86-V1-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[TMP0:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[TMP1:%.*]] = phi <3 x half> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = shufflevector <3 x half> [[TMP1]], <3 x half> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    ret <4 x half> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <4 x half> @shuffle_v4f16(
; CHECK-X86-V2-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[TMP0:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[TMP1:%.*]] = phi <3 x half> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = shufflevector <3 x half> [[TMP1]], <3 x half> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    ret <4 x half> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <4 x half> @shuffle_v4f16(
; CHECK-X86-V3-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <4 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <4 x half> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <4 x half> @shuffle_v4f16(
; CHECK-X86-V4-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <4 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <4 x half> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x half> %arg0, <3 x half> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x half> %arg0, <3 x half> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <4 x half> [ %val1, %then ], [ %val2, %else ]
  ret <4 x half> %val3
}

define <6 x half> @shuffle_v6f16(<3 x half> %arg0, i1 %cond) {
; CHECK-LABEL: define <6 x half> @shuffle_v6f16(
; CHECK-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <6 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <6 x half> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <6 x half> @shuffle_v6f16(
; CHECK-AARCH64-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <6 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <6 x half> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <6 x half> @shuffle_v6f16(
; CHECK-AMDGPU-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <6 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <6 x half> [[VAL3]]
;
; CHECK-ARM-LABEL: define <6 x half> @shuffle_v6f16(
; CHECK-ARM-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <6 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <6 x half> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <6 x half> @shuffle_v6f16(
; CHECK-HEXAGON-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <6 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <6 x half> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <6 x half> @shuffle_v6f16(
; CHECK-RISCV-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <6 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <6 x half> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <6 x half> @shuffle_v6f16(
; CHECK-X86-V1-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[TMP0:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[TMP1:%.*]] = phi <3 x half> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = shufflevector <3 x half> [[TMP1]], <3 x half> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    ret <6 x half> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <6 x half> @shuffle_v6f16(
; CHECK-X86-V2-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[TMP0:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[TMP1:%.*]] = phi <3 x half> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = shufflevector <3 x half> [[TMP1]], <3 x half> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    ret <6 x half> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <6 x half> @shuffle_v6f16(
; CHECK-X86-V3-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <6 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <6 x half> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <6 x half> @shuffle_v6f16(
; CHECK-X86-V4-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <6 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <6 x half> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x half> %arg0, <3 x half> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x half> %arg0, <3 x half> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <6 x half> [ %val1, %then ], [ %val2, %else ]
  ret <6 x half> %val3
}

define <8 x half> @shuffle_v8f16(<3 x half> %arg0, i1 %cond) {
; CHECK-LABEL: define <8 x half> @shuffle_v8f16(
; CHECK-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <8 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <8 x half> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <8 x half> @shuffle_v8f16(
; CHECK-AARCH64-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <8 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <8 x half> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <8 x half> @shuffle_v8f16(
; CHECK-AMDGPU-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <8 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <8 x half> [[VAL3]]
;
; CHECK-ARM-LABEL: define <8 x half> @shuffle_v8f16(
; CHECK-ARM-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <8 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <8 x half> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <8 x half> @shuffle_v8f16(
; CHECK-HEXAGON-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <8 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <8 x half> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <8 x half> @shuffle_v8f16(
; CHECK-RISCV-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <8 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <8 x half> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <8 x half> @shuffle_v8f16(
; CHECK-X86-V1-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[TMP0:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[TMP1:%.*]] = phi <3 x half> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = shufflevector <3 x half> [[TMP1]], <3 x half> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    ret <8 x half> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <8 x half> @shuffle_v8f16(
; CHECK-X86-V2-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[TMP0:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[TMP1:%.*]] = phi <3 x half> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = shufflevector <3 x half> [[TMP1]], <3 x half> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    ret <8 x half> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <8 x half> @shuffle_v8f16(
; CHECK-X86-V3-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <8 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <8 x half> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <8 x half> @shuffle_v8f16(
; CHECK-X86-V4-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <8 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <8 x half> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x half> %arg0, <3 x half> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x half> %arg0, <3 x half> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <8 x half> [ %val1, %then ], [ %val2, %else ]
  ret <8 x half> %val3
}

define <16 x half> @shuffle_v16f16(<3 x half> %arg0, i1 %cond) {
; CHECK-LABEL: define <16 x half> @shuffle_v16f16(
; CHECK-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <16 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <16 x half> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <16 x half> @shuffle_v16f16(
; CHECK-AARCH64-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <16 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <16 x half> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <16 x half> @shuffle_v16f16(
; CHECK-AMDGPU-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <16 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <16 x half> [[VAL3]]
;
; CHECK-ARM-LABEL: define <16 x half> @shuffle_v16f16(
; CHECK-ARM-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <16 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <16 x half> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <16 x half> @shuffle_v16f16(
; CHECK-HEXAGON-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <16 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <16 x half> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <16 x half> @shuffle_v16f16(
; CHECK-RISCV-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <16 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <16 x half> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <16 x half> @shuffle_v16f16(
; CHECK-X86-V1-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[TMP0:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[TMP1:%.*]] = phi <3 x half> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = shufflevector <3 x half> [[TMP1]], <3 x half> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    ret <16 x half> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <16 x half> @shuffle_v16f16(
; CHECK-X86-V2-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[TMP0:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[TMP1:%.*]] = phi <3 x half> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = shufflevector <3 x half> [[TMP1]], <3 x half> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    ret <16 x half> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <16 x half> @shuffle_v16f16(
; CHECK-X86-V3-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <16 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <16 x half> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <16 x half> @shuffle_v16f16(
; CHECK-X86-V4-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <16 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <16 x half> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x half> %arg0, <3 x half> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x half> %arg0, <3 x half> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <16 x half> [ %val1, %then ], [ %val2, %else ]
  ret <16 x half> %val3
}

define <32 x half> @shuffle_v32f16(<3 x half> %arg0, i1 %cond) {
; CHECK-LABEL: define <32 x half> @shuffle_v32f16(
; CHECK-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <32 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <32 x half> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <32 x half> @shuffle_v32f16(
; CHECK-AARCH64-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <32 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <32 x half> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <32 x half> @shuffle_v32f16(
; CHECK-AMDGPU-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <32 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <32 x half> [[VAL3]]
;
; CHECK-ARM-LABEL: define <32 x half> @shuffle_v32f16(
; CHECK-ARM-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <32 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <32 x half> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <32 x half> @shuffle_v32f16(
; CHECK-HEXAGON-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <32 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <32 x half> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <32 x half> @shuffle_v32f16(
; CHECK-RISCV-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <32 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <32 x half> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <32 x half> @shuffle_v32f16(
; CHECK-X86-V1-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[TMP0:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[TMP1:%.*]] = phi <3 x half> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = shufflevector <3 x half> [[TMP1]], <3 x half> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    ret <32 x half> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <32 x half> @shuffle_v32f16(
; CHECK-X86-V2-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[TMP0:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[TMP1:%.*]] = phi <3 x half> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = shufflevector <3 x half> [[TMP1]], <3 x half> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    ret <32 x half> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <32 x half> @shuffle_v32f16(
; CHECK-X86-V3-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <32 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <32 x half> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <32 x half> @shuffle_v32f16(
; CHECK-X86-V4-SAME: <3 x half> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x half> [[ARG0]], <3 x half> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <32 x half> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <32 x half> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x half> %arg0, <3 x half> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x half> %arg0, <3 x half> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <32 x half> [ %val1, %then ], [ %val2, %else ]
  ret <32 x half> %val3
}

define <2 x float> @shuffle_v2f32(<2 x float> %arg0, i1 %cond) {
; CHECK-LABEL: define <2 x float> @shuffle_v2f32(
; CHECK-SAME: <2 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <2 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <2 x float> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <2 x float> @shuffle_v2f32(
; CHECK-AARCH64-SAME: <2 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <2 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <2 x float> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <2 x float> @shuffle_v2f32(
; CHECK-AMDGPU-SAME: <2 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <2 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <2 x float> [[VAL3]]
;
; CHECK-ARM-LABEL: define <2 x float> @shuffle_v2f32(
; CHECK-ARM-SAME: <2 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <2 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <2 x float> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <2 x float> @shuffle_v2f32(
; CHECK-HEXAGON-SAME: <2 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <2 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <2 x float> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <2 x float> @shuffle_v2f32(
; CHECK-RISCV-SAME: <2 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <2 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <2 x float> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <2 x float> @shuffle_v2f32(
; CHECK-X86-V1-SAME: <2 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <2 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <2 x float> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <2 x float> @shuffle_v2f32(
; CHECK-X86-V2-SAME: <2 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <2 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <2 x float> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <2 x float> @shuffle_v2f32(
; CHECK-X86-V3-SAME: <2 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <2 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <2 x float> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <2 x float> @shuffle_v2f32(
; CHECK-X86-V4-SAME: <2 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <2 x float> [[ARG0]], <2 x float> poison, <2 x i32> <i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <2 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <2 x float> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <2 x float> %arg0, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <2 x float> %arg0, <2 x float> poison, <2 x i32> <i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <2 x float> [ %val1, %then ], [ %val2, %else ]
  ret <2 x float> %val3
}

define <3 x float> @shuffle_v3f32(<3 x float> %arg0, i1 %cond) {
; CHECK-LABEL: define <3 x float> @shuffle_v3f32(
; CHECK-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <3 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <3 x float> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <3 x float> @shuffle_v3f32(
; CHECK-AARCH64-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <3 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <3 x float> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <3 x float> @shuffle_v3f32(
; CHECK-AMDGPU-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = phi <3 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    ret <3 x float> [[VAL3]]
;
; CHECK-ARM-LABEL: define <3 x float> @shuffle_v3f32(
; CHECK-ARM-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <3 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <3 x float> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <3 x float> @shuffle_v3f32(
; CHECK-HEXAGON-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <3 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <3 x float> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <3 x float> @shuffle_v3f32(
; CHECK-RISCV-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <3 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <3 x float> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <3 x float> @shuffle_v3f32(
; CHECK-X86-V1-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <3 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <3 x float> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <3 x float> @shuffle_v3f32(
; CHECK-X86-V2-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <3 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <3 x float> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <3 x float> @shuffle_v3f32(
; CHECK-X86-V3-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <3 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <3 x float> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <3 x float> @shuffle_v3f32(
; CHECK-X86-V4-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <3 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <3 x float> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x float> %arg0, <3 x float> poison, <3 x i32> <i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x float> %arg0, <3 x float> poison, <3 x i32> <i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <3 x float> [ %val1, %then ], [ %val2, %else ]
  ret <3 x float> %val3
}

define <4 x float> @shuffle_v4f32(<3 x float> %arg0, i1 %cond) {
; CHECK-LABEL: define <4 x float> @shuffle_v4f32(
; CHECK-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <4 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <4 x float> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <4 x float> @shuffle_v4f32(
; CHECK-AARCH64-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <4 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <4 x float> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <4 x float> @shuffle_v4f32(
; CHECK-AMDGPU-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[TMP0:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[TMP1:%.*]] = phi <3 x float> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = shufflevector <3 x float> [[TMP1]], <3 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    ret <4 x float> [[VAL3]]
;
; CHECK-ARM-LABEL: define <4 x float> @shuffle_v4f32(
; CHECK-ARM-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <4 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <4 x float> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <4 x float> @shuffle_v4f32(
; CHECK-HEXAGON-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <4 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <4 x float> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <4 x float> @shuffle_v4f32(
; CHECK-RISCV-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <4 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <4 x float> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <4 x float> @shuffle_v4f32(
; CHECK-X86-V1-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <4 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <4 x float> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <4 x float> @shuffle_v4f32(
; CHECK-X86-V2-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <4 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <4 x float> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <4 x float> @shuffle_v4f32(
; CHECK-X86-V3-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <4 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <4 x float> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <4 x float> @shuffle_v4f32(
; CHECK-X86-V4-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <4 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <4 x float> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x float> %arg0, <3 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x float> %arg0, <3 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <4 x float> [ %val1, %then ], [ %val2, %else ]
  ret <4 x float> %val3
}

define <6 x float> @shuffle_v6f32(<3 x float> %arg0, i1 %cond) {
; CHECK-LABEL: define <6 x float> @shuffle_v6f32(
; CHECK-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <6 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <6 x float> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <6 x float> @shuffle_v6f32(
; CHECK-AARCH64-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <6 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <6 x float> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <6 x float> @shuffle_v6f32(
; CHECK-AMDGPU-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[TMP0:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[TMP1:%.*]] = phi <3 x float> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = shufflevector <3 x float> [[TMP1]], <3 x float> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    ret <6 x float> [[VAL3]]
;
; CHECK-ARM-LABEL: define <6 x float> @shuffle_v6f32(
; CHECK-ARM-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <6 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <6 x float> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <6 x float> @shuffle_v6f32(
; CHECK-HEXAGON-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <6 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <6 x float> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <6 x float> @shuffle_v6f32(
; CHECK-RISCV-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <6 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <6 x float> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <6 x float> @shuffle_v6f32(
; CHECK-X86-V1-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <6 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <6 x float> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <6 x float> @shuffle_v6f32(
; CHECK-X86-V2-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <6 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <6 x float> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <6 x float> @shuffle_v6f32(
; CHECK-X86-V3-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <6 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <6 x float> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <6 x float> @shuffle_v6f32(
; CHECK-X86-V4-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <6 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <6 x float> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x float> %arg0, <3 x float> poison, <6 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x float> %arg0, <3 x float> poison, <6 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <6 x float> [ %val1, %then ], [ %val2, %else ]
  ret <6 x float> %val3
}

define <8 x float> @shuffle_v8f32(<3 x float> %arg0, i1 %cond) {
; CHECK-LABEL: define <8 x float> @shuffle_v8f32(
; CHECK-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <8 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <8 x float> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <8 x float> @shuffle_v8f32(
; CHECK-AARCH64-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <8 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <8 x float> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <8 x float> @shuffle_v8f32(
; CHECK-AMDGPU-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[TMP0:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[TMP1:%.*]] = phi <3 x float> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = shufflevector <3 x float> [[TMP1]], <3 x float> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    ret <8 x float> [[VAL3]]
;
; CHECK-ARM-LABEL: define <8 x float> @shuffle_v8f32(
; CHECK-ARM-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <8 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <8 x float> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <8 x float> @shuffle_v8f32(
; CHECK-HEXAGON-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <8 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <8 x float> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <8 x float> @shuffle_v8f32(
; CHECK-RISCV-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <8 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <8 x float> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <8 x float> @shuffle_v8f32(
; CHECK-X86-V1-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <8 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <8 x float> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <8 x float> @shuffle_v8f32(
; CHECK-X86-V2-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <8 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <8 x float> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <8 x float> @shuffle_v8f32(
; CHECK-X86-V3-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <8 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <8 x float> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <8 x float> @shuffle_v8f32(
; CHECK-X86-V4-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <8 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <8 x float> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x float> %arg0, <3 x float> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x float> %arg0, <3 x float> poison, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <8 x float> [ %val1, %then ], [ %val2, %else ]
  ret <8 x float> %val3
}

define <16 x float> @shuffle_v16f32(<3 x float> %arg0, i1 %cond) {
; CHECK-LABEL: define <16 x float> @shuffle_v16f32(
; CHECK-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <16 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <16 x float> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <16 x float> @shuffle_v16f32(
; CHECK-AARCH64-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <16 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <16 x float> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <16 x float> @shuffle_v16f32(
; CHECK-AMDGPU-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[TMP0:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[TMP1:%.*]] = phi <3 x float> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = shufflevector <3 x float> [[TMP1]], <3 x float> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    ret <16 x float> [[VAL3]]
;
; CHECK-ARM-LABEL: define <16 x float> @shuffle_v16f32(
; CHECK-ARM-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <16 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <16 x float> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <16 x float> @shuffle_v16f32(
; CHECK-HEXAGON-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <16 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <16 x float> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <16 x float> @shuffle_v16f32(
; CHECK-RISCV-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <16 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <16 x float> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <16 x float> @shuffle_v16f32(
; CHECK-X86-V1-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <16 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <16 x float> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <16 x float> @shuffle_v16f32(
; CHECK-X86-V2-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <16 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <16 x float> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <16 x float> @shuffle_v16f32(
; CHECK-X86-V3-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <16 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <16 x float> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <16 x float> @shuffle_v16f32(
; CHECK-X86-V4-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <16 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <16 x float> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x float> %arg0, <3 x float> poison, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x float> %arg0, <3 x float> poison, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <16 x float> [ %val1, %then ], [ %val2, %else ]
  ret <16 x float> %val3
}

define <32 x float> @shuffle_v32f32(<3 x float> %arg0, i1 %cond) {
; CHECK-LABEL: define <32 x float> @shuffle_v32f32(
; CHECK-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    tail call void @func0()
; CHECK-NEXT:    br label %[[FINALLY:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    tail call void @func1()
; CHECK-NEXT:    br label %[[FINALLY]]
; CHECK:       [[FINALLY]]:
; CHECK-NEXT:    [[VAL3:%.*]] = phi <32 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-NEXT:    ret <32 x float> [[VAL3]]
;
; CHECK-AARCH64-LABEL: define <32 x float> @shuffle_v32f32(
; CHECK-AARCH64-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AARCH64-NEXT:  [[ENTRY:.*:]]
; CHECK-AARCH64-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AARCH64:       [[THEN]]:
; CHECK-AARCH64-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-AARCH64-NEXT:    tail call void @func0()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AARCH64:       [[ELSE]]:
; CHECK-AARCH64-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AARCH64-NEXT:    tail call void @func1()
; CHECK-AARCH64-NEXT:    br label %[[FINALLY]]
; CHECK-AARCH64:       [[FINALLY]]:
; CHECK-AARCH64-NEXT:    [[VAL3:%.*]] = phi <32 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-AARCH64-NEXT:    ret <32 x float> [[VAL3]]
;
; CHECK-AMDGPU-LABEL: define <32 x float> @shuffle_v32f32(
; CHECK-AMDGPU-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-AMDGPU-NEXT:  [[ENTRY:.*:]]
; CHECK-AMDGPU-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-AMDGPU:       [[THEN]]:
; CHECK-AMDGPU-NEXT:    [[TMP0:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <3 x i32> <i32 1, i32 2, i32 0>
; CHECK-AMDGPU-NEXT:    tail call void @func0()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY:.*]]
; CHECK-AMDGPU:       [[ELSE]]:
; CHECK-AMDGPU-NEXT:    tail call void @func1()
; CHECK-AMDGPU-NEXT:    br label %[[FINALLY]]
; CHECK-AMDGPU:       [[FINALLY]]:
; CHECK-AMDGPU-NEXT:    [[TMP1:%.*]] = phi <3 x float> [ [[TMP0]], %[[THEN]] ], [ [[ARG0]], %[[ELSE]] ]
; CHECK-AMDGPU-NEXT:    [[VAL3:%.*]] = shufflevector <3 x float> [[TMP1]], <3 x float> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-AMDGPU-NEXT:    ret <32 x float> [[VAL3]]
;
; CHECK-ARM-LABEL: define <32 x float> @shuffle_v32f32(
; CHECK-ARM-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-ARM-NEXT:  [[ENTRY:.*:]]
; CHECK-ARM-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-ARM:       [[THEN]]:
; CHECK-ARM-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-ARM-NEXT:    tail call void @func0()
; CHECK-ARM-NEXT:    br label %[[FINALLY:.*]]
; CHECK-ARM:       [[ELSE]]:
; CHECK-ARM-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-ARM-NEXT:    tail call void @func1()
; CHECK-ARM-NEXT:    br label %[[FINALLY]]
; CHECK-ARM:       [[FINALLY]]:
; CHECK-ARM-NEXT:    [[VAL3:%.*]] = phi <32 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-ARM-NEXT:    ret <32 x float> [[VAL3]]
;
; CHECK-HEXAGON-LABEL: define <32 x float> @shuffle_v32f32(
; CHECK-HEXAGON-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-HEXAGON-NEXT:  [[ENTRY:.*:]]
; CHECK-HEXAGON-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-HEXAGON:       [[THEN]]:
; CHECK-HEXAGON-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-HEXAGON-NEXT:    tail call void @func0()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY:.*]]
; CHECK-HEXAGON:       [[ELSE]]:
; CHECK-HEXAGON-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-HEXAGON-NEXT:    tail call void @func1()
; CHECK-HEXAGON-NEXT:    br label %[[FINALLY]]
; CHECK-HEXAGON:       [[FINALLY]]:
; CHECK-HEXAGON-NEXT:    [[VAL3:%.*]] = phi <32 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-HEXAGON-NEXT:    ret <32 x float> [[VAL3]]
;
; CHECK-RISCV-LABEL: define <32 x float> @shuffle_v32f32(
; CHECK-RISCV-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) {
; CHECK-RISCV-NEXT:  [[ENTRY:.*:]]
; CHECK-RISCV-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-RISCV:       [[THEN]]:
; CHECK-RISCV-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-RISCV-NEXT:    tail call void @func0()
; CHECK-RISCV-NEXT:    br label %[[FINALLY:.*]]
; CHECK-RISCV:       [[ELSE]]:
; CHECK-RISCV-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-RISCV-NEXT:    tail call void @func1()
; CHECK-RISCV-NEXT:    br label %[[FINALLY]]
; CHECK-RISCV:       [[FINALLY]]:
; CHECK-RISCV-NEXT:    [[VAL3:%.*]] = phi <32 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-RISCV-NEXT:    ret <32 x float> [[VAL3]]
;
; CHECK-X86-V1-LABEL: define <32 x float> @shuffle_v32f32(
; CHECK-X86-V1-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V1-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V1-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V1:       [[THEN]]:
; CHECK-X86-V1-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V1-NEXT:    tail call void @func0()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V1:       [[ELSE]]:
; CHECK-X86-V1-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V1-NEXT:    tail call void @func1()
; CHECK-X86-V1-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V1:       [[FINALLY]]:
; CHECK-X86-V1-NEXT:    [[VAL3:%.*]] = phi <32 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V1-NEXT:    ret <32 x float> [[VAL3]]
;
; CHECK-X86-V2-LABEL: define <32 x float> @shuffle_v32f32(
; CHECK-X86-V2-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V2-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V2-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V2:       [[THEN]]:
; CHECK-X86-V2-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V2-NEXT:    tail call void @func0()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V2:       [[ELSE]]:
; CHECK-X86-V2-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V2-NEXT:    tail call void @func1()
; CHECK-X86-V2-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V2:       [[FINALLY]]:
; CHECK-X86-V2-NEXT:    [[VAL3:%.*]] = phi <32 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V2-NEXT:    ret <32 x float> [[VAL3]]
;
; CHECK-X86-V3-LABEL: define <32 x float> @shuffle_v32f32(
; CHECK-X86-V3-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V3-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V3-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V3:       [[THEN]]:
; CHECK-X86-V3-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V3-NEXT:    tail call void @func0()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V3:       [[ELSE]]:
; CHECK-X86-V3-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V3-NEXT:    tail call void @func1()
; CHECK-X86-V3-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V3:       [[FINALLY]]:
; CHECK-X86-V3-NEXT:    [[VAL3:%.*]] = phi <32 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V3-NEXT:    ret <32 x float> [[VAL3]]
;
; CHECK-X86-V4-LABEL: define <32 x float> @shuffle_v32f32(
; CHECK-X86-V4-SAME: <3 x float> [[ARG0:%.*]], i1 [[COND:%.*]]) #[[ATTR0]] {
; CHECK-X86-V4-NEXT:  [[ENTRY:.*:]]
; CHECK-X86-V4-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK-X86-V4:       [[THEN]]:
; CHECK-X86-V4-NEXT:    [[VAL1:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-X86-V4-NEXT:    tail call void @func0()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY:.*]]
; CHECK-X86-V4:       [[ELSE]]:
; CHECK-X86-V4-NEXT:    [[VAL2:%.*]] = shufflevector <3 x float> [[ARG0]], <3 x float> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
; CHECK-X86-V4-NEXT:    tail call void @func1()
; CHECK-X86-V4-NEXT:    br label %[[FINALLY]]
; CHECK-X86-V4:       [[FINALLY]]:
; CHECK-X86-V4-NEXT:    [[VAL3:%.*]] = phi <32 x float> [ [[VAL1]], %[[THEN]] ], [ [[VAL2]], %[[ELSE]] ]
; CHECK-X86-V4-NEXT:    ret <32 x float> [[VAL3]]
;
entry:
  br i1 %cond, label %then, label %else

then:
  %val1 = shufflevector <3 x float> %arg0, <3 x float> poison, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  tail call void @func0()
  br label %finally

else:
  %val2 = shufflevector <3 x float> %arg0, <3 x float> poison, <32 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  tail call void @func1()
  br label %finally

finally:
  %val3 = phi <32 x float> [ %val1, %then ], [ %val2, %else ]
  ret <32 x float> %val3
}

declare void @func0() local_unnamed_addr

declare void @func1() local_unnamed_addr
