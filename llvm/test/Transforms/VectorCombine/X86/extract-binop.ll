; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -vector-combine -S -mtriple=x86_64-- | FileCheck %s

define i8 @ext0_ext0_add(<16 x i8> %x, <16 x i8> %y) {
; CHECK-LABEL: @ext0_ext0_add(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <16 x i8> [[X:%.*]], i32 0
; CHECK-NEXT:    [[E1:%.*]] = extractelement <16 x i8> [[Y:%.*]], i32 0
; CHECK-NEXT:    [[R:%.*]] = add i8 [[E0]], [[E1]]
; CHECK-NEXT:    ret i8 [[R]]
;
  %e0 = extractelement <16 x i8> %x, i32 0
  %e1 = extractelement <16 x i8> %y, i32 0
  %r = add i8 %e0, %e1
  ret i8 %r
}

define i8 @ext1_ext1_add_flags(<16 x i8> %x, <16 x i8> %y) {
; CHECK-LABEL: @ext1_ext1_add_flags(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <16 x i8> [[X:%.*]], i32 1
; CHECK-NEXT:    [[E1:%.*]] = extractelement <16 x i8> [[Y:%.*]], i32 1
; CHECK-NEXT:    [[R:%.*]] = add nuw nsw i8 [[E0]], [[E1]]
; CHECK-NEXT:    ret i8 [[R]]
;
  %e0 = extractelement <16 x i8> %x, i32 1
  %e1 = extractelement <16 x i8> %y, i32 1
  %r = add nsw nuw i8 %e0, %e1
  ret i8 %r
}

define i8 @ext1_ext1_shl(<16 x i8> %x, <16 x i8> %y) {
; CHECK-LABEL: @ext1_ext1_shl(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <16 x i8> [[X:%.*]], i32 1
; CHECK-NEXT:    [[E1:%.*]] = extractelement <16 x i8> [[Y:%.*]], i32 1
; CHECK-NEXT:    [[R:%.*]] = shl i8 [[E0]], [[E1]]
; CHECK-NEXT:    ret i8 [[R]]
;
  %e0 = extractelement <16 x i8> %x, i32 1
  %e1 = extractelement <16 x i8> %y, i32 1
  %r = shl i8 %e0, %e1
  ret i8 %r
}

define i8 @ext13_ext13_mul(<16 x i8> %x, <16 x i8> %y) {
; CHECK-LABEL: @ext13_ext13_mul(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <16 x i8> [[X:%.*]], i32 13
; CHECK-NEXT:    [[E1:%.*]] = extractelement <16 x i8> [[Y:%.*]], i32 13
; CHECK-NEXT:    [[R:%.*]] = mul i8 [[E0]], [[E1]]
; CHECK-NEXT:    ret i8 [[R]]
;
  %e0 = extractelement <16 x i8> %x, i32 13
  %e1 = extractelement <16 x i8> %y, i32 13
  %r = mul i8 %e0, %e1
  ret i8 %r
}

define i8 @ext0_ext0_sdiv(<16 x i8> %x, <16 x i8> %y) {
; CHECK-LABEL: @ext0_ext0_sdiv(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <16 x i8> [[X:%.*]], i32 0
; CHECK-NEXT:    [[E1:%.*]] = extractelement <16 x i8> [[Y:%.*]], i32 0
; CHECK-NEXT:    [[R:%.*]] = sdiv i8 [[E0]], [[E1]]
; CHECK-NEXT:    ret i8 [[R]]
;
  %e0 = extractelement <16 x i8> %x, i32 0
  %e1 = extractelement <16 x i8> %y, i32 0
  %r = sdiv i8 %e0, %e1
  ret i8 %r
}

define double @ext0_ext0_fadd(<2 x double> %x, <2 x double> %y) {
; CHECK-LABEL: @ext0_ext0_fadd(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <2 x double> [[X:%.*]], i32 0
; CHECK-NEXT:    [[E1:%.*]] = extractelement <2 x double> [[Y:%.*]], i32 0
; CHECK-NEXT:    [[R:%.*]] = fadd double [[E0]], [[E1]]
; CHECK-NEXT:    ret double [[R]]
;
  %e0 = extractelement <2 x double> %x, i32 0
  %e1 = extractelement <2 x double> %y, i32 0
  %r = fadd double %e0, %e1
  ret double %r
}

define double @ext1_ext1_fsub(<2 x double> %x, <2 x double> %y) {
; CHECK-LABEL: @ext1_ext1_fsub(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <2 x double> [[X:%.*]], i32 1
; CHECK-NEXT:    [[E1:%.*]] = extractelement <2 x double> [[Y:%.*]], i32 1
; CHECK-NEXT:    [[R:%.*]] = fsub fast double [[E0]], [[E1]]
; CHECK-NEXT:    ret double [[R]]
;
  %e0 = extractelement <2 x double> %x, i32 1
  %e1 = extractelement <2 x double> %y, i32 1
  %r = fsub fast double %e0, %e1
  ret double %r
}

define double @ext1_ext1_fadd_different_types(<2 x double> %x, <4 x double> %y) {
; CHECK-LABEL: @ext1_ext1_fadd_different_types(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <2 x double> [[X:%.*]], i32 1
; CHECK-NEXT:    [[E1:%.*]] = extractelement <4 x double> [[Y:%.*]], i32 1
; CHECK-NEXT:    [[R:%.*]] = fadd fast double [[E0]], [[E1]]
; CHECK-NEXT:    ret double [[R]]
;
  %e0 = extractelement <2 x double> %x, i32 1
  %e1 = extractelement <4 x double> %y, i32 1
  %r = fadd fast double %e0, %e1
  ret double %r
}

define i32 @ext1_ext1_add_same_vec(<4 x i32> %x) {
; CHECK-LABEL: @ext1_ext1_add_same_vec(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <4 x i32> [[X:%.*]], i32 1
; CHECK-NEXT:    [[E1:%.*]] = extractelement <4 x i32> [[X]], i32 1
; CHECK-NEXT:    [[R:%.*]] = add i32 [[E0]], [[E1]]
; CHECK-NEXT:    ret i32 [[R]]
;
  %e0 = extractelement <4 x i32> %x, i32 1
  %e1 = extractelement <4 x i32> %x, i32 1
  %r = add i32 %e0, %e1
  ret i32 %r
}

define i32 @ext1_ext1_add_same_vec_cse(<4 x i32> %x) {
; CHECK-LABEL: @ext1_ext1_add_same_vec_cse(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <4 x i32> [[X:%.*]], i32 1
; CHECK-NEXT:    [[R:%.*]] = add i32 [[E0]], [[E0]]
; CHECK-NEXT:    ret i32 [[R]]
;
  %e0 = extractelement <4 x i32> %x, i32 1
  %r = add i32 %e0, %e0
  ret i32 %r
}

declare void @use_i64(i64)

define i64 @ext1_ext1_add_same_vec_extra_use0(<2 x i64> %x) {
; CHECK-LABEL: @ext1_ext1_add_same_vec_extra_use0(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <2 x i64> [[X:%.*]], i32 1
; CHECK-NEXT:    call void @use_i64(i64 [[E0]])
; CHECK-NEXT:    [[E1:%.*]] = extractelement <2 x i64> [[X]], i32 1
; CHECK-NEXT:    [[R:%.*]] = add i64 [[E0]], [[E1]]
; CHECK-NEXT:    ret i64 [[R]]
;
  %e0 = extractelement <2 x i64> %x, i32 1
  call void @use_i64(i64 %e0)
  %e1 = extractelement <2 x i64> %x, i32 1
  %r = add i64 %e0, %e1
  ret i64 %r
}

define i64 @ext1_ext1_add_same_vec_extra_use1(<2 x i64> %x) {
; CHECK-LABEL: @ext1_ext1_add_same_vec_extra_use1(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <2 x i64> [[X:%.*]], i32 1
; CHECK-NEXT:    [[E1:%.*]] = extractelement <2 x i64> [[X]], i32 1
; CHECK-NEXT:    call void @use_i64(i64 [[E1]])
; CHECK-NEXT:    [[R:%.*]] = add i64 [[E0]], [[E1]]
; CHECK-NEXT:    ret i64 [[R]]
;
  %e0 = extractelement <2 x i64> %x, i32 1
  %e1 = extractelement <2 x i64> %x, i32 1
  call void @use_i64(i64 %e1)
  %r = add i64 %e0, %e1
  ret i64 %r
}

define i64 @ext1_ext1_add_same_vec_cse_extra_use(<2 x i64> %x) {
; CHECK-LABEL: @ext1_ext1_add_same_vec_cse_extra_use(
; CHECK-NEXT:    [[E:%.*]] = extractelement <2 x i64> [[X:%.*]], i32 1
; CHECK-NEXT:    call void @use_i64(i64 [[E]])
; CHECK-NEXT:    [[R:%.*]] = add i64 [[E]], [[E]]
; CHECK-NEXT:    ret i64 [[R]]
;
  %e = extractelement <2 x i64> %x, i32 1
  call void @use_i64(i64 %e)
  %r = add i64 %e, %e
  ret i64 %r
}

define i64 @ext1_ext1_add_uses1(<2 x i64> %x, <2 x i64> %y) {
; CHECK-LABEL: @ext1_ext1_add_uses1(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <2 x i64> [[X:%.*]], i32 1
; CHECK-NEXT:    call void @use_i64(i64 [[E0]])
; CHECK-NEXT:    [[E1:%.*]] = extractelement <2 x i64> [[Y:%.*]], i32 1
; CHECK-NEXT:    [[R:%.*]] = add i64 [[E0]], [[E1]]
; CHECK-NEXT:    ret i64 [[R]]
;
  %e0 = extractelement <2 x i64> %x, i32 1
  call void @use_i64(i64 %e0)
  %e1 = extractelement <2 x i64> %y, i32 1
  %r = add i64 %e0, %e1
  ret i64 %r
}

define i64 @ext1_ext1_add_uses2(<2 x i64> %x, <2 x i64> %y) {
; CHECK-LABEL: @ext1_ext1_add_uses2(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <2 x i64> [[X:%.*]], i32 1
; CHECK-NEXT:    [[E1:%.*]] = extractelement <2 x i64> [[Y:%.*]], i32 1
; CHECK-NEXT:    call void @use_i64(i64 [[E1]])
; CHECK-NEXT:    [[R:%.*]] = add i64 [[E0]], [[E1]]
; CHECK-NEXT:    ret i64 [[R]]
;
  %e0 = extractelement <2 x i64> %x, i32 1
  %e1 = extractelement <2 x i64> %y, i32 1
  call void @use_i64(i64 %e1)
  %r = add i64 %e0, %e1
  ret i64 %r
}

define i8 @ext0_ext1_add(<16 x i8> %x, <16 x i8> %y) {
; CHECK-LABEL: @ext0_ext1_add(
; CHECK-NEXT:    [[E0:%.*]] = extractelement <16 x i8> [[X:%.*]], i32 0
; CHECK-NEXT:    [[E1:%.*]] = extractelement <16 x i8> [[Y:%.*]], i32 1
; CHECK-NEXT:    [[R:%.*]] = add i8 [[E0]], [[E1]]
; CHECK-NEXT:    ret i8 [[R]]
;
  %e0 = extractelement <16 x i8> %x, i32 0
  %e1 = extractelement <16 x i8> %y, i32 1
  %r = add i8 %e0, %e1
  ret i8 %r
}
