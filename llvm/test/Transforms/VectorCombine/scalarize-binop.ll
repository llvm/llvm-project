; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=vector-combine < %s | FileCheck %s

define <4 x i32> @add_v4i32(i32 %x, i32 %y) {
; CHECK-LABEL: define <4 x i32> @add_v4i32(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]]) {
; CHECK-NEXT:    [[X_HEAD:%.*]] = insertelement <4 x i32> poison, i32 [[X]], i32 0
; CHECK-NEXT:    [[X_SPLAT:%.*]] = shufflevector <4 x i32> [[X_HEAD]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[RES:%.*]] = add <4 x i32> [[X_SPLAT]], splat (i32 42)
; CHECK-NEXT:    ret <4 x i32> [[RES]]
;
  %x.head = insertelement <4 x i32> poison, i32 %x, i32 0
  %x.splat = shufflevector <4 x i32> %x.head, <4 x i32> poison, <4 x i32> zeroinitializer
  %res = add <4 x i32> %x.splat, splat (i32 42)
  ret <4 x i32> %res
}

define <vscale x 4 x i32> @add_nxv4i32(i32 %x, i32 %y) {
; CHECK-LABEL: define <vscale x 4 x i32> @add_nxv4i32(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]]) {
; CHECK-NEXT:    [[Y_HEAD1:%.*]] = insertelement <vscale x 4 x i32> poison, i32 [[X]], i32 0
; CHECK-NEXT:    [[Y_SPLAT1:%.*]] = shufflevector <vscale x 4 x i32> [[Y_HEAD1]], <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-NEXT:    [[RES:%.*]] = add <vscale x 4 x i32> [[Y_SPLAT1]], splat (i32 42)
; CHECK-NEXT:    ret <vscale x 4 x i32> [[RES]]
;
  %x.head = insertelement <vscale x 4 x i32> poison, i32 %x, i32 0
  %x.splat = shufflevector <vscale x 4 x i32> %x.head, <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
  %res = add <vscale x 4 x i32> %x.splat, splat (i32 42)
  ret <vscale x 4 x i32> %res
}

; Make sure that we can scalarize sequences of vector instructions.
define <4 x i32> @add_mul_v4i32(i32 %x, i32 %y, i32 %z) {
; CHECK-LABEL: define <4 x i32> @add_mul_v4i32(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]], i32 [[Z:%.*]]) {
; CHECK-NEXT:    [[Z_HEAD1:%.*]] = insertelement <4 x i32> poison, i32 [[X]], i32 0
; CHECK-NEXT:    [[Z_SPLAT1:%.*]] = shufflevector <4 x i32> [[Z_HEAD1]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[RES0:%.*]] = add <4 x i32> [[Z_SPLAT1]], splat (i32 42)
; CHECK-NEXT:    [[RES1:%.*]] = mul <4 x i32> [[RES0]], splat (i32 42)
; CHECK-NEXT:    ret <4 x i32> [[RES1]]
;
  %x.head = insertelement <4 x i32> poison, i32 %x, i32 0
  %x.splat = shufflevector <4 x i32> %x.head, <4 x i32> poison, <4 x i32> zeroinitializer
  %res0 = add <4 x i32> %x.splat, splat (i32 42)
  %res1 = mul <4 x i32> %res0, splat (i32 42)
  ret <4 x i32> %res1
}

; Shouldn't be scalarized since %x.splat and %y.splat have other users.
define <4 x i32> @other_users_v4i32(i32 %x, i32 %y, ptr %p, ptr %q) {
; CHECK-LABEL: define <4 x i32> @other_users_v4i32(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]], ptr [[P:%.*]], ptr [[Q:%.*]]) {
; CHECK-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <4 x i32> poison, i32 [[X]], i32 0
; CHECK-NEXT:    [[RES:%.*]] = shufflevector <4 x i32> [[DOTSPLATINSERT]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[RES1:%.*]] = add <4 x i32> [[RES]], splat (i32 42)
; CHECK-NEXT:    store <4 x i32> [[RES]], ptr [[P]], align 16
; CHECK-NEXT:    store <4 x i32> [[RES]], ptr [[Q]], align 16
; CHECK-NEXT:    ret <4 x i32> [[RES1]]
;
  %x.head = insertelement <4 x i32> poison, i32 %x, i32 0
  %x.splat = shufflevector <4 x i32> %x.head, <4 x i32> poison, <4 x i32> zeroinitializer
  %res = add <4 x i32> %x.splat, splat (i32 42)
  store <4 x i32> %x.splat, ptr %p
  store <4 x i32> %x.splat, ptr %q
  ret <4 x i32> %res
}

define <4 x i1> @icmp_v4i32(i32 %x, i32 %y) {
; CHECK-LABEL: define <4 x i1> @icmp_v4i32(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]]) {
; CHECK-NEXT:    [[X_HEAD:%.*]] = insertelement <4 x i32> poison, i32 [[X]], i32 0
; CHECK-NEXT:    [[X_SPLAT:%.*]] = shufflevector <4 x i32> [[X_HEAD]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[RES:%.*]] = icmp eq <4 x i32> [[X_SPLAT]], splat (i32 42)
; CHECK-NEXT:    ret <4 x i1> [[RES]]
;
  %x.head = insertelement <4 x i32> poison, i32 %x, i32 0
  %x.splat = shufflevector <4 x i32> %x.head, <4 x i32> poison, <4 x i32> zeroinitializer
  %res = icmp eq <4 x i32> %x.splat, splat (i32 42)
  ret <4 x i1> %res
}

define <vscale x 4 x i1> @icmp_nxv4i32(i32 %x, i32 %y) {
; CHECK-LABEL: define <vscale x 4 x i1> @icmp_nxv4i32(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]]) {
; CHECK-NEXT:    [[X_HEAD:%.*]] = insertelement <vscale x 4 x i32> poison, i32 [[X]], i32 0
; CHECK-NEXT:    [[X_SPLAT:%.*]] = shufflevector <vscale x 4 x i32> [[X_HEAD]], <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-NEXT:    [[RES:%.*]] = icmp eq <vscale x 4 x i32> [[X_SPLAT]], splat (i32 42)
; CHECK-NEXT:    ret <vscale x 4 x i1> [[RES]]
;
  %x.head = insertelement <vscale x 4 x i32> poison, i32 %x, i32 0
  %x.splat = shufflevector <vscale x 4 x i32> %x.head, <vscale x 4 x i32> poison, <vscale x 4 x i32> zeroinitializer
  %res = icmp eq <vscale x 4 x i32> %x.splat, splat (i32 42)
  ret <vscale x 4 x i1> %res
}
