; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -S -Oz -debug -debug-only=loop-rotate 2>&1 | FileCheck %s -check-prefix=OZ

; Loop should be rotated for -Oz if the duplicated branch in the header
; can be folded.
; Test adapted from gcc-c-torture/execute/pr90949.c

; OZ: bypassing header threshold
; OZ: rotating Loop at depth 1 containing: %tailrecurse.i<header><exiting>,%tailrecurse.backedge.i<latch>
; OZ: into Loop at depth 1 containing: %tailrecurse.backedge.i<header><latch><exiting>

%struct.Node = type { %struct.Node* }

@space = dso_local global [2 x %struct.Node] zeroinitializer, align 8

define dso_local signext i32 @main() local_unnamed_addr #2 {
; OZ-LABEL: define dso_local signext i32 @main(
; OZ-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; OZ-NEXT:  entry:
; OZ-NEXT:    store ptr null, ptr @space, align 8
; OZ-NEXT:    ret i32 0
;
entry:
  store %struct.Node* null, %struct.Node** getelementptr inbounds ([2 x %struct.Node], [2 x %struct.Node]* @space, i64 0, i64 0, i32 0), align 8
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %tailrecurse.backedge.i, %entry
  %module.tr.i = phi %struct.Node* [ getelementptr inbounds ([2 x %struct.Node], [2 x %struct.Node]* @space, i64 0, i64 0), %entry ], [ %module.tr.be.i, %tailrecurse.backedge.i ]
  %cmp.i = icmp eq %struct.Node* %module.tr.i, null
  br i1 %cmp.i, label %walk.exit, label %tailrecurse.backedge.i

tailrecurse.backedge.i:                           ; preds = %tailrecurse.i
  %module.tr.be.in.i = getelementptr inbounds %struct.Node, %struct.Node* %module.tr.i, i64 0, i32 0
  %module.tr.be.i = load %struct.Node*, %struct.Node** %module.tr.be.in.i, align 8
  br label %tailrecurse.i

walk.exit:                                        ; preds = %tailrecurse.i
  ret i32 0
}
