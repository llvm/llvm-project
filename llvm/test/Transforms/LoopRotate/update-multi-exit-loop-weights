; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt < %s -passes='loop(loop-rotate)' -S | FileCheck %s

@g = global i64 0

define void @func_branch_weight(i64 %n) !prof !0 {
; CHECK-LABEL: define void @func_branch_weight(
; CHECK-SAME: i64 [[N:%.*]]) !prof [[PROF0:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[CMP1:%.*]] = icmp slt i64 0, [[N]]
; CHECK-NEXT:    br i1 [[CMP1]], label %[[LOOP_EXIT:.*]], label %[[LOOP_BODY_LR_PH:.*]], !prof [[PROF1:![0-9]+]]
; CHECK:       [[LOOP_BODY_LR_PH]]:
; CHECK-NEXT:    br label %[[LOOP_BODY:.*]]
; CHECK:       [[LOOP_HEADER:.*]]:
; CHECK-NEXT:    [[I:%.*]] = phi i64 [ [[I_INC:%.*]], %[[LOOP_BODY]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i64 [[I]], [[N]]
; CHECK-NEXT:    br i1 [[CMP]], label %[[LOOP_HEADER_LOOP_EXIT_CRIT_EDGE:.*]], label %[[LOOP_BODY]], !prof [[PROF2:![0-9]+]]
; CHECK:       [[LOOP_BODY]]:
; CHECK-NEXT:    [[I2:%.*]] = phi i64 [ 0, %[[LOOP_BODY_LR_PH]] ], [ [[I]], %[[LOOP_HEADER]] ]
; CHECK-NEXT:    [[GP:%.*]] = getelementptr inbounds i8, ptr @g, i64 [[I2]]
; CHECK-NEXT:    [[GI:%.*]] = load i64, ptr [[GP]], align 8
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[GI]], 0
; CHECK-NEXT:    [[I_INC]] = add i64 [[I2]], 1
; CHECK-NEXT:    br i1 [[CMP_NOT]], label %[[LOOP_HEADER]], label %[[LOOP_BODY_LOOP_EXIT_CRIT_EDGE:.*]], !prof [[PROF3:![0-9]+]]
; CHECK:       [[LOOP_BODY_LOOP_EXIT_CRIT_EDGE]]:
; CHECK-NEXT:    br label %[[LOOP_EXIT]]
; CHECK:       [[LOOP_HEADER_LOOP_EXIT_CRIT_EDGE]]:
; CHECK-NEXT:    br label %[[LOOP_EXIT]]
; CHECK:       [[LOOP_EXIT]]:
; CHECK-NEXT:    ret void
;
entry:
  br label %loop_header

loop_header:
  %i = phi i64 [0, %entry], [%i_inc, %if_then]
  %cmp = icmp slt i64 %i, %n
  br i1 %cmp, label %loop_exit, label %loop_body, !prof !1

loop_body:
  %gp = getelementptr inbounds i8, ptr @g, i64 %i
  %gi = load i64, ptr %gp, align 8
  %cmp.not = icmp eq i64 %gi, 0
  br i1 %cmp.not, label %if_then, label %loop_exit, !prof !2

if_then:
  %i_inc = add i64 %i, 1
  br label %loop_header

loop_exit:
  ret void
}


define void @func_zero_backage_weight(i64 %n) !prof !0 {
; CHECK-LABEL: define void @func_zero_backage_weight(
; CHECK-SAME: i64 [[N:%.*]]) !prof [[PROF0]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[CMP1:%.*]] = icmp slt i64 0, [[N]]
; CHECK-NEXT:    br i1 [[CMP1]], label %[[LOOP_EXIT:.*]], label %[[LOOP_BODY_LR_PH:.*]], !prof [[PROF1]]
; CHECK:       [[LOOP_BODY_LR_PH]]:
; CHECK-NEXT:    br label %[[LOOP_BODY:.*]]
; CHECK:       [[LOOP_HEADER:.*]]:
; CHECK-NEXT:    [[I:%.*]] = phi i64 [ [[I_INC:%.*]], %[[LOOP_BODY]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i64 [[I]], [[N]]
; CHECK-NEXT:    br i1 [[CMP]], label %[[LOOP_HEADER_LOOP_EXIT_CRIT_EDGE:.*]], label %[[LOOP_BODY]], !prof [[PROF4:![0-9]+]]
; CHECK:       [[LOOP_BODY]]:
; CHECK-NEXT:    [[I2:%.*]] = phi i64 [ 0, %[[LOOP_BODY_LR_PH]] ], [ [[I]], %[[LOOP_HEADER]] ]
; CHECK-NEXT:    [[GP:%.*]] = getelementptr inbounds i8, ptr @g, i64 [[I2]]
; CHECK-NEXT:    [[GI:%.*]] = load i64, ptr [[GP]], align 8
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp eq i64 [[GI]], 0
; CHECK-NEXT:    [[I_INC]] = add i64 [[I2]], 1
; CHECK-NEXT:    br i1 [[CMP_NOT]], label %[[LOOP_HEADER]], label %[[LOOP_BODY_LOOP_EXIT_CRIT_EDGE:.*]], !prof [[PROF5:![0-9]+]]
; CHECK:       [[LOOP_BODY_LOOP_EXIT_CRIT_EDGE]]:
; CHECK-NEXT:    br label %[[LOOP_EXIT]]
; CHECK:       [[LOOP_HEADER_LOOP_EXIT_CRIT_EDGE]]:
; CHECK-NEXT:    br label %[[LOOP_EXIT]]
; CHECK:       [[LOOP_EXIT]]:
; CHECK-NEXT:    ret void
;
entry:
  br label %loop_header

loop_header:
  %i = phi i64 [0, %entry], [%i_inc, %if_then]
  %cmp = icmp slt i64 %i, %n
  br i1 %cmp, label %loop_exit, label %loop_body, !prof !3

loop_body:
  %gp = getelementptr inbounds i8, ptr @g, i64 %i
  %gi = load i64, ptr %gp, align 8
  %cmp.not = icmp eq i64 %gi, 0
  br i1 %cmp.not, label %if_then, label %loop_exit, !prof !4

if_then:
  %i_inc = add i64 %i, 1
  br label %loop_header

loop_exit:
  ret void
}

!0 = !{!"function_entry_count", i64 1000}
!1 = !{!"branch_weights", i32 200, i32 900}
!2 = !{!"branch_weights", i32 100, i32 800}
!3 = !{!"branch_weights", i32 100, i32 900}
!4 = !{!"branch_weights", i32 0, i32 900}
;.
; CHECK: [[PROF0]] = !{!"function_entry_count", i64 1000}
; CHECK: [[PROF1]] = !{!"branch_weights", i32 100, i32 900}
; CHECK: [[PROF2]] = !{!"branch_weights", i32 100, i32 0}
; CHECK: [[PROF3]] = !{!"branch_weights", i32 100, i32 800}
; CHECK: [[PROF4]] = !{!"branch_weights", i32 1, i32 0}
; CHECK: [[PROF5]] = !{!"branch_weights", i32 0, i32 900}
;.
