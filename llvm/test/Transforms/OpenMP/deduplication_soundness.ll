; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function main --scrub-attributes --filter "@omp_get_thread_limit|@use" --version 4
; RUN: opt -passes=openmp-opt-cgscc -S < %s | FileCheck %s

declare void @use(i32 noundef)
declare i32 @omp_get_thread_limit()
declare void @__kmpc_set_thread_limit(ptr, i32, i32)
declare i32 @__kmpc_global_thread_num(ptr)
declare noalias ptr @__kmpc_omp_task_alloc(ptr, i32, i32, i64, i64, ptr)
declare void @__kmpc_omp_task_complete_if0(ptr, i32, ptr)
declare void @__kmpc_omp_task_begin_if0(ptr, i32, ptr)

%struct.ident_t = type { i32, i32, i32, i32, ptr }

@0 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@1 = private unnamed_addr constant %struct.ident_t { i32 0, i32 2, i32 0, i32 22, ptr @0 }, align 8

define i32 @main() local_unnamed_addr {
; CHECK-LABEL: define i32 @main() local_unnamed_addr {
; CHECK:    [[CALL_I_I_I:%.*]] = call i32 @omp_get_thread_limit()
; CHECK:    call void @use(i32 noundef [[CALL_I_I_I]])
; CHECK:    [[CALL_I_I_I2:%.*]] = call i32 @omp_get_thread_limit()
; CHECK:    call void @use(i32 noundef [[CALL_I_I_I2]])
;
entry:
  %0 = call i32 @__kmpc_global_thread_num(ptr nonnull @1)
  %1 = call ptr @__kmpc_omp_task_alloc(ptr nonnull @1, i32 %0, i32 1, i64 40, i64 0, ptr nonnull @.omp_task_entry.)
  call void @__kmpc_omp_task_begin_if0(ptr nonnull @1, i32 %0, ptr %1)
  call void @__kmpc_set_thread_limit(ptr nonnull @1, i32 %0, i32 4)
  %call.i.i.i = call i32 @omp_get_thread_limit()
  call void @use(i32 noundef %call.i.i.i)
  call void @__kmpc_omp_task_complete_if0(ptr nonnull @1, i32 %0, ptr %1)
  %2 = call ptr @__kmpc_omp_task_alloc(ptr nonnull @1, i32 %0, i32 1, i64 40, i64 0, ptr nonnull @.omp_task_entry..2)
  call void @__kmpc_omp_task_begin_if0(ptr nonnull @1, i32 %0, ptr %2)
  call void @__kmpc_set_thread_limit(ptr nonnull @1, i32 %0, i32 3)
  %call.i.i.i2 = call i32 @omp_get_thread_limit()
  call void @use(i32 noundef %call.i.i.i2)
  call void @__kmpc_omp_task_complete_if0(ptr nonnull @1, i32 %0, ptr %2)
  ret i32 0
}

define internal noundef i32 @.omp_task_entry.(i32 noundef %0, ptr noalias nocapture noundef readonly %1) {
entry:
  tail call void @__kmpc_set_thread_limit(ptr nonnull @1, i32 %0, i32 4)
  %call.i.i = tail call i32 @omp_get_thread_limit()
  tail call void @use(i32 noundef %call.i.i)
  ret i32 0
}

define internal noundef i32 @.omp_task_entry..2(i32 noundef %0, ptr noalias nocapture noundef readonly %1) {
entry:
  tail call void @__kmpc_set_thread_limit(ptr nonnull @1, i32 %0, i32 3)
  %call.i.i = tail call i32 @omp_get_thread_limit()
  tail call void @use(i32 noundef %call.i.i)
  ret i32 0
}

!llvm.module.flags = !{!0}

!0 = !{i32 7, !"openmp", i32 51}
