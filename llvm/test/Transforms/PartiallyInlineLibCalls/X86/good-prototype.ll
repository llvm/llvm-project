; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes=partially-inline-libcalls -mtriple=x86_64-unknown-linux-gnu -pass-remarks=partially-inline-libcalls \
; RUN:     -pass-remarks-missed=partially-inline-libcalls 2>%t < %s | FileCheck %s
; RUN: FileCheck %s -check-prefix=CHECK-REMARK --input-file=%t

define float @f(float %val) {
; CHECK-LABEL: @f(
; CHECK-REMARK: partially inlined call to sqrt function despite having to use errno for error handling: target has fast sqrt instruction
; CHECK-REMARK: branch to library sqrt fn had to be inserted to satisfy the current target's requirement for math functions to set errno on invalid inputs
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RES:%.*]] = tail call float @sqrtf(float [[VAL:%.*]]) #[[READNONE:.*]]
; CHECK-NEXT:    [[TMP0:%.*]] = fcmp oge float [[VAL]], 0.000000e+00
; CHECK-NEXT:    br i1 [[TMP0]], label [[ENTRY_SPLIT:%.*]], label [[CALL_SQRT:%.*]]
; CHECK:       call.sqrt:
; CHECK-NEXT:    [[TMP1:%.*]] = tail call float @sqrtf(float [[VAL]])
; CHECK-NEXT:    br label [[ENTRY_SPLIT]]
; CHECK:       entry.split:
; CHECK-NEXT:    [[TMP2:%.*]] = phi float [ [[RES]], [[ENTRY:%.*]] ], [ [[TMP1]], [[CALL_SQRT]] ]
; CHECK-NEXT:    ret float [[TMP2]]
;
entry:
  %res = tail call float @sqrtf(float %val)
  ret float %res
}

define float @f_writeonly(float %val) {
; CHECK-LABEL: @f_writeonly(
; CHECK-NEXt:    [[RES:%.*]] = tail call float @sqrtf(float [[VAL:%.*]]) #[[READNONE]]
  %res = tail call float @sqrtf(float %val) writeonly
  ret float %res
}

define float @f_readonly(float %val) {
  %res = tail call float @sqrtf(float %val) readonly
  ret float %res
}

declare float @sqrtf(float)
