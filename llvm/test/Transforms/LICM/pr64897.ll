; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -passes=licm < %s | FileCheck %s

; FIXME: This is a miscompile.
define void @test(i1 %c, i8 %x) {
; CHECK-LABEL: define void @test(
; CHECK-SAME: i1 [[C:%.*]], i8 [[X:%.*]]) {
; CHECK-NEXT:  start:
; CHECK-NEXT:    [[A:%.*]] = alloca [16 x i8], align 8
; CHECK-NEXT:    [[P:%.*]] = getelementptr inbounds i8, ptr [[A]], i64 8
; CHECK-NEXT:    [[P_COPY:%.*]] = getelementptr inbounds i8, ptr [[A]], i64 8
; CHECK-NEXT:    [[P2:%.*]] = getelementptr inbounds i8, ptr [[A]], i64 12
; CHECK-NEXT:    [[P2_PROMOTED:%.*]] = load i8, ptr [[P2]], align 1
; CHECK-NEXT:    br label [[LOOP:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i8 [ 0, [[LOOP]] ], [ [[P2_PROMOTED]], [[START:%.*]] ]
; CHECK-NEXT:    store i32 286331153, ptr [[P]], align 4
; CHECK-NEXT:    store i32 34, ptr [[P_COPY]], align 4
; CHECK-NEXT:    store i64 3689348814741910323, ptr [[P_COPY]], align 4
; CHECK-NEXT:    call void @use(i8 [[TMP0]])
; CHECK-NEXT:    br i1 [[C]], label [[LOOP]], label [[EXIT:%.*]]
; CHECK:       exit:
; CHECK-NEXT:    store i8 0, ptr [[P2]], align 1
; CHECK-NEXT:    ret void
;
start:
  %a = alloca [16 x i8], align 8
  %p = getelementptr inbounds i8, ptr %a, i64 8
  %p.copy = getelementptr inbounds i8, ptr %a, i64 8
  %p2 = getelementptr inbounds i8, ptr %a, i64 12
  br label %loop

loop:
  store i32 u0x11111111, ptr %p
  store i32 u0x22, ptr %p.copy
  store i64 u0x3333333333333333, ptr %p.copy
  %val = load i8, ptr %p2
  call void @use(i8 %val)
  store i8 0, ptr %p2
  br i1 %c, label %loop, label %exit

exit:
  ret void
}

declare void @use(i8)
