; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -p loop-unroll -S %s | FileCheck %s

target triple = "hexagon-unknown-linux"

declare void @foo()

define void @preserve_lcssa_when_reusing_existing_phi() {
; CHECK-LABEL: define void @preserve_lcssa_when_reusing_existing_phi() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br label %[[LOOP_1_HEADER:.*]]
; CHECK:       [[LOOP_1_HEADER]]:
; CHECK-NEXT:    br label %[[LOOP_2_HEADER:.*]]
; CHECK:       [[LOOP_2_HEADER]]:
; CHECK-NEXT:    br label %[[LOOP_3:.*]]
; CHECK:       [[LOOP_3]]:
; CHECK-NEXT:    [[IV_3:%.*]] = phi i32 [ [[IV_3_NEXT:%.*]], %[[LOOP_3]] ], [ 0, %[[LOOP_2_HEADER]] ]
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    [[IV_3_NEXT]] = add i32 [[IV_3]], 1
; CHECK-NEXT:    br i1 false, label %[[PH:.*]], label %[[LOOP_3]]
; CHECK:       [[PH]]:
; CHECK-NEXT:    [[IV_3_LCSSA:%.*]] = phi i32 [ [[IV_3]], %[[LOOP_3]] ]
; CHECK-NEXT:    br i1 true, label %[[LOOP_2_LATCH:.*]], label %[[LOOP_4_PREHEADER:.*]]
; CHECK:       [[LOOP_4_PREHEADER]]:
; CHECK-NEXT:    [[IV_3_LCSSA_LCSSA1:%.*]] = phi i32 [ [[IV_3_LCSSA]], %[[PH]] ]
; CHECK-NEXT:    [[IV_3_LCSSA_LCSSA:%.*]] = phi i32 [ [[IV_3_LCSSA]], %[[PH]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = add i32 [[IV_3_LCSSA_LCSSA1]], 1
; CHECK-NEXT:    [[TMP1:%.*]] = freeze i32 [[TMP0]]
; CHECK-NEXT:    [[TMP2:%.*]] = add i32 [[TMP1]], -1
; CHECK-NEXT:    [[XTRAITER:%.*]] = and i32 [[TMP1]], 7
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ult i32 [[TMP2]], 7
; CHECK-NEXT:    br i1 [[TMP3]], label %[[LOOP_1_LATCH_UNR_LCSSA:.*]], label %[[LOOP_4_PREHEADER_NEW:.*]]
; CHECK:       [[LOOP_4_PREHEADER_NEW]]:
; CHECK-NEXT:    br label %[[LOOP_4:.*]]
; CHECK:       [[LOOP_2_LATCH]]:
; CHECK-NEXT:    br label %[[LOOP_2_HEADER]]
; CHECK:       [[LOOP_4]]:
; CHECK-NEXT:    [[IV_4:%.*]] = phi i32 [ 0, %[[LOOP_4_PREHEADER_NEW]] ], [ [[INC_I_7:%.*]], %[[LOOP_4]] ]
; CHECK-NEXT:    [[NITER:%.*]] = phi i32 [ 0, %[[LOOP_4_PREHEADER_NEW]] ], [ [[NITER_NEXT_7:%.*]], %[[LOOP_4]] ]
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    [[INC_I_7]] = add nuw nsw i32 [[IV_4]], 8
; CHECK-NEXT:    [[NITER_NEXT_7]] = add nuw nsw i32 [[NITER]], 8
; CHECK-NEXT:    br i1 true, label %[[LOOP_1_LATCH_UNR_LCSSA_LOOPEXIT:.*]], label %[[LOOP_4]]
; CHECK:       [[LOOP_1_LATCH_UNR_LCSSA_LOOPEXIT]]:
; CHECK-NEXT:    [[IV_4_UNR_PH:%.*]] = phi i32 [ [[INC_I_7]], %[[LOOP_4]] ]
; CHECK-NEXT:    br label %[[LOOP_1_LATCH_UNR_LCSSA]]
; CHECK:       [[LOOP_1_LATCH_UNR_LCSSA]]:
; CHECK-NEXT:    [[IV_4_UNR:%.*]] = phi i32 [ 0, %[[LOOP_4_PREHEADER]] ], [ [[IV_4_UNR_PH]], %[[LOOP_1_LATCH_UNR_LCSSA_LOOPEXIT]] ]
; CHECK-NEXT:    [[LCMP_MOD:%.*]] = icmp ne i32 [[XTRAITER]], 0
; CHECK-NEXT:    br i1 [[LCMP_MOD]], label %[[LOOP_4_EPIL_PREHEADER:.*]], label %[[LOOP_1_LATCH:.*]]
; CHECK:       [[LOOP_4_EPIL_PREHEADER]]:
; CHECK-NEXT:    br label %[[LOOP_4_EPIL:.*]]
; CHECK:       [[LOOP_4_EPIL]]:
; CHECK-NEXT:    [[IV_4_EPIL:%.*]] = phi i32 [ [[INC_I_EPIL:%.*]], %[[LOOP_4_EPIL]] ], [ [[IV_4_UNR]], %[[LOOP_4_EPIL_PREHEADER]] ]
; CHECK-NEXT:    [[EPIL_ITER:%.*]] = phi i32 [ 0, %[[LOOP_4_EPIL_PREHEADER]] ], [ [[EPIL_ITER_NEXT:%.*]], %[[LOOP_4_EPIL]] ]
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    [[INC_I_EPIL]] = add i32 [[IV_4_EPIL]], 1
; CHECK-NEXT:    [[EC_EPIL:%.*]] = icmp eq i32 [[IV_4_EPIL]], [[IV_3_LCSSA_LCSSA]]
; CHECK-NEXT:    [[EPIL_ITER_NEXT]] = add i32 [[EPIL_ITER]], 1
; CHECK-NEXT:    [[EPIL_ITER_CMP:%.*]] = icmp ne i32 [[EPIL_ITER_NEXT]], [[XTRAITER]]
; CHECK-NEXT:    br i1 [[EPIL_ITER_CMP]], label %[[LOOP_4_EPIL]], label %[[LOOP_1_LATCH_EPILOG_LCSSA:.*]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       [[LOOP_1_LATCH_EPILOG_LCSSA]]:
; CHECK-NEXT:    br label %[[LOOP_1_LATCH]]
; CHECK:       [[LOOP_1_LATCH]]:
; CHECK-NEXT:    br label %[[LOOP_1_HEADER]]
;
entry:
  br label %loop.1.header

loop.1.header:
  br label %loop.2.header

loop.2.header:
  br label %loop.3

loop.3:
  %iv.3 = phi i32 [ %iv.3.next, %loop.3 ], [ 0, %loop.2.header ]
  call void @foo()
  %iv.3.next = add i32 %iv.3, 1
  br i1 false, label %ph, label %loop.3

ph:
  br i1 true, label %loop.2.latch, label %loop.4

loop.2.latch:
  br label %loop.2.header

loop.4:
  %iv.4 = phi i32 [ 0, %ph ], [ %inc.i, %loop.4 ]
  call void @foo()
  %inc.i = add i32 %iv.4, 1
  %ec = icmp eq i32 %iv.4, %iv.3
  br i1 %ec, label %loop.1.latch, label %loop.4

loop.1.latch:
  br label %loop.1.header
}
;.
; CHECK: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]]}
; CHECK: [[META1]] = !{!"llvm.loop.unroll.disable"}
;.
