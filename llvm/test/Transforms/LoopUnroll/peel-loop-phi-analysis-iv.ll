; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -S -passes=loop-unroll -enable-peeling-for-iv | FileCheck %s
; RUN: opt < %s -S -passes=loop-unroll-full -enable-peeling-for-iv | FileCheck %s

; void g(int);
declare void @_Z1gi(i32 signext)

; Check that phi analysis can handle a binary operator with induction variables.
; The phis become induction through the chain of phis, with a unary
; instruction on a loop induction.  Check that the phis for x, a, and y become
; loop inductions since x is based on y, which is based on a, which is based
; on a binary add of a constant and i, which is a loop induction.
; Consider the calls to g:
; First iteration: g(0), x=0, g(0), y=1, a=2
; Second iteration: g(0), x=1, g(2), y=3, a=3
; Third iteration: g(1), x=3, g(3), y=4, a=4
; Fourth iteration (and subsequent): g(i), x=i+1, g(i+1), y=i+2, a=i+2
; Therefore, peeling 3 times makes the phi nodes induction variables.
;
; void g(int);
; void binary() {
;   int x = 0;
;   int y = 0;
;   int a = 0;
;   for(int i = 0; i <100000; ++i) {
;     g(x);
;     x = y;
;     g(a);
;     y = a + 1;
;     a = i + 2;
;   }
; }
;
define void @binary_induction() {
; CHECK-LABEL: define void @binary_induction() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL_BEGIN:.*]]
; CHECK:       [[FOR_BODY_PEEL_BEGIN]]:
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL:.*]]
; CHECK:       [[FOR_BODY_PEEL]]:
; CHECK-NEXT:    tail call void @_Z1gi(i32 0)
; CHECK-NEXT:    tail call void @_Z1gi(i32 0)
; CHECK-NEXT:    [[ADD_PEEL:%.*]] = add nuw nsw i32 0, 2
; CHECK-NEXT:    [[INC_PEEL:%.*]] = add nuw nsw i32 0, 1
; CHECK-NEXT:    [[EXITCOND_PEEL:%.*]] = icmp ne i32 [[INC_PEEL]], 100000
; CHECK-NEXT:    br i1 [[EXITCOND_PEEL]], label %[[FOR_BODY_PEEL_NEXT:.*]], label %[[FOR_COND_CLEANUP:.*]]
; CHECK:       [[FOR_BODY_PEEL_NEXT]]:
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL2:.*]]
; CHECK:       [[FOR_BODY_PEEL2]]:
; CHECK-NEXT:    tail call void @_Z1gi(i32 0)
; CHECK-NEXT:    tail call void @_Z1gi(i32 [[ADD_PEEL]])
; CHECK-NEXT:    [[ADD_PEEL3:%.*]] = add nuw nsw i32 [[INC_PEEL]], 2
; CHECK-NEXT:    [[INC_PEEL4:%.*]] = add nuw nsw i32 [[INC_PEEL]], 1
; CHECK-NEXT:    [[EXITCOND_PEEL5:%.*]] = icmp ne i32 [[INC_PEEL4]], 100000
; CHECK-NEXT:    br i1 [[EXITCOND_PEEL5]], label %[[FOR_BODY_PEEL_NEXT1:.*]], label %[[FOR_COND_CLEANUP]]
; CHECK:       [[FOR_BODY_PEEL_NEXT1]]:
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL7:.*]]
; CHECK:       [[FOR_BODY_PEEL7]]:
; CHECK-NEXT:    tail call void @_Z1gi(i32 0)
; CHECK-NEXT:    tail call void @_Z1gi(i32 [[ADD_PEEL3]])
; CHECK-NEXT:    [[ADD_PEEL8:%.*]] = add nuw nsw i32 [[INC_PEEL4]], 2
; CHECK-NEXT:    [[INC_PEEL9:%.*]] = add nuw nsw i32 [[INC_PEEL4]], 1
; CHECK-NEXT:    [[EXITCOND_PEEL10:%.*]] = icmp ne i32 [[INC_PEEL9]], 100000
; CHECK-NEXT:    br i1 [[EXITCOND_PEEL10]], label %[[FOR_BODY_PEEL_NEXT6:.*]], label %[[FOR_COND_CLEANUP]]
; CHECK:       [[FOR_BODY_PEEL_NEXT6]]:
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL_NEXT11:.*]]
; CHECK:       [[FOR_BODY_PEEL_NEXT11]]:
; CHECK-NEXT:    br label %[[ENTRY_PEEL_NEWPH:.*]]
; CHECK:       [[ENTRY_PEEL_NEWPH]]:
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_COND_CLEANUP_LOOPEXIT:.*]]:
; CHECK-NEXT:    br label %[[FOR_COND_CLEANUP]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I:%.*]] = phi i32 [ [[INC_PEEL9]], %[[ENTRY_PEEL_NEWPH]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[X:%.*]] = phi i32 [ [[ADD_PEEL]], %[[ENTRY_PEEL_NEWPH]] ], [ [[Y:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[A:%.*]] = phi i32 [ [[ADD_PEEL8]], %[[ENTRY_PEEL_NEWPH]] ], [ [[ADD:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[Y]] = phi i32 [ [[ADD_PEEL3]], %[[ENTRY_PEEL_NEWPH]] ], [ [[A]], %[[FOR_BODY]] ]
; CHECK-NEXT:    tail call void @_Z1gi(i32 [[X]])
; CHECK-NEXT:    tail call void @_Z1gi(i32 [[A]])
; CHECK-NEXT:    [[ADD]] = add nuw nsw i32 [[I]], 2
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp ne i32 [[INC]], 100000
; CHECK-NEXT:    br i1 [[EXITCOND]], label %[[FOR_BODY]], label %[[FOR_COND_CLEANUP_LOOPEXIT]], !llvm.loop [[LOOP0:![0-9]+]]
;
entry:
  br label %for.body

for.cond.cleanup:
  ret void

for.body:
  %i = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %x = phi i32 [ 0, %entry ], [ %y, %for.body ]
  %a = phi i32 [ 0, %entry ], [ %add, %for.body ]
  %y = phi i32 [ 0, %entry ], [ %a, %for.body ]
  tail call void @_Z1gi(i32 %x)
  tail call void @_Z1gi(i32 %a)
  %add = add nuw nsw i32 %i, 2
  %inc = add nuw nsw i32 %i, 1
  %exitcond = icmp ne i32 %inc, 100000
  br i1 %exitcond, label %for.body, label %for.cond.cleanup
}

; Check that phi analysis can handle an assignment from an induction.
; The im becomes a loop induction by peeling the loop once, because i is a loop
; induction.
; This test is based on TSVC s291.
;
; #define N 100
; void f(int * restrict a, int * restrict b) {
;   int im = N - 1;
;   for (int i = 0; i < N; i++) {
;     a[i] = b[i] + b[im];
;     im = i;
;   }
; }
define void @phi_refers_another_induction(ptr noundef noalias %a, ptr noundef noalias %b) {
; CHECK-LABEL: define void @phi_refers_another_induction(
; CHECK-SAME: ptr noalias noundef [[A:%.*]], ptr noalias noundef [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL_BEGIN:.*]]
; CHECK:       [[FOR_BODY_PEEL_BEGIN]]:
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL:.*]]
; CHECK:       [[FOR_BODY_PEEL]]:
; CHECK-NEXT:    [[ARRAYIDX_PEEL:%.*]] = getelementptr inbounds nuw i32, ptr [[B]], i64 0
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX_PEEL]], align 4
; CHECK-NEXT:    [[IDXPROM1_PEEL:%.*]] = zext nneg i32 99 to i64
; CHECK-NEXT:    [[ARRAYIDX2_PEEL:%.*]] = getelementptr inbounds nuw i32, ptr [[B]], i64 [[IDXPROM1_PEEL]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX2_PEEL]], align 4
; CHECK-NEXT:    [[ADD_PEEL:%.*]] = add nsw i32 [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[ARRAYIDX4_PEEL:%.*]] = getelementptr inbounds nuw i32, ptr [[A]], i64 0
; CHECK-NEXT:    store i32 [[ADD_PEEL]], ptr [[ARRAYIDX4_PEEL]], align 4
; CHECK-NEXT:    [[INDVARS_IV_NEXT_PEEL:%.*]] = add nuw nsw i64 0, 1
; CHECK-NEXT:    [[TMP2:%.*]] = trunc nuw nsw i64 0 to i32
; CHECK-NEXT:    [[EXITCOND_PEEL:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT_PEEL]], 100
; CHECK-NEXT:    br i1 [[EXITCOND_PEEL]], label %[[FOR_BODY_PEEL_NEXT:.*]], label %[[FOR_COND_CLEANUP:.*]]
; CHECK:       [[FOR_BODY_PEEL_NEXT]]:
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL_NEXT1:.*]]
; CHECK:       [[FOR_BODY_PEEL_NEXT1]]:
; CHECK-NEXT:    br label %[[ENTRY_PEEL_NEWPH:.*]]
; CHECK:       [[ENTRY_PEEL_NEWPH]]:
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT_PEEL]], %[[ENTRY_PEEL_NEWPH]] ], [ [[INDVARS_IV_NEXT:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[IM_010:%.*]] = phi i32 [ [[TMP2]], %[[ENTRY_PEEL_NEWPH]] ], [ [[TMP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i32, ptr [[B]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[IDXPROM1:%.*]] = zext nneg i32 [[IM_010]] to i64
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds nuw i32, ptr [[B]], i64 [[IDXPROM1]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ARRAYIDX2]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP4]], [[TMP3]]
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds nuw i32, ptr [[A]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX4]], align 4
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[TMP5]] = trunc nuw nsw i64 [[INDVARS_IV]] to i32
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT]], 100
; CHECK-NEXT:    br i1 [[EXITCOND]], label %[[FOR_BODY]], label %[[FOR_COND_CLEANUP_LOOPEXIT:.*]], !llvm.loop [[LOOP2:![0-9]+]]
; CHECK:       [[FOR_COND_CLEANUP_LOOPEXIT]]:
; CHECK-NEXT:    br label %[[FOR_COND_CLEANUP]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %im.010 = phi i32 [ 99, %entry ], [ %2, %for.body ]
  %arrayidx = getelementptr inbounds nuw i32, ptr %b, i64 %indvars.iv
  %0 = load i32, ptr %arrayidx, align 4
  %idxprom1 = zext nneg i32 %im.010 to i64
  %arrayidx2 = getelementptr inbounds nuw i32, ptr %b, i64 %idxprom1
  %1 = load i32, ptr %arrayidx2, align 4
  %add = add nsw i32 %1, %0
  %arrayidx4 = getelementptr inbounds nuw i32, ptr %a, i64 %indvars.iv
  store i32 %add, ptr %arrayidx4, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %2 = trunc nuw nsw i64 %indvars.iv to i32
  %exitcond = icmp ne i64 %indvars.iv.next, 100
  br i1 %exitcond, label %for.body, label %for.cond.cleanup

for.cond.cleanup:
  ret void
}

; Check that unnecessary peeling doesn't occur if there exist a comparison
; instruction between an induction and another induction. The original code is
; as below. Both i and j are inductions, but the comparison i < j is not an
; induction.
;
; val = 42;
; for (i=0,j=100; i<10000; i+=2,j+=1) {
;   a[i] = val;
;   val = i < j;
; }
;
define void @dont_peel_cmp_ind_ind(ptr noundef %a) {
; CHECK-LABEL: define void @dont_peel_cmp_ind_ind(
; CHECK-SAME: ptr noundef [[A:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[IV_0:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[IV_0_NEXT:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[IV_1:%.*]] = phi i64 [ 100, %[[ENTRY]] ], [ [[IV_1_NEXT:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VAL:%.*]] = phi i32 [ 42, %[[ENTRY]] ], [ [[VAL_NEXT:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i32, ptr [[A]], i64 [[IV_0]]
; CHECK-NEXT:    store i32 10, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[IV_0_NEXT]] = add nuw nsw i64 [[IV_0]], 2
; CHECK-NEXT:    [[IV_1_NEXT]] = add nuw nsw i64 [[IV_1]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i64 [[IV_0_NEXT]], [[IV_1_NEXT]]
; CHECK-NEXT:    [[VAL_NEXT]] = zext i1 [[CMP]] to i32
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp slt i64 [[IV_0_NEXT]], 10000
; CHECK-NEXT:    br i1 [[EXITCOND]], label %[[FOR_BODY]], label %[[EXIT:.*]]
; CHECK:       [[EXIT]]:
; CHECK-NEXT:    ret void
;
entry:
  br label %for.body

for.body:
  %iv.0 = phi i64 [ 0, %entry ], [ %iv.0.next, %for.body ]
  %iv.1 = phi i64 [ 100, %entry ] , [ %iv.1.next, %for.body ]
  %val = phi i32 [ 42, %entry ], [ %val.next, %for.body ]
  %arrayidx = getelementptr inbounds nuw i32, ptr %a, i64 %iv.0
  store i32 10, ptr %arrayidx, align 4
  %iv.0.next = add nsw nuw i64 %iv.0, 2
  %iv.1.next = add nsw nuw i64 %iv.1, 1
  %val.next.cmp = icmp slt i64 %iv.0.next, %iv.1.next
  %val.next = zext i1 %val.next.cmp to i32
  %exitcond = icmp slt i64 %iv.0.next, 10000
  br i1 %exitcond, label %for.body, label %exit

exit:
  ret void
}

; Check that unnecessary peeling doesn't occur if there is an instruction that
; is neither an add nor a sub and has an induction on its operand. The original
; code is like as below. If the operator is either an add or a sub, then the
; result would be an induction, so peeling makes sense. In this case, however,
; the operator is a bitshift.
;
; val = 42;
; for (i=0; i<10000; i++) {
;   a[i] = val;
;   val = 1 << i;
; }
;
define void @dont_peel_shl_invariant_ind(ptr noundef %a) {
; CHECK-LABEL: define void @dont_peel_shl_invariant_ind(
; CHECK-SAME: ptr noundef [[A:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[IV:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[IV_NEXT:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VAL:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[VAL_NEXT:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i64, ptr [[A]], i64 [[IV]]
; CHECK-NEXT:    store i64 [[VAL]], ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i64 [[IV]], 1
; CHECK-NEXT:    [[VAL_NEXT]] = shl nuw nsw i64 1, [[IV]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i64 [[IV_NEXT]], 10000
; CHECK-NEXT:    br i1 [[CMP]], label %[[FOR_BODY]], label %[[EXIT:.*]]
; CHECK:       [[EXIT]]:
; CHECK-NEXT:    ret void
;
entry:
  br label %for.body

for.body:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %for.body ]
  %val = phi i64 [ 0, %entry ], [ %val.next, %for.body ]
  %arrayidx = getelementptr inbounds nuw i64, ptr %a, i64 %iv
  store i64 %val, ptr %arrayidx, align 4
  %iv.next = add nsw nuw i64 %iv, 1
  %val.next = shl nsw nuw i64 1, %iv
  %cmp = icmp slt i64 %iv.next, 10000
  br i1 %cmp, label %for.body, label %exit

exit:
  ret void
}


; Check that the unnecessary peeling occurs in the following case. The cause is
; that the analyzer determines a casted IV as a non-IV.
;
; for (unsigned int i=0; i<10000; i++)
;   a[(unsigned long)j] = 10;
;
define void @induction_undesirable_peel1(ptr noundef %a) {
; CHECK-LABEL: define void @induction_undesirable_peel1(
; CHECK-SAME: ptr noundef [[A:%.*]]) {
; CHECK-NEXT:  [[FOR_BODY_PREHEADER:.*:]]
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL_BEGIN:.*]]
; CHECK:       [[FOR_BODY_PEEL_BEGIN]]:
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL:.*]]
; CHECK:       [[FOR_BODY_PEEL]]:
; CHECK-NEXT:    [[ARRAYIDX_PEEL:%.*]] = getelementptr inbounds nuw i32, ptr [[A]], i64 0
; CHECK-NEXT:    store i32 10, ptr [[ARRAYIDX_PEEL]], align 4
; CHECK-NEXT:    [[IV_NEXT_PEEL:%.*]] = add nuw nsw i32 0, 1
; CHECK-NEXT:    [[CONV_NEXT_PEEL:%.*]] = zext i32 [[IV_NEXT_PEEL]] to i64
; CHECK-NEXT:    [[CMP_PEEL:%.*]] = icmp ugt i64 10000, [[CONV_NEXT_PEEL]]
; CHECK-NEXT:    br i1 [[CMP_PEEL]], label %[[FOR_BODY_PEEL_NEXT:.*]], label %[[FOR_COND_CLEANUP:.*]]
; CHECK:       [[FOR_BODY_PEEL_NEXT]]:
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL_NEXT1:.*]]
; CHECK:       [[FOR_BODY_PEEL_NEXT1]]:
; CHECK-NEXT:    br label %[[FOR_BODY_PREHEADER_PEEL_NEWPH:.*]]
; CHECK:       [[FOR_BODY_PREHEADER_PEEL_NEWPH]]:
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[CONV:%.*]] = phi i64 [ [[CONV_NEXT:%.*]], %[[FOR_BODY]] ], [ [[CONV_NEXT_PEEL]], %[[FOR_BODY_PREHEADER_PEEL_NEWPH]] ]
; CHECK-NEXT:    [[IV:%.*]] = phi i32 [ [[IV_NEXT:%.*]], %[[FOR_BODY]] ], [ [[IV_NEXT_PEEL]], %[[FOR_BODY_PREHEADER_PEEL_NEWPH]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i32, ptr [[A]], i64 [[CONV]]
; CHECK-NEXT:    store i32 10, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[IV_NEXT]] = add nuw nsw i32 [[IV]], 1
; CHECK-NEXT:    [[CONV_NEXT]] = zext i32 [[IV_NEXT]] to i64
; CHECK-NEXT:    [[CMP:%.*]] = icmp ugt i64 10000, [[CONV_NEXT]]
; CHECK-NEXT:    br i1 [[CMP]], label %[[FOR_BODY]], label %[[FOR_COND_CLEANUP_LOOPEXIT:.*]], !llvm.loop [[LOOP4:![0-9]+]]
; CHECK:       [[FOR_COND_CLEANUP_LOOPEXIT]]:
; CHECK-NEXT:    br label %[[FOR_COND_CLEANUP]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
for.body.preheader:
  br label %for.body

for.body:
  %conv = phi i64 [ %conv.next, %for.body ], [ 0, %for.body.preheader ]
  %iv = phi i32 [ %iv.next, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds nuw i32, ptr %a, i64 %conv
  store i32 10, ptr %arrayidx, align 4
  %iv.next = add nsw nuw i32 %iv, 1
  %conv.next = zext i32 %iv.next to i64
  %cmp = icmp ugt i64 10000, %conv.next
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:
  ret void
}

; Check that the unnecessary peeling occurs in the following case. The analyzer
; cannot detect that the difference between the initial value of %i and %j is
; equal to the increment of the %i.
;
; int j = 0;
; for (int i=1; i<N; i++) {
;   a[j] = 10;
;   j = i;
; }
;
define void @induction_undesirable_peel2(ptr noundef %a) {
; CHECK-LABEL: define void @induction_undesirable_peel2(
; CHECK-SAME: ptr noundef [[A:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL_BEGIN:.*]]
; CHECK:       [[FOR_BODY_PEEL_BEGIN]]:
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL:.*]]
; CHECK:       [[FOR_BODY_PEEL]]:
; CHECK-NEXT:    [[ARRAYIDX_PEEL:%.*]] = getelementptr inbounds nuw i32, ptr [[A]], i64 0
; CHECK-NEXT:    store i32 10, ptr [[ARRAYIDX_PEEL]], align 4
; CHECK-NEXT:    [[I_NEXT_PEEL:%.*]] = add nuw nsw i64 1, 1
; CHECK-NEXT:    [[CMP_PEEL:%.*]] = icmp slt i64 1, 10000
; CHECK-NEXT:    br i1 [[CMP_PEEL]], label %[[FOR_BODY_PEEL_NEXT:.*]], label %[[EXIT:.*]]
; CHECK:       [[FOR_BODY_PEEL_NEXT]]:
; CHECK-NEXT:    br label %[[FOR_BODY_PEEL_NEXT1:.*]]
; CHECK:       [[FOR_BODY_PEEL_NEXT1]]:
; CHECK-NEXT:    br label %[[ENTRY_PEEL_NEWPH:.*]]
; CHECK:       [[ENTRY_PEEL_NEWPH]]:
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I:%.*]] = phi i64 [ [[I_NEXT_PEEL]], %[[ENTRY_PEEL_NEWPH]] ], [ [[I_NEXT:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[J:%.*]] = phi i64 [ 1, %[[ENTRY_PEEL_NEWPH]] ], [ [[I]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i32, ptr [[A]], i64 [[J]]
; CHECK-NEXT:    store i32 10, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[I_NEXT]] = add nuw nsw i64 [[I]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp ult i64 [[I]], 10000
; CHECK-NEXT:    br i1 [[CMP]], label %[[FOR_BODY]], label %[[EXIT_LOOPEXIT:.*]], !llvm.loop [[LOOP5:![0-9]+]]
; CHECK:       [[EXIT_LOOPEXIT]]:
; CHECK-NEXT:    br label %[[EXIT]]
; CHECK:       [[EXIT]]:
; CHECK-NEXT:    ret void
;
entry:
  br label %for.body

for.body:
  %i = phi i64 [ 1, %entry ], [ %i.next, %for.body ]
  %j = phi i64 [ 0, %entry ], [ %i, %for.body ]
  %arrayidx = getelementptr inbounds nuw i32, ptr %a, i64 %j
  store i32 10, ptr %arrayidx, align 4
  %i.next = add nsw nuw i64 %i, 1
  %cmp = icmp slt i64 %i, 10000
  br i1 %cmp, label %for.body, label %exit

exit:
  ret void
}
;.
; CHECK: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]]}
; CHECK: [[META1]] = !{!"llvm.loop.peeled.count", i32 3}
; CHECK: [[LOOP2]] = distinct !{[[LOOP2]], [[META3:![0-9]+]]}
; CHECK: [[META3]] = !{!"llvm.loop.peeled.count", i32 1}
; CHECK: [[LOOP4]] = distinct !{[[LOOP4]], [[META3]]}
; CHECK: [[LOOP5]] = distinct !{[[LOOP5]], [[META3]]}
;.
