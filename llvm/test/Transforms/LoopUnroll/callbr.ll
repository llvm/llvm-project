; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -loop-unroll -S %s | FileCheck %s

; Check that the loop body containing callbr is correctly unrolled.
define dso_local void @d() {
; CHECK-LABEL: @d(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    br i1 true, label [[FOR_INC:%.*]], label [[IF_THEN:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    callbr void asm sideeffect "1: nop\0A\09.quad b, ${0:l}, $$5\0A\09", "!i,~{dirflag},~{fpsr},~{flags}"()
; CHECK-NEXT:    to label [[ASM_FALLTHROUGH:%.*]] [label %l_yes]
; CHECK:       asm.fallthrough:
; CHECK-NEXT:    br label [[L_YES:%.*]]
; CHECK:       l_yes:
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 (...) @g()
; CHECK-NEXT:    br label [[FOR_INC]]
; CHECK:       for.inc:
; CHECK-NEXT:    br i1 false, label [[FOR_INC_1:%.*]], label [[IF_THEN_1:%.*]]
; CHECK:       if.then.1:
; CHECK-NEXT:    callbr void asm sideeffect "1: nop\0A\09.quad b, ${0:l}, $$5\0A\09", "!i,~{dirflag},~{fpsr},~{flags}"()
; CHECK-NEXT:    to label [[ASM_FALLTHROUGH_1:%.*]] [label %l_yes.1]
; CHECK:       asm.fallthrough.1:
; CHECK-NEXT:    br label [[L_YES_1:%.*]]
; CHECK:       l_yes.1:
; CHECK-NEXT:    [[CALL_1:%.*]] = tail call i32 (...) @g()
; CHECK-NEXT:    br label [[FOR_INC_1]]
; CHECK:       for.inc.1:
; CHECK-NEXT:    br i1 false, label [[FOR_INC_2:%.*]], label [[IF_THEN_2:%.*]]
; CHECK:       if.then.2:
; CHECK-NEXT:    callbr void asm sideeffect "1: nop\0A\09.quad b, ${0:l}, $$5\0A\09", "!i,~{dirflag},~{fpsr},~{flags}"()
; CHECK-NEXT:    to label [[ASM_FALLTHROUGH_2:%.*]] [label %l_yes.2]
; CHECK:       asm.fallthrough.2:
; CHECK-NEXT:    br label [[L_YES_2:%.*]]
; CHECK:       l_yes.2:
; CHECK-NEXT:    [[CALL_2:%.*]] = tail call i32 (...) @g()
; CHECK-NEXT:    br label [[FOR_INC_2]]
; CHECK:       for.inc.2:
; CHECK-NEXT:    ret void
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc
  ret void

for.body:                                         ; preds = %for.inc, %entry
  %e.04 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %tobool = icmp eq i32 %e.04, 0
  br i1 %tobool, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  callbr void asm sideeffect "1: nop\0A\09.quad b, ${0:l}, $$5\0A\09", "!i,~{dirflag},~{fpsr},~{flags}"()
  to label %asm.fallthrough [label %l_yes]

asm.fallthrough:                                  ; preds = %if.then
  br label %l_yes

l_yes:                                            ; preds = %asm.fallthrough, %if.then
  %call = tail call i32 (...) @g()
  br label %for.inc

for.inc:                                          ; preds = %for.body, %l_yes
  %inc = add nuw nsw i32 %e.04, 1
  %exitcond = icmp eq i32 %inc, 3
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

declare dso_local i32 @g(...) local_unnamed_addr
