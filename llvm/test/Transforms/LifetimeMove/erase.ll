; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=lifetime-move -S | FileCheck %s

; Do not erase lifetime.start markers that are reachable from either lifetime.end markers.
define void @fn1() presplitcoroutine {
; CHECK-LABEL: define void @fn1(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[VALUE:%.*]] = alloca i64, align 8
; CHECK-NEXT:    %unused = call i8 @llvm.coro.suspend(token none, i1 false)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr nonnull [[VALUE]])
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[VALUE]], align 8
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr nonnull [[VALUE]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr nonnull [[VALUE]])
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[VALUE]], align 8
; CHECK-NEXT:    ret void
;
entry:
  %value = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %value)
  %unused = call i8 @llvm.coro.suspend(token none, i1 false)
  %0 = load ptr, ptr %value, align 8
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %value)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %value)
  %1 = load ptr, ptr %value, align 8
  ret void
}

; Do not erase lifetime markers inside a loop
define void @fn2(i1 %cond) presplitcoroutine {
; CHECK-LABEL: define void @fn2(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[VALUE:%.*]] = alloca i8, align 8
; CHECK-NEXT:    %unused1 = call i8 @llvm.coro.suspend(token none, i1 false)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr nonnull [[VALUE]])
; CHECK-NEXT:    br label %[[LOOP:.*]]
; CHECK:       [[LOOP]]:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 24, ptr nonnull [[VALUE]])
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[VALUE]], align 8
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr nonnull [[VALUE]])
; CHECK-NEXT:    br i1 %cond, label %[[LOOP]], label %[[END:.*]]
; CHECK:       [[END]]:
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 24, ptr nonnull [[VALUE]])
; CHECK-NEXT:    %unused2 = call i8 @llvm.coro.suspend(token none, i1 false)
; CHECK-NEXT:    ret void
;
entry:
  %value = alloca i8, align 8
  %unused1 = call i8 @llvm.coro.suspend(token none, i1 false)
  br label %loop

loop:
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %value)
  %0 = load i8, ptr %value, align 8
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %value)
  br i1 %cond, label %loop, label %end

end:
  %unused2 = call i8 @llvm.coro.suspend(token none, i1 false)
  ret void
}
