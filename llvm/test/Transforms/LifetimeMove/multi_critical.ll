; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; Test that we rise lifetime markers to the correct place if there are many critical points.
; RUN: opt < %s -passes=lifetime-move -S | FileCheck %s

define void @many_critical1() presplitcoroutine {
; CHECK-LABEL: define void @many_critical1(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[LARGE_ALLOCA:%.*]] = alloca [500 x i8], align 16
; CHECK-NEXT:    [[SP1:%.*]] = call i8 @llvm.coro.suspend(token none, i1 false)
; CHECK-NEXT:    [[SP2:%.*]] = call i8 @llvm.coro.suspend(token none, i1 false)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(ptr [[LARGE_ALLOCA]])
; CHECK-NEXT:    [[VALUE:%.*]] = load i8, ptr [[LARGE_ALLOCA]], align 1
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(ptr [[LARGE_ALLOCA]])
; CHECK-NEXT:    [[SP3:%.*]] = call i8 @llvm.coro.suspend(token none, i1 false)
; CHECK-NEXT:    [[SP4:%.*]] = call i8 @llvm.coro.suspend(token none, i1 false)
; CHECK-NEXT:    ret void
;
entry:
  %large.alloca = alloca [500 x i8], align 16
  call void @llvm.lifetime.start.p0(ptr %large.alloca)
  %sp1 = call i8 @llvm.coro.suspend(token none, i1 false)
  %sp2 = call i8 @llvm.coro.suspend(token none, i1 false)
  %value = load i8, ptr %large.alloca, align 1
  %sp3 = call i8 @llvm.coro.suspend(token none, i1 false)
  %sp4 = call i8 @llvm.coro.suspend(token none, i1 false)
  call void @llvm.lifetime.end.p0(ptr %large.alloca)
  ret void
}

define void @many_critical2() presplitcoroutine {
; CHECK-LABEL: define void @many_critical2(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[LARGE_ALLOCA:%.*]] = alloca [500 x i8], align 16
; CHECK-NEXT:    br label %[[LABEL1:.*]]
; CHECK:       [[LABEL1]]:
; CHECK-NEXT:    [[SP1:%.*]] = call i8 @llvm.coro.suspend(token none, i1 false)
; CHECK-NEXT:    br label %[[LABEL2:.*]]
; CHECK:       [[LABEL2]]:
; CHECK-NEXT:    [[SP2:%.*]] = call i8 @llvm.coro.suspend(token none, i1 false)
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(ptr [[LARGE_ALLOCA]])
; CHECK-NEXT:    br label %[[USE:.*]]
; CHECK:       [[USE]]:
; CHECK-NEXT:    [[VALUE:%.*]] = load i8, ptr [[LARGE_ALLOCA]], align 1
; CHECK-NEXT:    br label %[[LABEL3:.*]]
; CHECK:       [[LABEL3]]:
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(ptr [[LARGE_ALLOCA]])
; CHECK-NEXT:    [[SP3:%.*]] = call i8 @llvm.coro.suspend(token none, i1 false)
; CHECK-NEXT:    br label %[[LABEL4:.*]]
; CHECK:       [[LABEL4]]:
; CHECK-NEXT:    [[SP4:%.*]] = call i8 @llvm.coro.suspend(token none, i1 false)
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
entry:
  %large.alloca = alloca [500 x i8], align 16
  call void @llvm.lifetime.start.p0(ptr %large.alloca)
  br label %label1
label1:
  %sp1 = call i8 @llvm.coro.suspend(token none, i1 false)
  br label %label2
label2:
  %sp2 = call i8 @llvm.coro.suspend(token none, i1 false)
  br label %use
use:
  %value = load i8, ptr %large.alloca, align 1
  br label %label3
label3:
  %sp3 = call i8 @llvm.coro.suspend(token none, i1 false)
  br label %label4
label4:
  %sp4 = call i8 @llvm.coro.suspend(token none, i1 false)
  br label %end
end:
  call void @llvm.lifetime.end.p0(ptr %large.alloca)
  ret void
}
