; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=loop-vectorize -force-vector-width=1 -force-vector-interleave=4 -S %s | FileCheck %s --check-prefix=CHECK-REV-MIN-VW1-IL4
; RUN: opt -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=1 -S %s | FileCheck %s --check-prefix=CHECK-REV-MIN-VW4-IL1
; RUN: opt -passes=loop-vectorize -force-vector-width=4 -force-vector-interleave=2 -S %s | FileCheck %s --check-prefix=CHECK-REV-MIN-VW4-IL2
; RUN: opt -passes=loop-idiom-vectorize -S -mtriple=aarch64 -mattr=+sve %s | FileCheck %s --check-prefix=CHECK-LOOP-IDIOM

; This test case is extracted from rnflow (fortran) benchmark in polyhedron benchmark suite.
; The function minlst primarily takes two indices (i.e. range), scans backwards in the range
; and returns the firstIV of the minimum value.

define i32 @minlst(i32 %first_index, i32 %last_index, ptr %array) {
; CHECK-REV-MIN-VW1-IL4-LABEL: define i32 @minlst(
; CHECK-REV-MIN-VW1-IL4-SAME: i32 [[FIRST_INDEX:%.*]], i32 [[LAST_INDEX:%.*]], ptr [[ARRAY:%.*]]) {
; CHECK-REV-MIN-VW1-IL4-NEXT:  [[ENTRY:.*]]:
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[FIRST_INDEX_SEXT:%.*]] = sext i32 [[FIRST_INDEX]] to i64
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[LAST_INDEX_NEG:%.*]] = sub i32 0, [[LAST_INDEX]]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[LAST_INDEX_NEG_SEXT:%.*]] = sext i32 [[LAST_INDEX_NEG]] to i64
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[ADD:%.*]] = add nsw i64 [[FIRST_INDEX_SEXT]], [[LAST_INDEX_NEG_SEXT]]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[DIFF:%.*]] = sub nsw i64 0, [[ADD]]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[FIRST_PTR:%.*]] = getelementptr i8, ptr [[ARRAY]], i64 -8
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[SECOND_PTR:%.*]] = getelementptr i8, ptr [[ARRAY]], i64 -4
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[EARLY_EXIT_COND:%.*]] = icmp slt i64 [[ADD]], 0
; CHECK-REV-MIN-VW1-IL4-NEXT:    br i1 [[EARLY_EXIT_COND]], label %[[LOOP_PREHEADER:.*]], [[DOT_CRIT_EDGE:label %.*]]
; CHECK-REV-MIN-VW1-IL4:       [[LOOP_PREHEADER]]:
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[LAST_INDEX_SEXT:%.*]] = sext i32 [[LAST_INDEX]] to i64
; CHECK-REV-MIN-VW1-IL4-NEXT:    br label %[[LOOP:.*]]
; CHECK-REV-MIN-VW1-IL4:       [[LOOP]]:
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[IV:%.*]] = phi i64 [ [[IV_NEXT:%.*]], %[[LOOP]] ], [ [[LAST_INDEX_SEXT]], %[[LOOP_PREHEADER]] ]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[DEC_IV:%.*]] = phi i64 [ [[DEC:%.*]], %[[LOOP]] ], [ [[DIFF]], %[[LOOP_PREHEADER]] ]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[INDEX:%.*]] = phi i32 [ [[SELECT:%.*]], %[[LOOP]] ], [ [[LAST_INDEX]], %[[LOOP_PREHEADER]] ]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[IV_NEXT]] = add nsw i64 [[IV]], -1
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[LOAD1_PTR:%.*]] = getelementptr float, ptr [[FIRST_PTR]], i64 [[IV]]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[LOAD1:%.*]] = load float, ptr [[LOAD1_PTR]], align 4
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[INDEX_SEXT:%.*]] = sext i32 [[INDEX]] to i64
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[LOAD2_PTR:%.*]] = getelementptr float, ptr [[SECOND_PTR]], i64 [[INDEX_SEXT]]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[LOAD2:%.*]] = load float, ptr [[LOAD2_PTR]], align 4
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[CMP:%.*]] = fcmp contract olt float [[LOAD1]], [[LOAD2]]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[IV_NEXT_TRUNC:%.*]] = trunc nsw i64 [[IV_NEXT]] to i32
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[SELECT]] = select i1 [[CMP]], i32 [[IV_NEXT_TRUNC]], i32 [[INDEX]]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[DEC]] = add nsw i64 [[DEC_IV]], -1
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[LOOP_COND:%.*]] = icmp sgt i64 [[DEC_IV]], 1
; CHECK-REV-MIN-VW1-IL4-NEXT:    br i1 [[LOOP_COND]], label %[[LOOP]], label %[[DOT_CRIT_EDGE_LOOPEXIT:.*]]
; CHECK-REV-MIN-VW1-IL4:       [[__CRIT_EDGE_LOOPEXIT:.*:]]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[SELECT_LCSSA:%.*]] = phi i32 [ [[SELECT]], %[[LOOP]] ]
; CHECK-REV-MIN-VW1-IL4-NEXT:    br [[DOT_CRIT_EDGE]]
; CHECK-REV-MIN-VW1-IL4:       [[__CRIT_EDGE:.*:]]
; CHECK-REV-MIN-VW1-IL4-NEXT:    [[LAST_INDEX_RET:%.*]] = phi i32 [ [[LAST_INDEX]], %[[ENTRY]] ], [ [[SELECT_LCSSA]], %[[DOT_CRIT_EDGE_LOOPEXIT]] ]
; CHECK-REV-MIN-VW1-IL4-NEXT:    ret i32 [[LAST_INDEX_RET]]
;
; CHECK-REV-MIN-VW4-IL1-LABEL: define i32 @minlst(
; CHECK-REV-MIN-VW4-IL1-SAME: i32 [[FIRST_INDEX:%.*]], i32 [[LAST_INDEX:%.*]], ptr [[ARRAY:%.*]]) {
; CHECK-REV-MIN-VW4-IL1-NEXT:  [[ENTRY:.*]]:
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[FIRST_INDEX_SEXT:%.*]] = sext i32 [[FIRST_INDEX]] to i64
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[LAST_INDEX_NEG:%.*]] = sub i32 0, [[LAST_INDEX]]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[LAST_INDEX_NEG_SEXT:%.*]] = sext i32 [[LAST_INDEX_NEG]] to i64
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[ADD:%.*]] = add nsw i64 [[FIRST_INDEX_SEXT]], [[LAST_INDEX_NEG_SEXT]]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[DIFF:%.*]] = sub nsw i64 0, [[ADD]]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[FIRST_PTR:%.*]] = getelementptr i8, ptr [[ARRAY]], i64 -8
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[SECOND_PTR:%.*]] = getelementptr i8, ptr [[ARRAY]], i64 -4
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[EARLY_EXIT_COND:%.*]] = icmp slt i64 [[ADD]], 0
; CHECK-REV-MIN-VW4-IL1-NEXT:    br i1 [[EARLY_EXIT_COND]], label %[[LOOP_PREHEADER:.*]], [[DOT_CRIT_EDGE:label %.*]]
; CHECK-REV-MIN-VW4-IL1:       [[LOOP_PREHEADER]]:
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[LAST_INDEX_SEXT:%.*]] = sext i32 [[LAST_INDEX]] to i64
; CHECK-REV-MIN-VW4-IL1-NEXT:    br label %[[LOOP:.*]]
; CHECK-REV-MIN-VW4-IL1:       [[LOOP]]:
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[IV:%.*]] = phi i64 [ [[IV_NEXT:%.*]], %[[LOOP]] ], [ [[LAST_INDEX_SEXT]], %[[LOOP_PREHEADER]] ]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[DEC_IV:%.*]] = phi i64 [ [[DEC:%.*]], %[[LOOP]] ], [ [[DIFF]], %[[LOOP_PREHEADER]] ]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[INDEX:%.*]] = phi i32 [ [[SELECT:%.*]], %[[LOOP]] ], [ [[LAST_INDEX]], %[[LOOP_PREHEADER]] ]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[IV_NEXT]] = add nsw i64 [[IV]], -1
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[LOAD1_PTR:%.*]] = getelementptr float, ptr [[FIRST_PTR]], i64 [[IV]]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[LOAD1:%.*]] = load float, ptr [[LOAD1_PTR]], align 4
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[INDEX_SEXT:%.*]] = sext i32 [[INDEX]] to i64
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[LOAD2_PTR:%.*]] = getelementptr float, ptr [[SECOND_PTR]], i64 [[INDEX_SEXT]]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[LOAD2:%.*]] = load float, ptr [[LOAD2_PTR]], align 4
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[CMP:%.*]] = fcmp contract olt float [[LOAD1]], [[LOAD2]]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[IV_NEXT_TRUNC:%.*]] = trunc nsw i64 [[IV_NEXT]] to i32
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[SELECT]] = select i1 [[CMP]], i32 [[IV_NEXT_TRUNC]], i32 [[INDEX]]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[DEC]] = add nsw i64 [[DEC_IV]], -1
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[LOOP_COND:%.*]] = icmp sgt i64 [[DEC_IV]], 1
; CHECK-REV-MIN-VW4-IL1-NEXT:    br i1 [[LOOP_COND]], label %[[LOOP]], label %[[DOT_CRIT_EDGE_LOOPEXIT:.*]]
; CHECK-REV-MIN-VW4-IL1:       [[__CRIT_EDGE_LOOPEXIT:.*:]]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[SELECT_LCSSA:%.*]] = phi i32 [ [[SELECT]], %[[LOOP]] ]
; CHECK-REV-MIN-VW4-IL1-NEXT:    br [[DOT_CRIT_EDGE]]
; CHECK-REV-MIN-VW4-IL1:       [[__CRIT_EDGE:.*:]]
; CHECK-REV-MIN-VW4-IL1-NEXT:    [[LAST_INDEX_RET:%.*]] = phi i32 [ [[LAST_INDEX]], %[[ENTRY]] ], [ [[SELECT_LCSSA]], %[[DOT_CRIT_EDGE_LOOPEXIT]] ]
; CHECK-REV-MIN-VW4-IL1-NEXT:    ret i32 [[LAST_INDEX_RET]]
;
; CHECK-REV-MIN-VW4-IL2-LABEL: define i32 @minlst(
; CHECK-REV-MIN-VW4-IL2-SAME: i32 [[FIRST_INDEX:%.*]], i32 [[LAST_INDEX:%.*]], ptr [[ARRAY:%.*]]) {
; CHECK-REV-MIN-VW4-IL2-NEXT:  [[ENTRY:.*]]:
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[FIRST_INDEX_SEXT:%.*]] = sext i32 [[FIRST_INDEX]] to i64
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[LAST_INDEX_NEG:%.*]] = sub i32 0, [[LAST_INDEX]]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[LAST_INDEX_NEG_SEXT:%.*]] = sext i32 [[LAST_INDEX_NEG]] to i64
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[ADD:%.*]] = add nsw i64 [[FIRST_INDEX_SEXT]], [[LAST_INDEX_NEG_SEXT]]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[DIFF:%.*]] = sub nsw i64 0, [[ADD]]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[FIRST_PTR:%.*]] = getelementptr i8, ptr [[ARRAY]], i64 -8
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[SECOND_PTR:%.*]] = getelementptr i8, ptr [[ARRAY]], i64 -4
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[EARLY_EXIT_COND:%.*]] = icmp slt i64 [[ADD]], 0
; CHECK-REV-MIN-VW4-IL2-NEXT:    br i1 [[EARLY_EXIT_COND]], label %[[LOOP_PREHEADER:.*]], [[DOT_CRIT_EDGE:label %.*]]
; CHECK-REV-MIN-VW4-IL2:       [[LOOP_PREHEADER]]:
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[LAST_INDEX_SEXT:%.*]] = sext i32 [[LAST_INDEX]] to i64
; CHECK-REV-MIN-VW4-IL2-NEXT:    br label %[[LOOP:.*]]
; CHECK-REV-MIN-VW4-IL2:       [[LOOP]]:
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[IV:%.*]] = phi i64 [ [[IV_NEXT:%.*]], %[[LOOP]] ], [ [[LAST_INDEX_SEXT]], %[[LOOP_PREHEADER]] ]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[DEC_IV:%.*]] = phi i64 [ [[DEC:%.*]], %[[LOOP]] ], [ [[DIFF]], %[[LOOP_PREHEADER]] ]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[INDEX:%.*]] = phi i32 [ [[SELECT:%.*]], %[[LOOP]] ], [ [[LAST_INDEX]], %[[LOOP_PREHEADER]] ]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[IV_NEXT]] = add nsw i64 [[IV]], -1
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[LOAD1_PTR:%.*]] = getelementptr float, ptr [[FIRST_PTR]], i64 [[IV]]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[LOAD1:%.*]] = load float, ptr [[LOAD1_PTR]], align 4
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[INDEX_SEXT:%.*]] = sext i32 [[INDEX]] to i64
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[LOAD2_PTR:%.*]] = getelementptr float, ptr [[SECOND_PTR]], i64 [[INDEX_SEXT]]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[LOAD2:%.*]] = load float, ptr [[LOAD2_PTR]], align 4
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[CMP:%.*]] = fcmp contract olt float [[LOAD1]], [[LOAD2]]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[IV_NEXT_TRUNC:%.*]] = trunc nsw i64 [[IV_NEXT]] to i32
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[SELECT]] = select i1 [[CMP]], i32 [[IV_NEXT_TRUNC]], i32 [[INDEX]]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[DEC]] = add nsw i64 [[DEC_IV]], -1
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[LOOP_COND:%.*]] = icmp sgt i64 [[DEC_IV]], 1
; CHECK-REV-MIN-VW4-IL2-NEXT:    br i1 [[LOOP_COND]], label %[[LOOP]], label %[[DOT_CRIT_EDGE_LOOPEXIT:.*]]
; CHECK-REV-MIN-VW4-IL2:       [[__CRIT_EDGE_LOOPEXIT:.*:]]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[SELECT_LCSSA:%.*]] = phi i32 [ [[SELECT]], %[[LOOP]] ]
; CHECK-REV-MIN-VW4-IL2-NEXT:    br [[DOT_CRIT_EDGE]]
; CHECK-REV-MIN-VW4-IL2:       [[__CRIT_EDGE:.*:]]
; CHECK-REV-MIN-VW4-IL2-NEXT:    [[LAST_INDEX_RET:%.*]] = phi i32 [ [[LAST_INDEX]], %[[ENTRY]] ], [ [[SELECT_LCSSA]], %[[DOT_CRIT_EDGE_LOOPEXIT]] ]
; CHECK-REV-MIN-VW4-IL2-NEXT:    ret i32 [[LAST_INDEX_RET]]
;
; CHECK-LOOP-IDIOM-LABEL: define i32 @minlst(
; CHECK-LOOP-IDIOM-SAME: i32 [[FIRST_INDEX:%.*]], i32 [[LAST_INDEX:%.*]], ptr [[ARRAY:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-LOOP-IDIOM-NEXT:  [[ENTRY:.*]]:
; CHECK-LOOP-IDIOM-NEXT:    [[FIRST_INDEX_SEXT:%.*]] = sext i32 [[FIRST_INDEX]] to i64
; CHECK-LOOP-IDIOM-NEXT:    [[LAST_INDEX_NEG:%.*]] = sub i32 0, [[LAST_INDEX]]
; CHECK-LOOP-IDIOM-NEXT:    [[LAST_INDEX_NEG_SEXT:%.*]] = sext i32 [[LAST_INDEX_NEG]] to i64
; CHECK-LOOP-IDIOM-NEXT:    [[ADD:%.*]] = add nsw i64 [[FIRST_INDEX_SEXT]], [[LAST_INDEX_NEG_SEXT]]
; CHECK-LOOP-IDIOM-NEXT:    [[DIFF:%.*]] = sub nsw i64 0, [[ADD]]
; CHECK-LOOP-IDIOM-NEXT:    [[FIRST_PTR:%.*]] = getelementptr i8, ptr [[ARRAY]], i64 -8
; CHECK-LOOP-IDIOM-NEXT:    [[SECOND_PTR:%.*]] = getelementptr i8, ptr [[ARRAY]], i64 -4
; CHECK-LOOP-IDIOM-NEXT:    [[EARLY_EXIT_COND:%.*]] = icmp slt i64 [[ADD]], 0
; CHECK-LOOP-IDIOM-NEXT:    br i1 [[EARLY_EXIT_COND]], label %[[MINIDX_EARLY_EXIT1:.*]], [[DOT_CRIT_EDGE:label %.*]]
; CHECK-LOOP-IDIOM:       [[MINIDX_EARLY_EXIT1]]:
; CHECK-LOOP-IDIOM-NEXT:    [[LAST_INDEX_SEXT:%.*]] = sext i32 [[LAST_INDEX]] to i64
; CHECK-LOOP-IDIOM-NEXT:    [[FIRST_INDEX_CMP:%.*]] = icmp eq i64 [[FIRST_INDEX_SEXT]], [[LAST_INDEX_SEXT]]
; CHECK-LOOP-IDIOM-NEXT:    [[SECOND_INDEX_BITCAST:%.*]] = trunc i64 [[LAST_INDEX_SEXT]] to i32
; CHECK-LOOP-IDIOM-NEXT:    br i1 [[FIRST_INDEX_CMP]], label %[[DOT_CRIT_EDGE_LOOPEXIT:.*]], label %[[MINIDX_VEC_SCALAR_FORK:.*]]
; CHECK-LOOP-IDIOM:       [[LOOP:.*]]:
; CHECK-LOOP-IDIOM-NEXT:    [[IV:%.*]] = phi i64 [ [[IV_NEXT:%.*]], %[[LOOP]] ], [ [[LAST_INDEX_SEXT]], %[[MINIDX_VEC_SCALAR_FORK]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[DEC_IV:%.*]] = phi i64 [ [[DEC:%.*]], %[[LOOP]] ], [ [[DIFF]], %[[MINIDX_VEC_SCALAR_FORK]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[INDEX:%.*]] = phi i32 [ [[SELECT:%.*]], %[[LOOP]] ], [ [[LAST_INDEX]], %[[MINIDX_VEC_SCALAR_FORK]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[IV_NEXT]] = add nsw i64 [[IV]], -1
; CHECK-LOOP-IDIOM-NEXT:    [[LOAD1_PTR:%.*]] = getelementptr float, ptr [[FIRST_PTR]], i64 [[IV]]
; CHECK-LOOP-IDIOM-NEXT:    [[LOAD1:%.*]] = load float, ptr [[LOAD1_PTR]], align 4
; CHECK-LOOP-IDIOM-NEXT:    [[INDEX_SEXT:%.*]] = sext i32 [[INDEX]] to i64
; CHECK-LOOP-IDIOM-NEXT:    [[LOAD2_PTR:%.*]] = getelementptr float, ptr [[SECOND_PTR]], i64 [[INDEX_SEXT]]
; CHECK-LOOP-IDIOM-NEXT:    [[LOAD2:%.*]] = load float, ptr [[LOAD2_PTR]], align 4
; CHECK-LOOP-IDIOM-NEXT:    [[CMP:%.*]] = fcmp contract olt float [[LOAD1]], [[LOAD2]]
; CHECK-LOOP-IDIOM-NEXT:    [[IV_NEXT_TRUNC:%.*]] = trunc nsw i64 [[IV_NEXT]] to i32
; CHECK-LOOP-IDIOM-NEXT:    [[SELECT]] = select i1 [[CMP]], i32 [[IV_NEXT_TRUNC]], i32 [[INDEX]]
; CHECK-LOOP-IDIOM-NEXT:    [[DEC]] = add nsw i64 [[DEC_IV]], -1
; CHECK-LOOP-IDIOM-NEXT:    [[LOOP_COND:%.*]] = icmp sgt i64 [[DEC_IV]], 1
; CHECK-LOOP-IDIOM-NEXT:    br i1 [[LOOP_COND]], label %[[LOOP]], label %[[DOT_CRIT_EDGE_LOOPEXIT]]
; CHECK-LOOP-IDIOM:       [[__CRIT_EDGE_LOOPEXIT:.*:]]
; CHECK-LOOP-IDIOM-NEXT:    [[TMP0:%.*]] = phi i32 [ [[SELECT]], %[[LOOP]] ], [ [[MINIDX_RET_BITCAST:%.*]], %[[MINIDX_END:.*]] ], [ [[SECOND_INDEX_BITCAST]], %[[MINIDX_EARLY_EXIT1]] ]
; CHECK-LOOP-IDIOM-NEXT:    br [[DOT_CRIT_EDGE]]
; CHECK-LOOP-IDIOM:       [[__CRIT_EDGE:.*:]]
; CHECK-LOOP-IDIOM-NEXT:    [[LAST_INDEX_RET:%.*]] = phi i32 [ [[LAST_INDEX]], %[[ENTRY]] ], [ [[TMP0]], %[[DOT_CRIT_EDGE_LOOPEXIT]] ]
; CHECK-LOOP-IDIOM-NEXT:    ret i32 [[LAST_INDEX_RET]]
; CHECK-LOOP-IDIOM:       [[MINIDX_VEC_ENTRY:.*]]:
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_ENTRY_CMP:%.*]] = fcmp olt float [[MINIDX_MINVAL:%.*]], 0x7FF0000000000000
; CHECK-LOOP-IDIOM-NEXT:    br i1 [[MINIDX_ENTRY_CMP]], label %[[MINIDX_PARTIAL_1_IF:.*]], label %[[MINIDX_PARTIAL_1_PROC_EXIT:.*]]
; CHECK-LOOP-IDIOM:       [[MINIDX_VEC_SCALAR_FORK]]:
; CHECK-LOOP-IDIOM-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VLEN:%.*]] = shl i64 [[TMP1]], 2
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_NOT:%.*]] = sub i64 0, [[MINIDX_VLEN]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_AND:%.*]] = and i64 [[LAST_INDEX_SEXT]], [[MINIDX_NOT]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_UMAX:%.*]] = call i64 @llvm.smax.i64(i64 [[MINIDX_AND]], i64 [[FIRST_INDEX_SEXT]])
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_ADD:%.*]] = add i64 [[LAST_INDEX_SEXT]], 1
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_MASK:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[MINIDX_UMAX]], i64 [[MINIDX_ADD]])
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_UMAX_MINUS1:%.*]] = sub i64 [[MINIDX_UMAX]], 1
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_ADD_PTR_I:%.*]] = getelementptr inbounds float, ptr [[ARRAY]], i64 [[MINIDX_UMAX_MINUS1]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_LOADVALS:%.*]] = call <vscale x 4 x float> @llvm.masked.load.nxv4f32.p0(ptr [[MINIDX_ADD_PTR_I]], i32 1, <vscale x 4 x i1> [[MINIDX_MASK]], <vscale x 4 x float> zeroinitializer)
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_CURRENTVALS:%.*]] = select <vscale x 4 x i1> [[MINIDX_MASK]], <vscale x 4 x float> [[MINIDX_LOADVALS]], <vscale x 4 x float> splat (float 0x7FF0000000000000)
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_REVERSE:%.*]] = call <vscale x 4 x i1> @llvm.vector.reverse.nxv4i1(<vscale x 4 x i1> [[MINIDX_MASK]])
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_REVERSEVALS:%.*]] = call <vscale x 4 x float> @llvm.vector.reverse.nxv4f32(<vscale x 4 x float> [[MINIDX_CURRENTVALS]])
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_MINVAL]] = call float @llvm.vector.reduce.fminimum.nxv4f32(<vscale x 4 x float> [[MINIDX_REVERSEVALS]])
; CHECK-LOOP-IDIOM-NEXT:    br i1 true, label %[[MINIDX_VEC_ENTRY]], label %[[LOOP]]
; CHECK-LOOP-IDIOM:       [[MINIDX_PARTIAL_1_IF]]:
; CHECK-LOOP-IDIOM-NEXT:    [[MINVAL_SPLAT_SPLATINSERT:%.*]] = insertelement <vscale x 4 x float> poison, float [[MINIDX_MINVAL]], i64 0
; CHECK-LOOP-IDIOM-NEXT:    [[MINVAL_SPLAT_SPLAT:%.*]] = shufflevector <vscale x 4 x float> [[MINVAL_SPLAT_SPLATINSERT]], <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_1_CMP:%.*]] = fcmp oeq <vscale x 4 x float> [[MINIDX_REVERSEVALS]], [[MINVAL_SPLAT_SPLAT]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_1_AND:%.*]] = and <vscale x 4 x i1> [[MINIDX_REVERSE]], [[MINIDX_PARTIAL_1_CMP]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_1_CTTZ:%.*]] = call i64 @llvm.experimental.cttz.elts.i64.nxv4i1(<vscale x 4 x i1> [[MINIDX_PARTIAL_1_AND]], i1 true)
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_1_TMP:%.*]] = sub i64 [[MINIDX_VLEN]], [[MINIDX_PARTIAL_1_CTTZ]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_1_TMP_MINUS1:%.*]] = sub i64 [[MINIDX_PARTIAL_1_TMP]], 1
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_1_ADD2:%.*]] = add i64 [[MINIDX_UMAX]], [[MINIDX_PARTIAL_1_TMP_MINUS1]]
; CHECK-LOOP-IDIOM-NEXT:    br label %[[MINIDX_PARTIAL_1_PROC_EXIT]]
; CHECK-LOOP-IDIOM:       [[MINIDX_PARTIAL_1_PROC_EXIT]]:
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_1_EXIT_KNOWN_MIN:%.*]] = phi float [ [[MINIDX_MINVAL]], %[[MINIDX_PARTIAL_1_IF]] ], [ 0x7FF0000000000000, %[[MINIDX_VEC_ENTRY]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[PARTIAL1_EXIT_KNOWN_ARG:%.*]] = phi i64 [ [[MINIDX_PARTIAL_1_ADD2]], %[[MINIDX_PARTIAL_1_IF]] ], [ 0, %[[MINIDX_VEC_ENTRY]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_1_PROC_EXIT_ADD:%.*]] = add i64 [[MINIDX_VLEN]], [[FIRST_INDEX_SEXT]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_1_PROC_EXIT_ICMP:%.*]] = icmp ult i64 [[MINIDX_UMAX]], [[MINIDX_PARTIAL_1_PROC_EXIT_ADD]]
; CHECK-LOOP-IDIOM-NEXT:    br i1 [[MINIDX_PARTIAL_1_PROC_EXIT_ICMP]], label %[[MINIDX_VECT_END:.*]], label %[[MINIDX_WHILE_BODY_PH:.*]]
; CHECK-LOOP-IDIOM:       [[MINIDX_WHILE_BODY_PH]]:
; CHECK-LOOP-IDIOM-NEXT:    br label %[[MINIDX_VECT_BODY:.*]]
; CHECK-LOOP-IDIOM:       [[MINIDX_VECT_BODY]]:
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_BODY_PHI1:%.*]] = phi i64 [ [[MINIDX_UMAX]], %[[MINIDX_WHILE_BODY_PH]] ], [ [[MINIDX_VECT_BODY_SUB:%.*]], %[[MINIDX_VECT_CONTINUE:.*]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_BODY_KNOWN_ARG:%.*]] = phi i64 [ [[PARTIAL1_EXIT_KNOWN_ARG]], %[[MINIDX_WHILE_BODY_PH]] ], [ [[MINIDX_VECT_CONTINUE_KNOWN_ARG:%.*]], %[[MINIDX_VECT_CONTINUE]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_BODY_KNOWN_MIN:%.*]] = phi float [ [[MINIDX_PARTIAL_1_EXIT_KNOWN_MIN]], %[[MINIDX_WHILE_BODY_PH]] ], [ [[MINIDX_VECT_CONTINUE_KNOWN_MIN:%.*]], %[[MINIDX_VECT_CONTINUE]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_BODY_SUB]] = sub i64 [[MINIDX_VECT_BODY_PHI1]], [[MINIDX_VLEN]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_BODY_SUB_MINUS1:%.*]] = sub i64 [[MINIDX_VECT_BODY_SUB]], 1
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_BODY_GEP:%.*]] = getelementptr inbounds float, ptr [[ARRAY]], i64 [[MINIDX_VECT_BODY_SUB_MINUS1]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_BODY_UNMASKEDLOAD:%.*]] = load <vscale x 4 x float>, ptr [[MINIDX_VECT_BODY_GEP]], align 16
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_BODY_REVERSE:%.*]] = call <vscale x 4 x float> @llvm.vector.reverse.nxv4f32(<vscale x 4 x float> [[MINIDX_VECT_BODY_UNMASKEDLOAD]])
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_BODY_REDUCE:%.*]] = call float @llvm.vector.reduce.fminimum.nxv4f32(<vscale x 4 x float> [[MINIDX_VECT_BODY_REVERSE]])
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_BODY_FCMP:%.*]] = fcmp olt float [[MINIDX_VECT_BODY_REDUCE]], [[MINIDX_VECT_BODY_KNOWN_MIN]]
; CHECK-LOOP-IDIOM-NEXT:    br i1 [[MINIDX_VECT_BODY_FCMP]], label %[[MINIDX_VECT_UPDATE:.*]], label %[[MINIDX_VECT_CONTINUE]]
; CHECK-LOOP-IDIOM:       [[MINIDX_VECT_UPDATE]]:
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_UPDATE_SPLATINSERT_SPLATINSERT:%.*]] = insertelement <vscale x 4 x float> poison, float [[MINIDX_VECT_BODY_REDUCE]], i64 0
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_UPDATE_SPLATINSERT_SPLAT:%.*]] = shufflevector <vscale x 4 x float> [[MINIDX_VECT_UPDATE_SPLATINSERT_SPLATINSERT]], <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_UPDATE_FCMP:%.*]] = fcmp ueq <vscale x 4 x float> [[MINIDX_VECT_BODY_REVERSE]], [[MINIDX_VECT_UPDATE_SPLATINSERT_SPLAT]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_UPDATE_CTTZ:%.*]] = call i64 @llvm.experimental.cttz.elts.i64.nxv4i1(<vscale x 4 x i1> [[MINIDX_VECT_UPDATE_FCMP]], i1 true)
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_UPDATE_MUL:%.*]] = mul i64 [[MINIDX_VECT_UPDATE_CTTZ]], -1
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_UPDATE_ADD:%.*]] = add i64 [[MINIDX_VECT_BODY_PHI1]], [[MINIDX_VECT_UPDATE_MUL]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_BODY_ADD2:%.*]] = add i64 [[MINIDX_VECT_UPDATE_ADD]], -1
; CHECK-LOOP-IDIOM-NEXT:    br label %[[MINIDX_VECT_CONTINUE]]
; CHECK-LOOP-IDIOM:       [[MINIDX_VECT_CONTINUE]]:
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_CONTINUE_KNOWN_MIN]] = phi float [ [[MINIDX_VECT_BODY_REDUCE]], %[[MINIDX_VECT_UPDATE]] ], [ [[MINIDX_VECT_BODY_KNOWN_MIN]], %[[MINIDX_VECT_BODY]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_CONTINUE_KNOWN_ARG]] = phi i64 [ [[MINIDX_VECT_BODY_ADD2]], %[[MINIDX_VECT_UPDATE]] ], [ [[MINIDX_VECT_BODY_KNOWN_ARG]], %[[MINIDX_VECT_BODY]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_CONTINUE_ICMP:%.*]] = icmp ult i64 [[MINIDX_VECT_BODY_SUB]], [[MINIDX_PARTIAL_1_PROC_EXIT_ADD]]
; CHECK-LOOP-IDIOM-NEXT:    br i1 [[MINIDX_VECT_CONTINUE_ICMP]], label %[[MINIDX_VECT_END]], label %[[MINIDX_VECT_BODY]]
; CHECK-LOOP-IDIOM:       [[MINIDX_VECT_END]]:
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_END_KNOWN_MIN_LCSSA:%.*]] = phi float [ [[MINIDX_PARTIAL_1_EXIT_KNOWN_MIN]], %[[MINIDX_PARTIAL_1_PROC_EXIT]] ], [ [[MINIDX_VECT_CONTINUE_KNOWN_MIN]], %[[MINIDX_VECT_CONTINUE]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_END_KNOWN_ARG_LCSSA:%.*]] = phi i64 [ [[PARTIAL1_EXIT_KNOWN_ARG]], %[[MINIDX_PARTIAL_1_PROC_EXIT]] ], [ [[MINIDX_VECT_CONTINUE_KNOWN_ARG]], %[[MINIDX_VECT_CONTINUE]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_END_LCSSA:%.*]] = phi i64 [ [[MINIDX_UMAX]], %[[MINIDX_PARTIAL_1_PROC_EXIT]] ], [ [[MINIDX_VECT_BODY_SUB]], %[[MINIDX_VECT_CONTINUE]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_VECT_END_CMP:%.*]] = icmp ugt i64 [[MINIDX_VECT_END_LCSSA]], [[FIRST_INDEX_SEXT]]
; CHECK-LOOP-IDIOM-NEXT:    br i1 [[MINIDX_VECT_END_CMP]], label %[[MINIDX_PARTIAL_2_IF:.*]], label %[[MINIDX_END]]
; CHECK-LOOP-IDIOM:       [[MINIDX_PARTIAL_2_IF]]:
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_IF_ADD_ZERO:%.*]] = add i64 [[MINIDX_VECT_END_LCSSA]], 1
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_IF_MASK:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[FIRST_INDEX_SEXT]], i64 [[MINIDX_PARTIAL_2_IF_ADD_ZERO]])
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_IF_IPOS1_MINUS1:%.*]] = sub i64 [[FIRST_INDEX_SEXT]], 1
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_IF_GEP:%.*]] = getelementptr inbounds float, ptr [[ARRAY]], i64 [[MINIDX_PARTIAL_2_IF_IPOS1_MINUS1]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_IF_LOAD1:%.*]] = call <vscale x 4 x float> @llvm.masked.load.nxv4f32.p0(ptr [[MINIDX_PARTIAL_2_IF_GEP]], i32 1, <vscale x 4 x i1> [[MINIDX_PARTIAL_2_IF_MASK]], <vscale x 4 x float> zeroinitializer)
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_IF_LOAD:%.*]] = select <vscale x 4 x i1> [[MINIDX_PARTIAL_2_IF_MASK]], <vscale x 4 x float> [[MINIDX_PARTIAL_2_IF_LOAD1]], <vscale x 4 x float> splat (float 0x7FF0000000000000)
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_IF_MASK_REVERSE:%.*]] = call <vscale x 4 x i1> @llvm.vector.reverse.nxv4i1(<vscale x 4 x i1> [[MINIDX_PARTIAL_2_IF_MASK]])
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_IF_REVERSE:%.*]] = call <vscale x 4 x float> @llvm.vector.reverse.nxv4f32(<vscale x 4 x float> [[MINIDX_PARTIAL_2_IF_LOAD]])
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_IF_REDUCE:%.*]] = call float @llvm.vector.reduce.fminimum.nxv4f32(<vscale x 4 x float> [[MINIDX_PARTIAL_2_IF_REVERSE]])
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_IF_FCMP:%.*]] = fcmp olt float [[MINIDX_PARTIAL_2_IF_REDUCE]], [[MINIDX_VECT_END_KNOWN_MIN_LCSSA]]
; CHECK-LOOP-IDIOM-NEXT:    br i1 [[MINIDX_PARTIAL_2_IF_FCMP]], label %[[MINIDX_PARTIAL_2_EXIT:.*]], label %[[MINIDX_END]]
; CHECK-LOOP-IDIOM:       [[MINIDX_PARTIAL_2_EXIT]]:
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_EXIT_SPLATINSERT_SPLATINSERT:%.*]] = insertelement <vscale x 4 x float> poison, float [[MINIDX_PARTIAL_2_IF_REDUCE]], i64 0
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_EXIT_SPLATINSERT_SPLAT:%.*]] = shufflevector <vscale x 4 x float> [[MINIDX_PARTIAL_2_EXIT_SPLATINSERT_SPLATINSERT]], <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_EXIT_FCMP:%.*]] = fcmp oeq <vscale x 4 x float> [[MINIDX_PARTIAL_2_IF_REVERSE]], [[MINIDX_PARTIAL_2_EXIT_SPLATINSERT_SPLAT]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_EXIT_AND:%.*]] = and <vscale x 4 x i1> [[MINIDX_PARTIAL_2_EXIT_FCMP]], [[MINIDX_PARTIAL_2_IF_MASK_REVERSE]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_EXIT_CTTZ:%.*]] = call i64 @llvm.experimental.cttz.elts.i64.nxv4i1(<vscale x 4 x i1> [[MINIDX_PARTIAL_2_EXIT_AND]], i1 true)
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_EXIT_TMP:%.*]] = sub i64 [[MINIDX_VLEN]], [[MINIDX_PARTIAL_2_EXIT_CTTZ]]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_EXIT_TMP_MINUS1:%.*]] = sub i64 [[MINIDX_PARTIAL_2_EXIT_TMP]], 1
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_PARTIAL_2_EXIT_ADD2:%.*]] = add i64 [[FIRST_INDEX_SEXT]], [[MINIDX_PARTIAL_2_EXIT_TMP_MINUS1]]
; CHECK-LOOP-IDIOM-NEXT:    br label %[[MINIDX_END]]
; CHECK-LOOP-IDIOM:       [[MINIDX_END]]:
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_RET:%.*]] = phi i64 [ [[MINIDX_VECT_END_KNOWN_ARG_LCSSA]], %[[MINIDX_VECT_END]] ], [ [[MINIDX_PARTIAL_2_EXIT_ADD2]], %[[MINIDX_PARTIAL_2_EXIT]] ], [ [[MINIDX_VECT_END_KNOWN_ARG_LCSSA]], %[[MINIDX_PARTIAL_2_IF]] ]
; CHECK-LOOP-IDIOM-NEXT:    [[MINIDX_RET_BITCAST]] = trunc i64 [[MINIDX_RET]] to i32
; CHECK-LOOP-IDIOM-NEXT:    br label %[[DOT_CRIT_EDGE_LOOPEXIT]]
;
entry:
  %first_index_sext = sext i32 %first_index to i64
  %last_index_neg = sub i32 0, %last_index
  %last_index_neg_sext = sext i32 %last_index_neg to i64
  %add = add nsw i64 %first_index_sext, %last_index_neg_sext
  %diff = sub nsw i64 0, %add
  %first_ptr = getelementptr i8, ptr %array, i64 -8
  %second_ptr = getelementptr i8, ptr %array, i64 -4
  %early_exit_cond = icmp slt i64 %add, 0
  br i1 %early_exit_cond, label %loop.preheader, label %._crit_edge

loop.preheader:                                 ; preds = %entry
  %last_index_sext = sext i32 %last_index to i64
  br label %loop

loop:                                           ; preds = %loop.preheader, %loop
  %iv = phi i64 [%iv.next, %loop], [ %last_index_sext, %loop.preheader ]
  %dec_iv = phi i64 [ %dec, %loop ], [ %diff, %loop.preheader ]
  %index = phi i32 [ %select, %loop ], [ %last_index, %loop.preheader ]
  %iv.next = add nsw i64 %iv, -1
  %load1_ptr = getelementptr float, ptr %first_ptr, i64 %iv
  %load1 = load float, ptr %load1_ptr, align 4
  %index_sext = sext i32 %index to i64
  %load2_ptr = getelementptr float, ptr %second_ptr, i64 %index_sext
  %load2 = load float, ptr %load2_ptr, align 4
  %cmp = fcmp contract olt float %load1, %load2
  %iv.next.trunc = trunc nsw i64 %iv.next to i32
  %select = select i1 %cmp, i32 %iv.next.trunc, i32 %index
  %dec = add nsw i64 %dec_iv, -1
  %loop_cond = icmp sgt i64 %dec_iv, 1
  br i1 %loop_cond, label %loop, label %._crit_edge

._crit_edge:                                      ; preds = %loop, %entry
  %last_index_ret = phi i32 [ %select, %loop ], [ %last_index, %entry ]
  ret i32 %last_index_ret
}
