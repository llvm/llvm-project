; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --version 6
; RUN: opt -passes=loop-idiom -data-layout="p:16:16" -S %s | FileCheck %s --check-prefix=CHECK-i16
; RUN: opt -passes=loop-idiom -data-layout="p:1:8" -S %s | FileCheck %s --check-prefix=CHECK-i1

;.
; CHECK-i16: @.crctable = private constant [256 x i32] zeroinitializer
;.
define void @test_with_dl() {
; CHECK-i16-LABEL: define void @test_with_dl() {
; CHECK-i16-NEXT:  [[ENTRY:.*]]:
; CHECK-i16-NEXT:    br label %[[PH:.*]]
; CHECK-i16:       [[PH_LOOPEXIT:.*]]:
; CHECK-i16-NEXT:    [[CRC_NEXT_LCSSA:%.*]] = phi i32 [ [[CRC_NEXT3:%.*]], %[[LOOP:.*]] ]
; CHECK-i16-NEXT:    br label %[[PH]]
; CHECK-i16:       [[PH]]:
; CHECK-i16-NEXT:    [[CRC_USE:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[CRC_NEXT_LCSSA]], %[[PH_LOOPEXIT]] ]
; CHECK-i16-NEXT:    br label %[[LOOP]]
; CHECK-i16:       [[LOOP]]:
; CHECK-i16-NEXT:    [[IV:%.*]] = phi i16 [ 0, %[[PH]] ], [ [[IV_NEXT:%.*]], %[[LOOP]] ]
; CHECK-i16-NEXT:    [[CRC2:%.*]] = phi i32 [ 0, %[[PH]] ], [ [[CRC_NEXT3]], %[[LOOP]] ]
; CHECK-i16-NEXT:    [[TMP0:%.*]] = trunc i32 [[CRC2]] to i8
; CHECK-i16-NEXT:    [[INDEXER_EXT:%.*]] = zext i8 [[TMP0]] to i16
; CHECK-i16-NEXT:    [[TBL_PTRADD:%.*]] = getelementptr inbounds i32, ptr @.crctable, i16 [[INDEXER_EXT]]
; CHECK-i16-NEXT:    [[TBL_LD:%.*]] = load i32, ptr [[TBL_PTRADD]], align 4
; CHECK-i16-NEXT:    [[CRC_LE_SHIFT:%.*]] = lshr i32 [[CRC2]], 8
; CHECK-i16-NEXT:    [[CRC_NEXT3]] = xor i32 [[CRC_LE_SHIFT]], [[TBL_LD]]
; CHECK-i16-NEXT:    [[IV_NEXT]] = add i16 [[IV]], 1
; CHECK-i16-NEXT:    [[EXIT_COND1:%.*]] = icmp ne i16 [[IV]], 0
; CHECK-i16-NEXT:    br i1 [[EXIT_COND1]], label %[[LOOP]], label %[[PH_LOOPEXIT]]
;
; CHECK-i1-LABEL: define void @test_with_dl() {
; CHECK-i1-NEXT:  [[ENTRY:.*]]:
; CHECK-i1-NEXT:    br label %[[PH:.*]]
; CHECK-i1:       [[PH_LOOPEXIT:.*]]:
; CHECK-i1-NEXT:    [[CRC_NEXT_LCSSA:%.*]] = phi i32 [ [[CRC_NEXT:%.*]], %[[LOOP:.*]] ]
; CHECK-i1-NEXT:    br label %[[PH]]
; CHECK-i1:       [[PH]]:
; CHECK-i1-NEXT:    [[CRC_USE:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[CRC_NEXT_LCSSA]], %[[PH_LOOPEXIT]] ]
; CHECK-i1-NEXT:    br label %[[LOOP]]
; CHECK-i1:       [[LOOP]]:
; CHECK-i1-NEXT:    [[IV:%.*]] = phi i16 [ 0, %[[PH]] ], [ [[IV_NEXT:%.*]], %[[LOOP]] ]
; CHECK-i1-NEXT:    [[CRC:%.*]] = phi i32 [ 0, %[[PH]] ], [ [[CRC_NEXT]], %[[LOOP]] ]
; CHECK-i1-NEXT:    [[LSHR_CRC_1:%.*]] = lshr i32 [[CRC]], 1
; CHECK-i1-NEXT:    [[CRC_AND_1:%.*]] = and i32 [[CRC]], 1
; CHECK-i1-NEXT:    [[SB_CHECK:%.*]] = icmp eq i32 [[CRC_AND_1]], 0
; CHECK-i1-NEXT:    [[XOR:%.*]] = xor i32 [[LSHR_CRC_1]], 0
; CHECK-i1-NEXT:    [[CRC_NEXT]] = select i1 [[SB_CHECK]], i32 [[LSHR_CRC_1]], i32 [[XOR]]
; CHECK-i1-NEXT:    [[IV_NEXT]] = add i16 [[IV]], 1
; CHECK-i1-NEXT:    [[EXIT_COND:%.*]] = icmp ult i16 [[IV]], 7
; CHECK-i1-NEXT:    br i1 [[EXIT_COND]], label %[[LOOP]], label %[[PH_LOOPEXIT]]
;
entry:
  br label %ph

ph:
  %crc.use = phi i32 [ 0, %entry ], [ %crc.next, %loop ]
  br label %loop

loop:
  %iv = phi i16 [ 0, %ph ], [ %iv.next, %loop ]
  %crc = phi i32 [ 0, %ph ], [ %crc.next, %loop ]
  %lshr.crc.1 = lshr i32 %crc, 1
  %crc.and.1 = and i32 %crc, 1
  %sb.check = icmp eq i32 %crc.and.1, 0
  %xor = xor i32 %lshr.crc.1, 0
  %crc.next = select i1 %sb.check, i32 %lshr.crc.1, i32 %xor
  %iv.next = add i16 %iv, 1
  %exit.cond = icmp ult i16 %iv, 7
  br i1 %exit.cond, label %loop, label %ph
}
