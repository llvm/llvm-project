; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -O0 -S < %s | FileCheck %s --check-prefix=O0
; RUN: opt -O1 -S < %s | FileCheck %s
; RUN: opt -O2 -S < %s | FileCheck %s
; RUN: opt -O3 -S < %s | FileCheck %s
; RUN: opt -Os -S < %s | FileCheck %s
; RUN: opt -Oz -S < %s | FileCheck %s

target datalayout = "e-p:64:64"

; Make sure that optimizations do not lose inrange information.

@vtable = constant { [3 x ptr] } { [3 x ptr] [ptr null, ptr null, ptr null] }

define void @foo(ptr %p) {
; O0-LABEL: define void @foo(
; O0-SAME: ptr [[P:%.*]]) {
; O0-NEXT:    store ptr getelementptr inrange(-24, 0) ({ [3 x ptr], [3 x ptr] }, ptr @vtable, i32 0, i32 0, i32 3), ptr [[P]], align 8
; O0-NEXT:    ret void
;
; CHECK-LABEL: define void @foo(
; CHECK-SAME: ptr nocapture writeonly [[P:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    store ptr getelementptr inbounds inrange(-24, 0) ({ [3 x ptr] }, ptr @vtable, i64 1, i32 0, i64 0), ptr [[P]], align 8
; CHECK-NEXT:    ret void
;
  store ptr getelementptr inrange(-24, 0) ({ [3 x ptr], [3 x ptr] }, ptr @vtable, i32 0, i32 0, i32 3), ptr %p
  ret void
}
