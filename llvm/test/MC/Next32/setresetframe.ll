; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s
; RUN: llc -mtriple=next32 -filetype=obj -o - %s | llvm-objdump --triple=next32 -d - | FileCheck %s

define dso_local zeroext i8 @setresetframe8() {
; CHECK-LABEL: setresetframe8
; CHECK:    movl stack_size, 0x20
; CHECK-NEXT:    setframe sp_high, sp_low, stack_size, tid
; CHECK-NEXT:    barrier tid, stack_size
; CHECK:    resetframe sp_high, sp_low, tid
; CHECK-NEXT:    barrier tid, sp_high
  %1 = alloca [10 x i8], align 1
  %2 = alloca [10 x i8], align 1
  %3 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %3)
  %4 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %4)
  %5 = call zeroext i8 @foo8(i8* noundef nonnull %3, i8* noundef nonnull %4)
  %6 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 1
  %7 = load i8, i8* %6, align 1
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %3)
  ret i8 %7
}

declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture)

declare dso_local zeroext i8 @foo8(i8* noundef, i8* noundef)

declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture)
