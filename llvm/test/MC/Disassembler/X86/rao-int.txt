# RUN: llvm-mc --disassemble %s -triple=i686 | FileCheck %s --check-prefixes=ATT
# RUN: llvm-mc --disassemble %s -triple=i686 -x86-asm-syntax=intel --output-asm-variant=1 | FileCheck %s --check-prefixes=INTEL

# ATT:        aaddl  %ebx, 268435456(%esp,%esi,8)
# INTEL:      aadd dword ptr [esp + 8*esi + 268435456], ebx
0x0f,0x38,0xfc,0x9c,0xf4,0x00,0x00,0x00,0x10

# ATT:        aaddl  %ebx, 291(%edi,%eax,4)
# INTEL:      aadd dword ptr [edi + 4*eax + 291], ebx
0x0f,0x38,0xfc,0x9c,0x87,0x23,0x01,0x00,0x00

# ATT:        aaddl  %ebx, (%eax)
# INTEL:      aadd dword ptr [eax], ebx
0x0f,0x38,0xfc,0x18

# ATT:        aaddl  %ebx, -512(,%ebp,2)
# INTEL:      aadd dword ptr [2*ebp - 512], ebx
0x0f,0x38,0xfc,0x1c,0x6d,0x00,0xfe,0xff,0xff

# ATT:        aaddl  %ebx, 2032(%ecx)
# INTEL:      aadd dword ptr [ecx + 2032], ebx
0x0f,0x38,0xfc,0x99,0xf0,0x07,0x00,0x00

# ATT:        aaddl  %ebx, -2048(%edx)
# INTEL:      aadd dword ptr [edx - 2048], ebx
0x0f,0x38,0xfc,0x9a,0x00,0xf8,0xff,0xff

# ATT:        aandl  %ebx, 268435456(%esp,%esi,8)
# INTEL:      aand dword ptr [esp + 8*esi + 268435456], ebx
0x66,0x0f,0x38,0xfc,0x9c,0xf4,0x00,0x00,0x00,0x10

# ATT:        aandl  %ebx, 291(%edi,%eax,4)
# INTEL:      aand dword ptr [edi + 4*eax + 291], ebx
0x66,0x0f,0x38,0xfc,0x9c,0x87,0x23,0x01,0x00,0x00

# ATT:        aandl  %ebx, (%eax)
# INTEL:      aand dword ptr [eax], ebx
0x66,0x0f,0x38,0xfc,0x18

# ATT:        aandl  %ebx, -512(,%ebp,2)
# INTEL:      aand dword ptr [2*ebp - 512], ebx
0x66,0x0f,0x38,0xfc,0x1c,0x6d,0x00,0xfe,0xff,0xff

# ATT:        aandl  %ebx, 2032(%ecx)
# INTEL:      aand dword ptr [ecx + 2032], ebx
0x66,0x0f,0x38,0xfc,0x99,0xf0,0x07,0x00,0x00

# ATT:        aandl  %ebx, -2048(%edx)
# INTEL:      aand dword ptr [edx - 2048], ebx
0x66,0x0f,0x38,0xfc,0x9a,0x00,0xf8,0xff,0xff

# ATT:        aorl  %ebx, 268435456(%esp,%esi,8)
# INTEL:      aor dword ptr [esp + 8*esi + 268435456], ebx
0xf2,0x0f,0x38,0xfc,0x9c,0xf4,0x00,0x00,0x00,0x10

# ATT:        aorl  %ebx, 291(%edi,%eax,4)
# INTEL:      aor dword ptr [edi + 4*eax + 291], ebx
0xf2,0x0f,0x38,0xfc,0x9c,0x87,0x23,0x01,0x00,0x00

# ATT:        aorl  %ebx, (%eax)
# INTEL:      aor dword ptr [eax], ebx
0xf2,0x0f,0x38,0xfc,0x18

# ATT:        aorl  %ebx, -512(,%ebp,2)
# INTEL:      aor dword ptr [2*ebp - 512], ebx
0xf2,0x0f,0x38,0xfc,0x1c,0x6d,0x00,0xfe,0xff,0xff

# ATT:        aorl  %ebx, 2032(%ecx)
# INTEL:      aor dword ptr [ecx + 2032], ebx
0xf2,0x0f,0x38,0xfc,0x99,0xf0,0x07,0x00,0x00

# ATT:        aorl  %ebx, -2048(%edx)
# INTEL:      aor dword ptr [edx - 2048], ebx
0xf2,0x0f,0x38,0xfc,0x9a,0x00,0xf8,0xff,0xff

# ATT:        axorl  %ebx, 268435456(%esp,%esi,8)
# INTEL:      axor dword ptr [esp + 8*esi + 268435456], ebx
0xf3,0x0f,0x38,0xfc,0x9c,0xf4,0x00,0x00,0x00,0x10

# ATT:        axorl  %ebx, 291(%edi,%eax,4)
# INTEL:      axor dword ptr [edi + 4*eax + 291], ebx
0xf3,0x0f,0x38,0xfc,0x9c,0x87,0x23,0x01,0x00,0x00

# ATT:        axorl  %ebx, (%eax)
# INTEL:      axor dword ptr [eax], ebx
0xf3,0x0f,0x38,0xfc,0x18

# ATT:        axorl  %ebx, -512(,%ebp,2)
# INTEL:      axor dword ptr [2*ebp - 512], ebx
0xf3,0x0f,0x38,0xfc,0x1c,0x6d,0x00,0xfe,0xff,0xff

# ATT:        axorl  %ebx, 2032(%ecx)
# INTEL:      axor dword ptr [ecx + 2032], ebx
0xf3,0x0f,0x38,0xfc,0x99,0xf0,0x07,0x00,0x00

# ATT:        axorl  %ebx, -2048(%edx)
# INTEL:      axor dword ptr [edx - 2048], ebx
0xf3,0x0f,0x38,0xfc,0x9a,0x00,0xf8,0xff,0xff
