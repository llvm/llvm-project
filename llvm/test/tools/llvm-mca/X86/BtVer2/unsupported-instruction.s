# NOTE: Assertions have been autogenerated by utils/update_mca_test_checks.py
# RUN: llvm-mca -mtriple=x86_64-unknown-unknown -mcpu=btver2 -skip-unsupported-instructions=any -timeline %s 2>&1 | FileCheck --check-prefix=CHECK-SKIP %s
# RUN: llvm-mca -mtriple=x86_64-unknown-unknown -mcpu=btver2 -skip-unsupported-instructions=lack-sched -timeline %s 2>&1 | FileCheck --check-prefix=CHECK-SKIP %s
# RUN: not llvm-mca -mtriple=x86_64-unknown-unknown -mcpu=btver2 -skip-unsupported-instructions=parse-failure -timeline %s 2>&1 | FileCheck --check-prefix=CHECK-ERROR %s
# RUN: not llvm-mca -mtriple=x86_64-unknown-unknown -mcpu=btver2 %s 2>&1 | FileCheck --check-prefix=CHECK-ERROR %s

# Test checks that unsupported instructions exit with an error, unless -skip-unsupported-instructions=lack-sched is passed, in which case the remaining instructions should be analysed.
# Additionally check that -skip-unsupported-instructions=parse-failure continues to raise the lack of scheduling information.

# CHECK-ERROR: error: found an unsupported instruction in the input assembly sequence, use -skip-unsupported-instructions=lack-sched to ignore these on the input.

bzhi %eax, %ebx, %ecx

# Supported instruction that may be analysed.
add %eax, %eax

# CHECK-SKIP:      warning: found an unsupported instruction in the input assembly sequence, skipping with -skip-unsupported-instructions, note accuracy will be impacted:
# CHECK-SKIP-NEXT: note: instruction: 	bzhil	%eax, %ebx, %ecx
# CHECK-SKIP-NEXT: Iterations:        100
# CHECK-SKIP-NEXT: Instructions:      100
# CHECK-SKIP-NEXT: Total Cycles:      103
# CHECK-SKIP-NEXT: Total uOps:        100

# CHECK-SKIP:      Dispatch Width:    2
# CHECK-SKIP-NEXT: uOps Per Cycle:    0.97
# CHECK-SKIP-NEXT: IPC:               0.97
# CHECK-SKIP-NEXT: Block RThroughput: 0.5

# CHECK-SKIP:      Instruction Info:
# CHECK-SKIP-NEXT: [1]: #uOps
# CHECK-SKIP-NEXT: [2]: Latency
# CHECK-SKIP-NEXT: [3]: RThroughput
# CHECK-SKIP-NEXT: [4]: MayLoad
# CHECK-SKIP-NEXT: [5]: MayStore
# CHECK-SKIP-NEXT: [6]: HasSideEffects (U)

# CHECK-SKIP:      [1]    [2]    [3]    [4]    [5]    [6]    Instructions:
# CHECK-SKIP-NEXT:  1      1     0.50                        addl	%eax, %eax

# CHECK-SKIP:      Resources:
# CHECK-SKIP-NEXT: [0]   - JALU0
# CHECK-SKIP-NEXT: [1]   - JALU1
# CHECK-SKIP-NEXT: [2]   - JDiv
# CHECK-SKIP-NEXT: [3]   - JFPA
# CHECK-SKIP-NEXT: [4]   - JFPM
# CHECK-SKIP-NEXT: [5]   - JFPU0
# CHECK-SKIP-NEXT: [6]   - JFPU1
# CHECK-SKIP-NEXT: [7]   - JLAGU
# CHECK-SKIP-NEXT: [8]   - JMul
# CHECK-SKIP-NEXT: [9]   - JSAGU
# CHECK-SKIP-NEXT: [10]  - JSTC
# CHECK-SKIP-NEXT: [11]  - JVALU0
# CHECK-SKIP-NEXT: [12]  - JVALU1
# CHECK-SKIP-NEXT: [13]  - JVIMUL

# CHECK-SKIP:      Resource pressure per iteration:
# CHECK-SKIP-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12]   [13]
# CHECK-SKIP-NEXT: 0.50   0.50    -      -      -      -      -      -      -      -      -      -      -      -

# CHECK-SKIP:      Resource pressure by instruction:
# CHECK-SKIP-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12]   [13]   Instructions:
# CHECK-SKIP-NEXT: 0.50   0.50    -      -      -      -      -      -      -      -      -      -      -      -     addl	%eax, %eax

# CHECK-SKIP:      Timeline view:
# CHECK-SKIP-NEXT: D: Instruction dispatched
# CHECK-SKIP-NEXT: e: Instruction executing
# CHECK-SKIP-NEXT: E: Instruction executed (write-back stage)
# CHECK-SKIP-NEXT: P: Instruction waiting for data dependency
# CHECK-SKIP-NEXT: =: Instruction waiting for available HW resource
# CHECK-SKIP-NEXT: -: Instruction executed, waiting to retire in order.

# CHECK-SKIP:                          012
# CHECK-SKIP-NEXT: Index     0123456789

# CHECK-SKIP:      [0,0]     DeER .    . .   addl	%eax, %eax
# CHECK-SKIP-NEXT: [1,0]     DPeER.    . .   addl	%eax, %eax
# CHECK-SKIP-NEXT: [2,0]     .DPeER    . .   addl	%eax, %eax
# CHECK-SKIP-NEXT: [3,0]     .DPPeER   . .   addl	%eax, %eax
# CHECK-SKIP-NEXT: [4,0]     . DPPeER  . .   addl	%eax, %eax
# CHECK-SKIP-NEXT: [5,0]     . DPPPeER . .   addl	%eax, %eax
# CHECK-SKIP-NEXT: [6,0]     .  DPPPeER. .   addl	%eax, %eax
# CHECK-SKIP-NEXT: [7,0]     .  DPPPPeER .   addl	%eax, %eax
# CHECK-SKIP-NEXT: [8,0]     .   DPPPPeER.   addl	%eax, %eax
# CHECK-SKIP-NEXT: [9,0]     .   DPPPPPeER   addl	%eax, %eax

# CHECK-SKIP:      Average Wait times (based on the timeline view):
# CHECK-SKIP-NEXT: [0]: Executions
# CHECK-SKIP-NEXT: [1]: Average time spent waiting in a scheduler's queue
# CHECK-SKIP-NEXT: [2]: Average time spent waiting in a scheduler's queue while ready
# CHECK-SKIP-NEXT: [3]: Average time elapsed from WB until retire stage

# CHECK-SKIP:            [0]    [1]    [2]    [3]
# CHECK-SKIP-NEXT: 0.     10    3.5    0.1    0.0       addl	%eax, %eax
