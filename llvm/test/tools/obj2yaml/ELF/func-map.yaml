## Check how obj2yaml produces YAML .llvm_func_map descriptions.

## Check that obj2yaml uses the "Entries" tag to describe an .llvm_func_map section.

# RUN: yaml2obj --docnum=1 %s -o %t1
# RUN: obj2yaml %t1 | FileCheck %s --check-prefix=VALID

# VALID:      --- !ELF
# VALID-NEXT: FileHeader:
# VALID-NEXT:   Class: ELFCLASS64
# VALID-NEXT:   Data:  ELFDATA2LSB
# VALID-NEXT:   Type:  ET_EXEC
# VALID-NEXT: Sections:
# VALID-NEXT:   - Name: .llvm_func_map
# VALID-NEXT:     Type: SHT_LLVM_FUNC_MAP
# VALID-NEXT:     EntSize: 0x11
# VALID-NEXT:     Entries:
# VALID-NEXT:       - Version:         1
## The 'Address' field is omitted when it's zero.
# VALID-NEXT:         DynInstCnt:      16
## The 'DynInstCnt' field is omitted when it's zero.
# VALID-NEXT:       - Version:         1
# VALID-NEXT:         Address:         0x1
# VALID-NEXT:       - Version:         1
# VALID-NEXT:         Address:         0xFFFFFFFFFFFFFFF1
# VALID-NEXT:         DynInstCnt:      100001

--- !ELF
FileHeader:
  Class: ELFCLASS64
  Data:  ELFDATA2LSB
  Type:  ET_EXEC
Sections:
  - Name:   .llvm_func_map
    Type:   SHT_LLVM_FUNC_MAP
    ShSize: [[SIZE=<none>]]
    Entries:
      - Version: 1
        Address: 0x0
        DynInstCnt: 16
      - Version: 1
        Address: 0x1
        DynInstCnt: 0
      - Version: 1
        Address: 0xFFFFFFFFFFFFFFF1
        DynInstCnt: 100001

## Check obj2yaml can dump empty .llvm_func_map sections.

# RUN: yaml2obj --docnum=2 %s -o %t2
# RUN: obj2yaml %t2 | FileCheck %s --check-prefix=EMPTY

# EMPTY:      --- !ELF
# EMPTY-NEXT: FileHeader:
# EMPTY-NEXT:   Class: ELFCLASS64
# EMPTY-NEXT:   Data:  ELFDATA2LSB
# EMPTY-NEXT:   Type:  ET_EXEC
# EMPTY-NEXT: Sections:
# EMPTY-NEXT:   - Name:    .llvm_func_map
# EMPTY-NEXT:     Type:    SHT_LLVM_FUNC_MAP
# EMPTY-NOT:      Content:

--- !ELF
FileHeader:
  Class: ELFCLASS64
  Data:  ELFDATA2LSB
  Type:  ET_EXEC
Sections:
  - Name:    .llvm_func_map
    Type:    SHT_LLVM_FUNC_MAP
    Content: ""

## Check obj2yaml can dump multiple .llvm_func_map sections.

# RUN: yaml2obj --docnum=3 %s -o %t3
# RUN: obj2yaml %t3 | FileCheck %s --check-prefix=MULTI

# MULTI:      --- !ELF
# MULTI-NEXT: FileHeader:
# MULTI-NEXT:   Class: ELFCLASS64
# MULTI-NEXT:   Data:  ELFDATA2LSB
# MULTI-NEXT:   Type:  ET_EXEC
# MULTI-NEXT: Sections:
# MULTI-NEXT:   - Name: .llvm_func_map
# MULTI-NEXT:     Type: SHT_LLVM_FUNC_MAP
# MULTI-NEXT:     EntSize: 0x11
# MULTI-NEXT:     Entries:
# MULTI-NEXT:       - Version: 1
# MULTI-NEXT:         Address: 0x2
# MULTI-NEXT:         DynInstCnt: 3
# MULTI-NEXT:   - Name: '.llvm_func_map (1)'
# MULTI-NEXT:     Type: SHT_LLVM_FUNC_MAP
# MULTI-NEXT:     EntSize: 0x11
# MULTI-NEXT:     Entries:
# MULTI-NEXT:       - Version: 1
# MULTI-NEXT:         Address: 0xA
# MULTI-NEXT:         DynInstCnt: 100

--- !ELF
FileHeader:
  Class: ELFCLASS64
  Data:  ELFDATA2LSB
  Type:  ET_EXEC
Sections:
  - Name: .llvm_func_map
    Type: SHT_LLVM_FUNC_MAP
    Entries:
      - Version: 1
        Address: 0x2
        DynInstCnt: 3
  - Name: '.llvm_func_map (1)'
    Type:  SHT_LLVM_FUNC_MAP
    Entries:
      - Version: 1
        Address: 0xA
        DynInstCnt: 100

## Check that obj2yaml uses the "Content" tag to describe an .llvm_func_map section
## when it can't extract the entries, for example, when the section is truncated.

# RUN: yaml2obj --docnum=1 -DSIZE=0x8 %s -o %t4
# RUN: obj2yaml %t4 | FileCheck %s --check-prefixes=TRUNCATED,INVALID


# INVALID:           --- !ELF
# INVALID-NEXT:      FileHeader:
# INVALID-NEXT:        Class: ELFCLASS64
# INVALID-NEXT:        Data:  ELFDATA2LSB
# INVALID-NEXT:        Type:  ET_EXEC
# INVALID-NEXT:      Sections:
# INVALID-NEXT:        - Name:    .llvm_func_map
# INVALID-NEXT:          Type:    SHT_LLVM_FUNC_MAP
# INVALID-NEXT:          EntSize: 0x11
# TRUNCATED-NEXT:        Content: '{{([[:xdigit:]]{16})}}'{{$}}
