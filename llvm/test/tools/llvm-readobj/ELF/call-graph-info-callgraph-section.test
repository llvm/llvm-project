## Tests --call-graph-info prints information from call graph section.

# REQUIRES: x86-registered-target

# RUN: llvm-mc %s -filetype=obj -triple=x86_64-pc-linux -o %t
# RUN: llvm-readelf --call-graph-info %t 2>&1 | FileCheck %s -DFILE=%t --match-full-lines
# RUN: llvm-readelf --elf-output-style=LLVM --call-graph-info %t 2>&1 | FileCheck %s --match-full-lines -DFILE=%t --check-prefix=LLVM
# RUN: llvm-readelf --elf-output-style=JSON --pretty-print --call-graph-info %t 2>&1 | FileCheck %s --match-full-lines -DFILE=%t --check-prefix=JSON


# CHECK: {{.*}}llvm-readelf{{.*}}: warning: '[[FILE]]': .llvm.callgraph section has unknown type id for 1 indirect targets.
# CHECK-NEXT: Call graph section '.llvm.callgraph' contains 3 entries:
# CHECK-EMPTY:
# CHECK-NEXT:  Entry 0:
# CHECK-NEXT:    Function:          0x2
# CHECK-NEXT:    Indirect Target:   Yes
# CHECK-NEXT:    Type ID:           0x0x0
# CHECK-NEXT:    Direct Callees (1):
# CHECK-NEXT:      0x13
# CHECK-NEXT:    Indirect Callees by Type ID (0):
# CHECK-EMPTY:
# CHECK-NEXT:  Entry 1:
# CHECK-NEXT:    Function:          0x1d
# CHECK-NEXT:    Indirect Target:   Yes
# CHECK-NEXT:    Type ID:           0x0x0
# CHECK-NEXT:    Direct Callees (0):
# CHECK-NEXT:    Indirect Callees by Type ID (1):
# CHECK-NEXT:      0x0x10
# CHECK-EMPTY:
# CHECK-NEXT:  Entry 2:
# CHECK-NEXT:    Function:          0x38
# CHECK-NEXT:    Indirect Target:   Yes
# CHECK-NEXT:    Type ID:           0x0x20
# CHECK-NEXT:    Direct Callees (0):
# CHECK-NEXT:    Indirect Callees by Type ID (0):

# LLVM: {{.*}}llvm-readelf{{.*}}: warning: '[[FILE]]': .llvm.callgraph section has unknown type id for 1 indirect targets.
# LLVM: callgraph_info [
# LLVM-NEXT:   Function {
# LLVM-NEXT:     Name: foo
# LLVM-NEXT:     Address: 0x0
# LLVM-NEXT:     Version: 0
# LLVM-NEXT:     KindStr: NOT_INDIRECT
# LLVM-NEXT:     Kind: 0
# LLVM-NEXT:     NumIndirectCallSites: 0
# LLVM-NEXT:     NumDirectCallSites: 1
# LLVM-NEXT:     DirectCallees [
# LLVM-NEXT:       Entry {
# LLVM-NEXT:         Address: 0x5
# LLVM-NEXT:       }
# LLVM-NEXT:     ]
# LLVM-NEXT:   }
# LLVM-NEXT:   Function {
# LLVM-NEXT:     Name: bar
# LLVM-NEXT:     Address: 0x6
# LLVM-NEXT:     Version: 0
# LLVM-NEXT:     KindStr: UNKNOWN_TID
# LLVM-NEXT:     Kind: 1
# LLVM-NEXT:     NumIndirectCallSites: 1
# LLVM-NEXT:     IndirectCallsites [
# LLVM-NEXT:       IndirectCallsite {
# LLVM-NEXT:         Address: 0x9
# LLVM-NEXT:         TypeId: 0x10
# LLVM-NEXT:       }
# LLVM-NEXT:     ]
# LLVM-NEXT:     NumDirectCallSites: 0
# LLVM-NEXT:   }
# LLVM-NEXT:   Function {
# LLVM-NEXT:     Name: baz
# LLVM-NEXT:     Address: 0xA
# LLVM-NEXT:     Version: 0
# LLVM-NEXT:     KindStr: KNOWN_TID
# LLVM-NEXT:     Kind: 2
# LLVM-NEXT:     TypeId: 0x20
# LLVM-NEXT:     NumIndirectCallSites: 0
# LLVM-NEXT:     NumDirectCallSites: 0
# LLVM-NEXT:   }
# LLVM-NEXT: ]

# JSON: {{.*}}llvm-readelf{{.*}}: warning: '[[FILE]]': .llvm.callgraph section has unknown type id for 1 indirect targets.
# JSON:     "callgraph_info": [
# JSON-NEXT:       {
# JSON-NEXT:         "Function": {
# JSON-NEXT:           "Name": "foo",
# JSON-NEXT:           "Address": 0,
# JSON-NEXT:           "Version": 0,
# JSON-NEXT:           "KindStr": "NOT_INDIRECT",
# JSON-NEXT:           "Kind": 0,
# JSON-NEXT:           "NumIndirectCallSites": 0,
# JSON-NEXT:           "NumDirectCallSites": 1,
# JSON-NEXT:           "DirectCallees": [
# JSON-NEXT:             {
# JSON-NEXT:               "Entry": {
# JSON-NEXT:                 "Address": 5
# JSON-NEXT:               }
# JSON-NEXT:             }
# JSON-NEXT:           ]
# JSON-NEXT:         }
# JSON-NEXT:       },
# JSON-NEXT:       {
# JSON-NEXT:         "Function": {
# JSON-NEXT:           "Name": "bar",
# JSON-NEXT:           "Address": 6,
# JSON-NEXT:           "Version": 0,
# JSON-NEXT:           "KindStr": "UNKNOWN_TID",
# JSON-NEXT:           "Kind": 1,
# JSON-NEXT:           "NumIndirectCallSites": 1,
# JSON-NEXT:           "IndirectCallsites": [
# JSON-NEXT:             {
# JSON-NEXT:               "IndirectCallsite": {
# JSON-NEXT:                 "Address": 9,
# JSON-NEXT:                 "TypeId": 16
# JSON-NEXT:               }
# JSON-NEXT:             }
# JSON-NEXT:           ],
# JSON-NEXT:           "NumDirectCallSites": 0
# JSON-NEXT:         }
# JSON-NEXT:       },
# JSON-NEXT:       {
# JSON-NEXT:         "Function": {
# JSON-NEXT:           "Name": "baz",
# JSON-NEXT:           "Address": 10,
# JSON-NEXT:           "Version": 0,
# JSON-NEXT:           "KindStr": "KNOWN_TID",
# JSON-NEXT:           "Kind": 2,
# JSON-NEXT:           "TypeId": 32,
# JSON-NEXT:           "NumIndirectCallSites": 0,
# JSON-NEXT:           "NumDirectCallSites": 0
# JSON-NEXT:         }
# JSON-NEXT:       }
# JSON-NEXT:     ]


.text

.globl foo
.type foo,@function
foo:                  #< foo is at 0.
.Lfoo_begin:
 callq foo            #< direct call is at 5. target is foo (5).
 retq

.globl bar
.type bar,@function
bar:                  #< bar is at 6.
 callq	*-40(%rbp)    #< indirect call is at 9.
 retq

.globl baz
.type baz,@function
baz:                  #< baz is at 10 (a).
 retq

.globl qux
.type qux,@function
qux:                  #< qux is at 11 (b).
 retq

.section	.llvm.callgraph,"o",@llvm_call_graph_section,.text
.byte	0       #< Format version number.
.byte	3       #< Flag IsIndirectTarget true
.quad	0       #< foo()'s entry address.
.quad	0       #< TypeID: unknown.
.byte   1       #< Count of direct callees.
.quad   5       #< Direct callee foo's address>

.byte	0       #< Format version number.
.byte   5       #< Flag IsIndirectTarget true
.quad	6       #< bar()'s entry address.
.quad	0       #< TypeID: unknown.
.byte	1       #< Count of indirect target type IDs
.quad   16      #< Indirect call type id.


.byte	0       #< Format version number.
.byte   1       #< Flag IsIndirectTarget true
.quad	10      #< baz()'s entry address.
.quad   32      #< Indirect target type id.

# No call graph section entry for qux. 
# Technically its "UNKNOWN" type id but will not be printed as such by llvm-readelf.  

.text
