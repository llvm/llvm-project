## Check how yaml2obj produces .llvm_func_map sections.

# RUN: yaml2obj --docnum=1 %s -o %t1
# RUN: llvm-readobj --sections --section-data %t1 | FileCheck %s

## Case 1: Specify content.
# CHECK:      Section {
# CHECK:        Index: 1
# CHECK-NEXT:   Name: .llvm_func_map (1)
# CHECK-NEXT:   Type: SHT_LLVM_FUNC_MAP (0x6FFF4C0E)
# CHECK-NEXT:   Flags [ (0x0)
# CHECK-NEXT:   ]
# CHECK-NEXT:   Address: 0x0
# CHECK-NEXT:   Offset: 0x40
# CHECK-NEXT:   Size: 13
# CHECK-NEXT:   Link: 0
# CHECK-NEXT:   Info: 0
# CHECK-NEXT:   AddressAlignment: 0
# CHECK-NEXT:   EntrySize: 0
# CHECK-NEXT:   SectionData (
# CHECK-NEXT:     0000: 00000000 00000000 01010203 04
# CHECK-NEXT:   )
# CHECK-NEXT: }

## Case 2: Empty.
# CHECK:        Name: .llvm_func_map (1)
# CHECK:        Size:
# CHECK-SAME:   {{^ 0$}}

## Case 3: Specify Size only.
# CHECK:        Name: .llvm_func_map (1)
# CHECK:        SectionData (
# CHECK-NEXT:     0000: 00000000 00000000
# CHECK-NEXT:   )

# Case 4: Specify Entries.
# CHECK:        Name: .llvm_func_map (1)
# CHECK:        SectionData (
# CHECK-NEXT:     0000: 01222202 00000000 00100000 00000000
# CHECK-NEXT:     0010: 00
# CHECK-NEXT:   )




--- !ELF
FileHeader:
  Class: ELFCLASS64
  Data:  ELFDATA2LSB
  Type:  ET_EXEC
Sections:

## Test the following cases:

## 1) We can produce an .llvm_func_map section from a description with section
##    content.
##  Specify Content.
  - Name:    '.llvm_func_map (1)'
    Type:    SHT_LLVM_FUNC_MAP
    Content: "00000000000000000101020304"

# 2) We can produce an empty .llvm_func_map section from a description
#    with empty section content.
  - Name: '.llvm_func_map (2)'
    Type: SHT_LLVM_FUNC_MAP

## 3) We can produce a zero .llvm_func_map section of a specific size when
##    we specify the size only.
  - Name: '.llvm_func_map (3)'
    Type: SHT_LLVM_FUNC_MAP
    Size: 8

## 4) We can produce an .llvm_func_map section from a description with
##    Entries.
  - Name: '.llvm_func_map (4)'
    Type: SHT_LLVM_FUNC_MAP
    Entries:
      - Version: 1
        Address: 0x22222
        DynInstCnt: 0x10

## Check we can't use Entries at the same time as either Content or Size.
# RUN: not yaml2obj --docnum=2 -DCONTENT="00" %s 2>&1 | FileCheck %s --check-prefix=INVALID
# RUN: not yaml2obj --docnum=2 -DSIZE="0" %s 2>&1 | FileCheck %s --check-prefix=INVALID

# INVALID: error: "Entries" cannot be used with "Content" or "Size"

--- !ELF
FileHeader:
  Class: ELFCLASS64
  Data:  ELFDATA2LSB
  Type:  ET_EXEC
Sections:
##  Specify Content and Size
  - Name:    '.llvm_func_map'
    Type:    SHT_LLVM_FUNC_MAP
    Entries: []
    Content: [[CONTENT=<none>]]
    Size:    [[SIZE=<none>]]

## Check that yaml2obj generates a warning when we use unsupported versions.
# RUN: yaml2obj --docnum=3  %s 2>&1 | FileCheck %s --check-prefix=INVALID-VERSION

# INVALID-VERSION: warning: unsupported SHT_LLVM_FUNC_MAP version: 2; encoding using the most recent version

--- !ELF
FileHeader:
  Class: ELFCLASS64
  Data:  ELFDATA2LSB
  Type:  ET_EXEC
Sections:
  - Name: '.llvm_func_map'
    Type: SHT_LLVM_FUNC_MAP
    Entries:
#  Specify unsupported version
      - Version: 2
