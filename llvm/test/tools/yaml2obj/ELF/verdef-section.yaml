## Check we are able to handle SHT_GNU_verdef sections.

# RUN: yaml2obj --docnum=1 %s -o %t1
# RUN: llvm-readobj -V %t1 | FileCheck %s

# CHECK:      VersionDefinitions [
# CHECK-NEXT:   Definition {
# CHECK-NEXT:     Version: 1
# CHECK-NEXT:     Flags [ (0x1)
# CHECK-NEXT:       Base (0x1)
# CHECK-NEXT:     ]
# CHECK-NEXT:     Index: 1
# CHECK-NEXT:     Hash: 170240160
# CHECK-NEXT:     Name: dso.so.0
# CHECK-NEXT:     Predecessors: []
# CHECK-NEXT:   }
# CHECK-NEXT:   Definition {
# CHECK-NEXT:     Version: 1
# CHECK-NEXT:     Flags [ (0x2)
# CHECK-NEXT:       Weak (0x2)
# CHECK-NEXT:     ]
# CHECK-NEXT:     Index: 2
# CHECK-NEXT:     Hash: 108387921
# CHECK-NEXT:     Name: VERSION_1
# CHECK-NEXT:     Predecessors: []
# CHECK-NEXT:   }
# CHECK-NEXT:   Definition {
# CHECK-NEXT:     Version: 1
# CHECK-NEXT:     Flags [ (0x3)
# CHECK-NEXT:       Base (0x1)
# CHECK-NEXT:       Weak (0x2)
# CHECK-NEXT:     ]
# CHECK-NEXT:     Index: 3
# CHECK-NEXT:     Hash: 108387922
# CHECK-NEXT:     Name: VERSION_2
# CHECK-NEXT:     Predecessors: [VERSION_3]
# CHECK-NEXT:   }
# CHECK-NEXT: ]

--- !ELF
FileHeader:
  Class: ELFCLASS64
  Data:  ELFDATA2LSB
  Type:  ET_DYN
  Entry: 0x0000000000001000
Sections:
  - Name:            .gnu.version_d
    Type:            SHT_GNU_verdef
    Flags:           [ SHF_ALLOC ]
    Address:         0x0000000000000230
    Link:            .dynstr
    AddressAlign:    0x0000000000000004
    Info:            0x0000000000000003
    Entries:
      - Version:         1
        Flags:           1
        VersionNdx:      1
        Hash:            170240160
        Names:
          - dso.so.0
      - Version:         1
        Flags:           2
        VersionNdx:      2
        Hash:            108387921
        Names:
          - VERSION_1
      - Version:         1
        Flags:           3
        VersionNdx:      3
        Hash:            108387922
        Names:
          - VERSION_2
          - VERSION_3
DynamicSymbols:
  - Name:    foo
    Binding: STB_GLOBAL

## Check we can use "Content" to describe the content.

# RUN: yaml2obj --docnum=2 %s -o %t2
# RUN: llvm-readobj --sections --section-data %t2 | FileCheck %s --check-prefix=CONTENT

# CONTENT:      Name: .gnu.version_d
# CONTENT-NEXT: Type: SHT_GNU_verdef
# CONTENT-NEXT: Flags [ (0x2)
# CONTENT-NEXT:   SHF_ALLOC (0x2)
# CONTENT-NEXT: ]
# CONTENT-NEXT: Address: 0x0
# CONTENT-NEXT: Offset: 0x40
# CONTENT-NEXT: Size: 3
# CONTENT-NEXT: Link: 0
# CONTENT-NEXT: Info: 1
# CONTENT-NEXT: AddressAlignment:
# CONTENT-NEXT: EntrySize:
# CONTENT-NEXT: SectionData (
# CONTENT-NEXT:   0000: 112233
# CONTENT-NEXT: )

--- !ELF
FileHeader:
  Class: ELFCLASS64
  Data:  ELFDATA2LSB
  Type:  ET_DYN
Sections:
  - Name:    .gnu.version_d
    Type:    SHT_GNU_verdef
    Flags:   [ SHF_ALLOC ]
    Info:    0x0000000000000001
    Content: "112233"

## Check we can omit "Content" and "Entries" fields to produce an empty SHT_GNU_verdef section.

# RUN: yaml2obj --docnum=3 %s -o %t3
# RUN: llvm-readelf --sections %t3 | FileCheck %s --check-prefix=NO-PROPS

# NO-PROPS: [Nr] Name           Type   Address          Off    Size   ES Flg Lk Inf Al
# NO-PROPS: [ 1] .gnu.version_d VERDEF 0000000000000000 000040 000000 00   A 0   1  0

--- !ELF
FileHeader:
  Class: ELFCLASS64
  Data:  ELFDATA2LSB
  Type:  ET_DYN
Sections:
  - Name:  .gnu.version_d
    Type:  SHT_GNU_verdef
    Flags: [ SHF_ALLOC ]
    Info:  0x0000000000000001

## Check we can use the "Content" key with the "Size" key when the size is greater
## than or equal to the content size.

# RUN: not yaml2obj --docnum=4 -DSIZE=1 -DCONTENT="'0011'" %s 2>&1 | \
# RUN:   FileCheck %s --check-prefix=CONTENT-SIZE-ERR

# CONTENT-SIZE-ERR: error: Section size must be greater than or equal to the content size

--- !ELF
FileHeader:
  Class: ELFCLASS64
  Data:  ELFDATA2LSB
  Type:  ET_DYN
Sections:
  - Name:    .gnu.version_d
    Type:    SHT_GNU_verdef
    Info:    0x1
    Size:    [[SIZE=<none>]]
    Content: [[CONTENT=<none>]]
    Entries: [[ENTRIES=<none>]]

# RUN: yaml2obj --docnum=4 -DSIZE=2 -DCONTENT="'0011'" %s -o %t.cont.size.eq.o
# RUN: llvm-readobj --sections --section-data %t.cont.size.eq.o | \
# RUN:   FileCheck %s --check-prefix=CHECK-CONTENT -DDATA="0011"

# RUN: yaml2obj --docnum=4 -DSIZE=3 -DCONTENT="'0011'" %s -o %t.cont.size.gr.o
# RUN: llvm-readobj --sections --section-data %t.cont.size.gr.o | \
# RUN:   FileCheck %s --check-prefix=CHECK-CONTENT -DDATA="001100"

# CHECK-CONTENT:      Name: .gnu.version_d
# CHECK-CONTENT:      SectionData (
# CHECK-CONTENT-NEXT:   0000: [[DATA]] |
# CHECK-CONTENT-NEXT: )

## Check we can use the "Size" key alone to create the section.

# RUN: yaml2obj --docnum=4 -DSIZE=3 %s -o %t.size.o
# RUN: llvm-readobj --sections --section-data %t.size.o | \
# RUN:   FileCheck %s --check-prefix=CHECK-CONTENT -DDATA="000000"

## Check we can use the "Content" key alone to create the section.

# RUN: yaml2obj --docnum=4 -DCONTENT="'112233'" %s -o %t.content.o
# RUN: llvm-readobj --sections --section-data %t.content.o | \
# RUN:   FileCheck %s --check-prefix=CHECK-CONTENT -DDATA="112233"

## Check we can't use the "Entries" key together with the "Content" or "Size" keys.

# RUN: not yaml2obj --docnum=4 -DSIZE=0 -DENTRIES="[]" %s 2>&1 | \
# RUN:   FileCheck %s --check-prefix=ENTRIES-ERR
# RUN: not yaml2obj --docnum=4 -DCONTENT="'00'" -DENTRIES="[]" %s 2>&1 | \
# RUN:   FileCheck %s --check-prefix=ENTRIES-ERR

# ENTRIES-ERR: error: "Entries" cannot be used with "Content" or "Size"
