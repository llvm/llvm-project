Test binaries created with the following commands:

$ cat container.cpp
#include "container.h"
#include <stdlib.h>

struct Container_ivars {
  // real definition here
};

ContainerPtr allocateContainer() {
  Container *c = (Container *)malloc(sizeof(Container));
  c->ivars = (Container_ivars *)malloc(sizeof(Container_ivars));
  return c;
}

extern void doSomething(ContainerPtr);

int main() {
  ContainerPtr c = allocateContainer();
  doSomething(c);
  return 0;
}

$ cat container.h
struct Container_ivars;

struct Container {
  union {
    struct Container_ivars *ivars;
  };
};

typedef Container *ContainerPtr;

$ cat use.cpp
#include "container.h"

void doSomething(ContainerPtr c) {}


$ clang++ -O0 -g container.cpp -c -o container.o
$ clang++ -O0 -g use.cpp -c -o use.o
$ clang++ use.o container.o -o a.out

Note that the link order in the last command matters for this test.

RUN: dsymutil --linker llvm -oso-prepend-path %p/../Inputs %p/../Inputs/private/tmp/union/a.out -o %t.dSYM
RUN: llvm-dwarfdump --debug-info %t.dSYM | FileCheck %s

CHECK:       DW_TAG_compile_unit
CHECK-NEXT:    DW_AT_producer    ("llvm DWARFLinkerParallel library
CHECK-NEXT:    DW_AT_language    (DW_LANG_C_plus_plus_14)
CHECK-NEXT:    DW_AT_name        ("__artificial_type_unit")
CHECK-NEXT:    DW_AT_stmt_list   (0x00000000)

CHECK:       DW_TAG_structure_type
CHECK:         DW_AT_calling_convention        (DW_CC_pass_by_value)
CHECK:         DW_AT_name      ("Container_ivars")
CHECK-NEXT:    DW_AT_byte_size (0x01)
CHECK-NEXT:    DW_AT_decl_line (4)
CHECK-NEXT:    DW_AT_decl_file ("{{.*}}container.cpp")

CHECK:       DW_TAG_compile_unit
CHECK-NOT:   DW_AT_declaration
