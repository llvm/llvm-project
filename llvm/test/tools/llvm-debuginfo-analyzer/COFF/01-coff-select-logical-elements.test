; REQUIRES: x86-registered-target

; Test case 1 - General options

; test.cpp
;  1  using INTPTR = const int *;
;  2  int foo(INTPTR ParamPtr, unsigned ParamUnsigned, bool ParamBool) {
;  3    if (ParamBool) {
;  4      typedef int INTEGER;
;  5      const INTEGER CONSTANT = 7;
;  6      return CONSTANT;
;  7    }
;  8    return ParamUnsigned;
;  9  }

; Select logical elements.
; The following prints all 'instructions', 'symbols' and 'types' that
; contain 'inte' or 'movl' in their names or types, using a tab layout
; and given the number of matches.

; RUN: llvm-debuginfo-analyzer --attribute=level \
; RUN:                         --select-nocase --select-regex \
; RUN:                         --select=INTe --select=movl \
; RUN:                         --report=list \
; RUN:                         --print=symbols,types,instructions,summary \
; RUN:                         %p/Inputs/test-codeview-clang.o 2>&1 | \
; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s

; ONE:      Logical View:
; ONE-NEXT: [000]           {File} 'test-codeview-clang.o'
; ONE-EMPTY:
; ONE-NEXT: [001]           {CompileUnit} 'test.cpp'
; ONE-NEXT: [003]           {TypeAlias} 'INTEGER' -> 'int'
; ONE-NEXT: [004]           {Code} 'movl	$0x7, 0x1c(%rsp)'
; ONE-NEXT: [004]           {Code} 'movl	$0x7, 0x4(%rsp)'
; ONE-NEXT: [003]           {Code} 'movl	%eax, 0x1c(%rsp)'
; ONE-NEXT: [003]           {Code} 'movl	%edx, 0x14(%rsp)'
; ONE-NEXT: [003]           {Code} 'movl	0x14(%rsp), %eax'
; ONE-NEXT: [003]           {Code} 'movl	0x1c(%rsp), %eax'
; ONE-EMPTY:
; ONE-NEXT: -----------------------------
; ONE-NEXT: Element      Total    Printed
; ONE-NEXT: -----------------------------
; ONE-NEXT: Scopes           3          0
; ONE-NEXT: Symbols          4          0
; ONE-NEXT: Types            2          1
; ONE-NEXT: Lines           21          6
; ONE-NEXT: -----------------------------
; ONE-NEXT: Total           30          7

; RUN: llvm-debuginfo-analyzer --attribute=level \
; RUN:                         --select-regex --select-nocase \
; RUN:                         --select=INTe \
; RUN:                         --report=list \
; RUN:                         --print=symbols,types \
; RUN:                         %p/Inputs/test-codeview-clang.o \
; RUN:                         %p/Inputs/test-codeview-msvc.o 2>&1 | \
; RUN: FileCheck --strict-whitespace -check-prefix=TWO %s

; TWO:      Logical View:
; TWO-NEXT: [000]           {File} 'test-codeview-clang.o'
; TWO-EMPTY:
; TWO-NEXT: [001]           {CompileUnit} 'test.cpp'
; TWO-NEXT: [003]           {TypeAlias} 'INTEGER' -> 'int'
; TWO-EMPTY:
; TWO-NEXT: Logical View:
; TWO-NEXT: [000]           {File} 'test-codeview-msvc.o'
; TWO-EMPTY:
; TWO-NEXT: [001]           {CompileUnit} 'test.cpp'
; TWO-NEXT: [004]           {TypeAlias} 'INTEGER' -> 'int'

; Select logical elements by matching linkage names.
; The following prints all symbols that
; contain "?foo@@YAHPEBHI_N@Z" in their linkage names, using a tab layout
; and given the number of matches.

; RUN: llvm-debuginfo-analyzer --attribute=level \
; RUN:                         --select=?foo@@YAHPEBHI_N@Z \
; RUN:                         --report=list \
; RUN:                         --print=symbols \
; RUN:                         %p/Inputs/test-codeview-clang.o \
; RUN:                         %p/Inputs/test-codeview-msvc.o 2>&1 | \
; RUN: FileCheck --strict-whitespace -check-prefix=THREE %s

; THREE:      Logical View:
; THREE-NEXT: [000]           {File} 'test-codeview-clang.o'
; THREE-EMPTY:
; THREE-NEXT: [001]           {CompileUnit} 'test.cpp'
; THREE-NEXT: [002]           {Function} extern not_inlined 'foo' -> 'int'
; THREE-EMPTY:
; THREE:      Logical View:
; THREE-NEXT: [000]           {File} 'test-codeview-msvc.o'
; THREE-EMPTY:
; THREE-NEXT: [001]           {CompileUnit} 'test.cpp'
; THREE-NEXT: [002]           {Function} extern not_inlined 'foo' -> 'int'
