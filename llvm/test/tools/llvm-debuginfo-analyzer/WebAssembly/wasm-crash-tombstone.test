; REQUIRES: x86-registered-target

; llvm-debuginfo-analyzer crashes on dead code
; https://github.com/llvm/llvm-project/issues/136772

; For the attached reproducer:
; llvm-dwarfdump out/lzma-lzmadec.wasm --all shows:
;
; 0x000002b3:   DW_TAG_subprogram
;                 DW_AT_low_pc	(dead code)
;                 DW_AT_high_pc	(0x00000362)
;                 DW_AT_frame_base	(DW_OP_WASM_location 0x0 0x6, DW_OP_stack_value)
;
; llvm-debuginfo-analyzer out/lzma-lzmadec.wasm --print=instructions
;
; crashes and shows a stack dump.
;
; The llvm-debuginfo-analyzer crashes when producing a logical view for
; the object file generated using the following commands:

; RUN: llvm-mc -arch=wasm32 -filetype=obj       \
; RUN:         %p/Inputs/test-clang-tombstone.s \
; RUN:         -o %t.test-clang-tombstone.o

; llvm-debuginfo-analyzer --select-elements=Discarde  \
;                         --print=elements \
;                         %t.test-clang-tombstone.o 2>&1 | \
; FileCheck --strict-whitespace -check-prefix=ONE %s

; ONE: Logical View:
; ONE-NEXT:           {File} '{{.*}}test-clang-tombstone.o'
; ONE-EMPTY:
; ONE-NEXT:           {CompileUnit} 'test.cpp'
; ONE-NEXT:     2     {Function} extern not_inlined 'foo' -> 'int'

; RUN: llvm-dwarfdump --debug-info %t.test-clang-tombstone.o  | \
; RUN: FileCheck %s --check-prefix=TWO

; TWO:      DW_TAG_subprogram
; TWO-NEXT:   DW_AT_low_pc	(dead code)
; TWO-NEXT:   DW_AT_high_pc
; TWO-NEXT:   DW_AT_frame_base
; TWO-NEXT:   DW_AT_linkage_name
; TWO-NEXT:   DW_AT_name	("foo")
