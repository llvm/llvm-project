import subprocess
import re
import lit.util


def can_execute_generated_snippets(arch):
    is_host_arch = arch in config.root.host_triple
    # 'native' feature is defined as "host arch == default triple arch"
    is_native_codegen = "native" in config.available_features
    return is_host_arch and is_native_codegen


def can_use_perf_counters(mode, extra_options=[]):
    # We need libpfm to be installed and allow reading perf counters. We can
    # only know that at runtime, so we try to measure an empty code snippet
    # and bail out on error.
    llvm_exegesis_exe = lit.util.which("llvm-exegesis", config.llvm_tools_dir)
    if llvm_exegesis_exe is None:
        print("could not find llvm-exegesis")
        return False
    try:
        return_code = subprocess.call(
            [llvm_exegesis_exe, "-mode", mode, "-snippets-file", "/dev/null"]
            + extra_options,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        return return_code == 0
    except OSError:
        print("could not exec llvm-exegesis")
        return False


def can_execute_in_subprocess():
    # We need certain Linux system calls present in order to run the subprocess
    # executor mode, so check that we can use the subprocess mode to prevent
    # test failures on platforms running older kernels.
    llvm_exegesis_exe = lit.util.which("llvm-exegesis", config.llvm_tools_dir)
    if llvm_exegesis_exe is None:
        print("could not find llvm-exegesis")
        return False
    try:
        command_vector = [
            llvm_exegesis_exe,
            "-mode=latency",
            "--execution-mode=subprocess",
            "-snippets-file=/dev/null",
        ]
        with subprocess.Popen(
            command_vector, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL
        ) as exegesis_subprocess:
            stdout, stderr = exegesis_subprocess.communicate()
            exegesis_output = stdout.decode("utf-8")
            # Return true if we have an empty error section as llvm-exegesis
            # doesn't change the return code if there's a snippet crash.
            return re.search("error:\s*''", exegesis_output) is not None

    except OSError:
        print("Could not execute llvm-exegesis in subprocess executor mode")
        return False


for arch in ["aarch64", "mips", "powerpc", "x86_64"]:
    if can_execute_generated_snippets(arch):
        config.available_features.add("exegesis-can-execute-%s" % arch)

if can_use_perf_counters("latency"):
    config.available_features.add("exegesis-can-measure-latency")

if can_use_perf_counters("uops"):
    config.available_features.add("exegesis-can-measure-uops")

if can_execute_generated_snippets("x86_64"):
    # Check for support of LBR format with cycles.
    if can_use_perf_counters(
        "latency", ["-x86-lbr-sample-period", "123", "-repetition-mode", "loop"]
    ):
        config.available_features.add("exegesis-can-measure-latency-lbr")

if can_execute_in_subprocess():
    config.available_features.add("exegesis-can-execute-in-subprocess")
