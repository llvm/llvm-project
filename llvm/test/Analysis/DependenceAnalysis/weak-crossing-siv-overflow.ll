; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 6
; RUN: opt < %s -disable-output "-passes=print<da>" 2>&1 \
; RUN:     | FileCheck %s --check-prefixes=CHECK,CHECK-ALL
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=weak-crossing-siv 2>&1 \
; RUN:     | FileCheck %s --check-prefixes=CHECK,CHECK-WEAK-CROSSING-SIV

; max_i = INT64_MAX/3  // 3074457345618258602
; for (long long i = 0; i <= max_i; i++) {
;   A[-3*i + INT64_MAX] = 0;
;   if (i)
;     A[3*i - 2] = 1;
; }
;
; FIXME: DependenceAnalysis currently detects no dependency between
; `A[-3*i + INT64_MAX]` and `A[3*i - 2]`, but it does exist. For example,
;
;  memory access       | i == 1           | i == max_i
; ---------------------|------------------|------------------
;  A[-3*i + INT64_MAX] | A[INT64_MAX - 3] | A[1]
;  A[3*i - 2]          | A[1]             | A[INT64_MAX - 3]
;
; The root cause is that the calculation of the differenct between the two
; constants (INT64_MAX and -2) triggers an overflow.

define void @weakcorssing_delta_ovfl(ptr %A) {
; CHECK-ALL-LABEL: 'weakcorssing_delta_ovfl'
; CHECK-ALL-NEXT:  Src: store i8 0, ptr %idx.0, align 1 --> Dst: store i8 0, ptr %idx.0, align 1
; CHECK-ALL-NEXT:    da analyze - none!
; CHECK-ALL-NEXT:  Src: store i8 0, ptr %idx.0, align 1 --> Dst: store i8 1, ptr %idx.1, align 1
; CHECK-ALL-NEXT:    da analyze - none!
; CHECK-ALL-NEXT:  Src: store i8 1, ptr %idx.1, align 1 --> Dst: store i8 1, ptr %idx.1, align 1
; CHECK-ALL-NEXT:    da analyze - none!
;
; CHECK-WEAK-CROSSING-SIV-LABEL: 'weakcorssing_delta_ovfl'
; CHECK-WEAK-CROSSING-SIV-NEXT:  Src: store i8 0, ptr %idx.0, align 1 --> Dst: store i8 0, ptr %idx.0, align 1
; CHECK-WEAK-CROSSING-SIV-NEXT:    da analyze - consistent output [*]!
; CHECK-WEAK-CROSSING-SIV-NEXT:  Src: store i8 0, ptr %idx.0, align 1 --> Dst: store i8 1, ptr %idx.1, align 1
; CHECK-WEAK-CROSSING-SIV-NEXT:    da analyze - none!
; CHECK-WEAK-CROSSING-SIV-NEXT:  Src: store i8 1, ptr %idx.1, align 1 --> Dst: store i8 1, ptr %idx.1, align 1
; CHECK-WEAK-CROSSING-SIV-NEXT:    da analyze - consistent output [*]!
;
entry:
  br label %loop.header

loop.header:
  %i = phi i64 [ 0, %entry ], [ %i.inc, %loop.latch ]
  %subscript.0 = phi i64 [ 9223372036854775807, %entry ], [ %subscript.0.next, %loop.latch ]
  %subscript.1 = phi i64 [ -2, %entry ], [ %subscript.1.next, %loop.latch ]
  %idx.0 = getelementptr inbounds i8, ptr %A, i64 %subscript.0
  store i8 0, ptr %idx.0
  %cond.store = icmp ne i64 %i, 0
  br i1 %cond.store, label %if.store, label %loop.latch

if.store:
  %idx.1 = getelementptr inbounds i8, ptr %A, i64 %subscript.1
  store i8 1, ptr %idx.1
  br label %loop.latch

loop.latch:
  %i.inc = add nuw nsw i64 %i, 1
  %subscript.0.next = add nsw i64 %subscript.0, -3
  %subscript.1.next = add nsw i64 %subscript.1, 3
  %ec = icmp sgt i64 %i.inc, 3074457345618258602
  br i1 %ec, label %exit, label %loop.header

exit:
  ret void
}

; max_i = INT64_MAX/3  // 3074457345618258602
; for (long long i = 0; i <= max_i; i++) {
;   A[-3*i + INT64_MAX] = 0;
;   A[3*i + 1] = 1;
; }
;
; FIXME: DependenceAnalysis currently detects no dependency between
; `A[-3*i + INT64_MAX]` and `A[3*i - 2]`, but it does exist. For example,
;
;  memory access       | i == 0 | i == 1           | i == max_i - 1 | i == max_i
; ---------------------|--------|------------------|----------------|------------------
;  A[-3*i + INT64_MAX] |        | A[INT64_MAX - 3] | A[1]           |
;  A[3*i + 1]          | A[1]   |                  |                | A[INT64_MAX - 3]
;
; The root cause is that the product of the BTC, the coefficient, and 2
; triggers an overflow.
;
define void @weakcorssing_prod_ovfl(ptr %A) {
; CHECK-ALL-LABEL: 'weakcorssing_prod_ovfl'
; CHECK-ALL-NEXT:  Src: store i8 0, ptr %idx.0, align 1 --> Dst: store i8 0, ptr %idx.0, align 1
; CHECK-ALL-NEXT:    da analyze - none!
; CHECK-ALL-NEXT:  Src: store i8 0, ptr %idx.0, align 1 --> Dst: store i8 1, ptr %idx.1, align 1
; CHECK-ALL-NEXT:    da analyze - none!
; CHECK-ALL-NEXT:  Src: store i8 1, ptr %idx.1, align 1 --> Dst: store i8 1, ptr %idx.1, align 1
; CHECK-ALL-NEXT:    da analyze - none!
;
; CHECK-WEAK-CROSSING-SIV-LABEL: 'weakcorssing_prod_ovfl'
; CHECK-WEAK-CROSSING-SIV-NEXT:  Src: store i8 0, ptr %idx.0, align 1 --> Dst: store i8 0, ptr %idx.0, align 1
; CHECK-WEAK-CROSSING-SIV-NEXT:    da analyze - consistent output [*]!
; CHECK-WEAK-CROSSING-SIV-NEXT:  Src: store i8 0, ptr %idx.0, align 1 --> Dst: store i8 1, ptr %idx.1, align 1
; CHECK-WEAK-CROSSING-SIV-NEXT:    da analyze - none!
; CHECK-WEAK-CROSSING-SIV-NEXT:  Src: store i8 1, ptr %idx.1, align 1 --> Dst: store i8 1, ptr %idx.1, align 1
; CHECK-WEAK-CROSSING-SIV-NEXT:    da analyze - consistent output [*]!
;
entry:
  br label %loop

loop:
  %i = phi i64 [ 0, %entry ], [ %i.inc, %loop ]
  %subscript.0 = phi i64 [ 9223372036854775807, %entry ], [ %subscript.0.next, %loop ]
  %subscript.1 = phi i64 [ 1, %entry ], [ %subscript.1.next, %loop ]
  %idx.0 = getelementptr inbounds i8, ptr %A, i64 %subscript.0
  %idx.1 = getelementptr inbounds i8, ptr %A, i64 %subscript.1
  store i8 0, ptr %idx.0
  store i8 1, ptr %idx.1
  %i.inc = add nuw nsw i64 %i, 1
  %subscript.0.next = add nsw i64 %subscript.0, -3
  %subscript.1.next = add nsw i64 %subscript.1, 3
  %ec = icmp sgt i64 %i.inc, 3074457345618258602
  br i1 %ec, label %exit, label %loop

exit:
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
