; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 6
; RUN: opt < %s -disable-output "-passes=print<da>" 2>&1 \
; RUN:     | FileCheck %s --check-prefixes=CHECK,CHECK-ALL
; RUN: opt < %s -disable-output "-passes=print<da>" -da-enable-dependence-test=gcd-miv 2>&1 \
; RUN:     | FileCheck %s --check-prefixes=CHECK,CHECK-GCD-MIV

; offset0 = 4;
; offset1 = 0;
; for (i = 0; i < 100; i++) {
;   A[offset0] = 1;
;   A[offset1] = 2;
;   offset0 += 3*m;
;   offset1 += 3;
; }
;
; FIXME: DependenceAnalysis currently detects no dependency between the two
; stores, but it does exist. E.g., consider `m` is 12297829382473034411, which
; is a modular multiplicative inverse of 3 under modulo 2^64. Then `offset0` is
; effectively `i + 4`, so accesses will be as follows:
;
;   - A[offset0] : A[4], A[5], A[6], ...
;   - A[offset1] : A[0], A[3], A[6], ...
;
; The root cause is that DA interprets `3*m` in non-modular arithmetic, which
; isn't necessarily true due to overflow.
;
define void @gcdmiv_coef_ovfl(ptr %A, i64 %m) {
; CHECK-ALL-LABEL: 'gcdmiv_coef_ovfl'
; CHECK-ALL-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 1, ptr %gep.0, align 1
; CHECK-ALL-NEXT:    da analyze - none!
; CHECK-ALL-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-ALL-NEXT:    da analyze - none!
; CHECK-ALL-NEXT:  Src: store i8 2, ptr %gep.1, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-ALL-NEXT:    da analyze - none!
;
; CHECK-GCD-MIV-LABEL: 'gcdmiv_coef_ovfl'
; CHECK-GCD-MIV-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 1, ptr %gep.0, align 1
; CHECK-GCD-MIV-NEXT:    da analyze - consistent output [*]!
; CHECK-GCD-MIV-NEXT:  Src: store i8 1, ptr %gep.0, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-GCD-MIV-NEXT:    da analyze - none!
; CHECK-GCD-MIV-NEXT:  Src: store i8 2, ptr %gep.1, align 1 --> Dst: store i8 2, ptr %gep.1, align 1
; CHECK-GCD-MIV-NEXT:    da analyze - consistent output [*]!
;
entry:
  %step = mul i64 3, %m
  br label %loop

loop:
  %i = phi i64 [ 0, %entry ], [ %i.inc, %loop ]
  %offset.0 = phi i64 [ 4, %entry ] , [ %offset.0.next, %loop ]
  %offset.1 = phi i64 [ 0, %entry ] , [ %offset.1.next, %loop ]
  %gep.0 = getelementptr inbounds i8, ptr %A, i64 %offset.0
  %gep.1 = getelementptr inbounds i8, ptr %A, i64 %offset.1
  store i8 1, ptr %gep.0
  store i8 2, ptr %gep.1
  %i.inc = add nuw nsw i64 %i, 1
  %offset.0.next = add nsw i64 %offset.0, %step
  %offset.1.next = add nsw i64 %offset.1, 3
  %ec = icmp eq i64 %i.inc, 100
  br i1 %ec, label %exit, label %loop

exit:
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
