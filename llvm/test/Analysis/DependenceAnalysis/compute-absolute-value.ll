; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 6
; RUN: opt < %s -disable-output "-passes=print<da>" 2>&1 | FileCheck %s

; for (i = 0; i < 3; i++) {
;     a[-k * i] = 1;
;     a[-k * i + (2 * k + 1)] = 2;
; }
;
; When k = -1, dependency exists between the two stores. Accesses will be:
;
;   - a[-k * i]               : a[ 0], a[-1], a[-2]
;   - a[-k * i + (2 * k + 1)] : a[-1], a[-2], a[-3]
;
; We cannot determine the sign of `k` and `2*k + 1` at compile time,
;
define void @unknown_sign(ptr %a, i64 %k) {
; CHECK-LABEL: 'unknown_sign'
; CHECK-NEXT:  Src: store i8 1, ptr %idx.0, align 1 --> Dst: store i8 1, ptr %idx.0, align 1
; CHECK-NEXT:    da analyze - none!
; CHECK-NEXT:  Src: store i8 1, ptr %idx.0, align 1 --> Dst: store i8 2, ptr %idx.1, align 1
; CHECK-NEXT:    da analyze - output [*|<]!
; CHECK-NEXT:  Src: store i8 2, ptr %idx.1, align 1 --> Dst: store i8 2, ptr %idx.1, align 1
; CHECK-NEXT:    da analyze - none!
;
entry:
  %k.neg = sub nsw i64 0, %k
  %kk = mul nsw i64 %k, 2
  %subscript.1.init = add i64 1, %kk
  br label %loop

loop:
  %i = phi i64 [ 0, %entry ], [ %i.next, %loop ]
  %subscript.0 = phi i64 [ 0, %entry ], [ %subscript.0.next, %loop ]
  %subscript.1 = phi i64 [ %subscript.1.init, %entry ], [ %subscript.1.next, %loop ]
  %idx.0 = getelementptr i8, ptr %a, i64 %subscript.0
  %idx.1 = getelementptr i8, ptr %a, i64 %subscript.1
  store i8 1, ptr %idx.0
  store i8 2, ptr %idx.1
  %i.next = add i64 %i, 1
  %subscript.0.next = add nsw i64 %subscript.0, %k.neg
  %subscript.1.next = add nsw i64 %subscript.1, %k.neg
  %cond.exit = icmp eq i64 %i.next, 3
  br i1 %cond.exit, label %exit, label %loop

exit:
  ret void
}

