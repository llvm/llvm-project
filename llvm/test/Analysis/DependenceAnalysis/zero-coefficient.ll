; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -disable-output "-passes=print<da>" 2>&1 | FileCheck %s

; Test case for GitHub issue #149991: Strong SIV test with symbolic coefficient
; that could be zero. Fixed using runtime assumptions: assume coefficient != 0.

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"

define void @test_zero_coefficient(ptr %a, i64 %k) {
; CHECK-LABEL: 'test_zero_coefficient'
; CHECK-NEXT:  Src: store i8 42, ptr %idx, align 1 --> Dst: store i8 42, ptr %idx, align 1
; CHECK-NEXT:    da analyze - none!
; CHECK-NEXT:  Runtime Assumptions:
; CHECK-NEXT:  Compare predicate: %k ne) 0
;
entry:
  br label %loop

loop:
  %i = phi i64 [ 0, %entry ], [ %i.next, %loop ]
  %subscript = mul i64 %i, %k  ; When %k=0, all iterations access %a[0]
  %idx = getelementptr i8, ptr %a, i64 %subscript
  store i8 42, ptr %idx
  %i.next = add i64 %i, 1
  %cond.exit = icmp eq i64 %i.next, 100
  br i1 %cond.exit, label %exit, label %loop

exit:
  ret void
}
