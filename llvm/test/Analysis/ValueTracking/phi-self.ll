; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=instsimplify < %s | FileCheck %s

; Test `%r` can be replaced by `%nonpoison`.

define i32 @other_noundef() {
; CHECK-LABEL: define i32 @other_noundef() {
; CHECK-NEXT:  [[START:.*]]:
; CHECK-NEXT:    br label %[[LOOP:.*]]
; CHECK:       [[LOOP]]:
; CHECK-NEXT:    [[NONPOISON:%.*]] = phi i32 [ 0, %[[START]] ], [ [[NONPOISON]], %[[BB0:.*]] ], [ 1, %[[BB1:.*]] ]
; CHECK-NEXT:    [[I:%.*]] = call i32 @opaque()
; CHECK-NEXT:    switch i32 [[I]], label %[[EXIT0:.*]] [
; CHECK-NEXT:      i32 0, label %[[BB0]]
; CHECK-NEXT:      i32 1, label %[[BB1]]
; CHECK-NEXT:      i32 2, label %[[EXIT1:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[EXIT0]]:
; CHECK-NEXT:    br label %[[EXIT1]]
; CHECK:       [[EXIT1]]:
; CHECK-NEXT:    ret i32 [[NONPOISON]]
; CHECK:       [[BB0]]:
; CHECK-NEXT:    br label %[[LOOP]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    br label %[[LOOP]]
;
start:
  br label %loop

loop:                                             ; preds = %bb1, %bb0, %start
  %nonpoison = phi i32 [ 0, %start ], [ %nonpoison, %bb0 ], [ 1, %bb1 ]
  %i = call i32 @opaque()
  switch i32 %i, label %exit0 [
  i32 0, label %bb0
  i32 1, label %bb1
  i32 2, label %exit1
  ]

exit0:                                            ; preds = %loop
  br label %exit1

exit1:                                            ; preds = %exit0, %loop
  %r = phi i32 [ %nonpoison, %loop ], [ undef, %exit0 ]
  ret i32 %r

bb0:                                              ; preds = %loop
  br label %loop

bb1:                                              ; preds = %loop
  br label %loop
}

define i32 @other_poison() {
; CHECK-LABEL: define i32 @other_poison() {
; CHECK-NEXT:  [[START:.*:]]
; CHECK-NEXT:    br label %[[LOOP:.*]]
; CHECK:       [[LOOP]]:
; CHECK-NEXT:    [[I:%.*]] = call i32 @opaque()
; CHECK-NEXT:    switch i32 [[I]], label %[[EXIT0:.*]] [
; CHECK-NEXT:      i32 0, label %[[BB0:.*]]
; CHECK-NEXT:      i32 1, label %[[BB1:.*]]
; CHECK-NEXT:      i32 2, label %[[EXIT1:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[EXIT0]]:
; CHECK-NEXT:    br label %[[EXIT1]]
; CHECK:       [[EXIT1]]:
; CHECK-NEXT:    ret i32 0
; CHECK:       [[BB0]]:
; CHECK-NEXT:    br label %[[LOOP]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    br label %[[LOOP]]
;
start:
  br label %loop

loop:                                             ; preds = %bb1, %bb0, %start
  %maypoison = phi i32 [ 0, %start ], [ %maypoison, %bb0 ], [ poison, %bb1 ]
  %i = call i32 @opaque()
  switch i32 %i, label %exit0 [
  i32 0, label %bb0
  i32 1, label %bb1
  i32 2, label %exit1
  ]

exit0:                                            ; preds = %loop
  br label %exit1

exit1:                                            ; preds = %exit0, %loop
  %r = phi i32 [ %maypoison, %loop ], [ undef, %exit0 ]
  ret i32 %r

bb0:                                              ; preds = %loop
  br label %loop

bb1:                                              ; preds = %loop
  br label %loop
}

declare i32 @opaque()
