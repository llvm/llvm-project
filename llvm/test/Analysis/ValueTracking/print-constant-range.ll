; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 5
; RUN: opt -disable-output '-passes=print<constant-range>' < %s -S 2>&1 | FileCheck %s

define i1 @shl_C_X_ugt(i8 %x) {
; CHECK-LABEL: 'shl_C_X_ugt'
; CHECK-NEXT:    %shl = shl i8 7, %x: [1,-31)
; CHECK-NEXT:    %r = icmp ugt i8 %shl, -32: full-set
;
  %shl = shl i8 7, %x
  %r = icmp ugt i8 %shl, 224
  ret i1 %r
}

define i1 @shl_C_X_ugt2(i8 %x) {
; CHECK-LABEL: 'shl_C_X_ugt2'
; CHECK-NEXT:    %shl = shl i8 5, %x: [1,-63)
; CHECK-NEXT:    %r = icmp ugt i8 %shl, -64: full-set
;
  %shl = shl i8 5, %x
  %r = icmp ugt i8 %shl, 192
  ret i1 %r
}

define i1 @shl_C_X_ugt_fail(i8 %x) {
; CHECK-LABEL: 'shl_C_X_ugt_fail'
; CHECK-NEXT:    %shl = shl i8 1, %x: [1,-127)
; CHECK-NEXT:    %r = icmp ugt i8 %shl, 127: full-set
;
  %shl = shl i8 1, %x
  %r = icmp ugt i8 %shl, 127
  ret i1 %r
}

define i1 @shl_C_X_ugt_fail2(i8 %x) {
; CHECK-LABEL: 'shl_C_X_ugt_fail2'
; CHECK-NEXT:    %shl = shl i8 3, %x: [1,-63)
; CHECK-NEXT:    %r = icmp ugt i8 %shl, -66: full-set
;
  %shl = shl i8 3, %x
  %r = icmp ugt i8 %shl, 190
  ret i1 %r
}

define i1 @shl_C_X_ugt_fail3(i8 %x) {
; CHECK-LABEL: 'shl_C_X_ugt_fail3'
; CHECK-NEXT:    %shl = shl i8 -1, %x: [1,0)
; CHECK-NEXT:    %r = icmp ugt i8 %shl, -2: full-set
;
  %shl = shl i8 -1, %x
  %r = icmp ugt i8 %shl, 254
  ret i1 %r
}

define i1 @shl_C_X_ugt_todo(i8 %x) {
; CHECK-LABEL: 'shl_C_X_ugt_todo'
; CHECK-NEXT:    %shl = shl i8 -127, %x: [1,-63)
; CHECK-NEXT:    %r = icmp ugt i8 %shl, -116: full-set
;
  %shl = shl i8 129, %x
  %r = icmp ugt i8 %shl, 140
  ret i1 %r
}

define i1 @shl_X_C_ugt(i8 %x) {
; CHECK-LABEL: 'shl_X_C_ugt'
; CHECK-NEXT:    %shl = shl i8 %x, 6: [0,-63)
; CHECK-NEXT:    %r = icmp ugt i8 %shl, -64: full-set
;
  %shl = shl i8 %x, 6
  %r = icmp ugt i8 %shl, 192
  ret i1 %r
}

define i1 @shl_X_C_ugt_fail(i8 %x) {
; CHECK-LABEL: 'shl_X_C_ugt_fail'
; CHECK-NEXT:    %shl = shl i8 %x, 6: [0,-63)
; CHECK-NEXT:    %r = icmp ugt i8 %shl, -65: full-set
;
  %shl = shl i8 %x, 6
  %r = icmp ugt i8 %shl, 191
  ret i1 %r
}

define i1 @shl_X_C_ugt_fail2(i8 %x) {
; CHECK-LABEL: 'shl_X_C_ugt_fail2'
; CHECK-NEXT:    %shl = shl i8 %x, 5: [0,-31)
; CHECK-NEXT:    %r = icmp ugt i8 %shl, -64: full-set
;
  %shl = shl i8 %x, 5
  %r = icmp ugt i8 %shl, 192
  ret i1 %r
}

define i1 @and_ugt(i8 %xx) {
; CHECK-LABEL: 'and_ugt'
; CHECK-NEXT:    %x = mul i8 %xx, %xx: full-set
; CHECK-NEXT:    %negx = sub i8 0, %x: full-set
; CHECK-NEXT:    %x_p2 = and i8 %negx, %x: [0,-127)
; CHECK-NEXT:    %r = icmp ugt i8 %x_p2, -128: full-set
;
  %x = mul i8 %xx, %xx  ; thwart complexity-based canonicalization
  %negx = sub i8 0, %x
  %x_p2 = and i8 %negx, %x
  %r = icmp ugt i8 %x_p2, 128
  ret i1 %r
}

define i1 @and_ugt2(i8 %xx) {
; CHECK-LABEL: 'and_ugt2'
; CHECK-NEXT:    %x = mul i8 %xx, %xx: full-set
; CHECK-NEXT:    %negx = sub i8 0, %x: full-set
; CHECK-NEXT:    %x_p2 = and i8 %x, %negx: [0,-127)
; CHECK-NEXT:    %r = icmp ugt i8 %x_p2, -128: full-set
;
  %x = mul i8 %xx, %xx  ; thwart complexity-based canonicalization
  %negx = sub i8 0, %x
  %x_p2 = and i8 %x, %negx
  %r = icmp ugt i8 %x_p2, 128
  ret i1 %r
}

define i1 @and_ugt_fail(i8 %xx) {
; CHECK-LABEL: 'and_ugt_fail'
; CHECK-NEXT:    %x = mul i8 %xx, %xx: full-set
; CHECK-NEXT:    %negx = sub i8 0, %x: full-set
; CHECK-NEXT:    %x_p2 = and i8 %x, %negx: [0,-127)
; CHECK-NEXT:    %r = icmp ugt i8 %x_p2, 127: full-set
;
  %x = mul i8 %xx, %xx  ; thwart complexity-based canonicalization
  %negx = sub i8 0, %x
  %x_p2 = and i8 %x, %negx
  %r = icmp ugt i8 %x_p2, 127
  ret i1 %r
}

define i1 @urem_okay(i8 %x) {
; CHECK-LABEL: 'urem_okay'
; CHECK-NEXT:    %val = urem i8 34, %x: [0,35)
; CHECK-NEXT:    %r = icmp ule i8 %val, 35: full-set
;
  %val = urem i8 34, %x
  %r = icmp ule i8 %val, 35
  ret i1 %r
}

define i1 @urem_fail(i8 %x) {
; CHECK-LABEL: 'urem_fail'
; CHECK-NEXT:    %val = urem i8 34, %x: [0,35)
; CHECK-NEXT:    %r = icmp ule i8 %val, 33: full-set
;
  %val = urem i8 34, %x
  %r = icmp ule i8 %val, 33
  ret i1 %r
}

define i1 @srem_posC_okay0(i8 %x) {
; CHECK-LABEL: 'srem_posC_okay0'
; CHECK-NEXT:    %val = srem i8 34, %x: [0,35)
; CHECK-NEXT:    %r = icmp sle i8 %val, 34: full-set
;
  %val = srem i8 34, %x
  %r = icmp sle i8 %val, 34
  ret i1 %r
}

define i1 @srem_posC_okay1(i8 %x) {
; CHECK-LABEL: 'srem_posC_okay1'
; CHECK-NEXT:    %val = srem i8 34, %x: [0,35)
; CHECK-NEXT:    %r = icmp sge i8 %val, -3: full-set
;
  %val = srem i8 34, %x
  %r = icmp sge i8 %val, -3
  ret i1 %r
}

define i1 @srem_negC_okay0(i8 %x) {
; CHECK-LABEL: 'srem_negC_okay0'
; CHECK-NEXT:    %val = srem i8 -34, %x: [-34,1)
; CHECK-NEXT:    %r = icmp sle i8 %val, 0: full-set
;
  %val = srem i8 -34, %x
  %r = icmp sle i8 %val, 0
  ret i1 %r
}

define i1 @srem_negC_okay1(i8 %x) {
; CHECK-LABEL: 'srem_negC_okay1'
; CHECK-NEXT:    %val = srem i8 -34, %x: [-34,1)
; CHECK-NEXT:    %r = icmp sge i8 %val, -34: full-set
;
  %val = srem i8 -34, %x
  %r = icmp sge i8 %val, -34
  ret i1 %r
}

define i1 @srem_posC_fail0(i8 %x) {
; CHECK-LABEL: 'srem_posC_fail0'
; CHECK-NEXT:    %val = srem i8 34, %x: [0,35)
; CHECK-NEXT:    %r = icmp sle i8 %val, 32: full-set
;
  %val = srem i8 34, %x
  %r = icmp sle i8 %val, 32
  ret i1 %r
}

define i1 @srem_posC_fail1(i8 %x) {
; CHECK-LABEL: 'srem_posC_fail1'
; CHECK-NEXT:    %val = srem i8 34, %x: [0,35)
; CHECK-NEXT:    %r = icmp sge i8 %val, 1: full-set
;
  %val = srem i8 34, %x
  %r = icmp sge i8 %val, 1
  ret i1 %r
}

define i1 @srem_negC_fail0(i8 %x) {
; CHECK-LABEL: 'srem_negC_fail0'
; CHECK-NEXT:    %val = srem i8 -34, %x: [-34,1)
; CHECK-NEXT:    %r = icmp sle i8 %val, -1: full-set
;
  %val = srem i8 -34, %x
  %r = icmp sle i8 %val, -1
  ret i1 %r
}

define i1 @srem_negC_fail1(i8 %x) {
; CHECK-LABEL: 'srem_negC_fail1'
; CHECK-NEXT:    %val = srem i8 -34, %x: [-34,1)
; CHECK-NEXT:    %r = icmp sge i8 %val, -33: full-set
;
  %val = srem i8 -34, %x
  %r = icmp sge i8 %val, -33
  ret i1 %r
}
