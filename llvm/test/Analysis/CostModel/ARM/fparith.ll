; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -passes="print<cost-model>" -cost-kind=all 2>&1 -disable-output -mtriple=thumbv8.1m.main-none-eabi -mattr=+mve < %s | FileCheck %s --check-prefix=CHECK-MVE
; RUN: opt -passes="print<cost-model>" -cost-kind=all 2>&1 -disable-output -mtriple=thumbv8.1m.main-none-eabi -mattr=+mve.fp < %s | FileCheck %s --check-prefix=CHECK-MVEFP

target datalayout = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"

define void @f32() {
; CHECK-MVE-LABEL: 'f32'
; CHECK-MVE-NEXT:  Cost Model: Found costs of 1 for: %c = fadd float undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 1 for: %d = fsub float undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 1 for: %e = fmul float undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
; CHECK-MVEFP-LABEL: 'f32'
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 1 for: %c = fadd float undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 1 for: %d = fsub float undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 1 for: %e = fmul float undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
  %c = fadd float undef, undef
  %d = fsub float undef, undef
  %e = fmul float undef, undef
  ret void
}

define void @f16() {
; CHECK-MVE-LABEL: 'f16'
; CHECK-MVE-NEXT:  Cost Model: Found costs of 1 for: %c = fadd half undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 1 for: %d = fsub half undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 1 for: %e = fmul half undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
; CHECK-MVEFP-LABEL: 'f16'
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 1 for: %c = fadd half undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 1 for: %d = fsub half undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 1 for: %e = fmul half undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
  %c = fadd half undef, undef
  %d = fsub half undef, undef
  %e = fmul half undef, undef
  ret void
}

define void @f64() {
; CHECK-MVE-LABEL: 'f64'
; CHECK-MVE-NEXT:  Cost Model: Found costs of 1 for: %c = fadd double undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 1 for: %d = fsub double undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 1 for: %e = fmul double undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
; CHECK-MVEFP-LABEL: 'f64'
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 1 for: %c = fadd double undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 1 for: %d = fsub double undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 1 for: %e = fmul double undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
  %c = fadd double undef, undef
  %d = fsub double undef, undef
  %e = fmul double undef, undef
  ret void
}

define void @vf32() {
; CHECK-MVE-LABEL: 'vf32'
; CHECK-MVE-NEXT:  Cost Model: Found costs of 4 for: %c2 = fadd <2 x float> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 4 for: %d2 = fsub <2 x float> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 4 for: %e2 = fmul <2 x float> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 8 for: %c4 = fadd <4 x float> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 8 for: %d4 = fsub <4 x float> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 8 for: %e4 = fmul <4 x float> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 16 for: %c8 = fadd <8 x float> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 16 for: %d8 = fsub <8 x float> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 16 for: %e8 = fmul <8 x float> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
; CHECK-MVEFP-LABEL: 'vf32'
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %c2 = fadd <2 x float> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %d2 = fsub <2 x float> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %e2 = fmul <2 x float> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %c4 = fadd <4 x float> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %d4 = fsub <4 x float> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %e4 = fmul <4 x float> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:4 CodeSize:2 Lat:4 SizeLat:4 for: %c8 = fadd <8 x float> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:4 CodeSize:2 Lat:4 SizeLat:4 for: %d8 = fsub <8 x float> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:4 CodeSize:2 Lat:4 SizeLat:4 for: %e8 = fmul <8 x float> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
  %c2 = fadd <2 x float> undef, undef
  %d2 = fsub <2 x float> undef, undef
  %e2 = fmul <2 x float> undef, undef
  %c4 = fadd <4 x float> undef, undef
  %d4 = fsub <4 x float> undef, undef
  %e4 = fmul <4 x float> undef, undef
  %c8 = fadd <8 x float> undef, undef
  %d8 = fsub <8 x float> undef, undef
  %e8 = fmul <8 x float> undef, undef
  ret void
}

define void @vf16() {
; CHECK-MVE-LABEL: 'vf16'
; CHECK-MVE-NEXT:  Cost Model: Found costs of 4 for: %c2 = fadd <2 x half> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 4 for: %d2 = fsub <2 x half> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 4 for: %e2 = fmul <2 x half> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 8 for: %c4 = fadd <4 x half> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 8 for: %d4 = fsub <4 x half> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 8 for: %e4 = fmul <4 x half> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 16 for: %c8 = fadd <8 x half> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 16 for: %d8 = fsub <8 x half> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 16 for: %e8 = fmul <8 x half> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
; CHECK-MVEFP-LABEL: 'vf16'
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %c2 = fadd <2 x half> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %d2 = fsub <2 x half> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %e2 = fmul <2 x half> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %c4 = fadd <4 x half> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %d4 = fsub <4 x half> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %e4 = fmul <4 x half> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %c8 = fadd <8 x half> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %d8 = fsub <8 x half> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:2 CodeSize:1 Lat:2 SizeLat:2 for: %e8 = fmul <8 x half> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
  %c2 = fadd <2 x half> undef, undef
  %d2 = fsub <2 x half> undef, undef
  %e2 = fmul <2 x half> undef, undef
  %c4 = fadd <4 x half> undef, undef
  %d4 = fsub <4 x half> undef, undef
  %e4 = fmul <4 x half> undef, undef
  %c8 = fadd <8 x half> undef, undef
  %d8 = fsub <8 x half> undef, undef
  %e8 = fmul <8 x half> undef, undef
  ret void
}

define void @vf64() {
; CHECK-MVE-LABEL: 'vf64'
; CHECK-MVE-NEXT:  Cost Model: Found costs of 4 for: %c2 = fadd <2 x double> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 4 for: %d2 = fsub <2 x double> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 4 for: %e2 = fmul <2 x double> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 8 for: %c4 = fadd <4 x double> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 8 for: %d4 = fsub <4 x double> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 8 for: %e4 = fmul <4 x double> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 16 for: %c8 = fadd <8 x double> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 16 for: %d8 = fsub <8 x double> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of 16 for: %e8 = fmul <8 x double> undef, undef
; CHECK-MVE-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
; CHECK-MVEFP-LABEL: 'vf64'
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 4 for: %c2 = fadd <2 x double> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 4 for: %d2 = fsub <2 x double> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 4 for: %e2 = fmul <2 x double> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 8 for: %c4 = fadd <4 x double> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 8 for: %d4 = fsub <4 x double> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 8 for: %e4 = fmul <4 x double> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 16 for: %c8 = fadd <8 x double> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 16 for: %d8 = fsub <8 x double> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of 16 for: %e8 = fmul <8 x double> undef, undef
; CHECK-MVEFP-NEXT:  Cost Model: Found costs of RThru:0 CodeSize:1 Lat:1 SizeLat:1 for: ret void
;
  %c2 = fadd <2 x double> undef, undef
  %d2 = fsub <2 x double> undef, undef
  %e2 = fmul <2 x double> undef, undef
  %c4 = fadd <4 x double> undef, undef
  %d4 = fsub <4 x double> undef, undef
  %e4 = fmul <4 x double> undef, undef
  %c8 = fadd <8 x double> undef, undef
  %d8 = fsub <8 x double> undef, undef
  %e8 = fmul <8 x double> undef, undef
  ret void
}

