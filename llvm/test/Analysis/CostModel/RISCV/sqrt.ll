; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt < %s -passes="print<cost-model>" 2>&1 -disable-output -S -mtriple=riscv64 -mattr=+v,+f,+d -riscv-v-vector-bits-min=-1 | FileCheck %s

define void @sqrt() {
; CHECK-LABEL: 'sqrt'
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %1 = call float @llvm.sqrt.f32(float undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %2 = call <2 x float> @llvm.sqrt.v2f32(<2 x float> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %3 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %4 = call <8 x float> @llvm.sqrt.v8f32(<8 x float> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %5 = call <16 x float> @llvm.sqrt.v16f32(<16 x float> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %6 = call <vscale x 2 x float> @llvm.sqrt.nxv2f32(<vscale x 2 x float> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %7 = call <vscale x 4 x float> @llvm.sqrt.nxv4f32(<vscale x 4 x float> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %8 = call <vscale x 8 x float> @llvm.sqrt.nxv8f32(<vscale x 8 x float> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %9 = call <vscale x 16 x float> @llvm.sqrt.nxv16f32(<vscale x 16 x float> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %10 = call double @llvm.sqrt.f64(double undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %11 = call <2 x double> @llvm.sqrt.v2f64(<2 x double> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %12 = call <4 x double> @llvm.sqrt.v4f64(<4 x double> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %13 = call <8 x double> @llvm.sqrt.v8f64(<8 x double> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %14 = call <16 x double> @llvm.sqrt.v16f64(<16 x double> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %15 = call <vscale x 1 x double> @llvm.sqrt.nxv1f64(<vscale x 1 x double> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %16 = call <vscale x 2 x double> @llvm.sqrt.nxv2f64(<vscale x 2 x double> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %17 = call <vscale x 4 x double> @llvm.sqrt.nxv4f64(<vscale x 4 x double> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %18 = call <vscale x 8 x double> @llvm.sqrt.nxv8f64(<vscale x 8 x double> undef)
; CHECK-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret void
;
  call float @llvm.sqrt.f32(float undef)
  call <2 x float> @llvm.sqrt.v2f32(<2 x float> undef)
  call <4 x float> @llvm.sqrt.v4f32(<4 x float> undef)
  call <8 x float> @llvm.sqrt.v8f32(<8 x float> undef)
  call <16 x float> @llvm.sqrt.v16f32(<16 x float> undef)
  call <vscale x 2 x float> @llvm.sqrt.nvx2f32(<vscale x 2 x float> undef)
  call <vscale x 4 x float> @llvm.sqrt.nvx4f32(<vscale x 4 x float> undef)
  call <vscale x 8 x float> @llvm.sqrt.nvx8f32(<vscale x 8 x float> undef)
  call <vscale x 16 x float> @llvm.sqrt.nvx16f32(<vscale x 16 x float> undef)
  call double @llvm.sqrt.f64(double undef)
  call <2 x double> @llvm.sqrt.v2f64(<2 x double> undef)
  call <4 x double> @llvm.sqrt.v4f64(<4 x double> undef)
  call <8 x double> @llvm.sqrt.v8f64(<8 x double> undef)
  call <16 x double> @llvm.sqrt.v16f64(<16 x double> undef)
  call <vscale x 1 x double> @llvm.sqrt.nvx1f64(<vscale x 1 x double> undef)
  call <vscale x 2 x double> @llvm.sqrt.nvx2f64(<vscale x 2 x double> undef)
  call <vscale x 4 x double> @llvm.sqrt.nvx4f64(<vscale x 4 x double> undef)
  call <vscale x 8 x double> @llvm.sqrt.nvx8f64(<vscale x 8 x double> undef)
  ret void
}

declare float @llvm.sqrt.f32(float)
declare <2 x float> @llvm.sqrt.v2f32(<2 x float>)
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>)
declare <8 x float> @llvm.sqrt.v8f32(<8 x float>)
declare <16 x float> @llvm.sqrt.v16f32(<16 x float>)
declare <vscale x 2 x float> @llvm.sqrt.nvx2f32(<vscale x 2 x float>)
declare <vscale x 4 x float> @llvm.sqrt.nvx4f32(<vscale x 4 x float>)
declare <vscale x 8 x float> @llvm.sqrt.nvx8f32(<vscale x 8 x float>)
declare <vscale x 16 x float> @llvm.sqrt.nvx16f32(<vscale x 16 x float>)
declare double @llvm.sqrt.f64(double)
declare <2 x double> @llvm.sqrt.v2f64(<2 x double>)
declare <4 x double> @llvm.sqrt.v4f64(<4 x double>)
declare <8 x double> @llvm.sqrt.v8f64(<8 x double>)
declare <16 x double> @llvm.sqrt.v16f64(<16 x double>)
declare <vscale x 1 x double> @llvm.sqrt.nvx1f64(<vscale x 1 x double>)
declare <vscale x 2 x double> @llvm.sqrt.nvx2f64(<vscale x 2 x double>)
declare <vscale x 4 x double> @llvm.sqrt.nvx4f64(<vscale x 4 x double>)
declare <vscale x 8 x double> @llvm.sqrt.nvx8f64(<vscale x 8 x double>)
