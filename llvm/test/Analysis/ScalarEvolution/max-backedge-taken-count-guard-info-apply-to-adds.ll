; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes='print<scalar-evolution>' -scalar-evolution-classify-expressions=0 -disable-output %s 2>&1 | FileCheck %s

define void @max_btc_improved_by_applying_guards_to_add_subexpr(i32 %low, i32 %high) {
; CHECK-LABEL: 'max_btc_improved_by_applying_guards_to_add_subexpr'
; CHECK-NEXT:  Determining loop execution counts for: @max_btc_improved_by_applying_guards_to_add_subexpr
; CHECK-NEXT:  Loop %loop: backedge-taken count is (-1 + (zext i32 (1 + (-1 * %low) + %high) to i64))<nsw>
; CHECK-NEXT:  Loop %loop: constant max backedge-taken count is i64 -1
; CHECK-NEXT:  Loop %loop: symbolic max backedge-taken count is (-1 + (zext i32 (1 + (-1 * %low) + %high) to i64))<nsw>
; CHECK-NEXT:  Loop %loop: Trip multiple is 1
;
entry:
  %sub = sub i32 %high, %low
  %pre.1 = icmp slt i32 %sub, 8
  br i1 %pre.1, label %if.then, label %exit

if.then:
  %pre.2 = icmp slt i32 %sub, 0
  br i1 %pre.2, label %exit, label %ph

ph:
  %add.1 = add i32 %sub, 1
  %wide.trip.count = zext i32 %add.1 to i64
  br label %loop

loop:
  %iv = phi i64 [ 0, %ph ], [ %iv.next, %loop ]
  %iv.next = add i64 %iv, 1
  %ec = icmp eq i64 %iv.next, %wide.trip.count
  br i1 %ec, label %exit, label %loop

exit:
  ret void
}
