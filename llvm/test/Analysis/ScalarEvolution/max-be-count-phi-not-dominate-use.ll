; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 6
; RUN: opt -passes='print<scalar-evolution>' -disable-output %s 2>&1 | FileCheck %s

define void @max-be-count-eq-distance-add-constant-var-phi(i32 %a, i1 %p) {
; CHECK-LABEL: 'max-be-count-eq-distance-add-constant-var-phi'
; CHECK-NEXT:  Classifying expressions for: @max-be-count-eq-distance-add-constant-var-phi
; CHECK-NEXT:    %b = and i32 %a, 31
; CHECK-NEXT:    --> (zext i5 (trunc i32 %a to i5) to i32) U: [0,32) S: [0,32)
; CHECK-NEXT:    %d = phi i32 [ 32, %cmp_true ], [ %b, %cmp_false ]
; CHECK-NEXT:    --> (1 + (zext i5 (trunc i32 %a to i5) to i32))<nuw><nsw> U: [1,33) S: [1,33)
; CHECK-NEXT:    %i = phi i32 [ 0, %merge ], [ %inc, %for.body ]
; CHECK-NEXT:    --> {0,+,1}<nuw><nsw><%for.body> U: [0,32) S: [0,32) Exits: (zext i5 (trunc i32 %a to i5) to i32) LoopDispositions: { %for.body: Computable }
; CHECK-NEXT:    %inc = add i32 %i, 1
; CHECK-NEXT:    --> {1,+,1}<nuw><nsw><%for.body> U: [1,33) S: [1,33) Exits: (1 + (zext i5 (trunc i32 %a to i5) to i32))<nuw><nsw> LoopDispositions: { %for.body: Computable }
; CHECK-NEXT:  Determining loop execution counts for: @max-be-count-eq-distance-add-constant-var-phi
; CHECK-NEXT:  Loop %for.body: backedge-taken count is (zext i5 (trunc i32 %a to i5) to i32)
; CHECK-NEXT:  Loop %for.body: constant max backedge-taken count is i32 31
; CHECK-NEXT:  Loop %for.body: symbolic max backedge-taken count is (zext i5 (trunc i32 %a to i5) to i32)
; CHECK-NEXT:  Loop %for.body: Trip multiple is 1
;
entry:
  %b = and i32 %a, 31
  %c = icmp eq i32 %b, 0
  br i1 %c, label %cmp_true, label %cmp_false

cmp_false:
  br i1 %p, label %cmp_true, label %merge

cmp_true:
  br label %merge

merge:
  %d = phi i32 [32, %cmp_true], [%b, %cmp_false]
  br label %for.body

for.body:
  %i = phi i32 [ 0, %merge ], [ %inc, %for.body ]
  %inc = add i32 %i, 1
  %exitcond.not = icmp eq i32 %inc, %d
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:
  ret void
}
