; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt < %s --data-layout="e-m:e-p:64:64:64:64-n8:16:32:64" -S -analyze -enable-new-pm=0 -scalar-evolution | FileCheck --check-prefixes=ALL,X64,PTR64_IDX64 %s
; RUN: opt < %s --data-layout="e-m:e-p:64:64:64:64-n8:16:32:64" -S -disable-output "-passes=print<scalar-evolution>" 2>&1 | FileCheck --check-prefixes=ALL,X64,PTR64_IDX64 %s
; RUN: opt < %s --data-layout="e-m:e-p:64:64:64:32-n8:16:32:64" -S -analyze -enable-new-pm=0 -scalar-evolution | FileCheck --check-prefixes=ALL,X64,PTR64_IDX32 %s
; RUN: opt < %s --data-layout="e-m:e-p:64:64:64:32-n8:16:32:64" -S -disable-output "-passes=print<scalar-evolution>" 2>&1 | FileCheck --check-prefixes=ALL,X64,PTR64_IDX32 %s
; RUN: opt < %s --data-layout="e-m:e-p:32:32:32:32-n8:16:32" -S -analyze -enable-new-pm=0 -scalar-evolution | FileCheck --check-prefixes=ALL,X32,PTR32_IDX32 %s
; RUN: opt < %s --data-layout="e-m:e-p:32:32:32:32-n8:16:32" -S -disable-output "-passes=print<scalar-evolution>" 2>&1 | FileCheck --check-prefixes=ALL,X32,PTR32_IDX32 %s
; RUN: opt < %s --data-layout="e-m:e-p:32:32:32:64-n8:16:32:64" -S -analyze -enable-new-pm=0 -scalar-evolution | FileCheck --check-prefixes=ALL,X32,PTR32_IDX64 %s
; RUN: opt < %s --data-layout="e-m:e-p:32:32:32:64-n8:16:32:64" -S -disable-output "-passes=print<scalar-evolution>" 2>&1 | FileCheck --check-prefixes=ALL,X32,PTR32_IDX64 %s

@global = external hidden global [0 x i8]

define hidden i32* @i64(i8* %arg, i32* %arg10) {
; X64-LABEL: 'i64'
; X64-NEXT:  Classifying expressions for: @i64
; X64-NEXT:    %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
; X64-NEXT:    --> {0,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; X64-NEXT:    %tmp12 = getelementptr i8, i8* %arg, i64 ptrtoint ([0 x i8]* @global to i64)
; X64-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; X64-NEXT:    %tmp13 = bitcast i8* %tmp12 to i32*
; X64-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; X64-NEXT:    %tmp14 = load i32, i32* %tmp13, align 4
; X64-NEXT:    --> %tmp14 U: full-set S: full-set Exits: <<Unknown>> LoopDispositions: { %bb11: Variant }
; X64-NEXT:    %tmp18 = add i32 %tmp, 2
; X64-NEXT:    --> {2,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; X64-NEXT:  Determining loop execution counts for: @i64
; X64-NEXT:  Loop %bb11: Unpredictable backedge-taken count.
; X64-NEXT:  Loop %bb11: Unpredictable max backedge-taken count.
; X64-NEXT:  Loop %bb11: Unpredictable predicated backedge-taken count.
;
; PTR32_IDX32-LABEL: 'i64'
; PTR32_IDX32-NEXT:  Classifying expressions for: @i64
; PTR32_IDX32-NEXT:    %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
; PTR32_IDX32-NEXT:    --> {0,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX32-NEXT:    %tmp12 = getelementptr i8, i8* %arg, i64 ptrtoint ([0 x i8]* @global to i64)
; PTR32_IDX32-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX32-NEXT:    %tmp13 = bitcast i8* %tmp12 to i32*
; PTR32_IDX32-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX32-NEXT:    %tmp14 = load i32, i32* %tmp13, align 4
; PTR32_IDX32-NEXT:    --> %tmp14 U: full-set S: full-set Exits: <<Unknown>> LoopDispositions: { %bb11: Variant }
; PTR32_IDX32-NEXT:    %tmp18 = add i32 %tmp, 2
; PTR32_IDX32-NEXT:    --> {2,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX32-NEXT:  Determining loop execution counts for: @i64
; PTR32_IDX32-NEXT:  Loop %bb11: Unpredictable backedge-taken count.
; PTR32_IDX32-NEXT:  Loop %bb11: Unpredictable max backedge-taken count.
; PTR32_IDX32-NEXT:  Loop %bb11: Unpredictable predicated backedge-taken count.
;
; PTR32_IDX64-LABEL: 'i64'
; PTR32_IDX64-NEXT:  Classifying expressions for: @i64
; PTR32_IDX64-NEXT:    %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
; PTR32_IDX64-NEXT:    --> {0,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX64-NEXT:    %tmp12 = getelementptr i8, i8* %arg, i64 ptrtoint ([0 x i8]* @global to i64)
; PTR32_IDX64-NEXT:    --> (@global + %arg) U: [0,8589934591) S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX64-NEXT:    %tmp13 = bitcast i8* %tmp12 to i32*
; PTR32_IDX64-NEXT:    --> (@global + %arg) U: [0,8589934591) S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX64-NEXT:    %tmp14 = load i32, i32* %tmp13, align 4
; PTR32_IDX64-NEXT:    --> %tmp14 U: full-set S: full-set Exits: <<Unknown>> LoopDispositions: { %bb11: Variant }
; PTR32_IDX64-NEXT:    %tmp18 = add i32 %tmp, 2
; PTR32_IDX64-NEXT:    --> {2,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX64-NEXT:  Determining loop execution counts for: @i64
; PTR32_IDX64-NEXT:  Loop %bb11: Unpredictable backedge-taken count.
; PTR32_IDX64-NEXT:  Loop %bb11: Unpredictable max backedge-taken count.
; PTR32_IDX64-NEXT:  Loop %bb11: Unpredictable predicated backedge-taken count.
;
bb:
  br label %bb11

bb11:                                             ; preds = %bb17, %bb
  %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
  %tmp12 = getelementptr i8, i8* %arg, i64 ptrtoint ([0 x i8]* @global to i64)
  %tmp13 = bitcast i8* %tmp12 to i32*
  %tmp14 = load i32, i32* %tmp13, align 4
  %tmp15 = icmp eq i32 %tmp14, 6
  br i1 %tmp15, label %bb16, label %bb17

bb16:                                             ; preds = %bb11
  ret i32* %arg10

bb17:                                             ; preds = %bb11
  %tmp18 = add i32 %tmp, 2
  br label %bb11
}
define hidden i32* @i64_to_i32(i8* %arg, i32* %arg10) {
; PTR64_IDX64-LABEL: 'i64_to_i32'
; PTR64_IDX64-NEXT:  Classifying expressions for: @i64_to_i32
; PTR64_IDX64-NEXT:    %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
; PTR64_IDX64-NEXT:    --> {0,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR64_IDX64-NEXT:    %tmp12 = getelementptr i8, i8* %arg, i32 ptrtoint ([0 x i8]* @global to i32)
; PTR64_IDX64-NEXT:    --> ((sext i32 (trunc [0 x i8]* @global to i32) to i64) + %arg) U: full-set S: full-set Exits: ((sext i32 (trunc [0 x i8]* @global to i32) to i64) + %arg) LoopDispositions: { %bb11: Invariant }
; PTR64_IDX64-NEXT:    %tmp13 = bitcast i8* %tmp12 to i32*
; PTR64_IDX64-NEXT:    --> ((sext i32 (trunc [0 x i8]* @global to i32) to i64) + %arg) U: full-set S: full-set Exits: ((sext i32 (trunc [0 x i8]* @global to i32) to i64) + %arg) LoopDispositions: { %bb11: Invariant }
; PTR64_IDX64-NEXT:    %tmp14 = load i32, i32* %tmp13, align 4
; PTR64_IDX64-NEXT:    --> %tmp14 U: full-set S: full-set Exits: <<Unknown>> LoopDispositions: { %bb11: Variant }
; PTR64_IDX64-NEXT:    %tmp18 = add i32 %tmp, 2
; PTR64_IDX64-NEXT:    --> {2,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR64_IDX64-NEXT:  Determining loop execution counts for: @i64_to_i32
; PTR64_IDX64-NEXT:  Loop %bb11: Unpredictable backedge-taken count.
; PTR64_IDX64-NEXT:  Loop %bb11: Unpredictable max backedge-taken count.
; PTR64_IDX64-NEXT:  Loop %bb11: Unpredictable predicated backedge-taken count.
;
; PTR64_IDX32-LABEL: 'i64_to_i32'
; PTR64_IDX32-NEXT:  Classifying expressions for: @i64_to_i32
; PTR64_IDX32-NEXT:    %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
; PTR64_IDX32-NEXT:    --> {0,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR64_IDX32-NEXT:    %tmp12 = getelementptr i8, i8* %arg, i32 ptrtoint ([0 x i8]* @global to i32)
; PTR64_IDX32-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR64_IDX32-NEXT:    %tmp13 = bitcast i8* %tmp12 to i32*
; PTR64_IDX32-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR64_IDX32-NEXT:    %tmp14 = load i32, i32* %tmp13, align 4
; PTR64_IDX32-NEXT:    --> %tmp14 U: full-set S: full-set Exits: <<Unknown>> LoopDispositions: { %bb11: Variant }
; PTR64_IDX32-NEXT:    %tmp18 = add i32 %tmp, 2
; PTR64_IDX32-NEXT:    --> {2,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR64_IDX32-NEXT:  Determining loop execution counts for: @i64_to_i32
; PTR64_IDX32-NEXT:  Loop %bb11: Unpredictable backedge-taken count.
; PTR64_IDX32-NEXT:  Loop %bb11: Unpredictable max backedge-taken count.
; PTR64_IDX32-NEXT:  Loop %bb11: Unpredictable predicated backedge-taken count.
;
; PTR32_IDX32-LABEL: 'i64_to_i32'
; PTR32_IDX32-NEXT:  Classifying expressions for: @i64_to_i32
; PTR32_IDX32-NEXT:    %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
; PTR32_IDX32-NEXT:    --> {0,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX32-NEXT:    %tmp12 = getelementptr i8, i8* %arg, i32 ptrtoint ([0 x i8]* @global to i32)
; PTR32_IDX32-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX32-NEXT:    %tmp13 = bitcast i8* %tmp12 to i32*
; PTR32_IDX32-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX32-NEXT:    %tmp14 = load i32, i32* %tmp13, align 4
; PTR32_IDX32-NEXT:    --> %tmp14 U: full-set S: full-set Exits: <<Unknown>> LoopDispositions: { %bb11: Variant }
; PTR32_IDX32-NEXT:    %tmp18 = add i32 %tmp, 2
; PTR32_IDX32-NEXT:    --> {2,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX32-NEXT:  Determining loop execution counts for: @i64_to_i32
; PTR32_IDX32-NEXT:  Loop %bb11: Unpredictable backedge-taken count.
; PTR32_IDX32-NEXT:  Loop %bb11: Unpredictable max backedge-taken count.
; PTR32_IDX32-NEXT:  Loop %bb11: Unpredictable predicated backedge-taken count.
;
; PTR32_IDX64-LABEL: 'i64_to_i32'
; PTR32_IDX64-NEXT:  Classifying expressions for: @i64_to_i32
; PTR32_IDX64-NEXT:    %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
; PTR32_IDX64-NEXT:    --> {0,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX64-NEXT:    %tmp12 = getelementptr i8, i8* %arg, i32 ptrtoint ([0 x i8]* @global to i32)
; PTR32_IDX64-NEXT:    --> ((sext i32 (trunc [0 x i8]* @global to i32) to i64) + %arg) U: [-2147483648,6442450943) S: full-set Exits: ((sext i32 (trunc [0 x i8]* @global to i32) to i64) + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX64-NEXT:    %tmp13 = bitcast i8* %tmp12 to i32*
; PTR32_IDX64-NEXT:    --> ((sext i32 (trunc [0 x i8]* @global to i32) to i64) + %arg) U: [-2147483648,6442450943) S: full-set Exits: ((sext i32 (trunc [0 x i8]* @global to i32) to i64) + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX64-NEXT:    %tmp14 = load i32, i32* %tmp13, align 4
; PTR32_IDX64-NEXT:    --> %tmp14 U: full-set S: full-set Exits: <<Unknown>> LoopDispositions: { %bb11: Variant }
; PTR32_IDX64-NEXT:    %tmp18 = add i32 %tmp, 2
; PTR32_IDX64-NEXT:    --> {2,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX64-NEXT:  Determining loop execution counts for: @i64_to_i32
; PTR32_IDX64-NEXT:  Loop %bb11: Unpredictable backedge-taken count.
; PTR32_IDX64-NEXT:  Loop %bb11: Unpredictable max backedge-taken count.
; PTR32_IDX64-NEXT:  Loop %bb11: Unpredictable predicated backedge-taken count.
;
bb:
  br label %bb11

bb11:                                             ; preds = %bb17, %bb
  %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
  %tmp12 = getelementptr i8, i8* %arg, i32 ptrtoint ([0 x i8]* @global to i32)
  %tmp13 = bitcast i8* %tmp12 to i32*
  %tmp14 = load i32, i32* %tmp13, align 4
  %tmp15 = icmp eq i32 %tmp14, 6
  br i1 %tmp15, label %bb16, label %bb17

bb16:                                             ; preds = %bb11
  ret i32* %arg10

bb17:                                             ; preds = %bb11
  %tmp18 = add i32 %tmp, 2
  br label %bb11
}
define hidden i32* @i64_to_i128(i8* %arg, i32* %arg10) {
; X64-LABEL: 'i64_to_i128'
; X64-NEXT:  Classifying expressions for: @i64_to_i128
; X64-NEXT:    %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
; X64-NEXT:    --> {0,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; X64-NEXT:    %tmp12 = getelementptr i8, i8* %arg, i128 ptrtoint ([0 x i8]* @global to i128)
; X64-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; X64-NEXT:    %tmp13 = bitcast i8* %tmp12 to i32*
; X64-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; X64-NEXT:    %tmp14 = load i32, i32* %tmp13, align 4
; X64-NEXT:    --> %tmp14 U: full-set S: full-set Exits: <<Unknown>> LoopDispositions: { %bb11: Variant }
; X64-NEXT:    %tmp18 = add i32 %tmp, 2
; X64-NEXT:    --> {2,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; X64-NEXT:  Determining loop execution counts for: @i64_to_i128
; X64-NEXT:  Loop %bb11: Unpredictable backedge-taken count.
; X64-NEXT:  Loop %bb11: Unpredictable max backedge-taken count.
; X64-NEXT:  Loop %bb11: Unpredictable predicated backedge-taken count.
;
; PTR32_IDX32-LABEL: 'i64_to_i128'
; PTR32_IDX32-NEXT:  Classifying expressions for: @i64_to_i128
; PTR32_IDX32-NEXT:    %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
; PTR32_IDX32-NEXT:    --> {0,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX32-NEXT:    %tmp12 = getelementptr i8, i8* %arg, i128 ptrtoint ([0 x i8]* @global to i128)
; PTR32_IDX32-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX32-NEXT:    %tmp13 = bitcast i8* %tmp12 to i32*
; PTR32_IDX32-NEXT:    --> (@global + %arg) U: full-set S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX32-NEXT:    %tmp14 = load i32, i32* %tmp13, align 4
; PTR32_IDX32-NEXT:    --> %tmp14 U: full-set S: full-set Exits: <<Unknown>> LoopDispositions: { %bb11: Variant }
; PTR32_IDX32-NEXT:    %tmp18 = add i32 %tmp, 2
; PTR32_IDX32-NEXT:    --> {2,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX32-NEXT:  Determining loop execution counts for: @i64_to_i128
; PTR32_IDX32-NEXT:  Loop %bb11: Unpredictable backedge-taken count.
; PTR32_IDX32-NEXT:  Loop %bb11: Unpredictable max backedge-taken count.
; PTR32_IDX32-NEXT:  Loop %bb11: Unpredictable predicated backedge-taken count.
;
; PTR32_IDX64-LABEL: 'i64_to_i128'
; PTR32_IDX64-NEXT:  Classifying expressions for: @i64_to_i128
; PTR32_IDX64-NEXT:    %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
; PTR32_IDX64-NEXT:    --> {0,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX64-NEXT:    %tmp12 = getelementptr i8, i8* %arg, i128 ptrtoint ([0 x i8]* @global to i128)
; PTR32_IDX64-NEXT:    --> (@global + %arg) U: [0,8589934591) S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX64-NEXT:    %tmp13 = bitcast i8* %tmp12 to i32*
; PTR32_IDX64-NEXT:    --> (@global + %arg) U: [0,8589934591) S: full-set Exits: (@global + %arg) LoopDispositions: { %bb11: Invariant }
; PTR32_IDX64-NEXT:    %tmp14 = load i32, i32* %tmp13, align 4
; PTR32_IDX64-NEXT:    --> %tmp14 U: full-set S: full-set Exits: <<Unknown>> LoopDispositions: { %bb11: Variant }
; PTR32_IDX64-NEXT:    %tmp18 = add i32 %tmp, 2
; PTR32_IDX64-NEXT:    --> {2,+,2}<%bb11> U: [0,-1) S: [-2147483648,2147483647) Exits: <<Unknown>> LoopDispositions: { %bb11: Computable }
; PTR32_IDX64-NEXT:  Determining loop execution counts for: @i64_to_i128
; PTR32_IDX64-NEXT:  Loop %bb11: Unpredictable backedge-taken count.
; PTR32_IDX64-NEXT:  Loop %bb11: Unpredictable max backedge-taken count.
; PTR32_IDX64-NEXT:  Loop %bb11: Unpredictable predicated backedge-taken count.
;
bb:
  br label %bb11

bb11:                                             ; preds = %bb17, %bb
  %tmp = phi i32 [ 0, %bb ], [ %tmp18, %bb17 ]
  %tmp12 = getelementptr i8, i8* %arg, i128 ptrtoint ([0 x i8]* @global to i128)
  %tmp13 = bitcast i8* %tmp12 to i32*
  %tmp14 = load i32, i32* %tmp13, align 4
  %tmp15 = icmp eq i32 %tmp14, 6
  br i1 %tmp15, label %bb16, label %bb17

bb16:                                             ; preds = %bb11
  ret i32* %arg10

bb17:                                             ; preds = %bb11
  %tmp18 = add i32 %tmp, 2
  br label %bb11
}
