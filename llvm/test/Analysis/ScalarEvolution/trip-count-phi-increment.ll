; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -disable-output "-passes=print<scalar-evolution>" 2>&1 | FileCheck %s
define void @test1(ptr %x, ptr %y) {
; CHECK-LABEL: 'test1'
; CHECK-NEXT:  Classifying expressions for: @test1
; CHECK-NEXT:    %v1.0 = phi i32 [ 0, %entry ], [ %k.0, %if.end ]
; CHECK-NEXT:    --> {0,+,1}<nuw><nsw><%for.cond> U: [0,7) S: [0,7) Exits: 6 LoopDispositions: { %for.cond: Computable }
; CHECK-NEXT:    %add = add nsw i32 %v1.0, 1
; CHECK-NEXT:    --> {1,+,1}<nuw><nsw><%for.cond> U: [1,8) S: [1,8) Exits: 7 LoopDispositions: { %for.cond: Computable }
; CHECK-NEXT:    %add6 = add nsw i32 %v1.0, 1
; CHECK-NEXT:    --> {1,+,1}<nuw><nsw><%for.cond> U: [1,8) S: [1,8) Exits: 7 LoopDispositions: { %for.cond: Computable }
; CHECK-NEXT:    %k.0 = phi i32 [ %add, %if.then ], [ %add6, %if.else ]
; CHECK-NEXT:    --> {1,+,1}<nuw><nsw><%for.cond> U: [1,8) S: [1,8) Exits: 7 LoopDispositions: { %for.cond: Computable }
; CHECK-NEXT:  Determining loop execution counts for: @test1
; CHECK-NEXT:  Loop %for.cond: backedge-taken count is i32 6
; CHECK-NEXT:  Loop %for.cond: constant max backedge-taken count is i32 6
; CHECK-NEXT:  Loop %for.cond: symbolic max backedge-taken count is i32 6
; CHECK-NEXT:  Loop %for.cond: Trip multiple is 7
;
entry:
  br label %for.cond

for.cond:                                                ; preds = %6, %0
  %v1.0 = phi i32 [ 0, %entry ], [ %k.0, %if.end ]
  %cmp = icmp slt i32 %v1.0, 6
  br i1 %cmp, label %for.body, label %exit

for.body:                                                ; preds = %1
  %cmp3 = icmp slt i32 %v1.0, 2
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                                ; preds = %2
  %add = add nsw i32 %v1.0, 1
  br label %if.end

if.else:                                                ; preds = %2
  %add6 = add nsw i32 %v1.0, 1
  br label %if.end

if.end:                                                ; preds = %4, %3
  %k.0 = phi i32 [ %add, %if.then ], [ %add6, %if.else ]
  br label %for.cond

exit:                                                ; preds = %5
  ret void
}

define void @test2(ptr %x, ptr %y) {
; CHECK-LABEL: 'test2'
; CHECK-NEXT:  Classifying expressions for: @test2
; CHECK-NEXT:    %v1.0 = phi i32 [ 0, %entry ], [ %k.0, %if.end ]
; CHECK-NEXT:    --> {0,+,1}<nuw><nsw><%for.cond> U: [0,7) S: [0,7) Exits: 6 LoopDispositions: { %for.cond: Computable }
; CHECK-NEXT:    %add = add nuw i32 %v1.0, 1
; CHECK-NEXT:    --> {1,+,1}<nuw><nsw><%for.cond> U: [1,8) S: [1,8) Exits: 7 LoopDispositions: { %for.cond: Computable }
; CHECK-NEXT:    %add6 = add nsw i32 %v1.0, 1
; CHECK-NEXT:    --> {1,+,1}<nuw><nsw><%for.cond> U: [1,8) S: [1,8) Exits: 7 LoopDispositions: { %for.cond: Computable }
; CHECK-NEXT:    %k.0 = phi i32 [ %add, %if.then ], [ %add6, %if.else ]
; CHECK-NEXT:    --> {1,+,1}<nuw><nsw><%for.cond> U: [1,8) S: [1,8) Exits: 7 LoopDispositions: { %for.cond: Computable }
; CHECK-NEXT:  Determining loop execution counts for: @test2
; CHECK-NEXT:  Loop %for.cond: backedge-taken count is i32 6
; CHECK-NEXT:  Loop %for.cond: constant max backedge-taken count is i32 6
; CHECK-NEXT:  Loop %for.cond: symbolic max backedge-taken count is i32 6
; CHECK-NEXT:  Loop %for.cond: Trip multiple is 7
;
entry:
  br label %for.cond

for.cond:                                                ; preds = %6, %0
  %v1.0 = phi i32 [ 0, %entry ], [ %k.0, %if.end ]
  %cmp = icmp slt i32 %v1.0, 6
  br i1 %cmp, label %for.body, label %exit

for.body:                                                ; preds = %1
  %cmp3 = icmp slt i32 %v1.0, 2
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                                ; preds = %2
  %add = add nuw i32 %v1.0, 1
  br label %if.end

if.else:                                                ; preds = %2
  %add6 = add nsw i32 %v1.0, 1
  br label %if.end

if.end:                                                ; preds = %4, %3
  %k.0 = phi i32 [ %add, %if.then ], [ %add6, %if.else ]
  br label %for.cond

exit:                                                ; preds = %5
  ret void
}

