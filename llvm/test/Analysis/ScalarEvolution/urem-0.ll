; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt < %s "-passes=print<scalar-evolution>" -disable-output 2>&1 | FileCheck %s

define i8 @foo(i8 %a) {
; CHECK-LABEL: 'foo'
; CHECK-NEXT:  Classifying expressions for: @foo
; CHECK-NEXT:    %t0 = urem i8 %a, 27
; CHECK-NEXT:    --> ((-27 * (%a /u 27)) + %a) U: full-set S: full-set
; CHECK-NEXT:  Determining loop execution counts for: @foo
;
  %t0 = urem i8 %a, 27
  ret i8 %t0
}

define i8 @bar(i8 %a) {
; CHECK-LABEL: 'bar'
; CHECK-NEXT:  Classifying expressions for: @bar
; CHECK-NEXT:    %t1 = urem i8 %a, 1
; CHECK-NEXT:    --> 0 U: [0,1) S: [0,1)
; CHECK-NEXT:  Determining loop execution counts for: @bar
;
  %t1 = urem i8 %a, 1
  ret i8 %t1
}

define i8 @baz(i8 %a) {
; CHECK-LABEL: 'baz'
; CHECK-NEXT:  Classifying expressions for: @baz
; CHECK-NEXT:    %t2 = urem i8 %a, 32
; CHECK-NEXT:    --> (zext i5 (trunc i8 %a to i5) to i8) U: [0,32) S: [0,32)
; CHECK-NEXT:  Determining loop execution counts for: @baz
;
  %t2 = urem i8 %a, 32
  ret i8 %t2
}

define i8 @qux(i8 %a) {
; CHECK-LABEL: 'qux'
; CHECK-NEXT:  Classifying expressions for: @qux
; CHECK-NEXT:    %t3 = urem i8 %a, 2
; CHECK-NEXT:    --> (zext i1 (trunc i8 %a to i1) to i8) U: [0,2) S: [0,2)
; CHECK-NEXT:  Determining loop execution counts for: @qux
;
  %t3 = urem i8 %a, 2
  ret i8 %t3
}
