; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -passes='print<scalar-evolution>' -disable-output %s 2>&1 | FileCheck %s

target datalayout="e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

define void @ptrtoaddr(ptr %in, ptr %out0, ptr %out1, ptr %out2, ptr %out3) {
; X64-LABEL: 'ptrtoaddr'
; X64-NEXT:  Classifying expressions for: @ptrtoaddr
; X64-NEXT:    %p0 = ptrtoaddr ptr %in to i64
; X64-NEXT:    --> (ptrtoaddr ptr %in to i64) U: full-set S: full-set
; X64-NEXT:    %p1 = ptrtoaddr ptr %in to i32
; X64-NEXT:    --> (trunc i64 (ptrtoaddr ptr %in to i64) to i32) U: full-set S: full-set
; X64-NEXT:    %p2 = ptrtoaddr ptr %in to i16
; X64-NEXT:    --> (trunc i64 (ptrtoaddr ptr %in to i64) to i16) U: full-set S: full-set
; X64-NEXT:    %p3 = ptrtoaddr ptr %in to i128
; X64-NEXT:    --> (zext i64 (ptrtoaddr ptr %in to i64) to i128) U: [0,18446744073709551616) S: [0,18446744073709551616)
; X64-NEXT:  Determining loop execution counts for: @ptrtoaddr
;
; X32-LABEL: 'ptrtoaddr'
; X32-NEXT:  Classifying expressions for: @ptrtoaddr
; X32-NEXT:    %p0 = ptrtoaddr ptr %in to i64
; X32-NEXT:    --> (zext i32 (ptrtoaddr ptr %in to i32) to i64) U: [0,4294967296) S: [0,4294967296)
; X32-NEXT:    %p1 = ptrtoaddr ptr %in to i32
; X32-NEXT:    --> (ptrtoaddr ptr %in to i32) U: full-set S: full-set
; X32-NEXT:    %p2 = ptrtoaddr ptr %in to i16
; X32-NEXT:    --> (trunc i32 (ptrtoaddr ptr %in to i32) to i16) U: full-set S: full-set
; X32-NEXT:    %p3 = ptrtoaddr ptr %in to i128
; X32-NEXT:    --> (zext i32 (ptrtoaddr ptr %in to i32) to i128) U: [0,4294967296) S: [0,4294967296)
; X32-NEXT:  Determining loop execution counts for: @ptrtoaddr
;
; CHECK-LABEL: 'ptrtoaddr'
; CHECK-NEXT:  Classifying expressions for: @ptrtoaddr
; CHECK-NEXT:    %p0 = ptrtoaddr ptr %in to i64
; CHECK-NEXT:    --> (ptrtoaddr ptr %in to i64) U: full-set S: full-set
; CHECK-NEXT:  Determining loop execution counts for: @ptrtoaddr
;
  %p0 = ptrtoaddr ptr %in to i64
  store i64  %p0, ptr  %out0
  ret void
}

define void @ptrtoaddr_as1(ptr addrspace(1) %in, ptr %out0, ptr %out1, ptr %out2, ptr %out3) {
; X64-LABEL: 'ptrtoaddr_as1'
; X64-NEXT:  Classifying expressions for: @ptrtoaddr_as1
; X64-NEXT:    %p0 = ptrtoaddr ptr addrspace(1) %in to i64
; X64-NEXT:    --> (ptrtoaddr ptr addrspace(1) %in to i64) U: full-set S: full-set
; X64-NEXT:    %p1 = ptrtoaddr ptr addrspace(1) %in to i32
; X64-NEXT:    --> (trunc i64 (ptrtoaddr ptr addrspace(1) %in to i64) to i32) U: full-set S: full-set
; X64-NEXT:    %p2 = ptrtoaddr ptr addrspace(1) %in to i16
; X64-NEXT:    --> (trunc i64 (ptrtoaddr ptr addrspace(1) %in to i64) to i16) U: full-set S: full-set
; X64-NEXT:    %p3 = ptrtoaddr ptr addrspace(1) %in to i128
; X64-NEXT:    --> (zext i64 (ptrtoaddr ptr addrspace(1) %in to i64) to i128) U: [0,18446744073709551616) S: [0,18446744073709551616)
; X64-NEXT:  Determining loop execution counts for: @ptrtoaddr_as1
;
; X32-LABEL: 'ptrtoaddr_as1'
; X32-NEXT:  Classifying expressions for: @ptrtoaddr_as1
; X32-NEXT:    %p0 = ptrtoaddr ptr addrspace(1) %in to i64
; X32-NEXT:    --> (zext i32 (ptrtoaddr ptr addrspace(1) %in to i32) to i64) U: [0,4294967296) S: [0,4294967296)
; X32-NEXT:    %p1 = ptrtoaddr ptr addrspace(1) %in to i32
; X32-NEXT:    --> (ptrtoaddr ptr addrspace(1) %in to i32) U: full-set S: full-set
; X32-NEXT:    %p2 = ptrtoaddr ptr addrspace(1) %in to i16
; X32-NEXT:    --> (trunc i32 (ptrtoaddr ptr addrspace(1) %in to i32) to i16) U: full-set S: full-set
; X32-NEXT:    %p3 = ptrtoaddr ptr addrspace(1) %in to i128
; X32-NEXT:    --> (zext i32 (ptrtoaddr ptr addrspace(1) %in to i32) to i128) U: [0,4294967296) S: [0,4294967296)
; X32-NEXT:  Determining loop execution counts for: @ptrtoaddr_as1
;
; CHECK-LABEL: 'ptrtoaddr_as1'
; CHECK-NEXT:  Classifying expressions for: @ptrtoaddr_as1
; CHECK-NEXT:    %p0 = ptrtoaddr ptr addrspace(1) %in to i64
; CHECK-NEXT:    --> (ptrtoaddr ptr addrspace(1) %in to i64) U: full-set S: full-set
; CHECK-NEXT:  Determining loop execution counts for: @ptrtoaddr_as1
;
  %p0 = ptrtoaddr ptr addrspace(1) %in to i64
  store i64  %p0, ptr  %out0
  ret void
}

define void @ptrtoaddr_of_bitcast(ptr %in, ptr %out0) {
; X64-LABEL: 'ptrtoaddr_of_bitcast'
; X64-NEXT:  Classifying expressions for: @ptrtoaddr_of_bitcast
; X64-NEXT:    %in_casted = bitcast ptr %in to ptr
; X64-NEXT:    --> %in U: full-set S: full-set
; X64-NEXT:    %p0 = ptrtoaddr ptr %in_casted to i64
; X64-NEXT:    --> (ptrtoaddr ptr %in to i64) U: full-set S: full-set
; X64-NEXT:  Determining loop execution counts for: @ptrtoaddr_of_bitcast
;
; X32-LABEL: 'ptrtoaddr_of_bitcast'
; X32-NEXT:  Classifying expressions for: @ptrtoaddr_of_bitcast
; X32-NEXT:    %in_casted = bitcast ptr %in to ptr
; X32-NEXT:    --> %in U: full-set S: full-set
; X32-NEXT:    %p0 = ptrtoaddr ptr %in_casted to i64
; X32-NEXT:    --> (zext i32 (ptrtoaddr ptr %in to i32) to i64) U: [0,4294967296) S: [0,4294967296)
; X32-NEXT:  Determining loop execution counts for: @ptrtoaddr_of_bitcast
;
; CHECK-LABEL: 'ptrtoaddr_of_bitcast'
; CHECK-NEXT:  Classifying expressions for: @ptrtoaddr_of_bitcast
; CHECK-NEXT:    %in_casted = bitcast ptr %in to ptr
; CHECK-NEXT:    --> %in U: full-set S: full-set
; CHECK-NEXT:    %p0 = ptrtoaddr ptr %in_casted to i64
; CHECK-NEXT:    --> (ptrtoaddr ptr %in to i64) U: full-set S: full-set
; CHECK-NEXT:  Determining loop execution counts for: @ptrtoaddr_of_bitcast
;
  %in_casted = bitcast ptr %in to ptr
  %p0 = ptrtoaddr ptr %in_casted to i64
  store i64 %p0, ptr %out0
  ret void
}

define void @ptrtoaddr_of_nullptr(ptr %out0) {
; ALL-LABEL: 'ptrtoaddr_of_nullptr'
; ALL-NEXT:  Classifying expressions for: @ptrtoaddr_of_nullptr
; ALL-NEXT:    %p0 = ptrtoaddr ptr null to i64
; ALL-NEXT:    --> 0 U: [0,1) S: [0,1)
; ALL-NEXT:  Determining loop execution counts for: @ptrtoaddr_of_nullptr
;
; CHECK-LABEL: 'ptrtoaddr_of_nullptr'
; CHECK-NEXT:  Classifying expressions for: @ptrtoaddr_of_nullptr
; CHECK-NEXT:    %p0 = ptrtoaddr ptr null to i64
; CHECK-NEXT:    --> 0 U: [0,1) S: [0,1)
; CHECK-NEXT:  Determining loop execution counts for: @ptrtoaddr_of_nullptr
;
  %p0 = ptrtoaddr ptr null to i64
  store i64 %p0, ptr %out0
  ret void
}

define void @ptrtoaddr_of_gep(ptr %in, ptr %out0) {
; X64-LABEL: 'ptrtoaddr_of_gep'
; X64-NEXT:  Classifying expressions for: @ptrtoaddr_of_gep
; X64-NEXT:    %in_adj = getelementptr inbounds i8, ptr %in, i64 42
; X64-NEXT:    --> (42 + %in) U: full-set S: full-set
; X64-NEXT:    %p0 = ptrtoaddr ptr %in_adj to i64
; X64-NEXT:    --> (42 + (ptrtoaddr ptr %in to i64)) U: full-set S: full-set
; X64-NEXT:  Determining loop execution counts for: @ptrtoaddr_of_gep
;
; X32-LABEL: 'ptrtoaddr_of_gep'
; X32-NEXT:  Classifying expressions for: @ptrtoaddr_of_gep
; X32-NEXT:    %in_adj = getelementptr inbounds i8, ptr %in, i64 42
; X32-NEXT:    --> (42 + %in) U: full-set S: full-set
; X32-NEXT:    %p0 = ptrtoaddr ptr %in_adj to i64
; X32-NEXT:    --> (zext i32 (42 + (ptrtoaddr ptr %in to i32)) to i64) U: [0,4294967296) S: [0,4294967296)
; X32-NEXT:  Determining loop execution counts for: @ptrtoaddr_of_gep
;
; CHECK-LABEL: 'ptrtoaddr_of_gep'
; CHECK-NEXT:  Classifying expressions for: @ptrtoaddr_of_gep
; CHECK-NEXT:    %in_adj = getelementptr inbounds i8, ptr %in, i64 42
; CHECK-NEXT:    --> (42 + %in) U: full-set S: full-set
; CHECK-NEXT:    %p0 = ptrtoaddr ptr %in_adj to i64
; CHECK-NEXT:    --> (42 + (ptrtoaddr ptr %in to i64)) U: full-set S: full-set
; CHECK-NEXT:  Determining loop execution counts for: @ptrtoaddr_of_gep
;
  %in_adj = getelementptr inbounds i8, ptr %in, i64 42
  %p0 = ptrtoaddr ptr %in_adj to i64
  store i64  %p0, ptr  %out0
  ret void
}
