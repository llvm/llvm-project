	.file	"simple_types_loop_invariant.cpp"
	.text
	.globl	_Z13record_resultdPKc           // -- Begin function _Z13record_resultdPKc
	.p2align	2
	.type	_Z13record_resultdPKc,@function
_Z13record_resultdPKc:                  // @_Z13record_resultdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	adrp	x4, results
	adrp	x3, allocated_results
	adrp	x1, current_test
	ldr	x2, [x4, :lo12:results]
	ldr	w6, [x3, :lo12:allocated_results]
	cbz	x2, .LBB0_2
// %bb.1:
	ldr	w5, [x1, :lo12:current_test]
	cmp	w5, w6
	b.lt	.LBB0_4
.LBB0_2:
	add	w5, w6, #10
	mov	x0, x2
	sbfiz	x1, x5, #4, #32
	str	w5, [x3, :lo12:allocated_results]
	bl	realloc
	str	x0, [x4, :lo12:results]
	cbz	x0, .LBB0_5
// %bb.3:
	ldr	w5, [x1, :lo12:current_test]
	mov	x2, x0
.LBB0_4:
	add	x2, x2, w5, sxtw #4
	add	w3, w5, #1
	str	d0, [x2]
	str	x0, [x2, #8]
	str	w3, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB0_5:
	.cfi_restore_state
	ldr	w0, [x3, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end0:
	.size	_Z13record_resultdPKc, .Lfunc_end0-_Z13record_resultdPKc
	.cfi_endproc
                                        // -- End function
	.globl	_Z9summarizePKciiii             // -- Begin function _Z9summarizePKciiii
	.p2align	2
	.type	_Z9summarizePKciiii,@function
_Z9summarizePKciiii:                    // @_Z9summarizePKciiii
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	w6, w1
	mov	x1, x0
	adrp	x0, current_test
	ldr	w7, [x0, :lo12:current_test]
	mov	w2, w4
	adrp	x3, results
	mov	w5, w2
	cmp	w7, #1
	b.lt	.LBB1_3
// %bb.1:
	ldr	x4, [x3, :lo12:results]
	add	x8, x4, #8
	mov	w4, #12                         // =0xc
.LBB1_2:                                // =>This Inner Loop Header: Depth=1
	ldr	x0, [x8], #16
	bl	strlen
	mov	x9, x0
	cmp	w4, w9
	csel	w4, w4, w9, gt
	subs	x7, x7, #1
	b.ne	.LBB1_2
	b	.LBB1_4
.LBB1_3:
	mov	w4, #12                         // =0xc
.LBB1_4:
	adrp	x7, .L.str.2
	add	x7, x7, :lo12:.L.str.2
	sub	w1, w4, #12
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	mov	x2, x7
	bl	printf
	adrp	x0, .L.str.3
	add	x0, x0, :lo12:.L.str.3
	mov	w1, w4
	mov	x2, x7
	bl	printf
	movi	d0, #0000000000000000
	ldr	w7, [x0, :lo12:current_test]
	cmp	w7, #1
	b.lt	.LBB1_15
// %bb.5:                               // %.preheader2
	scvtf	d1, w6
	scvtf	d2, w5
	mov	x5, #145685290680320            // =0x848000000000
	movk	x5, #16686, lsl #48
	mov	x7, xzr
	mov	x8, xzr
	adrp	x6, .L.str.4
	add	x6, x6, :lo12:.L.str.4
	adrp	x9, .L.str.5
	add	x9, x9, :lo12:.L.str.5
	fmul	d1, d1, d2
	fmov	d2, x5
	fdiv	d1, d1, d2
.LBB1_6:                                // =>This Inner Loop Header: Depth=1
	ldr	x10, [x3, :lo12:results]
	add	x11, x10, x7
	ldr	x5, [x11, #8]
	mov	x0, x5
	bl	strlen
	ldr	d0, [x11]
	ldr	d4, [x10]
	mov	x10, x0
	sub	w10, w4, w10
	mov	x0, x6
	mov	w1, w8
	fdiv	d1, d1, d0
	mov	w2, w10
	mov	x3, x9
	mov	x4, x5
	fdiv	d2, d0, d4
	bl	printf
	ldrsw	x5, [x0, :lo12:current_test]
	add	x8, x8, #1
	add	x7, x7, #16
	cmp	x8, x5
	b.lt	.LBB1_6
// %bb.7:
	cmp	w5, #1
	b.lt	.LBB1_15
// %bb.8:
	movi	d0, #0000000000000000
	ldr	x4, [x3, :lo12:results]
	cmp	w5, #1
	b.ne	.LBB1_10
// %bb.9:
	mov	x6, xzr
	b	.LBB1_13
.LBB1_10:
	and	x6, x5, #0x7ffffffe
	add	x7, x4, #16
	mov	x8, x6
.LBB1_11:                               // =>This Inner Loop Header: Depth=1
	ldur	d1, [x7, #-16]
	subs	x8, x8, #2
	fadd	d0, d0, d1
	ldr	d1, [x7], #32
	fadd	d0, d0, d1
	b.ne	.LBB1_11
// %bb.12:
	cmp	x6, x5
	b.eq	.LBB1_15
.LBB1_13:                               // %.preheader
	add	x4, x4, x6, lsl #4
	sub	x5, x5, x6
.LBB1_14:                               // =>This Inner Loop Header: Depth=1
	ldr	d1, [x4], #16
	subs	x5, x5, #1
	fadd	d0, d0, d1
	b.ne	.LBB1_14
.LBB1_15:
	adrp	x0, .L.str.6
	add	x0, x0, :lo12:.L.str.6
	bl	printf
	cbz	w2, .LBB1_20
// %bb.16:
	ldr	w2, [x0, :lo12:current_test]
	cmp	w2, #2
	b.lt	.LBB1_20
// %bb.17:
	ldr	x2, [x3, :lo12:results]
	movi	d0, #0000000000000000
	mov	w3, #1                          // =0x1
	ldr	d1, [x2], #16
.LBB1_18:                               // =>This Inner Loop Header: Depth=1
	ldr	d2, [x2], #16
	fdiv	d0, d2, d1
	bl	log
	fadd	d0, d0, d0
	ldrsw	x4, [x0, :lo12:current_test]
	add	x3, x3, #1
	cmp	x3, x4
	b.lt	.LBB1_18
// %bb.19:
	sub	w2, w4, #1
	scvtf	d1, w2
	fdiv	d0, d0, d1
	bl	exp
	adrp	x0, .L.str.7
	add	x0, x0, :lo12:.L.str.7
	bl	printf
.LBB1_20:
	str	wzr, [x0, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end1:
	.size	_Z9summarizePKciiii, .Lfunc_end1-_Z9summarizePKciiii
	.cfi_endproc
                                        // -- End function
	.globl	_Z17summarize_simplefP8_IO_FILEPKc // -- Begin function _Z17summarize_simplefP8_IO_FILEPKc
	.p2align	2
	.type	_Z17summarize_simplefP8_IO_FILEPKc,@function
_Z17summarize_simplefP8_IO_FILEPKc:     // @_Z17summarize_simplefP8_IO_FILEPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	mov	x2, x0
	adrp	x0, current_test
	adrp	x3, results
	ldr	w5, [x0, :lo12:current_test]
	cmp	w5, #1
	b.lt	.LBB2_3
// %bb.1:
	ldr	x4, [x3, :lo12:results]
	add	x6, x4, #8
	mov	w4, #12                         // =0xc
.LBB2_2:                                // =>This Inner Loop Header: Depth=1
	ldr	x0, [x6], #16
	bl	strlen
	mov	x7, x0
	cmp	w4, w7
	csel	w4, w4, w7, gt
	subs	x5, x5, #1
	b.ne	.LBB2_2
	b	.LBB2_4
.LBB2_3:
	mov	w4, #12                         // =0xc
.LBB2_4:
	sub	w6, w4, #12
	adrp	x5, .L.str.2
	add	x5, x5, :lo12:.L.str.2
	adrp	x1, .L.str.8
	add	x1, x1, :lo12:.L.str.8
	mov	x0, x2
	mov	w2, w6
	mov	x3, x5
	bl	fprintf
	adrp	x1, .L.str.9
	add	x1, x1, :lo12:.L.str.9
	mov	x0, x2
	mov	w2, w4
	mov	x3, x5
	bl	fprintf
	movi	d0, #0000000000000000
	ldr	w5, [x0, :lo12:current_test]
	cmp	w5, #1
	b.lt	.LBB2_15
// %bb.5:                               // %.preheader2
	mov	x6, xzr
	mov	x7, xzr
	adrp	x8, .L.str.10
	add	x8, x8, :lo12:.L.str.10
	adrp	x9, .L.str.5
	add	x9, x9, :lo12:.L.str.5
.LBB2_6:                                // =>This Inner Loop Header: Depth=1
	ldr	x5, [x3, :lo12:results]
	add	x10, x5, x6
	ldr	x5, [x10, #8]
	mov	x0, x5
	bl	strlen
	mov	x11, x0
	ldr	d0, [x10]
	mov	x0, x2
	sub	w3, w4, w11
	mov	x1, x8
	mov	w2, w7
	mov	x4, x9
	bl	fprintf
	ldrsw	x5, [x0, :lo12:current_test]
	add	x7, x7, #1
	add	x6, x6, #16
	cmp	x7, x5
	b.lt	.LBB2_6
// %bb.7:
	cmp	w5, #1
	b.lt	.LBB2_15
// %bb.8:
	movi	d0, #0000000000000000
	ldr	x3, [x3, :lo12:results]
	cmp	w5, #1
	b.ne	.LBB2_10
// %bb.9:
	mov	x4, xzr
	b	.LBB2_13
.LBB2_10:
	and	x4, x5, #0x7ffffffe
	add	x6, x3, #16
	mov	x7, x4
.LBB2_11:                               // =>This Inner Loop Header: Depth=1
	ldur	d1, [x6, #-16]
	subs	x7, x7, #2
	fadd	d0, d0, d1
	ldr	d1, [x6], #32
	fadd	d0, d0, d1
	b.ne	.LBB2_11
// %bb.12:
	cmp	x4, x5
	b.eq	.LBB2_15
.LBB2_13:                               // %.preheader
	add	x3, x3, x4, lsl #4
	sub	x4, x5, x4
.LBB2_14:                               // =>This Inner Loop Header: Depth=1
	ldr	d1, [x3], #16
	subs	x4, x4, #1
	fadd	d0, d0, d1
	b.ne	.LBB2_14
.LBB2_15:
	adrp	x1, .L.str.6
	add	x1, x1, :lo12:.L.str.6
	mov	x0, x2
	mov	x2, x1
	bl	fprintf
	str	wzr, [x0, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end2:
	.size	_Z17summarize_simplefP8_IO_FILEPKc, .Lfunc_end2-_Z17summarize_simplefP8_IO_FILEPKc
	.cfi_endproc
                                        // -- End function
	.globl	_Z11start_timerv                // -- Begin function _Z11start_timerv
	.p2align	2
	.type	_Z11start_timerv,@function
_Z11start_timerv:                       // @_Z11start_timerv
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	bl	clock
	adrp	x1, start_time
	str	x0, [x1, :lo12:start_time]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end3:
	.size	_Z11start_timerv, .Lfunc_end3-_Z11start_timerv
	.cfi_endproc
                                        // -- End function
	.globl	_Z5timerv                       // -- Begin function _Z5timerv
	.p2align	2
	.type	_Z5timerv,@function
_Z5timerv:                              // @_Z5timerv
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	bl	clock
	adrp	x0, start_time
	ldr	x1, [x0, :lo12:start_time]
	sub	x1, x0, x1
	scvtf	d0, x1
	mov	x1, #145685290680320            // =0x848000000000
	movk	x1, #16686, lsl #48
	fmov	d1, x1
	adrp	x1, end_time
	fdiv	d0, d0, d1
	str	x0, [x1, :lo12:end_time]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end4:
	.size	_Z5timerv, .Lfunc_end4-_Z5timerv
	.cfi_endproc
                                        // -- End function
	.globl	main                            // -- Begin function main
	.p2align	2
	.type	main,@function
main:                                   // @main
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	fmov	d0, #1.00000000
	mov	w2, w0
	cmp	w0, #2
	adrp	x0, init_value
	b.lt	.LBB5_4
// %bb.1:
	ldr	x0, [x1, #8]
	mov	x1, xzr
	mov	w2, #10                         // =0xa
	bl	__isoc23_strtol
	mov	x3, x0
	adrp	x4, iterations
	cmp	w2, #2
	str	w3, [x4, :lo12:iterations]
	b.eq	.LBB5_4
// %bb.2:
	ldr	x0, [x1, #16]
	mov	x1, xzr
	bl	strtod
	cmp	w2, #4
	str	d0, [x0, :lo12:init_value]
	b.lo	.LBB5_4
// %bb.3:
	ldr	x0, [x1, #24]
	mov	x1, xzr
	bl	strtod
.LBB5_4:
	ldr	d1, [x0, :lo12:init_value]
	adrp	x5, data8
	add	x5, x5, :lo12:data8
	mov	x0, x5
	mov	w2, #8000                       // =0x1f40
	mov	w3, #8000                       // =0x1f40
	fcvtzs	w1, d1
	bl	memset
	fcvtzs	w1, d0
	adrp	x3, .L.str.11
	add	x3, x3, :lo12:.L.str.11
	mov	x0, x5
	lsl	w2, w1, #1
	add	w4, w1, #2
	mov	w1, #8000                       // =0x1f40
	sxtb	w7, w4
	sxtb	w6, w2
	mov	w2, w1
	sdiv	w6, w6, w7
	bl	_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.12
	add	x3, x3, :lo12:.L.str.12
	mov	x0, x5
	mov	w2, w1
	bl	_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	adrp	x7, .L.str.13
	add	x7, x7, :lo12:.L.str.13
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.14
	add	x3, x3, :lo12:.L.str.14
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc
	adrp	x7, .L.str.15
	add	x7, x7, :lo12:.L.str.15
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.16
	add	x3, x3, :lo12:.L.str.16
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc
	adrp	x7, .L.str.17
	add	x7, x7, :lo12:.L.str.17
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.18
	add	x7, x7, :lo12:.L.str.18
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.19
	add	x3, x3, :lo12:.L.str.19
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc
	adrp	x7, .L.str.20
	add	x7, x7, :lo12:.L.str.20
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.21
	add	x7, x7, :lo12:.L.str.21
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.22
	add	x7, x7, :lo12:.L.str.22
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.23
	add	x3, x3, :lo12:.L.str.23
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc
	adrp	x7, .L.str.24
	add	x7, x7, :lo12:.L.str.24
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.25
	add	x3, x3, :lo12:.L.str.25
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc
	adrp	x7, .L.str.26
	add	x7, x7, :lo12:.L.str.26
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.27
	add	x3, x3, :lo12:.L.str.27
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc
	adrp	x7, .L.str.28
	add	x7, x7, :lo12:.L.str.28
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc
	ldr	d1, [x0, :lo12:init_value]
	adrp	x5, data8unsigned
	add	x5, x5, :lo12:data8unsigned
	mov	x0, x5
	mov	w2, #8000                       // =0x1f40
	fcvtzs	w1, d1
	bl	memset
	mov	w1, #8000                       // =0x1f40
	and	w6, w2, #0xfe
	and	w7, w4, #0xff
	adrp	x3, .L.str.29
	add	x3, x3, :lo12:.L.str.29
	mov	x0, x5
	mov	w2, w1
	udiv	w6, w6, w7
	bl	_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.30
	add	x3, x3, :lo12:.L.str.30
	mov	x0, x5
	mov	w2, w1
	bl	_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	adrp	x7, .L.str.31
	add	x7, x7, :lo12:.L.str.31
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.32
	add	x3, x3, :lo12:.L.str.32
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc
	adrp	x7, .L.str.33
	add	x7, x7, :lo12:.L.str.33
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.34
	add	x3, x3, :lo12:.L.str.34
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc
	adrp	x7, .L.str.35
	add	x7, x7, :lo12:.L.str.35
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.36
	add	x7, x7, :lo12:.L.str.36
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.37
	add	x3, x3, :lo12:.L.str.37
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc
	adrp	x7, .L.str.38
	add	x7, x7, :lo12:.L.str.38
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.39
	add	x7, x7, :lo12:.L.str.39
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.40
	add	x7, x7, :lo12:.L.str.40
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.41
	add	x3, x3, :lo12:.L.str.41
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc
	adrp	x7, .L.str.42
	add	x7, x7, :lo12:.L.str.42
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.43
	add	x3, x3, :lo12:.L.str.43
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc
	adrp	x7, .L.str.44
	add	x7, x7, :lo12:.L.str.44
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.45
	add	x3, x3, :lo12:.L.str.45
	mov	x0, x5
	mov	w2, w1
	bl	_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc
	adrp	x7, .L.str.46
	add	x7, x7, :lo12:.L.str.46
	add	w5, w6, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x5
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc
	ldr	d1, [x0, :lo12:init_value]
	fcvtzs	w4, d1
	dup	v1.8h, w4
	adrp	x4, data16+16
	add	x4, x4, :lo12:data16+16
.LBB5_5:                                // =>This Inner Loop Header: Depth=1
	subs	x3, x3, #16
	stp	q1, q1, [x4, #-16]
	add	x4, x4, #32
	b.ne	.LBB5_5
// %bb.6:
	add	w4, w1, #2
	sxth	w3, w2
	adrp	x6, data16
	add	x6, x6, :lo12:data16
	sxth	w5, w4
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	w2, w1
	sdiv	w5, w3, w5
	adrp	x3, .L.str.47
	add	x3, x3, :lo12:.L.str.47
	mov	w3, #8000                       // =0x1f40
	bl	_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.48
	add	x3, x3, :lo12:.L.str.48
	mov	x0, x6
	mov	w2, w1
	bl	_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	adrp	x7, .L.str.49
	add	x7, x7, :lo12:.L.str.49
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.50
	add	x3, x3, :lo12:.L.str.50
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc
	adrp	x7, .L.str.51
	add	x7, x7, :lo12:.L.str.51
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.52
	add	x3, x3, :lo12:.L.str.52
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc
	adrp	x7, .L.str.53
	add	x7, x7, :lo12:.L.str.53
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.54
	add	x7, x7, :lo12:.L.str.54
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.55
	add	x3, x3, :lo12:.L.str.55
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc
	adrp	x7, .L.str.56
	add	x7, x7, :lo12:.L.str.56
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.57
	add	x7, x7, :lo12:.L.str.57
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.58
	add	x7, x7, :lo12:.L.str.58
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.59
	add	x3, x3, :lo12:.L.str.59
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc
	adrp	x7, .L.str.60
	add	x7, x7, :lo12:.L.str.60
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.61
	add	x3, x3, :lo12:.L.str.61
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc
	adrp	x7, .L.str.62
	add	x7, x7, :lo12:.L.str.62
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.63
	add	x3, x3, :lo12:.L.str.63
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc
	adrp	x7, .L.str.64
	add	x7, x7, :lo12:.L.str.64
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc
	ldr	d1, [x0, :lo12:init_value]
	fcvtzs	w4, d1
	dup	v1.8h, w4
	adrp	x4, data16unsigned+16
	add	x4, x4, :lo12:data16unsigned+16
.LBB5_7:                                // =>This Inner Loop Header: Depth=1
	subs	x3, x3, #16
	stp	q1, q1, [x4, #-16]
	add	x4, x4, #32
	b.ne	.LBB5_7
// %bb.8:
	add	w4, w1, #2
	and	w3, w2, #0xfffe
	adrp	x6, data16unsigned
	add	x6, x6, :lo12:data16unsigned
	and	w5, w4, #0xffff
	mov	w1, #8000                       // =0x1f40
	udiv	w5, w3, w5
	adrp	x3, .L.str.65
	add	x3, x3, :lo12:.L.str.65
	mov	x0, x6
	mov	w2, w1
	mov	w3, #8000                       // =0x1f40
	bl	_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.66
	add	x3, x3, :lo12:.L.str.66
	mov	x0, x6
	mov	w2, w1
	bl	_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc
	adrp	x7, .L.str.67
	add	x7, x7, :lo12:.L.str.67
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.68
	add	x3, x3, :lo12:.L.str.68
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc
	adrp	x7, .L.str.69
	add	x7, x7, :lo12:.L.str.69
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.70
	add	x3, x3, :lo12:.L.str.70
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc
	adrp	x7, .L.str.71
	add	x7, x7, :lo12:.L.str.71
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.72
	add	x7, x7, :lo12:.L.str.72
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.73
	add	x3, x3, :lo12:.L.str.73
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc
	adrp	x7, .L.str.74
	add	x7, x7, :lo12:.L.str.74
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.75
	add	x7, x7, :lo12:.L.str.75
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.76
	add	x7, x7, :lo12:.L.str.76
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.77
	add	x3, x3, :lo12:.L.str.77
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc
	adrp	x7, .L.str.78
	add	x7, x7, :lo12:.L.str.78
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.79
	add	x3, x3, :lo12:.L.str.79
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc
	adrp	x7, .L.str.80
	add	x7, x7, :lo12:.L.str.80
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.81
	add	x3, x3, :lo12:.L.str.81
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc
	adrp	x7, .L.str.82
	add	x7, x7, :lo12:.L.str.82
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc
	ldr	d1, [x0, :lo12:init_value]
	fcvtzs	w4, d1
	dup	v1.4s, w4
	adrp	x4, data32+16
	add	x4, x4, :lo12:data32+16
.LBB5_9:                                // =>This Inner Loop Header: Depth=1
	subs	x3, x3, #8
	stp	q1, q1, [x4, #-16]
	add	x4, x4, #32
	b.ne	.LBB5_9
// %bb.10:
	add	w4, w1, #2
	adrp	x6, data32
	add	x6, x6, :lo12:data32
	adrp	x3, .L.str.83
	add	x3, x3, :lo12:.L.str.83
	mov	w1, #8000                       // =0x1f40
	sdiv	w5, w2, w4
	mov	x0, x6
	mov	w2, w1
	mov	w3, #8000                       // =0x1f40
	bl	_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.84
	add	x3, x3, :lo12:.L.str.84
	mov	x0, x6
	mov	w2, w1
	bl	_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	adrp	x7, .L.str.85
	add	x7, x7, :lo12:.L.str.85
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.86
	add	x3, x3, :lo12:.L.str.86
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc
	adrp	x7, .L.str.87
	add	x7, x7, :lo12:.L.str.87
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.88
	add	x3, x3, :lo12:.L.str.88
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc
	adrp	x7, .L.str.89
	add	x7, x7, :lo12:.L.str.89
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.90
	add	x7, x7, :lo12:.L.str.90
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.91
	add	x3, x3, :lo12:.L.str.91
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc
	adrp	x7, .L.str.92
	add	x7, x7, :lo12:.L.str.92
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.93
	add	x7, x7, :lo12:.L.str.93
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.94
	add	x7, x7, :lo12:.L.str.94
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.95
	add	x3, x3, :lo12:.L.str.95
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc
	adrp	x7, .L.str.96
	add	x7, x7, :lo12:.L.str.96
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.97
	add	x3, x3, :lo12:.L.str.97
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc
	adrp	x7, .L.str.98
	add	x7, x7, :lo12:.L.str.98
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc
	mov	w1, #8000                       // =0x1f40
	adrp	x3, .L.str.99
	add	x3, x3, :lo12:.L.str.99
	mov	x0, x6
	mov	w2, w1
	bl	_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc
	adrp	x7, .L.str.100
	add	x7, x7, :lo12:.L.str.100
	add	w5, w5, w1
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	mov	x6, x7
	mov	w2, w1
	mov	w3, w1
	bl	_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc
	ldr	d1, [x0, :lo12:init_value]
	fcvtzu	w1, d1
	dup	v1.4s, w1
	adrp	x1, data32unsigned+16
	add	x1, x1, :lo12:data32unsigned+16
.LBB5_11:                               // =>This Inner Loop Header: Depth=1
	subs	x3, x3, #8
	stp	q1, q1, [x1, #-16]
	add	x1, x1, #32
	b.ne	.LBB5_11
// %bb.12:
	fcvtzu	w2, d0
	adrp	x1, .L.str.101
	add	x1, x1, :lo12:.L.str.101
	adrp	x6, data32unsigned
	add	x6, x6, :lo12:data32unsigned
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	lsl	w3, w2, #1
	add	w4, w2, #2
	udiv	w5, w3, w4
	mov	x3, x1
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	adrp	x3, .L.str.102
	add	x3, x3, :lo12:.L.str.102
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	adrp	x7, .L.str.103
	add	x7, x7, :lo12:.L.str.103
	add	w5, w5, w2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.104
	add	x3, x3, :lo12:.L.str.104
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc
	adrp	x7, .L.str.105
	add	x7, x7, :lo12:.L.str.105
	add	w5, w5, w2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.106
	add	x3, x3, :lo12:.L.str.106
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc
	adrp	x7, .L.str.107
	add	x7, x7, :lo12:.L.str.107
	add	w5, w5, w2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.108
	add	x7, x7, :lo12:.L.str.108
	add	w5, w5, w2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.109
	add	x3, x3, :lo12:.L.str.109
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc
	adrp	x7, .L.str.110
	add	x7, x7, :lo12:.L.str.110
	add	w5, w5, w2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.111
	add	x7, x7, :lo12:.L.str.111
	add	w5, w5, w2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.112
	add	x7, x7, :lo12:.L.str.112
	add	w5, w5, w2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.113
	add	x3, x3, :lo12:.L.str.113
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc
	adrp	x7, .L.str.114
	add	x7, x7, :lo12:.L.str.114
	add	w5, w5, w2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.115
	add	x3, x3, :lo12:.L.str.115
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc
	adrp	x7, .L.str.116
	add	x7, x7, :lo12:.L.str.116
	add	w5, w5, w2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.117
	add	x3, x3, :lo12:.L.str.117
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc
	adrp	x7, .L.str.118
	add	x7, x7, :lo12:.L.str.118
	add	w5, w5, w2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc
	ldr	d1, [x0, :lo12:init_value]
	fcvtzs	x2, d1
	dup	v1.2d, x2
	adrp	x2, data64+16
	add	x2, x2, :lo12:data64+16
.LBB5_13:                               // =>This Inner Loop Header: Depth=1
	subs	x1, x1, #4
	stp	q1, q1, [x2, #-16]
	add	x2, x2, #32
	b.ne	.LBB5_13
// %bb.14:
	fcvtzs	x2, d0
	adrp	x1, .L.str.119
	add	x1, x1, :lo12:.L.str.119
	adrp	x6, data64
	add	x6, x6, :lo12:data64
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	lsl	x3, x2, #1
	add	x4, x2, #2
	sdiv	x5, x3, x4
	mov	x3, x1
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	adrp	x3, .L.str.120
	add	x3, x3, :lo12:.L.str.120
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	adrp	x7, .L.str.121
	add	x7, x7, :lo12:.L.str.121
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.122
	add	x3, x3, :lo12:.L.str.122
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc
	adrp	x7, .L.str.123
	add	x7, x7, :lo12:.L.str.123
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.124
	add	x3, x3, :lo12:.L.str.124
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc
	adrp	x7, .L.str.125
	add	x7, x7, :lo12:.L.str.125
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.126
	add	x7, x7, :lo12:.L.str.126
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.127
	add	x3, x3, :lo12:.L.str.127
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc
	adrp	x7, .L.str.128
	add	x7, x7, :lo12:.L.str.128
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.129
	add	x7, x7, :lo12:.L.str.129
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.130
	add	x7, x7, :lo12:.L.str.130
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.131
	add	x3, x3, :lo12:.L.str.131
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc
	adrp	x7, .L.str.132
	add	x7, x7, :lo12:.L.str.132
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.133
	add	x3, x3, :lo12:.L.str.133
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc
	adrp	x7, .L.str.134
	add	x7, x7, :lo12:.L.str.134
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.135
	add	x3, x3, :lo12:.L.str.135
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc
	adrp	x7, .L.str.136
	add	x7, x7, :lo12:.L.str.136
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc
	ldr	d1, [x0, :lo12:init_value]
	fcvtzu	x2, d1
	dup	v1.2d, x2
	adrp	x2, data64unsigned+16
	add	x2, x2, :lo12:data64unsigned+16
.LBB5_15:                               // =>This Inner Loop Header: Depth=1
	subs	x1, x1, #4
	stp	q1, q1, [x2, #-16]
	add	x2, x2, #32
	b.ne	.LBB5_15
// %bb.16:
	fcvtzu	x2, d0
	adrp	x1, .L.str.137
	add	x1, x1, :lo12:.L.str.137
	adrp	x6, data64unsigned
	add	x6, x6, :lo12:data64unsigned
	mov	w1, #8000                       // =0x1f40
	mov	x0, x6
	lsl	x3, x2, #1
	add	x4, x2, #2
	udiv	x5, x3, x4
	mov	x3, x1
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	adrp	x3, .L.str.138
	add	x3, x3, :lo12:.L.str.138
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	adrp	x7, .L.str.139
	add	x7, x7, :lo12:.L.str.139
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.140
	add	x3, x3, :lo12:.L.str.140
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc
	adrp	x7, .L.str.141
	add	x7, x7, :lo12:.L.str.141
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.142
	add	x3, x3, :lo12:.L.str.142
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc
	adrp	x7, .L.str.143
	add	x7, x7, :lo12:.L.str.143
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.144
	add	x7, x7, :lo12:.L.str.144
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.145
	add	x3, x3, :lo12:.L.str.145
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc
	adrp	x7, .L.str.146
	add	x7, x7, :lo12:.L.str.146
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.147
	add	x7, x7, :lo12:.L.str.147
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	adrp	x7, .L.str.148
	add	x7, x7, :lo12:.L.str.148
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.149
	add	x3, x3, :lo12:.L.str.149
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc
	adrp	x7, .L.str.150
	add	x7, x7, :lo12:.L.str.150
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.151
	add	x3, x3, :lo12:.L.str.151
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc
	adrp	x7, .L.str.152
	add	x7, x7, :lo12:.L.str.152
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc
	adrp	x3, .L.str.153
	add	x3, x3, :lo12:.L.str.153
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	bl	_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc
	adrp	x7, .L.str.154
	add	x7, x7, :lo12:.L.str.154
	add	x5, x5, x2
	mov	x0, x6
	mov	w1, #8000                       // =0x1f40
	mov	x6, x7
	bl	_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc
	ldr	d1, [x0, :lo12:init_value]
	adrp	x2, dataFloat+16
	add	x2, x2, :lo12:dataFloat+16
	fcvt	s1, d1
	dup	v1.4s, v1.s[0]
.LBB5_17:                               // =>This Inner Loop Header: Depth=1
	subs	x1, x1, #8
	stp	q1, q1, [x2, #-16]
	add	x2, x2, #32
	b.ne	.LBB5_17
// %bb.18:
	fcvt	s1, d0
	fmov	s2, #2.00000000
	adrp	x1, .L.str.155
	add	x1, x1, :lo12:.L.str.155
	adrp	x2, dataFloat
	add	x2, x2, :lo12:dataFloat
	mov	w1, #8000                       // =0x1f40
	mov	x0, x2
	mov	x2, x1
	mov	w1, #8000                       // =0x1f40
	fadd	s3, s1, s1
	fadd	s2, s1, s2
	fmov	s0, s1
	fdiv	s4, s3, s2
	fadd	s4, s4, s1
	bl	_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	fmov	s0, s1
	adrp	x3, .L.str.156
	add	x3, x3, :lo12:.L.str.156
	mov	x0, x2
	mov	w1, #8000                       // =0x1f40
	mov	x2, x3
	bl	_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	fmov	s0, s1
	fmov	s1, s3
	adrp	x3, .L.str.157
	add	x3, x3, :lo12:.L.str.157
	fmov	s3, s4
	mov	x0, x2
	mov	w1, #8000                       // =0x1f40
	mov	x2, x3
	bl	_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	fmov	s0, s1
	adrp	x3, .L.str.158
	add	x3, x3, :lo12:.L.str.158
	mov	x0, x2
	mov	w1, #8000                       // =0x1f40
	mov	x2, x3
	bl	_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc
	fmov	s0, s1
	fmov	s1, s3
	adrp	x3, .L.str.159
	add	x3, x3, :lo12:.L.str.159
	fmov	s3, s4
	mov	x0, x2
	mov	w1, #8000                       // =0x1f40
	mov	x2, x3
	bl	_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	fmov	s0, s1
	adrp	x3, .L.str.160
	add	x3, x3, :lo12:.L.str.160
	mov	x0, x2
	mov	w1, #8000                       // =0x1f40
	mov	x2, x3
	bl	_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc
	fmov	s0, s1
	fmov	s1, s3
	adrp	x3, .L.str.161
	add	x3, x3, :lo12:.L.str.161
	fmov	s3, s4
	mov	x0, x2
	mov	w1, #8000                       // =0x1f40
	mov	x2, x3
	bl	_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	fmov	s0, s1
	fmov	s1, s3
	adrp	x3, .L.str.162
	add	x3, x3, :lo12:.L.str.162
	fmov	s3, s4
	mov	x0, x2
	mov	w1, #8000                       // =0x1f40
	mov	x2, x3
	bl	_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	fmov	s0, s1
	adrp	x3, .L.str.163
	add	x3, x3, :lo12:.L.str.163
	mov	x0, x2
	mov	w1, #8000                       // =0x1f40
	mov	x2, x3
	bl	_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc
	fmov	s0, s1
	fmov	s1, s3
	adrp	x3, .L.str.164
	add	x3, x3, :lo12:.L.str.164
	fmov	s3, s4
	mov	x0, x2
	mov	w1, #8000                       // =0x1f40
	mov	x2, x3
	bl	_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	fmov	s0, s1
	fmov	s1, s3
	adrp	x3, .L.str.165
	add	x3, x3, :lo12:.L.str.165
	fmov	s3, s4
	mov	x0, x2
	mov	w1, #8000                       // =0x1f40
	mov	x2, x3
	bl	_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	fmov	s0, s1
	fmov	s1, s3
	adrp	x3, .L.str.166
	add	x3, x3, :lo12:.L.str.166
	fmov	s3, s4
	mov	x0, x2
	mov	w1, #8000                       // =0x1f40
	mov	x2, x3
	bl	_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	ldr	d1, [x0, :lo12:init_value]
	adrp	x0, dataDouble+16
	add	x0, x0, :lo12:dataDouble+16
	dup	v1.2d, v1.d[0]
.LBB5_19:                               // =>This Inner Loop Header: Depth=1
	subs	x1, x1, #4
	stp	q1, q1, [x0, #-16]
	add	x0, x0, #32
	b.ne	.LBB5_19
// %bb.20:
	fmov	d1, #2.00000000
	fadd	d2, d0, d0
	adrp	x1, .L.str.167
	add	x1, x1, :lo12:.L.str.167
	adrp	x0, dataDouble
	add	x0, x0, :lo12:dataDouble
	mov	w1, #8000                       // =0x1f40
	fadd	d1, d0, d1
	mov	x2, x1
	fdiv	d3, d2, d1
	fadd	d3, d0, d3
	bl	_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	adrp	x1, .L.str.168
	add	x1, x1, :lo12:.L.str.168
	mov	w1, #8000                       // =0x1f40
	mov	x2, x1
	bl	_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	fmov	d1, d2
	adrp	x1, .L.str.169
	add	x1, x1, :lo12:.L.str.169
	mov	w1, #8000                       // =0x1f40
	mov	x2, x1
	bl	_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	adrp	x1, .L.str.170
	add	x1, x1, :lo12:.L.str.170
	mov	w1, #8000                       // =0x1f40
	mov	x2, x1
	bl	_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc
	fmov	d1, d2
	adrp	x1, .L.str.171
	add	x1, x1, :lo12:.L.str.171
	mov	w1, #8000                       // =0x1f40
	mov	x2, x1
	bl	_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	adrp	x1, .L.str.172
	add	x1, x1, :lo12:.L.str.172
	mov	w1, #8000                       // =0x1f40
	mov	x2, x1
	bl	_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc
	fmov	d1, d2
	adrp	x1, .L.str.173
	add	x1, x1, :lo12:.L.str.173
	mov	w1, #8000                       // =0x1f40
	mov	x2, x1
	bl	_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	fmov	d1, d2
	adrp	x1, .L.str.174
	add	x1, x1, :lo12:.L.str.174
	mov	w1, #8000                       // =0x1f40
	mov	x2, x1
	bl	_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	adrp	x1, .L.str.175
	add	x1, x1, :lo12:.L.str.175
	mov	w1, #8000                       // =0x1f40
	mov	x2, x1
	bl	_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc
	fmov	d1, d2
	adrp	x1, .L.str.176
	add	x1, x1, :lo12:.L.str.176
	mov	w1, #8000                       // =0x1f40
	mov	x2, x1
	bl	_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	fmov	d1, d2
	adrp	x1, .L.str.177
	add	x1, x1, :lo12:.L.str.177
	mov	w1, #8000                       // =0x1f40
	mov	x2, x1
	bl	_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	fmov	d1, d2
	adrp	x1, .L.str.178
	add	x1, x1, :lo12:.L.str.178
	mov	w1, #8000                       // =0x1f40
	mov	x2, x1
	bl	_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	mov	w0, wzr
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end5:
	.size	main, .Lfunc_end5-main
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc: // @_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB6_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB6_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w3
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB6_4
.LBB6_3:                                //   in Loop: Header=BB6_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB6_23
.LBB6_4:                                // =>This Loop Header: Depth=1
                                        //     Child Loop BB6_9 Depth 2
                                        //     Child Loop BB6_13 Depth 2
                                        //     Child Loop BB6_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB6_6
// %bb.5:                               //   in Loop: Header=BB6_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB6_15
.LBB6_6:                                //   in Loop: Header=BB6_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB6_8
// %bb.7:                               //   in Loop: Header=BB6_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB6_12
.LBB6_8:                                // %.preheader2
                                        //   in Loop: Header=BB6_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB6_9:                                //   Parent Loop BB6_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.16b, v1.16b, v0.16b
	add	v2.16b, v2.16b, v0.16b
	subs	x18, x18, #32
	ldp	q4, q3, [x17, #-16]
	add	x17, x17, #32
	add	v1.16b, v1.16b, v4.16b
	add	v2.16b, v2.16b, v3.16b
	b.ne	.LBB6_9
// %bb.10:                              //   in Loop: Header=BB6_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB6_17
// %bb.11:                              //   in Loop: Header=BB6_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB6_15
.LBB6_12:                               //   in Loop: Header=BB6_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB6_13:                               //   Parent Loop BB6_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8b, v1.8b, v0.8b
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	add	v1.8b, v1.8b, v2.8b
	b.ne	.LBB6_13
// %bb.14:                              //   in Loop: Header=BB6_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB6_17
.LBB6_15:                               // %.preheader
                                        //   in Loop: Header=BB6_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB6_16:                               //   Parent Loop BB6_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	add	w17, w17, w3
	subs	x18, x18, #1
	add	w17, w17, w20
	b.ne	.LBB6_16
.LBB6_17:                               //   in Loop: Header=BB6_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	add	w18, w3, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB6_3
// %bb.18:                              //   in Loop: Header=BB6_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB6_3
.LBB6_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB6_21
.LBB6_20:                               //   in Loop: Header=BB6_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB6_23
.LBB6_21:                               // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w3, w9
	tst	w9, #0x3
	b.eq	.LBB6_20
// %bb.22:                              //   in Loop: Header=BB6_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB6_20
.LBB6_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB6_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB6_27
.LBB6_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB6_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB6_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB6_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end6:
	.size	_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc, .Lfunc_end6-_Z14test_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc // -- Begin function _Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.p2align	2
	.type	_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc: // @_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w6, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w6, #1
	b.lt	.LBB7_23
// %bb.1:
	mul	w5, w3, w7
	cmp	w7, #0
	b.le	.LBB7_19
// %bb.2:
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #16
	and	x12, x10, #0x7ffffff8
	and	x13, x10, #0x7fffffe0
	and	x14, x10, #0x18
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB7_4
.LBB7_3:                                //   in Loop: Header=BB7_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w6
	b.ge	.LBB7_23
.LBB7_4:                                // =>This Loop Header: Depth=1
                                        //     Child Loop BB7_9 Depth 2
                                        //     Child Loop BB7_13 Depth 2
                                        //     Child Loop BB7_16 Depth 2
	cmp	w7, #7
	b.hi	.LBB7_6
// %bb.5:                               //   in Loop: Header=BB7_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB7_15
.LBB7_6:                                //   in Loop: Header=BB7_4 Depth=1
	cmp	w7, #32
	b.hs	.LBB7_8
// %bb.7:                               //   in Loop: Header=BB7_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB7_12
.LBB7_8:                                // %.preheader2
                                        //   in Loop: Header=BB7_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x18, x11
	mov	x19, x13
.LBB7_9:                                //   Parent Loop BB7_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB7_9
// %bb.10:                              //   in Loop: Header=BB7_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x13, x10
	addv	b0, v0.16b
	fmov	w18, s0
	b.eq	.LBB7_17
// %bb.11:                              //   in Loop: Header=BB7_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB7_15
.LBB7_12:                               //   in Loop: Header=BB7_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w18
	add	x18, x15, x19
	add	x19, x8, x19
.LBB7_13:                               //   Parent Loop BB7_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x19], #8
	adds	x18, x18, #8
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB7_13
// %bb.14:                              //   in Loop: Header=BB7_4 Depth=1
	addv	b0, v0.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s0
	b.eq	.LBB7_17
.LBB7_15:                               // %.preheader
                                        //   in Loop: Header=BB7_4 Depth=1
	sub	x19, x10, x20
	add	x20, x8, x20
.LBB7_16:                               //   Parent Loop BB7_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	add	w18, w21, w18
	b.ne	.LBB7_16
.LBB7_17:                               //   in Loop: Header=BB7_4 Depth=1
	ldr	d0, [x16, :lo12:init_value]
	add	w18, w18, w5
	fcvtzs	w19, d0
	add	w19, w3, w19
	ubfiz	w19, w19, #6, #2
	cmp	w19, w18, uxtb
	b.eq	.LBB7_3
// %bb.18:                              //   in Loop: Header=BB7_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB7_3
.LBB7_19:
	adrp	x8, init_value
	mov	w7, wzr
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	ldr	d0, [x8, :lo12:init_value]
	b	.LBB7_21
.LBB7_20:                               //   in Loop: Header=BB7_21 Depth=1
	add	w7, w7, #1
	cmp	w7, w6
	b.ge	.LBB7_23
.LBB7_21:                               // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w3, w10
	ubfiz	w10, w10, #6, #2
	cmp	w10, w5, uxtb
	b.eq	.LBB7_20
// %bb.22:                              //   in Loop: Header=BB7_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x8, :lo12:init_value]
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB7_20
.LBB7_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB7_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB7_27
.LBB7_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB7_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB7_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB7_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end7:
	.size	_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc, .Lfunc_end7-_Z22test_hoisted_variable1Ia19custom_add_variableIaEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB8_23
// %bb.1:
	add	w4, w8, w4
	add	w8, w9, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB8_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w4
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB8_4
.LBB8_3:                                //   in Loop: Header=BB8_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB8_23
.LBB8_4:                                // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_9 Depth 2
                                        //     Child Loop BB8_13 Depth 2
                                        //     Child Loop BB8_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB8_6
// %bb.5:                               //   in Loop: Header=BB8_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB8_15
.LBB8_6:                                //   in Loop: Header=BB8_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB8_8
// %bb.7:                               //   in Loop: Header=BB8_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB8_12
.LBB8_8:                                // %.preheader2
                                        //   in Loop: Header=BB8_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB8_9:                                //   Parent Loop BB8_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.16b, v0.16b, v1.16b
	add	v2.16b, v0.16b, v2.16b
	subs	x18, x18, #32
	ldp	q4, q3, [x17, #-16]
	add	x17, x17, #32
	add	v1.16b, v1.16b, v4.16b
	add	v2.16b, v2.16b, v3.16b
	b.ne	.LBB8_9
// %bb.10:                              //   in Loop: Header=BB8_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB8_17
// %bb.11:                              //   in Loop: Header=BB8_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB8_15
.LBB8_12:                               //   in Loop: Header=BB8_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB8_13:                               //   Parent Loop BB8_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8b, v0.8b, v1.8b
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	add	v1.8b, v1.8b, v2.8b
	b.ne	.LBB8_13
// %bb.14:                              //   in Loop: Header=BB8_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB8_17
.LBB8_15:                               // %.preheader
                                        //   in Loop: Header=BB8_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB8_16:                               //   Parent Loop BB8_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	add	w17, w4, w17
	subs	x18, x18, #1
	add	w17, w17, w20
	b.ne	.LBB8_16
.LBB8_17:                               //   in Loop: Header=BB8_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	add	w18, w4, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB8_3
// %bb.18:                              //   in Loop: Header=BB8_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB8_3
.LBB8_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB8_21
.LBB8_20:                               //   in Loop: Header=BB8_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB8_23
.LBB8_21:                               // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB8_20
// %bb.22:                              //   in Loop: Header=BB8_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB8_20
.LBB8_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB8_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB8_27
.LBB8_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB8_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB8_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB8_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end8:
	.size	_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end8-_Z14test_variable4Ia28custom_add_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc: // @_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB9_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB9_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w3
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB9_4
.LBB9_3:                                //   in Loop: Header=BB9_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB9_23
.LBB9_4:                                // =>This Loop Header: Depth=1
                                        //     Child Loop BB9_9 Depth 2
                                        //     Child Loop BB9_13 Depth 2
                                        //     Child Loop BB9_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB9_6
// %bb.5:                               //   in Loop: Header=BB9_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB9_15
.LBB9_6:                                //   in Loop: Header=BB9_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB9_8
// %bb.7:                               //   in Loop: Header=BB9_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB9_12
.LBB9_8:                                // %.preheader2
                                        //   in Loop: Header=BB9_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB9_9:                                //   Parent Loop BB9_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.16b, v1.16b, v0.16b
	sub	v2.16b, v2.16b, v0.16b
	subs	x18, x18, #32
	ldp	q4, q3, [x17, #-16]
	add	x17, x17, #32
	add	v1.16b, v1.16b, v4.16b
	add	v2.16b, v2.16b, v3.16b
	b.ne	.LBB9_9
// %bb.10:                              //   in Loop: Header=BB9_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB9_17
// %bb.11:                              //   in Loop: Header=BB9_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB9_15
.LBB9_12:                               //   in Loop: Header=BB9_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB9_13:                               //   Parent Loop BB9_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.8b, v1.8b, v0.8b
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	add	v1.8b, v1.8b, v2.8b
	b.ne	.LBB9_13
// %bb.14:                              //   in Loop: Header=BB9_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB9_17
.LBB9_15:                               // %.preheader
                                        //   in Loop: Header=BB9_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB9_16:                               //   Parent Loop BB9_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	sub	w17, w17, w3
	subs	x18, x18, #1
	add	w17, w17, w20
	b.ne	.LBB9_16
.LBB9_17:                               //   in Loop: Header=BB9_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	sub	w18, w18, w3
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB9_3
// %bb.18:                              //   in Loop: Header=BB9_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB9_3
.LBB9_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB9_21
.LBB9_20:                               //   in Loop: Header=BB9_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB9_23
.LBB9_21:                               // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	sub	w9, w9, w3
	tst	w9, #0x3
	b.eq	.LBB9_20
// %bb.22:                              //   in Loop: Header=BB9_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB9_20
.LBB9_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB9_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB9_27
.LBB9_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB9_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB9_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB9_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end9:
	.size	_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc, .Lfunc_end9-_Z14test_variable1Ia19custom_sub_variableIaEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB10_23
// %bb.1:
	add	w4, w8, w4
	add	w8, w9, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB10_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w4
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB10_4
.LBB10_3:                               //   in Loop: Header=BB10_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB10_23
.LBB10_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB10_9 Depth 2
                                        //     Child Loop BB10_13 Depth 2
                                        //     Child Loop BB10_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB10_6
// %bb.5:                               //   in Loop: Header=BB10_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB10_15
.LBB10_6:                               //   in Loop: Header=BB10_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB10_8
// %bb.7:                               //   in Loop: Header=BB10_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB10_12
.LBB10_8:                               // %.preheader2
                                        //   in Loop: Header=BB10_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB10_9:                               //   Parent Loop BB10_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.16b, v1.16b, v0.16b
	sub	v2.16b, v2.16b, v0.16b
	subs	x18, x18, #32
	ldp	q4, q3, [x17, #-16]
	add	x17, x17, #32
	add	v1.16b, v1.16b, v4.16b
	add	v2.16b, v2.16b, v3.16b
	b.ne	.LBB10_9
// %bb.10:                              //   in Loop: Header=BB10_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB10_17
// %bb.11:                              //   in Loop: Header=BB10_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB10_15
.LBB10_12:                              //   in Loop: Header=BB10_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB10_13:                              //   Parent Loop BB10_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.8b, v1.8b, v0.8b
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	add	v1.8b, v1.8b, v2.8b
	b.ne	.LBB10_13
// %bb.14:                              //   in Loop: Header=BB10_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB10_17
.LBB10_15:                              // %.preheader
                                        //   in Loop: Header=BB10_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB10_16:                              //   Parent Loop BB10_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	sub	w17, w17, w4
	subs	x18, x18, #1
	add	w17, w17, w20
	b.ne	.LBB10_16
.LBB10_17:                              //   in Loop: Header=BB10_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	sub	w18, w18, w4
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB10_3
// %bb.18:                              //   in Loop: Header=BB10_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB10_3
.LBB10_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB10_21
.LBB10_20:                              //   in Loop: Header=BB10_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB10_23
.LBB10_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	sub	w9, w9, w4
	tst	w9, #0x3
	b.eq	.LBB10_20
// %bb.22:                              //   in Loop: Header=BB10_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB10_20
.LBB10_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB10_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB10_27
.LBB10_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB10_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB10_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB10_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end10:
	.size	_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end10-_Z14test_variable4Ia28custom_sub_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc: // @_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB11_23
// %bb.1:
	lsl	w4, w6, #6
	cmp	w7, #0
	b.le	.LBB11_19
// %bb.2:
	mov	w10, w7
	dup	v0.16b, w6
	mov	w9, wzr
	and	x12, x10, #0x7ffffff8
	add	x11, x8, #16
	and	x13, x10, #0x7fffffe0
	and	x14, x10, #0x18
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB11_4
.LBB11_3:                               //   in Loop: Header=BB11_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w5
	b.ge	.LBB11_23
.LBB11_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB11_9 Depth 2
                                        //     Child Loop BB11_13 Depth 2
                                        //     Child Loop BB11_16 Depth 2
	cmp	w7, #7
	b.hi	.LBB11_6
// %bb.5:                               //   in Loop: Header=BB11_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB11_15
.LBB11_6:                               //   in Loop: Header=BB11_4 Depth=1
	cmp	w7, #32
	b.hs	.LBB11_8
// %bb.7:                               //   in Loop: Header=BB11_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB11_12
.LBB11_8:                               // %.preheader2
                                        //   in Loop: Header=BB11_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x11
	mov	x19, x13
.LBB11_9:                               //   Parent Loop BB11_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	mla	v1.16b, v4.16b, v0.16b
	mla	v2.16b, v3.16b, v0.16b
	b.ne	.LBB11_9
// %bb.10:                              //   in Loop: Header=BB11_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x13, x10
	addv	b1, v1.16b
	fmov	w18, s1
	b.eq	.LBB11_17
// %bb.11:                              //   in Loop: Header=BB11_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB11_15
.LBB11_12:                              //   in Loop: Header=BB11_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w18
	add	x18, x15, x19
	add	x19, x8, x19
.LBB11_13:                              //   Parent Loop BB11_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x19], #8
	adds	x18, x18, #8
	mla	v1.8b, v2.8b, v0.8b
	b.ne	.LBB11_13
// %bb.14:                              //   in Loop: Header=BB11_4 Depth=1
	addv	b1, v1.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB11_17
.LBB11_15:                              // %.preheader
                                        //   in Loop: Header=BB11_4 Depth=1
	sub	x19, x10, x20
	add	x20, x8, x20
.LBB11_16:                              //   Parent Loop BB11_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	madd	w18, w21, w6, w18
	b.ne	.LBB11_16
.LBB11_17:                              //   in Loop: Header=BB11_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	and	w18, w18, #0xff
	fcvtzs	w19, d1
	mul	w19, w4, w19
	cmp	w18, w19, uxtb
	b.eq	.LBB11_3
// %bb.18:                              //   in Loop: Header=BB11_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB11_3
.LBB11_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB11_21
.LBB11_20:                              //   in Loop: Header=BB11_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB11_23
.LBB11_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w4, w9
	tst	w9, #0xff
	b.eq	.LBB11_20
// %bb.22:                              //   in Loop: Header=BB11_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB11_20
.LBB11_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB11_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB11_27
.LBB11_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB11_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB11_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB11_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end11:
	.size	_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc, .Lfunc_end11-_Z14test_variable1Ia24custom_multiply_variableIaEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB12_23
// %bb.1:
	mul	w11, w8, w4
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	lsl	w4, w4, #6
	b.le	.LBB12_19
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x14, x7, #16
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x12, x10, #0x7ffffff8
	and	x11, x10, #0x7fffffe0
	and	x13, x10, #0x18
	neg	x15, x12
	dup	v0.16b, w9
	b	.LBB12_4
.LBB12_3:                               //   in Loop: Header=BB12_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB12_23
.LBB12_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB12_9 Depth 2
                                        //     Child Loop BB12_13 Depth 2
                                        //     Child Loop BB12_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB12_6
// %bb.5:                               //   in Loop: Header=BB12_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB12_15
.LBB12_6:                               //   in Loop: Header=BB12_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB12_8
// %bb.7:                               //   in Loop: Header=BB12_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB12_12
.LBB12_8:                               // %.preheader2
                                        //   in Loop: Header=BB12_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x14
	mov	x19, x11
.LBB12_9:                               //   Parent Loop BB12_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	mla	v1.16b, v0.16b, v4.16b
	mla	v2.16b, v0.16b, v3.16b
	b.ne	.LBB12_9
// %bb.10:                              //   in Loop: Header=BB12_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x11, x10
	addv	b1, v1.16b
	fmov	w18, s1
	b.eq	.LBB12_17
// %bb.11:                              //   in Loop: Header=BB12_4 Depth=1
	mov	x20, x11
	mov	x19, x11
	cbz	x13, .LBB12_15
.LBB12_12:                              //   in Loop: Header=BB12_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w18
	add	x18, x15, x19
	add	x19, x7, x19
.LBB12_13:                              //   Parent Loop BB12_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x19], #8
	adds	x18, x18, #8
	mla	v1.8b, v0.8b, v2.8b
	b.ne	.LBB12_13
// %bb.14:                              //   in Loop: Header=BB12_4 Depth=1
	addv	b1, v1.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB12_17
.LBB12_15:                              // %.preheader
                                        //   in Loop: Header=BB12_4 Depth=1
	sub	x19, x10, x20
	add	x20, x7, x20
.LBB12_16:                              //   Parent Loop BB12_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	madd	w18, w9, w21, w18
	b.ne	.LBB12_16
.LBB12_17:                              //   in Loop: Header=BB12_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	and	w18, w18, #0xff
	fcvtzs	w19, d1
	mul	w19, w4, w19
	cmp	w18, w19, uxtb
	b.eq	.LBB12_3
// %bb.18:                              //   in Loop: Header=BB12_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB12_3
.LBB12_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB12_21
.LBB12_20:                              //   in Loop: Header=BB12_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB12_23
.LBB12_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w4, w9
	tst	w9, #0xff
	b.eq	.LBB12_20
// %bb.22:                              //   in Loop: Header=BB12_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB12_20
.LBB12_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB12_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB12_27
.LBB12_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB12_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB12_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB12_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end12:
	.size	_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end12-_Z14test_variable4Ia33custom_multiply_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB13_23
// %bb.1:
	mul	w11, w8, w4
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	b.le	.LBB13_19
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x14, x7, #16
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x12, x10, #0x7ffffff8
	and	x11, x10, #0x7fffffe0
	and	x13, x10, #0x18
	neg	x15, x12
	dup	v0.16b, w9
	b	.LBB13_4
.LBB13_3:                               //   in Loop: Header=BB13_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB13_23
.LBB13_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB13_9 Depth 2
                                        //     Child Loop BB13_13 Depth 2
                                        //     Child Loop BB13_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB13_6
// %bb.5:                               //   in Loop: Header=BB13_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB13_15
.LBB13_6:                               //   in Loop: Header=BB13_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB13_8
// %bb.7:                               //   in Loop: Header=BB13_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB13_12
.LBB13_8:                               // %.preheader2
                                        //   in Loop: Header=BB13_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x14
	mov	x19, x11
.LBB13_9:                               //   Parent Loop BB13_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.16b, v1.16b, v0.16b
	add	v2.16b, v2.16b, v0.16b
	subs	x19, x19, #32
	ldp	q4, q3, [x18, #-16]
	add	x18, x18, #32
	add	v1.16b, v1.16b, v4.16b
	add	v2.16b, v2.16b, v3.16b
	b.ne	.LBB13_9
// %bb.10:                              //   in Loop: Header=BB13_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x11, x10
	addv	b1, v1.16b
	fmov	w18, s1
	b.eq	.LBB13_17
// %bb.11:                              //   in Loop: Header=BB13_4 Depth=1
	mov	x20, x11
	mov	x19, x11
	cbz	x13, .LBB13_15
.LBB13_12:                              //   in Loop: Header=BB13_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w18
	add	x18, x15, x19
	add	x19, x7, x19
.LBB13_13:                              //   Parent Loop BB13_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8b, v1.8b, v0.8b
	ldr	d2, [x19], #8
	adds	x18, x18, #8
	add	v1.8b, v1.8b, v2.8b
	b.ne	.LBB13_13
// %bb.14:                              //   in Loop: Header=BB13_4 Depth=1
	addv	b1, v1.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB13_17
.LBB13_15:                              // %.preheader
                                        //   in Loop: Header=BB13_4 Depth=1
	sub	x19, x10, x20
	add	x20, x7, x20
.LBB13_16:                              //   Parent Loop BB13_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	add	w18, w18, w9
	subs	x19, x19, #1
	add	w18, w18, w21
	b.ne	.LBB13_16
.LBB13_17:                              //   in Loop: Header=BB13_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	fcvtzs	w19, d1
	add	w19, w4, w19
	ubfiz	w19, w19, #6, #2
	cmp	w19, w18, uxtb
	b.eq	.LBB13_3
// %bb.18:                              //   in Loop: Header=BB13_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB13_3
.LBB13_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB13_21
.LBB13_20:                              //   in Loop: Header=BB13_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB13_23
.LBB13_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB13_20
// %bb.22:                              //   in Loop: Header=BB13_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB13_20
.LBB13_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB13_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB13_27
.LBB13_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB13_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB13_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB13_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end13:
	.size	_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end13-_Z14test_variable4Ia34custom_multiply_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc: // @_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB14_17
// %bb.1:
	sxtb	w4, w4
	cmp	w6, #0
	b.le	.LBB14_13
// %bb.2:
	mov	w9, w6
	mov	w8, wzr
	add	x10, x7, #1
	and	x11, x9, #0x7ffffffe
	adrp	x12, init_value
	adrp	x13, .L.str.179
	add	x13, x13, :lo12:.L.str.179
	b	.LBB14_4
.LBB14_3:                               //   in Loop: Header=BB14_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB14_17
.LBB14_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB14_7 Depth 2
                                        //     Child Loop BB14_10 Depth 2
	cmp	w6, #1
	b.ne	.LBB14_6
// %bb.5:                               //   in Loop: Header=BB14_4 Depth=1
	mov	x16, xzr
	mov	w14, wzr
	b	.LBB14_9
.LBB14_6:                               // %.preheader2
                                        //   in Loop: Header=BB14_4 Depth=1
	mov	w14, wzr
	mov	w15, wzr
	mov	x16, x10
	mov	x17, x11
.LBB14_7:                               //   Parent Loop BB14_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldursb	w18, [x16, #-1]
	ldrsb	w19, [x16]
	subs	x17, x17, #2
	add	x16, x16, #2
	sdiv	w18, w18, w4
	sdiv	w19, w19, w4
	add	w14, w14, w18
	add	w15, w15, w19
	b.ne	.LBB14_7
// %bb.8:                               //   in Loop: Header=BB14_4 Depth=1
	cmp	x11, x9
	add	w14, w15, w14
	mov	x16, x11
	b.eq	.LBB14_11
.LBB14_9:                               // %.preheader
                                        //   in Loop: Header=BB14_4 Depth=1
	sub	x15, x9, x16
	add	x16, x7, x16
.LBB14_10:                              //   Parent Loop BB14_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsb	w17, [x16], #1
	subs	x15, x15, #1
	sdiv	w17, w17, w4
	add	w14, w14, w17
	b.ne	.LBB14_10
.LBB14_11:                              //   in Loop: Header=BB14_4 Depth=1
	ldr	d0, [x12, :lo12:init_value]
	fcvtzs	w15, d0
	sdiv	w15, w15, w4
	ubfiz	w15, w15, #6, #2
	cmp	w15, w14, uxtb
	b.eq	.LBB14_3
// %bb.12:                              //   in Loop: Header=BB14_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x13
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB14_3
.LBB14_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB14_15
.LBB14_14:                              //   in Loop: Header=BB14_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB14_17
.LBB14_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	sdiv	w9, w9, w4
	tst	w9, #0x3
	b.eq	.LBB14_14
// %bb.16:                              //   in Loop: Header=BB14_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB14_14
.LBB14_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB14_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB14_21
.LBB14_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB14_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB14_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB14_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end14:
	.size	_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc, .Lfunc_end14-_Z14test_variable1Ia22custom_divide_variableIaEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w8, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB15_17
// %bb.1:
	sxtb	w4, w4
	sxtb	w5, w5
	sxtb	w6, w6
	sxtb	w7, w7
	cmp	w9, #0
	b.le	.LBB15_13
// %bb.2:
	mov	w12, w9
	mov	w11, wzr
	add	x13, x10, #1
	and	x14, x12, #0x7ffffffe
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB15_4
.LBB15_3:                               //   in Loop: Header=BB15_4 Depth=1
	add	w11, w11, #1
	cmp	w11, w8
	b.ge	.LBB15_17
.LBB15_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB15_7 Depth 2
                                        //     Child Loop BB15_10 Depth 2
	cmp	w9, #1
	b.ne	.LBB15_6
// %bb.5:                               //   in Loop: Header=BB15_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB15_9
.LBB15_6:                               // %.preheader2
                                        //   in Loop: Header=BB15_4 Depth=1
	mov	w17, wzr
	mov	w18, wzr
	mov	x19, x13
	mov	x20, x14
.LBB15_7:                               //   Parent Loop BB15_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldursb	w21, [x19, #-1]
	ldrsb	w22, [x19]
	subs	x20, x20, #2
	add	x19, x19, #2
	sdiv	w21, w21, w4
	sdiv	w22, w22, w4
	sxth	w21, w21
	sxth	w22, w22
	sdiv	w21, w21, w5
	sdiv	w22, w22, w5
	sxth	w21, w21
	sxth	w22, w22
	sdiv	w21, w21, w6
	sdiv	w22, w22, w6
	sxth	w21, w21
	sxth	w22, w22
	sdiv	w21, w21, w7
	sdiv	w22, w22, w7
	add	w17, w17, w21
	add	w18, w18, w22
	b.ne	.LBB15_7
// %bb.8:                               //   in Loop: Header=BB15_4 Depth=1
	cmp	x14, x12
	add	w17, w18, w17
	mov	x19, x14
	b.eq	.LBB15_11
.LBB15_9:                               // %.preheader
                                        //   in Loop: Header=BB15_4 Depth=1
	sub	x18, x12, x19
	add	x19, x10, x19
.LBB15_10:                              //   Parent Loop BB15_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsb	w20, [x19], #1
	subs	x18, x18, #1
	sdiv	w20, w20, w4
	sxth	w20, w20
	sdiv	w20, w20, w5
	sxth	w20, w20
	sdiv	w20, w20, w6
	sxth	w20, w20
	sdiv	w20, w20, w7
	add	w17, w17, w20
	b.ne	.LBB15_10
.LBB15_11:                              //   in Loop: Header=BB15_4 Depth=1
	ldr	d0, [x15, :lo12:init_value]
	fcvtzs	w18, d0
	sdiv	w18, w18, w4
	sxth	w18, w18
	sdiv	w18, w18, w5
	sxth	w18, w18
	sdiv	w18, w18, w6
	sxth	w18, w18
	sdiv	w18, w18, w7
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB15_3
// %bb.12:                              //   in Loop: Header=BB15_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w8, [x3, :lo12:iterations]
	b	.LBB15_3
.LBB15_13:
	adrp	x10, init_value
	mov	w9, wzr
	adrp	x11, .L.str.179
	add	x11, x11, :lo12:.L.str.179
	ldr	d0, [x10, :lo12:init_value]
	b	.LBB15_15
.LBB15_14:                              //   in Loop: Header=BB15_15 Depth=1
	add	w9, w9, #1
	cmp	w9, w8
	b.ge	.LBB15_17
.LBB15_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w12, d0
	sdiv	w12, w12, w4
	sxth	w12, w12
	sdiv	w12, w12, w5
	sxth	w12, w12
	sdiv	w12, w12, w6
	sxth	w12, w12
	sdiv	w12, w12, w7
	tst	w12, #0x3
	b.eq	.LBB15_14
// %bb.16:                              //   in Loop: Header=BB15_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x11
	bl	printf
	ldr	d0, [x10, :lo12:init_value]
	ldr	w8, [x3, :lo12:iterations]
	b	.LBB15_14
.LBB15_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB15_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB15_21
.LBB15_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB15_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB15_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB15_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end15:
	.size	_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end15-_Z14test_variable4Ia31custom_divide_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB16_23
// %bb.1:
	sxtb	w10, w10
	sxtb	w9, w9
	sxtb	w8, w8
	sxtb	w4, w4
	cmp	w6, #0
	sdiv	w9, w10, w9
	sxth	w9, w9
	sdiv	w8, w9, w8
	sxth	w8, w8
	sdiv	w4, w8, w4
	b.le	.LBB16_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w4
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB16_4
.LBB16_3:                               //   in Loop: Header=BB16_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB16_23
.LBB16_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB16_9 Depth 2
                                        //     Child Loop BB16_13 Depth 2
                                        //     Child Loop BB16_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB16_6
// %bb.5:                               //   in Loop: Header=BB16_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB16_15
.LBB16_6:                               //   in Loop: Header=BB16_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB16_8
// %bb.7:                               //   in Loop: Header=BB16_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB16_12
.LBB16_8:                               // %.preheader2
                                        //   in Loop: Header=BB16_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB16_9:                               //   Parent Loop BB16_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x17, #-16]
	subs	x18, x18, #32
	add	x17, x17, #32
	add	v1.16b, v3.16b, v1.16b
	add	v2.16b, v4.16b, v2.16b
	add	v1.16b, v1.16b, v0.16b
	add	v2.16b, v2.16b, v0.16b
	b.ne	.LBB16_9
// %bb.10:                              //   in Loop: Header=BB16_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB16_17
// %bb.11:                              //   in Loop: Header=BB16_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB16_15
.LBB16_12:                              //   in Loop: Header=BB16_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB16_13:                              //   Parent Loop BB16_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8b, v1.8b, v0.8b
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	add	v1.8b, v2.8b, v1.8b
	b.ne	.LBB16_13
// %bb.14:                              //   in Loop: Header=BB16_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB16_17
.LBB16_15:                              // %.preheader
                                        //   in Loop: Header=BB16_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB16_16:                              //   Parent Loop BB16_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	add	w17, w17, w4
	subs	x18, x18, #1
	add	w17, w20, w17
	b.ne	.LBB16_16
.LBB16_17:                              //   in Loop: Header=BB16_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	add	w18, w4, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB16_3
// %bb.18:                              //   in Loop: Header=BB16_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB16_3
.LBB16_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB16_21
.LBB16_20:                              //   in Loop: Header=BB16_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB16_23
.LBB16_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB16_20
// %bb.22:                              //   in Loop: Header=BB16_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB16_20
.LBB16_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB16_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB16_27
.LBB16_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB16_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB16_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB16_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end16:
	.size	_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end16-_Z14test_variable4Ia32custom_divide_multiple_variable2IaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB17_23
// %bb.1:
	sxtb	w10, w10
	sxtb	w9, w9
	sxtb	w4, w4
	cmp	w7, #0
	mul	w9, w9, w10
	sdiv	w9, w9, w4
	sub	w4, w6, w9
	b.le	.LBB17_19
// %bb.2:
	mov	w11, w7
	dup	v0.16b, w6
	dup	v1.16b, w9
	and	x13, x11, #0x7ffffff8
	mov	w10, wzr
	add	x12, x8, #16
	and	x14, x11, #0x7fffffe0
	and	x15, x11, #0x18
	neg	x16, x13
	adrp	x17, init_value
	adrp	x18, .L.str.179
	add	x18, x18, :lo12:.L.str.179
	b	.LBB17_4
.LBB17_3:                               //   in Loop: Header=BB17_4 Depth=1
	add	w10, w10, #1
	cmp	w10, w5
	b.ge	.LBB17_23
.LBB17_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB17_9 Depth 2
                                        //     Child Loop BB17_13 Depth 2
                                        //     Child Loop BB17_16 Depth 2
	cmp	w7, #7
	b.hi	.LBB17_6
// %bb.5:                               //   in Loop: Header=BB17_4 Depth=1
	mov	x21, xzr
	mov	w19, wzr
	b	.LBB17_15
.LBB17_6:                               //   in Loop: Header=BB17_4 Depth=1
	cmp	w7, #32
	b.hs	.LBB17_8
// %bb.7:                               //   in Loop: Header=BB17_4 Depth=1
	mov	x20, xzr
	mov	w19, wzr
	b	.LBB17_12
.LBB17_8:                               // %.preheader2
                                        //   in Loop: Header=BB17_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x19, x12
	mov	x20, x14
.LBB17_9:                               //   Parent Loop BB17_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v4.16b, v2.16b, v0.16b
	add	v2.16b, v3.16b, v0.16b
	subs	x20, x20, #32
	ldp	q5, q3, [x19, #-16]
	add	x19, x19, #32
	add	v4.16b, v4.16b, v5.16b
	add	v3.16b, v2.16b, v3.16b
	sub	v2.16b, v4.16b, v1.16b
	sub	v3.16b, v3.16b, v1.16b
	b.ne	.LBB17_9
// %bb.10:                              //   in Loop: Header=BB17_4 Depth=1
	add	v2.16b, v3.16b, v2.16b
	cmp	x14, x11
	addv	b2, v2.16b
	fmov	w19, s2
	b.eq	.LBB17_17
// %bb.11:                              //   in Loop: Header=BB17_4 Depth=1
	mov	x21, x14
	mov	x20, x14
	cbz	x15, .LBB17_15
.LBB17_12:                              //   in Loop: Header=BB17_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.b[0], w19
	add	x19, x16, x20
	add	x20, x8, x20
.LBB17_13:                              //   Parent Loop BB17_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v2.8b, v2.8b, v0.8b
	ldr	d3, [x20], #8
	adds	x19, x19, #8
	add	v2.8b, v2.8b, v3.8b
	sub	v2.8b, v2.8b, v1.8b
	b.ne	.LBB17_13
// %bb.14:                              //   in Loop: Header=BB17_4 Depth=1
	addv	b2, v2.8b
	cmp	x13, x11
	mov	x21, x13
	fmov	w19, s2
	b.eq	.LBB17_17
.LBB17_15:                              // %.preheader
                                        //   in Loop: Header=BB17_4 Depth=1
	sub	x20, x11, x21
	add	x21, x8, x21
.LBB17_16:                              //   Parent Loop BB17_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w22, [x21], #1
	add	w19, w19, w6
	subs	x20, x20, #1
	add	w19, w19, w22
	sub	w19, w19, w9
	b.ne	.LBB17_16
.LBB17_17:                              //   in Loop: Header=BB17_4 Depth=1
	ldr	d2, [x17, :lo12:init_value]
	fcvtzs	w20, d2
	add	w20, w4, w20
	ubfiz	w20, w20, #6, #2
	cmp	w20, w19, uxtb
	b.eq	.LBB17_3
// %bb.18:                              //   in Loop: Header=BB17_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x18
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB17_3
.LBB17_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB17_21
.LBB17_20:                              //   in Loop: Header=BB17_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB17_23
.LBB17_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB17_20
// %bb.22:                              //   in Loop: Header=BB17_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB17_20
.LBB17_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB17_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB17_27
.LBB17_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB17_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB17_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB17_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end17:
	.size	_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end17-_Z14test_variable4Ia30custom_mixed_multiple_variableIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc: // @_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB18_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB18_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w5
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB18_4
.LBB18_3:                               //   in Loop: Header=BB18_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w4
	b.ge	.LBB18_23
.LBB18_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB18_9 Depth 2
                                        //     Child Loop BB18_13 Depth 2
                                        //     Child Loop BB18_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB18_6
// %bb.5:                               //   in Loop: Header=BB18_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB18_15
.LBB18_6:                               //   in Loop: Header=BB18_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB18_8
// %bb.7:                               //   in Loop: Header=BB18_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB18_12
.LBB18_8:                               // %.preheader2
                                        //   in Loop: Header=BB18_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB18_9:                               //   Parent Loop BB18_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x17, #-16]
	subs	x18, x18, #32
	add	x17, x17, #32
	and	v4.16b, v4.16b, v0.16b
	and	v3.16b, v3.16b, v0.16b
	add	v1.16b, v4.16b, v1.16b
	add	v2.16b, v3.16b, v2.16b
	b.ne	.LBB18_9
// %bb.10:                              //   in Loop: Header=BB18_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB18_17
// %bb.11:                              //   in Loop: Header=BB18_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB18_15
.LBB18_12:                              //   in Loop: Header=BB18_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB18_13:                              //   Parent Loop BB18_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	and	v2.8b, v2.8b, v0.8b
	add	v1.8b, v2.8b, v1.8b
	b.ne	.LBB18_13
// %bb.14:                              //   in Loop: Header=BB18_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB18_17
.LBB18_15:                              // %.preheader
                                        //   in Loop: Header=BB18_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB18_16:                              //   Parent Loop BB18_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	subs	x18, x18, #1
	and	w20, w20, w5
	add	w17, w20, w17
	b.ne	.LBB18_16
.LBB18_17:                              //   in Loop: Header=BB18_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	and	w18, w5, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB18_3
// %bb.18:                              //   in Loop: Header=BB18_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB18_3
.LBB18_19:
	adrp	x7, init_value
	mov	w6, wzr
	and	w5, w5, #0x3
	ldr	d0, [x7, :lo12:init_value]
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	b	.LBB18_21
.LBB18_20:                              //   in Loop: Header=BB18_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w4
	b.ge	.LBB18_23
.LBB18_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w5, w9
	b.eq	.LBB18_20
// %bb.22:                              //   in Loop: Header=BB18_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB18_20
.LBB18_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB18_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB18_27
.LBB18_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB18_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB18_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB18_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end18:
	.size	_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc, .Lfunc_end18-_Z14test_variable1Ia19custom_variable_andIaEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB19_23
// %bb.1:
	and	w7, w11, w9
	and	w8, w12, w10
	cmp	w5, #0
	and	w7, w8, w7
	b.le	.LBB19_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	and	w9, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	and	w10, w10, w12
	and	w9, w10, w9
	mov	w10, w5
	mov	w8, wzr
	and	v0.16b, v0.16b, v1.16b
	and	x12, x10, #0x7ffffff8
	and	x11, x10, #0x7fffffe0
	and	v1.16b, v2.16b, v3.16b
	and	x13, x10, #0x18
	add	x14, x6, #16
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	and	v1.16b, v0.16b, v1.16b
	dup	v0.8b, w9
	dup	v1.16b, v1.b[0]
	b	.LBB19_4
.LBB19_3:                               //   in Loop: Header=BB19_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w4
	b.ge	.LBB19_23
.LBB19_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB19_9 Depth 2
                                        //     Child Loop BB19_13 Depth 2
                                        //     Child Loop BB19_16 Depth 2
	cmp	w5, #7
	b.hi	.LBB19_6
// %bb.5:                               //   in Loop: Header=BB19_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB19_15
.LBB19_6:                               //   in Loop: Header=BB19_4 Depth=1
	cmp	w5, #32
	b.hs	.LBB19_8
// %bb.7:                               //   in Loop: Header=BB19_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB19_12
.LBB19_8:                               // %.preheader2
                                        //   in Loop: Header=BB19_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x18, x14
	mov	x19, x11
.LBB19_9:                               //   Parent Loop BB19_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	and	v4.16b, v4.16b, v1.16b
	and	v5.16b, v5.16b, v1.16b
	add	v2.16b, v4.16b, v2.16b
	add	v3.16b, v5.16b, v3.16b
	b.ne	.LBB19_9
// %bb.10:                              //   in Loop: Header=BB19_4 Depth=1
	add	v2.16b, v3.16b, v2.16b
	cmp	x11, x10
	addv	b2, v2.16b
	fmov	w18, s2
	b.eq	.LBB19_17
// %bb.11:                              //   in Loop: Header=BB19_4 Depth=1
	mov	x20, x11
	mov	x19, x11
	cbz	x13, .LBB19_15
.LBB19_12:                              //   in Loop: Header=BB19_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.b[0], w18
	add	x18, x15, x19
	add	x19, x6, x19
.LBB19_13:                              //   Parent Loop BB19_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x18, x18, #8
	and	v3.8b, v0.8b, v3.8b
	add	v2.8b, v3.8b, v2.8b
	b.ne	.LBB19_13
// %bb.14:                              //   in Loop: Header=BB19_4 Depth=1
	addv	b2, v2.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s2
	b.eq	.LBB19_17
.LBB19_15:                              // %.preheader
                                        //   in Loop: Header=BB19_4 Depth=1
	sub	x19, x10, x20
	add	x20, x6, x20
.LBB19_16:                              //   Parent Loop BB19_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	and	w21, w21, w9
	add	w18, w21, w18
	b.ne	.LBB19_16
.LBB19_17:                              //   in Loop: Header=BB19_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w19, d2
	and	w19, w7, w19
	ubfiz	w19, w19, #6, #2
	cmp	w19, w18, uxtb
	b.eq	.LBB19_3
// %bb.18:                              //   in Loop: Header=BB19_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB19_3
.LBB19_19:
	adrp	x6, init_value
	mov	w5, wzr
	and	w7, w7, #0x3
	ldr	d0, [x6, :lo12:init_value]
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	b	.LBB19_21
.LBB19_20:                              //   in Loop: Header=BB19_21 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB19_23
.LBB19_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w7, w9
	b.eq	.LBB19_20
// %bb.22:                              //   in Loop: Header=BB19_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB19_20
.LBB19_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB19_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB19_27
.LBB19_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB19_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB19_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB19_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end19:
	.size	_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end19-_Z14test_variable4Ia28custom_multiple_variable_andIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc: // @_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB20_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB20_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w3
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB20_4
.LBB20_3:                               //   in Loop: Header=BB20_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB20_23
.LBB20_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB20_9 Depth 2
                                        //     Child Loop BB20_13 Depth 2
                                        //     Child Loop BB20_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB20_6
// %bb.5:                               //   in Loop: Header=BB20_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB20_15
.LBB20_6:                               //   in Loop: Header=BB20_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB20_8
// %bb.7:                               //   in Loop: Header=BB20_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB20_12
.LBB20_8:                               // %.preheader2
                                        //   in Loop: Header=BB20_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB20_9:                               //   Parent Loop BB20_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x17, #-16]
	subs	x18, x18, #32
	add	x17, x17, #32
	orr	v4.16b, v4.16b, v0.16b
	orr	v3.16b, v3.16b, v0.16b
	add	v1.16b, v4.16b, v1.16b
	add	v2.16b, v3.16b, v2.16b
	b.ne	.LBB20_9
// %bb.10:                              //   in Loop: Header=BB20_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB20_17
// %bb.11:                              //   in Loop: Header=BB20_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB20_15
.LBB20_12:                              //   in Loop: Header=BB20_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB20_13:                              //   Parent Loop BB20_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	orr	v2.8b, v2.8b, v0.8b
	add	v1.8b, v2.8b, v1.8b
	b.ne	.LBB20_13
// %bb.14:                              //   in Loop: Header=BB20_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB20_17
.LBB20_15:                              // %.preheader
                                        //   in Loop: Header=BB20_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB20_16:                              //   Parent Loop BB20_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	subs	x18, x18, #1
	orr	w20, w20, w3
	add	w17, w20, w17
	b.ne	.LBB20_16
.LBB20_17:                              //   in Loop: Header=BB20_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	orr	w18, w3, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB20_3
// %bb.18:                              //   in Loop: Header=BB20_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB20_3
.LBB20_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB20_21
.LBB20_20:                              //   in Loop: Header=BB20_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB20_23
.LBB20_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	orr	w9, w3, w9
	tst	w9, #0x3
	b.eq	.LBB20_20
// %bb.22:                              //   in Loop: Header=BB20_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB20_20
.LBB20_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB20_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB20_27
.LBB20_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB20_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB20_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB20_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end20:
	.size	_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc, .Lfunc_end20-_Z14test_variable1Ia18custom_variable_orIaEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB21_23
// %bb.1:
	orr	w4, w11, w9
	orr	w8, w12, w10
	cmp	w6, #0
	orr	w4, w8, w4
	b.le	.LBB21_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	orr	w9, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	orr	w10, w10, w12
	orr	w9, w10, w9
	mov	w10, w6
	mov	w8, wzr
	orr	v0.16b, v0.16b, v1.16b
	and	x12, x10, #0x7ffffff8
	and	x11, x10, #0x7fffffe0
	orr	v1.16b, v2.16b, v3.16b
	and	x13, x10, #0x18
	add	x14, x7, #16
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	orr	v1.16b, v0.16b, v1.16b
	dup	v0.8b, w9
	dup	v1.16b, v1.b[0]
	b	.LBB21_4
.LBB21_3:                               //   in Loop: Header=BB21_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB21_23
.LBB21_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB21_9 Depth 2
                                        //     Child Loop BB21_13 Depth 2
                                        //     Child Loop BB21_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB21_6
// %bb.5:                               //   in Loop: Header=BB21_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB21_15
.LBB21_6:                               //   in Loop: Header=BB21_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB21_8
// %bb.7:                               //   in Loop: Header=BB21_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB21_12
.LBB21_8:                               // %.preheader2
                                        //   in Loop: Header=BB21_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x18, x14
	mov	x19, x11
.LBB21_9:                               //   Parent Loop BB21_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	orr	v4.16b, v4.16b, v1.16b
	orr	v5.16b, v5.16b, v1.16b
	add	v2.16b, v4.16b, v2.16b
	add	v3.16b, v5.16b, v3.16b
	b.ne	.LBB21_9
// %bb.10:                              //   in Loop: Header=BB21_4 Depth=1
	add	v2.16b, v3.16b, v2.16b
	cmp	x11, x10
	addv	b2, v2.16b
	fmov	w18, s2
	b.eq	.LBB21_17
// %bb.11:                              //   in Loop: Header=BB21_4 Depth=1
	mov	x20, x11
	mov	x19, x11
	cbz	x13, .LBB21_15
.LBB21_12:                              //   in Loop: Header=BB21_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.b[0], w18
	add	x18, x15, x19
	add	x19, x7, x19
.LBB21_13:                              //   Parent Loop BB21_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x18, x18, #8
	orr	v3.8b, v0.8b, v3.8b
	add	v2.8b, v3.8b, v2.8b
	b.ne	.LBB21_13
// %bb.14:                              //   in Loop: Header=BB21_4 Depth=1
	addv	b2, v2.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s2
	b.eq	.LBB21_17
.LBB21_15:                              // %.preheader
                                        //   in Loop: Header=BB21_4 Depth=1
	sub	x19, x10, x20
	add	x20, x7, x20
.LBB21_16:                              //   Parent Loop BB21_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	orr	w21, w21, w9
	add	w18, w21, w18
	b.ne	.LBB21_16
.LBB21_17:                              //   in Loop: Header=BB21_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w19, d2
	orr	w19, w4, w19
	ubfiz	w19, w19, #6, #2
	cmp	w19, w18, uxtb
	b.eq	.LBB21_3
// %bb.18:                              //   in Loop: Header=BB21_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB21_3
.LBB21_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB21_21
.LBB21_20:                              //   in Loop: Header=BB21_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB21_23
.LBB21_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	orr	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB21_20
// %bb.22:                              //   in Loop: Header=BB21_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB21_20
.LBB21_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB21_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB21_27
.LBB21_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB21_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB21_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB21_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end21:
	.size	_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end21-_Z14test_variable4Ia27custom_multiple_variable_orIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc,@function
_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc: // @_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB22_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB22_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w3
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB22_4
.LBB22_3:                               //   in Loop: Header=BB22_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB22_23
.LBB22_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB22_9 Depth 2
                                        //     Child Loop BB22_13 Depth 2
                                        //     Child Loop BB22_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB22_6
// %bb.5:                               //   in Loop: Header=BB22_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB22_15
.LBB22_6:                               //   in Loop: Header=BB22_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB22_8
// %bb.7:                               //   in Loop: Header=BB22_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB22_12
.LBB22_8:                               // %.preheader2
                                        //   in Loop: Header=BB22_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB22_9:                               //   Parent Loop BB22_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x17, #-16]
	subs	x18, x18, #32
	add	x17, x17, #32
	eor	v4.16b, v4.16b, v0.16b
	eor	v3.16b, v3.16b, v0.16b
	add	v1.16b, v4.16b, v1.16b
	add	v2.16b, v3.16b, v2.16b
	b.ne	.LBB22_9
// %bb.10:                              //   in Loop: Header=BB22_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB22_17
// %bb.11:                              //   in Loop: Header=BB22_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB22_15
.LBB22_12:                              //   in Loop: Header=BB22_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB22_13:                              //   Parent Loop BB22_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	eor	v2.8b, v2.8b, v0.8b
	add	v1.8b, v2.8b, v1.8b
	b.ne	.LBB22_13
// %bb.14:                              //   in Loop: Header=BB22_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB22_17
.LBB22_15:                              // %.preheader
                                        //   in Loop: Header=BB22_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB22_16:                              //   Parent Loop BB22_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	subs	x18, x18, #1
	eor	w20, w20, w3
	add	w17, w20, w17
	b.ne	.LBB22_16
.LBB22_17:                              //   in Loop: Header=BB22_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	eor	w18, w3, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB22_3
// %bb.18:                              //   in Loop: Header=BB22_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB22_3
.LBB22_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB22_21
.LBB22_20:                              //   in Loop: Header=BB22_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB22_23
.LBB22_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	eor	w9, w3, w9
	tst	w9, #0x3
	b.eq	.LBB22_20
// %bb.22:                              //   in Loop: Header=BB22_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB22_20
.LBB22_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB22_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB22_27
.LBB22_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB22_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB22_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB22_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end22:
	.size	_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc, .Lfunc_end22-_Z14test_variable1Ia19custom_variable_xorIaEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB23_23
// %bb.1:
	eor	w4, w11, w9
	eor	w8, w12, w10
	cmp	w6, #0
	eor	w4, w8, w4
	b.le	.LBB23_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	eor	w9, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	eor	w10, w10, w12
	eor	w9, w10, w9
	mov	w10, w6
	mov	w8, wzr
	eor	v0.16b, v0.16b, v1.16b
	and	x12, x10, #0x7ffffff8
	and	x11, x10, #0x7fffffe0
	eor	v1.16b, v2.16b, v3.16b
	and	x13, x10, #0x18
	add	x14, x7, #16
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	eor	v1.16b, v0.16b, v1.16b
	dup	v0.8b, w9
	dup	v1.16b, v1.b[0]
	b	.LBB23_4
.LBB23_3:                               //   in Loop: Header=BB23_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB23_23
.LBB23_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB23_9 Depth 2
                                        //     Child Loop BB23_13 Depth 2
                                        //     Child Loop BB23_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB23_6
// %bb.5:                               //   in Loop: Header=BB23_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB23_15
.LBB23_6:                               //   in Loop: Header=BB23_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB23_8
// %bb.7:                               //   in Loop: Header=BB23_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB23_12
.LBB23_8:                               // %.preheader2
                                        //   in Loop: Header=BB23_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x18, x14
	mov	x19, x11
.LBB23_9:                               //   Parent Loop BB23_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	eor	v4.16b, v4.16b, v1.16b
	eor	v5.16b, v5.16b, v1.16b
	add	v2.16b, v4.16b, v2.16b
	add	v3.16b, v5.16b, v3.16b
	b.ne	.LBB23_9
// %bb.10:                              //   in Loop: Header=BB23_4 Depth=1
	add	v2.16b, v3.16b, v2.16b
	cmp	x11, x10
	addv	b2, v2.16b
	fmov	w18, s2
	b.eq	.LBB23_17
// %bb.11:                              //   in Loop: Header=BB23_4 Depth=1
	mov	x20, x11
	mov	x19, x11
	cbz	x13, .LBB23_15
.LBB23_12:                              //   in Loop: Header=BB23_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.b[0], w18
	add	x18, x15, x19
	add	x19, x7, x19
.LBB23_13:                              //   Parent Loop BB23_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x18, x18, #8
	eor	v3.8b, v0.8b, v3.8b
	add	v2.8b, v3.8b, v2.8b
	b.ne	.LBB23_13
// %bb.14:                              //   in Loop: Header=BB23_4 Depth=1
	addv	b2, v2.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s2
	b.eq	.LBB23_17
.LBB23_15:                              // %.preheader
                                        //   in Loop: Header=BB23_4 Depth=1
	sub	x19, x10, x20
	add	x20, x7, x20
.LBB23_16:                              //   Parent Loop BB23_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	eor	w21, w21, w9
	add	w18, w21, w18
	b.ne	.LBB23_16
.LBB23_17:                              //   in Loop: Header=BB23_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w19, d2
	eor	w19, w4, w19
	ubfiz	w19, w19, #6, #2
	cmp	w19, w18, uxtb
	b.eq	.LBB23_3
// %bb.18:                              //   in Loop: Header=BB23_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB23_3
.LBB23_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB23_21
.LBB23_20:                              //   in Loop: Header=BB23_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB23_23
.LBB23_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	eor	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB23_20
// %bb.22:                              //   in Loop: Header=BB23_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB23_20
.LBB23_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB23_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB23_27
.LBB23_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB23_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB23_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB23_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end23:
	.size	_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end23-_Z14test_variable4Ia28custom_multiple_variable_xorIaEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc: // @_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB24_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB24_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w3
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB24_4
.LBB24_3:                               //   in Loop: Header=BB24_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB24_23
.LBB24_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB24_9 Depth 2
                                        //     Child Loop BB24_13 Depth 2
                                        //     Child Loop BB24_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB24_6
// %bb.5:                               //   in Loop: Header=BB24_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB24_15
.LBB24_6:                               //   in Loop: Header=BB24_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB24_8
// %bb.7:                               //   in Loop: Header=BB24_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB24_12
.LBB24_8:                               // %.preheader2
                                        //   in Loop: Header=BB24_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB24_9:                               //   Parent Loop BB24_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.16b, v1.16b, v0.16b
	add	v2.16b, v2.16b, v0.16b
	subs	x18, x18, #32
	ldp	q4, q3, [x17, #-16]
	add	x17, x17, #32
	add	v1.16b, v1.16b, v4.16b
	add	v2.16b, v2.16b, v3.16b
	b.ne	.LBB24_9
// %bb.10:                              //   in Loop: Header=BB24_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB24_17
// %bb.11:                              //   in Loop: Header=BB24_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB24_15
.LBB24_12:                              //   in Loop: Header=BB24_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB24_13:                              //   Parent Loop BB24_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8b, v1.8b, v0.8b
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	add	v1.8b, v1.8b, v2.8b
	b.ne	.LBB24_13
// %bb.14:                              //   in Loop: Header=BB24_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB24_17
.LBB24_15:                              // %.preheader
                                        //   in Loop: Header=BB24_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB24_16:                              //   Parent Loop BB24_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	add	w17, w17, w3
	subs	x18, x18, #1
	add	w17, w17, w20
	b.ne	.LBB24_16
.LBB24_17:                              //   in Loop: Header=BB24_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	add	w18, w3, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB24_3
// %bb.18:                              //   in Loop: Header=BB24_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB24_3
.LBB24_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB24_21
.LBB24_20:                              //   in Loop: Header=BB24_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB24_23
.LBB24_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w3, w9
	tst	w9, #0x3
	b.eq	.LBB24_20
// %bb.22:                              //   in Loop: Header=BB24_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB24_20
.LBB24_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB24_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB24_27
.LBB24_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB24_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB24_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB24_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end24:
	.size	_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc, .Lfunc_end24-_Z14test_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc // -- Begin function _Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.p2align	2
	.type	_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc: // @_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w6, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w6, #1
	b.lt	.LBB25_23
// %bb.1:
	mul	w5, w3, w7
	cmp	w7, #0
	b.le	.LBB25_19
// %bb.2:
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #16
	and	x12, x10, #0x7ffffff8
	and	x13, x10, #0x7fffffe0
	and	x14, x10, #0x18
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB25_4
.LBB25_3:                               //   in Loop: Header=BB25_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w6
	b.ge	.LBB25_23
.LBB25_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB25_9 Depth 2
                                        //     Child Loop BB25_13 Depth 2
                                        //     Child Loop BB25_16 Depth 2
	cmp	w7, #7
	b.hi	.LBB25_6
// %bb.5:                               //   in Loop: Header=BB25_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB25_15
.LBB25_6:                               //   in Loop: Header=BB25_4 Depth=1
	cmp	w7, #32
	b.hs	.LBB25_8
// %bb.7:                               //   in Loop: Header=BB25_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB25_12
.LBB25_8:                               // %.preheader2
                                        //   in Loop: Header=BB25_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x18, x11
	mov	x19, x13
.LBB25_9:                               //   Parent Loop BB25_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB25_9
// %bb.10:                              //   in Loop: Header=BB25_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x13, x10
	addv	b0, v0.16b
	fmov	w18, s0
	b.eq	.LBB25_17
// %bb.11:                              //   in Loop: Header=BB25_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB25_15
.LBB25_12:                              //   in Loop: Header=BB25_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w18
	add	x18, x15, x19
	add	x19, x8, x19
.LBB25_13:                              //   Parent Loop BB25_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x19], #8
	adds	x18, x18, #8
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB25_13
// %bb.14:                              //   in Loop: Header=BB25_4 Depth=1
	addv	b0, v0.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s0
	b.eq	.LBB25_17
.LBB25_15:                              // %.preheader
                                        //   in Loop: Header=BB25_4 Depth=1
	sub	x19, x10, x20
	add	x20, x8, x20
.LBB25_16:                              //   Parent Loop BB25_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	add	w18, w21, w18
	b.ne	.LBB25_16
.LBB25_17:                              //   in Loop: Header=BB25_4 Depth=1
	ldr	d0, [x16, :lo12:init_value]
	add	w18, w18, w5
	fcvtzs	w19, d0
	add	w19, w3, w19
	ubfiz	w19, w19, #6, #2
	cmp	w19, w18, uxtb
	b.eq	.LBB25_3
// %bb.18:                              //   in Loop: Header=BB25_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB25_3
.LBB25_19:
	adrp	x8, init_value
	mov	w7, wzr
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	ldr	d0, [x8, :lo12:init_value]
	b	.LBB25_21
.LBB25_20:                              //   in Loop: Header=BB25_21 Depth=1
	add	w7, w7, #1
	cmp	w7, w6
	b.ge	.LBB25_23
.LBB25_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w3, w10
	ubfiz	w10, w10, #6, #2
	cmp	w10, w5, uxtb
	b.eq	.LBB25_20
// %bb.22:                              //   in Loop: Header=BB25_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x8, :lo12:init_value]
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB25_20
.LBB25_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB25_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB25_27
.LBB25_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB25_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB25_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB25_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end25:
	.size	_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc, .Lfunc_end25-_Z22test_hoisted_variable1Ih19custom_add_variableIhEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB26_23
// %bb.1:
	add	w4, w8, w4
	add	w8, w9, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB26_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w4
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB26_4
.LBB26_3:                               //   in Loop: Header=BB26_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB26_23
.LBB26_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB26_9 Depth 2
                                        //     Child Loop BB26_13 Depth 2
                                        //     Child Loop BB26_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB26_6
// %bb.5:                               //   in Loop: Header=BB26_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB26_15
.LBB26_6:                               //   in Loop: Header=BB26_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB26_8
// %bb.7:                               //   in Loop: Header=BB26_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB26_12
.LBB26_8:                               // %.preheader2
                                        //   in Loop: Header=BB26_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB26_9:                               //   Parent Loop BB26_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.16b, v0.16b, v1.16b
	add	v2.16b, v0.16b, v2.16b
	subs	x18, x18, #32
	ldp	q4, q3, [x17, #-16]
	add	x17, x17, #32
	add	v1.16b, v1.16b, v4.16b
	add	v2.16b, v2.16b, v3.16b
	b.ne	.LBB26_9
// %bb.10:                              //   in Loop: Header=BB26_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB26_17
// %bb.11:                              //   in Loop: Header=BB26_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB26_15
.LBB26_12:                              //   in Loop: Header=BB26_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB26_13:                              //   Parent Loop BB26_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8b, v0.8b, v1.8b
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	add	v1.8b, v1.8b, v2.8b
	b.ne	.LBB26_13
// %bb.14:                              //   in Loop: Header=BB26_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB26_17
.LBB26_15:                              // %.preheader
                                        //   in Loop: Header=BB26_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB26_16:                              //   Parent Loop BB26_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	add	w17, w4, w17
	subs	x18, x18, #1
	add	w17, w17, w20
	b.ne	.LBB26_16
.LBB26_17:                              //   in Loop: Header=BB26_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	add	w18, w4, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB26_3
// %bb.18:                              //   in Loop: Header=BB26_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB26_3
.LBB26_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB26_21
.LBB26_20:                              //   in Loop: Header=BB26_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB26_23
.LBB26_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB26_20
// %bb.22:                              //   in Loop: Header=BB26_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB26_20
.LBB26_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB26_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB26_27
.LBB26_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB26_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB26_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB26_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end26:
	.size	_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end26-_Z14test_variable4Ih28custom_add_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc: // @_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB27_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB27_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w3
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB27_4
.LBB27_3:                               //   in Loop: Header=BB27_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB27_23
.LBB27_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB27_9 Depth 2
                                        //     Child Loop BB27_13 Depth 2
                                        //     Child Loop BB27_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB27_6
// %bb.5:                               //   in Loop: Header=BB27_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB27_15
.LBB27_6:                               //   in Loop: Header=BB27_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB27_8
// %bb.7:                               //   in Loop: Header=BB27_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB27_12
.LBB27_8:                               // %.preheader2
                                        //   in Loop: Header=BB27_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB27_9:                               //   Parent Loop BB27_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.16b, v1.16b, v0.16b
	sub	v2.16b, v2.16b, v0.16b
	subs	x18, x18, #32
	ldp	q4, q3, [x17, #-16]
	add	x17, x17, #32
	add	v1.16b, v1.16b, v4.16b
	add	v2.16b, v2.16b, v3.16b
	b.ne	.LBB27_9
// %bb.10:                              //   in Loop: Header=BB27_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB27_17
// %bb.11:                              //   in Loop: Header=BB27_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB27_15
.LBB27_12:                              //   in Loop: Header=BB27_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB27_13:                              //   Parent Loop BB27_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.8b, v1.8b, v0.8b
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	add	v1.8b, v1.8b, v2.8b
	b.ne	.LBB27_13
// %bb.14:                              //   in Loop: Header=BB27_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB27_17
.LBB27_15:                              // %.preheader
                                        //   in Loop: Header=BB27_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB27_16:                              //   Parent Loop BB27_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	sub	w17, w17, w3
	subs	x18, x18, #1
	add	w17, w17, w20
	b.ne	.LBB27_16
.LBB27_17:                              //   in Loop: Header=BB27_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	sub	w18, w18, w3
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB27_3
// %bb.18:                              //   in Loop: Header=BB27_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB27_3
.LBB27_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB27_21
.LBB27_20:                              //   in Loop: Header=BB27_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB27_23
.LBB27_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	sub	w9, w9, w3
	tst	w9, #0x3
	b.eq	.LBB27_20
// %bb.22:                              //   in Loop: Header=BB27_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB27_20
.LBB27_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB27_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB27_27
.LBB27_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB27_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB27_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB27_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end27:
	.size	_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc, .Lfunc_end27-_Z14test_variable1Ih19custom_sub_variableIhEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB28_23
// %bb.1:
	add	w4, w8, w4
	add	w8, w9, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB28_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w4
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB28_4
.LBB28_3:                               //   in Loop: Header=BB28_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB28_23
.LBB28_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_9 Depth 2
                                        //     Child Loop BB28_13 Depth 2
                                        //     Child Loop BB28_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB28_6
// %bb.5:                               //   in Loop: Header=BB28_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB28_15
.LBB28_6:                               //   in Loop: Header=BB28_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB28_8
// %bb.7:                               //   in Loop: Header=BB28_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB28_12
.LBB28_8:                               // %.preheader2
                                        //   in Loop: Header=BB28_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB28_9:                               //   Parent Loop BB28_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.16b, v1.16b, v0.16b
	sub	v2.16b, v2.16b, v0.16b
	subs	x18, x18, #32
	ldp	q4, q3, [x17, #-16]
	add	x17, x17, #32
	add	v1.16b, v1.16b, v4.16b
	add	v2.16b, v2.16b, v3.16b
	b.ne	.LBB28_9
// %bb.10:                              //   in Loop: Header=BB28_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB28_17
// %bb.11:                              //   in Loop: Header=BB28_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB28_15
.LBB28_12:                              //   in Loop: Header=BB28_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB28_13:                              //   Parent Loop BB28_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.8b, v1.8b, v0.8b
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	add	v1.8b, v1.8b, v2.8b
	b.ne	.LBB28_13
// %bb.14:                              //   in Loop: Header=BB28_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB28_17
.LBB28_15:                              // %.preheader
                                        //   in Loop: Header=BB28_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB28_16:                              //   Parent Loop BB28_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	sub	w17, w17, w4
	subs	x18, x18, #1
	add	w17, w17, w20
	b.ne	.LBB28_16
.LBB28_17:                              //   in Loop: Header=BB28_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	sub	w18, w18, w4
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB28_3
// %bb.18:                              //   in Loop: Header=BB28_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB28_3
.LBB28_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB28_21
.LBB28_20:                              //   in Loop: Header=BB28_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB28_23
.LBB28_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	sub	w9, w9, w4
	tst	w9, #0x3
	b.eq	.LBB28_20
// %bb.22:                              //   in Loop: Header=BB28_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB28_20
.LBB28_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB28_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB28_27
.LBB28_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB28_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB28_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB28_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end28:
	.size	_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end28-_Z14test_variable4Ih28custom_sub_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc: // @_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB29_23
// %bb.1:
	lsl	w4, w6, #6
	cmp	w7, #0
	b.le	.LBB29_19
// %bb.2:
	mov	w10, w7
	dup	v0.16b, w6
	mov	w9, wzr
	and	x12, x10, #0x7ffffff8
	add	x11, x8, #16
	and	x13, x10, #0x7fffffe0
	and	x14, x10, #0x18
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB29_4
.LBB29_3:                               //   in Loop: Header=BB29_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w5
	b.ge	.LBB29_23
.LBB29_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB29_9 Depth 2
                                        //     Child Loop BB29_13 Depth 2
                                        //     Child Loop BB29_16 Depth 2
	cmp	w7, #7
	b.hi	.LBB29_6
// %bb.5:                               //   in Loop: Header=BB29_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB29_15
.LBB29_6:                               //   in Loop: Header=BB29_4 Depth=1
	cmp	w7, #32
	b.hs	.LBB29_8
// %bb.7:                               //   in Loop: Header=BB29_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB29_12
.LBB29_8:                               // %.preheader2
                                        //   in Loop: Header=BB29_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x11
	mov	x19, x13
.LBB29_9:                               //   Parent Loop BB29_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	mla	v1.16b, v4.16b, v0.16b
	mla	v2.16b, v3.16b, v0.16b
	b.ne	.LBB29_9
// %bb.10:                              //   in Loop: Header=BB29_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x13, x10
	addv	b1, v1.16b
	fmov	w18, s1
	b.eq	.LBB29_17
// %bb.11:                              //   in Loop: Header=BB29_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB29_15
.LBB29_12:                              //   in Loop: Header=BB29_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w18
	add	x18, x15, x19
	add	x19, x8, x19
.LBB29_13:                              //   Parent Loop BB29_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x19], #8
	adds	x18, x18, #8
	mla	v1.8b, v2.8b, v0.8b
	b.ne	.LBB29_13
// %bb.14:                              //   in Loop: Header=BB29_4 Depth=1
	addv	b1, v1.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB29_17
.LBB29_15:                              // %.preheader
                                        //   in Loop: Header=BB29_4 Depth=1
	sub	x19, x10, x20
	add	x20, x8, x20
.LBB29_16:                              //   Parent Loop BB29_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	madd	w18, w21, w6, w18
	b.ne	.LBB29_16
.LBB29_17:                              //   in Loop: Header=BB29_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	and	w18, w18, #0xff
	fcvtzs	w19, d1
	mul	w19, w4, w19
	cmp	w18, w19, uxtb
	b.eq	.LBB29_3
// %bb.18:                              //   in Loop: Header=BB29_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB29_3
.LBB29_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB29_21
.LBB29_20:                              //   in Loop: Header=BB29_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB29_23
.LBB29_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w4, w9
	tst	w9, #0xff
	b.eq	.LBB29_20
// %bb.22:                              //   in Loop: Header=BB29_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB29_20
.LBB29_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB29_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB29_27
.LBB29_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB29_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB29_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB29_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end29:
	.size	_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc, .Lfunc_end29-_Z14test_variable1Ih24custom_multiply_variableIhEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB30_23
// %bb.1:
	mul	w11, w8, w4
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	lsl	w4, w4, #6
	b.le	.LBB30_19
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x14, x7, #16
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x12, x10, #0x7ffffff8
	and	x11, x10, #0x7fffffe0
	and	x13, x10, #0x18
	neg	x15, x12
	dup	v0.16b, w9
	b	.LBB30_4
.LBB30_3:                               //   in Loop: Header=BB30_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB30_23
.LBB30_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB30_9 Depth 2
                                        //     Child Loop BB30_13 Depth 2
                                        //     Child Loop BB30_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB30_6
// %bb.5:                               //   in Loop: Header=BB30_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB30_15
.LBB30_6:                               //   in Loop: Header=BB30_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB30_8
// %bb.7:                               //   in Loop: Header=BB30_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB30_12
.LBB30_8:                               // %.preheader2
                                        //   in Loop: Header=BB30_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x14
	mov	x19, x11
.LBB30_9:                               //   Parent Loop BB30_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	mla	v1.16b, v0.16b, v4.16b
	mla	v2.16b, v0.16b, v3.16b
	b.ne	.LBB30_9
// %bb.10:                              //   in Loop: Header=BB30_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x11, x10
	addv	b1, v1.16b
	fmov	w18, s1
	b.eq	.LBB30_17
// %bb.11:                              //   in Loop: Header=BB30_4 Depth=1
	mov	x20, x11
	mov	x19, x11
	cbz	x13, .LBB30_15
.LBB30_12:                              //   in Loop: Header=BB30_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w18
	add	x18, x15, x19
	add	x19, x7, x19
.LBB30_13:                              //   Parent Loop BB30_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x19], #8
	adds	x18, x18, #8
	mla	v1.8b, v0.8b, v2.8b
	b.ne	.LBB30_13
// %bb.14:                              //   in Loop: Header=BB30_4 Depth=1
	addv	b1, v1.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB30_17
.LBB30_15:                              // %.preheader
                                        //   in Loop: Header=BB30_4 Depth=1
	sub	x19, x10, x20
	add	x20, x7, x20
.LBB30_16:                              //   Parent Loop BB30_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	madd	w18, w9, w21, w18
	b.ne	.LBB30_16
.LBB30_17:                              //   in Loop: Header=BB30_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	and	w18, w18, #0xff
	fcvtzs	w19, d1
	mul	w19, w4, w19
	cmp	w18, w19, uxtb
	b.eq	.LBB30_3
// %bb.18:                              //   in Loop: Header=BB30_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB30_3
.LBB30_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB30_21
.LBB30_20:                              //   in Loop: Header=BB30_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB30_23
.LBB30_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w4, w9
	tst	w9, #0xff
	b.eq	.LBB30_20
// %bb.22:                              //   in Loop: Header=BB30_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB30_20
.LBB30_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB30_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB30_27
.LBB30_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB30_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB30_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB30_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end30:
	.size	_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end30-_Z14test_variable4Ih33custom_multiply_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB31_23
// %bb.1:
	mul	w11, w8, w4
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	b.le	.LBB31_19
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x14, x7, #16
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x12, x10, #0x7ffffff8
	and	x11, x10, #0x7fffffe0
	and	x13, x10, #0x18
	neg	x15, x12
	dup	v0.16b, w9
	b	.LBB31_4
.LBB31_3:                               //   in Loop: Header=BB31_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB31_23
.LBB31_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB31_9 Depth 2
                                        //     Child Loop BB31_13 Depth 2
                                        //     Child Loop BB31_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB31_6
// %bb.5:                               //   in Loop: Header=BB31_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB31_15
.LBB31_6:                               //   in Loop: Header=BB31_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB31_8
// %bb.7:                               //   in Loop: Header=BB31_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB31_12
.LBB31_8:                               // %.preheader2
                                        //   in Loop: Header=BB31_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x14
	mov	x19, x11
.LBB31_9:                               //   Parent Loop BB31_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.16b, v1.16b, v0.16b
	add	v2.16b, v2.16b, v0.16b
	subs	x19, x19, #32
	ldp	q4, q3, [x18, #-16]
	add	x18, x18, #32
	add	v1.16b, v1.16b, v4.16b
	add	v2.16b, v2.16b, v3.16b
	b.ne	.LBB31_9
// %bb.10:                              //   in Loop: Header=BB31_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x11, x10
	addv	b1, v1.16b
	fmov	w18, s1
	b.eq	.LBB31_17
// %bb.11:                              //   in Loop: Header=BB31_4 Depth=1
	mov	x20, x11
	mov	x19, x11
	cbz	x13, .LBB31_15
.LBB31_12:                              //   in Loop: Header=BB31_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w18
	add	x18, x15, x19
	add	x19, x7, x19
.LBB31_13:                              //   Parent Loop BB31_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8b, v1.8b, v0.8b
	ldr	d2, [x19], #8
	adds	x18, x18, #8
	add	v1.8b, v1.8b, v2.8b
	b.ne	.LBB31_13
// %bb.14:                              //   in Loop: Header=BB31_4 Depth=1
	addv	b1, v1.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB31_17
.LBB31_15:                              // %.preheader
                                        //   in Loop: Header=BB31_4 Depth=1
	sub	x19, x10, x20
	add	x20, x7, x20
.LBB31_16:                              //   Parent Loop BB31_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	add	w18, w18, w9
	subs	x19, x19, #1
	add	w18, w18, w21
	b.ne	.LBB31_16
.LBB31_17:                              //   in Loop: Header=BB31_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	fcvtzs	w19, d1
	add	w19, w4, w19
	ubfiz	w19, w19, #6, #2
	cmp	w19, w18, uxtb
	b.eq	.LBB31_3
// %bb.18:                              //   in Loop: Header=BB31_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB31_3
.LBB31_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB31_21
.LBB31_20:                              //   in Loop: Header=BB31_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB31_23
.LBB31_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB31_20
// %bb.22:                              //   in Loop: Header=BB31_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB31_20
.LBB31_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB31_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB31_27
.LBB31_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB31_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB31_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB31_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end31:
	.size	_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end31-_Z14test_variable4Ih34custom_multiply_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc: // @_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB32_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB32_13
// %bb.2:
	mov	w9, w6
	mov	w8, wzr
	add	x10, x7, #1
	and	x11, x9, #0x7ffffffe
	adrp	x12, init_value
	adrp	x13, .L.str.179
	add	x13, x13, :lo12:.L.str.179
	b	.LBB32_4
.LBB32_3:                               //   in Loop: Header=BB32_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB32_17
.LBB32_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB32_7 Depth 2
                                        //     Child Loop BB32_10 Depth 2
	cmp	w6, #1
	b.ne	.LBB32_6
// %bb.5:                               //   in Loop: Header=BB32_4 Depth=1
	mov	x16, xzr
	mov	w14, wzr
	b	.LBB32_9
.LBB32_6:                               // %.preheader2
                                        //   in Loop: Header=BB32_4 Depth=1
	mov	w14, wzr
	mov	w15, wzr
	mov	x16, x10
	mov	x17, x11
.LBB32_7:                               //   Parent Loop BB32_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldurb	w18, [x16, #-1]
	ldrb	w20, [x16], #2
	and	w19, w3, #0xff
	subs	x17, x17, #2
	udiv	w18, w18, w19
	udiv	w19, w20, w19
	add	w14, w18, w14
	add	w15, w19, w15
	b.ne	.LBB32_7
// %bb.8:                               //   in Loop: Header=BB32_4 Depth=1
	cmp	x11, x9
	add	w14, w15, w14
	mov	x16, x11
	b.eq	.LBB32_11
.LBB32_9:                               // %.preheader
                                        //   in Loop: Header=BB32_4 Depth=1
	sub	x15, x9, x16
	add	x16, x7, x16
.LBB32_10:                              //   Parent Loop BB32_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w17, [x16], #1
	and	w18, w3, #0xff
	subs	x15, x15, #1
	udiv	w17, w17, w18
	add	w14, w17, w14
	b.ne	.LBB32_10
.LBB32_11:                              //   in Loop: Header=BB32_4 Depth=1
	ldr	d0, [x12, :lo12:init_value]
	and	w16, w3, #0xff
	fcvtzs	w15, d0
	udiv	w15, w15, w16
	ubfiz	w15, w15, #6, #2
	cmp	w15, w14, uxtb
	b.eq	.LBB32_3
// %bb.12:                              //   in Loop: Header=BB32_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x13
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB32_3
.LBB32_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB32_15
.LBB32_14:                              //   in Loop: Header=BB32_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB32_17
.LBB32_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w10, w3, #0xff
	udiv	w9, w9, w10
	tst	w9, #0x3
	b.eq	.LBB32_14
// %bb.16:                              //   in Loop: Header=BB32_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB32_14
.LBB32_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB32_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB32_21
.LBB32_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB32_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB32_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB32_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end32:
	.size	_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc, .Lfunc_end32-_Z14test_variable1Ih22custom_divide_variableIhEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	bl	clock
	adrp	x7, iterations
	adrp	x4, start_time
	adrp	x1, current_test
	ldr	w8, [x7, :lo12:iterations]
	str	x0, [x4, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB33_17
// %bb.1:
	cmp	w9, #0
	b.le	.LBB33_13
// %bb.2:
	mov	w12, w9
	mov	w11, wzr
	add	x13, x10, #1
	and	x14, x12, #0x7ffffffe
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB33_4
.LBB33_3:                               //   in Loop: Header=BB33_4 Depth=1
	add	w11, w11, #1
	cmp	w11, w8
	b.ge	.LBB33_17
.LBB33_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB33_7 Depth 2
                                        //     Child Loop BB33_10 Depth 2
	cmp	w9, #1
	b.ne	.LBB33_6
// %bb.5:                               //   in Loop: Header=BB33_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB33_9
.LBB33_6:                               // %.preheader2
                                        //   in Loop: Header=BB33_4 Depth=1
	mov	w17, wzr
	mov	w18, wzr
	mov	x19, x13
	mov	x20, x14
.LBB33_7:                               //   Parent Loop BB33_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldurb	w21, [x19, #-1]
	ldrb	w23, [x19], #2
	and	w22, w6, #0xff
	subs	x20, x20, #2
	udiv	w21, w21, w22
	udiv	w22, w23, w22
	and	w23, w5, #0xff
	udiv	w21, w21, w23
	udiv	w22, w22, w23
	and	w23, w3, #0xff
	udiv	w21, w21, w23
	udiv	w22, w22, w23
	and	w23, w2, #0xff
	udiv	w21, w21, w23
	udiv	w22, w22, w23
	add	w17, w21, w17
	add	w18, w22, w18
	b.ne	.LBB33_7
// %bb.8:                               //   in Loop: Header=BB33_4 Depth=1
	cmp	x14, x12
	add	w17, w18, w17
	mov	x19, x14
	b.eq	.LBB33_11
.LBB33_9:                               // %.preheader
                                        //   in Loop: Header=BB33_4 Depth=1
	sub	x18, x12, x19
	add	x19, x10, x19
.LBB33_10:                              //   Parent Loop BB33_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	and	w21, w6, #0xff
	subs	x18, x18, #1
	udiv	w20, w20, w21
	and	w21, w5, #0xff
	udiv	w20, w20, w21
	and	w21, w3, #0xff
	udiv	w20, w20, w21
	and	w21, w2, #0xff
	udiv	w20, w20, w21
	add	w17, w20, w17
	b.ne	.LBB33_10
.LBB33_11:                              //   in Loop: Header=BB33_4 Depth=1
	ldr	d0, [x15, :lo12:init_value]
	and	w19, w6, #0xff
	fcvtzs	w18, d0
	udiv	w18, w18, w19
	and	w19, w5, #0xff
	udiv	w18, w18, w19
	and	w19, w3, #0xff
	udiv	w18, w18, w19
	and	w19, w2, #0xff
	udiv	w18, w18, w19
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB33_3
// %bb.12:                              //   in Loop: Header=BB33_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB33_3
.LBB33_13:
	adrp	x10, init_value
	mov	w9, wzr
	adrp	x11, .L.str.179
	add	x11, x11, :lo12:.L.str.179
	ldr	d0, [x10, :lo12:init_value]
	b	.LBB33_15
.LBB33_14:                              //   in Loop: Header=BB33_15 Depth=1
	add	w9, w9, #1
	cmp	w9, w8
	b.ge	.LBB33_17
.LBB33_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w12, d0
	and	w13, w6, #0xff
	udiv	w12, w12, w13
	and	w13, w5, #0xff
	udiv	w12, w12, w13
	and	w13, w3, #0xff
	udiv	w12, w12, w13
	and	w13, w2, #0xff
	udiv	w12, w12, w13
	tst	w12, #0x3
	b.eq	.LBB33_14
// %bb.16:                              //   in Loop: Header=BB33_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x11
	bl	printf
	ldr	d0, [x10, :lo12:init_value]
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB33_14
.LBB33_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x4, [x4, :lo12:start_time]
	ldr	x3, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x2, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x3, .LBB33_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB33_21
.LBB33_19:
	add	w6, w8, #10
	mov	x0, x3
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB33_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x3, x0
.LBB33_21:
	sub	x2, x2, x4
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x3, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB33_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end33:
	.size	_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end33-_Z14test_variable4Ih31custom_divide_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB34_23
// %bb.1:
	and	w10, w10, #0xff
	and	w9, w9, #0xff
	and	w8, w8, #0xff
	udiv	w9, w9, w10
	and	w4, w4, #0xff
	cmp	w6, #0
	udiv	w8, w9, w8
	udiv	w4, w8, w4
	b.le	.LBB34_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w4
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB34_4
.LBB34_3:                               //   in Loop: Header=BB34_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB34_23
.LBB34_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB34_9 Depth 2
                                        //     Child Loop BB34_13 Depth 2
                                        //     Child Loop BB34_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB34_6
// %bb.5:                               //   in Loop: Header=BB34_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB34_15
.LBB34_6:                               //   in Loop: Header=BB34_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB34_8
// %bb.7:                               //   in Loop: Header=BB34_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB34_12
.LBB34_8:                               // %.preheader2
                                        //   in Loop: Header=BB34_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB34_9:                               //   Parent Loop BB34_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x17, #-16]
	subs	x18, x18, #32
	add	x17, x17, #32
	add	v1.16b, v3.16b, v1.16b
	add	v2.16b, v4.16b, v2.16b
	add	v1.16b, v1.16b, v0.16b
	add	v2.16b, v2.16b, v0.16b
	b.ne	.LBB34_9
// %bb.10:                              //   in Loop: Header=BB34_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB34_17
// %bb.11:                              //   in Loop: Header=BB34_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB34_15
.LBB34_12:                              //   in Loop: Header=BB34_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB34_13:                              //   Parent Loop BB34_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8b, v1.8b, v0.8b
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	add	v1.8b, v2.8b, v1.8b
	b.ne	.LBB34_13
// %bb.14:                              //   in Loop: Header=BB34_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB34_17
.LBB34_15:                              // %.preheader
                                        //   in Loop: Header=BB34_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB34_16:                              //   Parent Loop BB34_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	add	w17, w17, w4
	subs	x18, x18, #1
	add	w17, w20, w17
	b.ne	.LBB34_16
.LBB34_17:                              //   in Loop: Header=BB34_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	add	w18, w4, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB34_3
// %bb.18:                              //   in Loop: Header=BB34_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB34_3
.LBB34_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB34_21
.LBB34_20:                              //   in Loop: Header=BB34_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB34_23
.LBB34_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB34_20
// %bb.22:                              //   in Loop: Header=BB34_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB34_20
.LBB34_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB34_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB34_27
.LBB34_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB34_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB34_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB34_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end34:
	.size	_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end34-_Z14test_variable4Ih32custom_divide_multiple_variable2IhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB35_23
// %bb.1:
	and	w10, w10, #0xff
	and	w9, w9, #0xff
	and	w8, w8, #0xff
	mul	w9, w9, w10
	cmp	w6, #0
	udiv	w8, w9, w8
	sub	w4, w4, w8
	b.le	.LBB35_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w4
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB35_4
.LBB35_3:                               //   in Loop: Header=BB35_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB35_23
.LBB35_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB35_9 Depth 2
                                        //     Child Loop BB35_13 Depth 2
                                        //     Child Loop BB35_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB35_6
// %bb.5:                               //   in Loop: Header=BB35_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB35_15
.LBB35_6:                               //   in Loop: Header=BB35_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB35_8
// %bb.7:                               //   in Loop: Header=BB35_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB35_12
.LBB35_8:                               // %.preheader2
                                        //   in Loop: Header=BB35_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB35_9:                               //   Parent Loop BB35_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x17, #-16]
	subs	x18, x18, #32
	add	x17, x17, #32
	add	v3.16b, v0.16b, v3.16b
	add	v4.16b, v0.16b, v4.16b
	add	v1.16b, v3.16b, v1.16b
	add	v2.16b, v4.16b, v2.16b
	b.ne	.LBB35_9
// %bb.10:                              //   in Loop: Header=BB35_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB35_17
// %bb.11:                              //   in Loop: Header=BB35_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB35_15
.LBB35_12:                              //   in Loop: Header=BB35_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB35_13:                              //   Parent Loop BB35_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8b, v0.8b, v1.8b
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	add	v1.8b, v1.8b, v2.8b
	b.ne	.LBB35_13
// %bb.14:                              //   in Loop: Header=BB35_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB35_17
.LBB35_15:                              // %.preheader
                                        //   in Loop: Header=BB35_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB35_16:                              //   Parent Loop BB35_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	add	w17, w4, w17
	subs	x18, x18, #1
	add	w17, w17, w20
	b.ne	.LBB35_16
.LBB35_17:                              //   in Loop: Header=BB35_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	add	w18, w4, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB35_3
// %bb.18:                              //   in Loop: Header=BB35_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB35_3
.LBB35_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB35_21
.LBB35_20:                              //   in Loop: Header=BB35_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB35_23
.LBB35_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB35_20
// %bb.22:                              //   in Loop: Header=BB35_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB35_20
.LBB35_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB35_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB35_27
.LBB35_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB35_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB35_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB35_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end35:
	.size	_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end35-_Z14test_variable4Ih30custom_mixed_multiple_variableIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc: // @_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB36_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB36_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w5
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB36_4
.LBB36_3:                               //   in Loop: Header=BB36_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w4
	b.ge	.LBB36_23
.LBB36_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB36_9 Depth 2
                                        //     Child Loop BB36_13 Depth 2
                                        //     Child Loop BB36_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB36_6
// %bb.5:                               //   in Loop: Header=BB36_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB36_15
.LBB36_6:                               //   in Loop: Header=BB36_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB36_8
// %bb.7:                               //   in Loop: Header=BB36_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB36_12
.LBB36_8:                               // %.preheader2
                                        //   in Loop: Header=BB36_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB36_9:                               //   Parent Loop BB36_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x17, #-16]
	subs	x18, x18, #32
	add	x17, x17, #32
	and	v4.16b, v4.16b, v0.16b
	and	v3.16b, v3.16b, v0.16b
	add	v1.16b, v4.16b, v1.16b
	add	v2.16b, v3.16b, v2.16b
	b.ne	.LBB36_9
// %bb.10:                              //   in Loop: Header=BB36_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB36_17
// %bb.11:                              //   in Loop: Header=BB36_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB36_15
.LBB36_12:                              //   in Loop: Header=BB36_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB36_13:                              //   Parent Loop BB36_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	and	v2.8b, v2.8b, v0.8b
	add	v1.8b, v2.8b, v1.8b
	b.ne	.LBB36_13
// %bb.14:                              //   in Loop: Header=BB36_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB36_17
.LBB36_15:                              // %.preheader
                                        //   in Loop: Header=BB36_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB36_16:                              //   Parent Loop BB36_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	subs	x18, x18, #1
	and	w20, w20, w5
	add	w17, w20, w17
	b.ne	.LBB36_16
.LBB36_17:                              //   in Loop: Header=BB36_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	and	w18, w5, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB36_3
// %bb.18:                              //   in Loop: Header=BB36_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB36_3
.LBB36_19:
	adrp	x7, init_value
	mov	w6, wzr
	and	w5, w5, #0x3
	ldr	d0, [x7, :lo12:init_value]
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	b	.LBB36_21
.LBB36_20:                              //   in Loop: Header=BB36_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w4
	b.ge	.LBB36_23
.LBB36_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w5, w9
	b.eq	.LBB36_20
// %bb.22:                              //   in Loop: Header=BB36_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB36_20
.LBB36_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB36_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB36_27
.LBB36_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB36_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB36_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB36_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end36:
	.size	_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc, .Lfunc_end36-_Z14test_variable1Ih19custom_variable_andIhEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB37_23
// %bb.1:
	and	w7, w11, w9
	and	w8, w12, w10
	cmp	w5, #0
	and	w7, w8, w7
	b.le	.LBB37_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	and	w9, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	and	w10, w10, w12
	and	w9, w10, w9
	mov	w10, w5
	mov	w8, wzr
	and	v0.16b, v0.16b, v1.16b
	and	x12, x10, #0x7ffffff8
	and	x11, x10, #0x7fffffe0
	and	v1.16b, v2.16b, v3.16b
	and	x13, x10, #0x18
	add	x14, x6, #16
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	and	v1.16b, v0.16b, v1.16b
	dup	v0.8b, w9
	dup	v1.16b, v1.b[0]
	b	.LBB37_4
.LBB37_3:                               //   in Loop: Header=BB37_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w4
	b.ge	.LBB37_23
.LBB37_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB37_9 Depth 2
                                        //     Child Loop BB37_13 Depth 2
                                        //     Child Loop BB37_16 Depth 2
	cmp	w5, #7
	b.hi	.LBB37_6
// %bb.5:                               //   in Loop: Header=BB37_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB37_15
.LBB37_6:                               //   in Loop: Header=BB37_4 Depth=1
	cmp	w5, #32
	b.hs	.LBB37_8
// %bb.7:                               //   in Loop: Header=BB37_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB37_12
.LBB37_8:                               // %.preheader2
                                        //   in Loop: Header=BB37_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x18, x14
	mov	x19, x11
.LBB37_9:                               //   Parent Loop BB37_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	and	v4.16b, v4.16b, v1.16b
	and	v5.16b, v5.16b, v1.16b
	add	v2.16b, v4.16b, v2.16b
	add	v3.16b, v5.16b, v3.16b
	b.ne	.LBB37_9
// %bb.10:                              //   in Loop: Header=BB37_4 Depth=1
	add	v2.16b, v3.16b, v2.16b
	cmp	x11, x10
	addv	b2, v2.16b
	fmov	w18, s2
	b.eq	.LBB37_17
// %bb.11:                              //   in Loop: Header=BB37_4 Depth=1
	mov	x20, x11
	mov	x19, x11
	cbz	x13, .LBB37_15
.LBB37_12:                              //   in Loop: Header=BB37_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.b[0], w18
	add	x18, x15, x19
	add	x19, x6, x19
.LBB37_13:                              //   Parent Loop BB37_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x18, x18, #8
	and	v3.8b, v0.8b, v3.8b
	add	v2.8b, v3.8b, v2.8b
	b.ne	.LBB37_13
// %bb.14:                              //   in Loop: Header=BB37_4 Depth=1
	addv	b2, v2.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s2
	b.eq	.LBB37_17
.LBB37_15:                              // %.preheader
                                        //   in Loop: Header=BB37_4 Depth=1
	sub	x19, x10, x20
	add	x20, x6, x20
.LBB37_16:                              //   Parent Loop BB37_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	and	w21, w21, w9
	add	w18, w21, w18
	b.ne	.LBB37_16
.LBB37_17:                              //   in Loop: Header=BB37_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w19, d2
	and	w19, w7, w19
	ubfiz	w19, w19, #6, #2
	cmp	w19, w18, uxtb
	b.eq	.LBB37_3
// %bb.18:                              //   in Loop: Header=BB37_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB37_3
.LBB37_19:
	adrp	x6, init_value
	mov	w5, wzr
	and	w7, w7, #0x3
	ldr	d0, [x6, :lo12:init_value]
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	b	.LBB37_21
.LBB37_20:                              //   in Loop: Header=BB37_21 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB37_23
.LBB37_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w7, w9
	b.eq	.LBB37_20
// %bb.22:                              //   in Loop: Header=BB37_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB37_20
.LBB37_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB37_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB37_27
.LBB37_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB37_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB37_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB37_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end37:
	.size	_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end37-_Z14test_variable4Ih28custom_multiple_variable_andIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc: // @_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB38_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB38_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w3
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB38_4
.LBB38_3:                               //   in Loop: Header=BB38_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB38_23
.LBB38_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB38_9 Depth 2
                                        //     Child Loop BB38_13 Depth 2
                                        //     Child Loop BB38_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB38_6
// %bb.5:                               //   in Loop: Header=BB38_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB38_15
.LBB38_6:                               //   in Loop: Header=BB38_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB38_8
// %bb.7:                               //   in Loop: Header=BB38_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB38_12
.LBB38_8:                               // %.preheader2
                                        //   in Loop: Header=BB38_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB38_9:                               //   Parent Loop BB38_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x17, #-16]
	subs	x18, x18, #32
	add	x17, x17, #32
	orr	v4.16b, v4.16b, v0.16b
	orr	v3.16b, v3.16b, v0.16b
	add	v1.16b, v4.16b, v1.16b
	add	v2.16b, v3.16b, v2.16b
	b.ne	.LBB38_9
// %bb.10:                              //   in Loop: Header=BB38_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB38_17
// %bb.11:                              //   in Loop: Header=BB38_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB38_15
.LBB38_12:                              //   in Loop: Header=BB38_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB38_13:                              //   Parent Loop BB38_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	orr	v2.8b, v2.8b, v0.8b
	add	v1.8b, v2.8b, v1.8b
	b.ne	.LBB38_13
// %bb.14:                              //   in Loop: Header=BB38_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB38_17
.LBB38_15:                              // %.preheader
                                        //   in Loop: Header=BB38_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB38_16:                              //   Parent Loop BB38_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	subs	x18, x18, #1
	orr	w20, w20, w3
	add	w17, w20, w17
	b.ne	.LBB38_16
.LBB38_17:                              //   in Loop: Header=BB38_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	orr	w18, w3, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB38_3
// %bb.18:                              //   in Loop: Header=BB38_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB38_3
.LBB38_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB38_21
.LBB38_20:                              //   in Loop: Header=BB38_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB38_23
.LBB38_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	orr	w9, w3, w9
	tst	w9, #0x3
	b.eq	.LBB38_20
// %bb.22:                              //   in Loop: Header=BB38_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB38_20
.LBB38_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB38_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB38_27
.LBB38_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB38_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB38_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB38_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end38:
	.size	_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc, .Lfunc_end38-_Z14test_variable1Ih18custom_variable_orIhEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB39_23
// %bb.1:
	orr	w4, w11, w9
	orr	w8, w12, w10
	cmp	w6, #0
	orr	w4, w8, w4
	b.le	.LBB39_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	orr	w9, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	orr	w10, w10, w12
	orr	w9, w10, w9
	mov	w10, w6
	mov	w8, wzr
	orr	v0.16b, v0.16b, v1.16b
	and	x12, x10, #0x7ffffff8
	and	x11, x10, #0x7fffffe0
	orr	v1.16b, v2.16b, v3.16b
	and	x13, x10, #0x18
	add	x14, x7, #16
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	orr	v1.16b, v0.16b, v1.16b
	dup	v0.8b, w9
	dup	v1.16b, v1.b[0]
	b	.LBB39_4
.LBB39_3:                               //   in Loop: Header=BB39_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB39_23
.LBB39_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB39_9 Depth 2
                                        //     Child Loop BB39_13 Depth 2
                                        //     Child Loop BB39_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB39_6
// %bb.5:                               //   in Loop: Header=BB39_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB39_15
.LBB39_6:                               //   in Loop: Header=BB39_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB39_8
// %bb.7:                               //   in Loop: Header=BB39_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB39_12
.LBB39_8:                               // %.preheader2
                                        //   in Loop: Header=BB39_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x18, x14
	mov	x19, x11
.LBB39_9:                               //   Parent Loop BB39_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	orr	v4.16b, v4.16b, v1.16b
	orr	v5.16b, v5.16b, v1.16b
	add	v2.16b, v4.16b, v2.16b
	add	v3.16b, v5.16b, v3.16b
	b.ne	.LBB39_9
// %bb.10:                              //   in Loop: Header=BB39_4 Depth=1
	add	v2.16b, v3.16b, v2.16b
	cmp	x11, x10
	addv	b2, v2.16b
	fmov	w18, s2
	b.eq	.LBB39_17
// %bb.11:                              //   in Loop: Header=BB39_4 Depth=1
	mov	x20, x11
	mov	x19, x11
	cbz	x13, .LBB39_15
.LBB39_12:                              //   in Loop: Header=BB39_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.b[0], w18
	add	x18, x15, x19
	add	x19, x7, x19
.LBB39_13:                              //   Parent Loop BB39_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x18, x18, #8
	orr	v3.8b, v0.8b, v3.8b
	add	v2.8b, v3.8b, v2.8b
	b.ne	.LBB39_13
// %bb.14:                              //   in Loop: Header=BB39_4 Depth=1
	addv	b2, v2.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s2
	b.eq	.LBB39_17
.LBB39_15:                              // %.preheader
                                        //   in Loop: Header=BB39_4 Depth=1
	sub	x19, x10, x20
	add	x20, x7, x20
.LBB39_16:                              //   Parent Loop BB39_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	orr	w21, w21, w9
	add	w18, w21, w18
	b.ne	.LBB39_16
.LBB39_17:                              //   in Loop: Header=BB39_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w19, d2
	orr	w19, w4, w19
	ubfiz	w19, w19, #6, #2
	cmp	w19, w18, uxtb
	b.eq	.LBB39_3
// %bb.18:                              //   in Loop: Header=BB39_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB39_3
.LBB39_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB39_21
.LBB39_20:                              //   in Loop: Header=BB39_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB39_23
.LBB39_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	orr	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB39_20
// %bb.22:                              //   in Loop: Header=BB39_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB39_20
.LBB39_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB39_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB39_27
.LBB39_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB39_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB39_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB39_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end39:
	.size	_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end39-_Z14test_variable4Ih27custom_multiple_variable_orIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc,@function
_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc: // @_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB40_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB40_19
// %bb.2:
	mov	w9, w6
	dup	v0.16b, w3
	mov	w8, wzr
	and	x11, x9, #0x7ffffff8
	add	x10, x7, #16
	and	x12, x9, #0x7fffffe0
	and	x13, x9, #0x18
	neg	x14, x11
	adrp	x15, init_value
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB40_4
.LBB40_3:                               //   in Loop: Header=BB40_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB40_23
.LBB40_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB40_9 Depth 2
                                        //     Child Loop BB40_13 Depth 2
                                        //     Child Loop BB40_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB40_6
// %bb.5:                               //   in Loop: Header=BB40_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB40_15
.LBB40_6:                               //   in Loop: Header=BB40_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB40_8
// %bb.7:                               //   in Loop: Header=BB40_4 Depth=1
	mov	x18, xzr
	mov	w17, wzr
	b	.LBB40_12
.LBB40_8:                               // %.preheader2
                                        //   in Loop: Header=BB40_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x17, x10
	mov	x18, x12
.LBB40_9:                               //   Parent Loop BB40_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x17, #-16]
	subs	x18, x18, #32
	add	x17, x17, #32
	eor	v4.16b, v4.16b, v0.16b
	eor	v3.16b, v3.16b, v0.16b
	add	v1.16b, v4.16b, v1.16b
	add	v2.16b, v3.16b, v2.16b
	b.ne	.LBB40_9
// %bb.10:                              //   in Loop: Header=BB40_4 Depth=1
	add	v1.16b, v2.16b, v1.16b
	cmp	x12, x9
	addv	b1, v1.16b
	fmov	w17, s1
	b.eq	.LBB40_17
// %bb.11:                              //   in Loop: Header=BB40_4 Depth=1
	mov	x19, x12
	mov	x18, x12
	cbz	x13, .LBB40_15
.LBB40_12:                              //   in Loop: Header=BB40_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.b[0], w17
	add	x17, x14, x18
	add	x18, x7, x18
.LBB40_13:                              //   Parent Loop BB40_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x17, x17, #8
	eor	v2.8b, v2.8b, v0.8b
	add	v1.8b, v2.8b, v1.8b
	b.ne	.LBB40_13
// %bb.14:                              //   in Loop: Header=BB40_4 Depth=1
	addv	b1, v1.8b
	cmp	x11, x9
	mov	x19, x11
	fmov	w17, s1
	b.eq	.LBB40_17
.LBB40_15:                              // %.preheader
                                        //   in Loop: Header=BB40_4 Depth=1
	sub	x18, x9, x19
	add	x19, x7, x19
.LBB40_16:                              //   Parent Loop BB40_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w20, [x19], #1
	subs	x18, x18, #1
	eor	w20, w20, w3
	add	w17, w20, w17
	b.ne	.LBB40_16
.LBB40_17:                              //   in Loop: Header=BB40_4 Depth=1
	ldr	d1, [x15, :lo12:init_value]
	fcvtzs	w18, d1
	eor	w18, w3, w18
	ubfiz	w18, w18, #6, #2
	cmp	w18, w17, uxtb
	b.eq	.LBB40_3
// %bb.18:                              //   in Loop: Header=BB40_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB40_3
.LBB40_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB40_21
.LBB40_20:                              //   in Loop: Header=BB40_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB40_23
.LBB40_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	eor	w9, w3, w9
	tst	w9, #0x3
	b.eq	.LBB40_20
// %bb.22:                              //   in Loop: Header=BB40_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB40_20
.LBB40_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB40_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB40_27
.LBB40_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB40_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB40_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB40_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end40:
	.size	_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc, .Lfunc_end40-_Z14test_variable1Ih19custom_variable_xorIhEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB41_23
// %bb.1:
	eor	w4, w11, w9
	eor	w8, w12, w10
	cmp	w6, #0
	eor	w4, w8, w4
	b.le	.LBB41_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	eor	w9, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	eor	w10, w10, w12
	eor	w9, w10, w9
	mov	w10, w6
	mov	w8, wzr
	eor	v0.16b, v0.16b, v1.16b
	and	x12, x10, #0x7ffffff8
	and	x11, x10, #0x7fffffe0
	eor	v1.16b, v2.16b, v3.16b
	and	x13, x10, #0x18
	add	x14, x7, #16
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	eor	v1.16b, v0.16b, v1.16b
	dup	v0.8b, w9
	dup	v1.16b, v1.b[0]
	b	.LBB41_4
.LBB41_3:                               //   in Loop: Header=BB41_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB41_23
.LBB41_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB41_9 Depth 2
                                        //     Child Loop BB41_13 Depth 2
                                        //     Child Loop BB41_16 Depth 2
	cmp	w6, #7
	b.hi	.LBB41_6
// %bb.5:                               //   in Loop: Header=BB41_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB41_15
.LBB41_6:                               //   in Loop: Header=BB41_4 Depth=1
	cmp	w6, #32
	b.hs	.LBB41_8
// %bb.7:                               //   in Loop: Header=BB41_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB41_12
.LBB41_8:                               // %.preheader2
                                        //   in Loop: Header=BB41_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x18, x14
	mov	x19, x11
.LBB41_9:                               //   Parent Loop BB41_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x18, #-16]
	subs	x19, x19, #32
	add	x18, x18, #32
	eor	v4.16b, v4.16b, v1.16b
	eor	v5.16b, v5.16b, v1.16b
	add	v2.16b, v4.16b, v2.16b
	add	v3.16b, v5.16b, v3.16b
	b.ne	.LBB41_9
// %bb.10:                              //   in Loop: Header=BB41_4 Depth=1
	add	v2.16b, v3.16b, v2.16b
	cmp	x11, x10
	addv	b2, v2.16b
	fmov	w18, s2
	b.eq	.LBB41_17
// %bb.11:                              //   in Loop: Header=BB41_4 Depth=1
	mov	x20, x11
	mov	x19, x11
	cbz	x13, .LBB41_15
.LBB41_12:                              //   in Loop: Header=BB41_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.b[0], w18
	add	x18, x15, x19
	add	x19, x7, x19
.LBB41_13:                              //   Parent Loop BB41_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x18, x18, #8
	eor	v3.8b, v0.8b, v3.8b
	add	v2.8b, v3.8b, v2.8b
	b.ne	.LBB41_13
// %bb.14:                              //   in Loop: Header=BB41_4 Depth=1
	addv	b2, v2.8b
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s2
	b.eq	.LBB41_17
.LBB41_15:                              // %.preheader
                                        //   in Loop: Header=BB41_4 Depth=1
	sub	x19, x10, x20
	add	x20, x7, x20
.LBB41_16:                              //   Parent Loop BB41_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w21, [x20], #1
	subs	x19, x19, #1
	eor	w21, w21, w9
	add	w18, w21, w18
	b.ne	.LBB41_16
.LBB41_17:                              //   in Loop: Header=BB41_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w19, d2
	eor	w19, w4, w19
	ubfiz	w19, w19, #6, #2
	cmp	w19, w18, uxtb
	b.eq	.LBB41_3
// %bb.18:                              //   in Loop: Header=BB41_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB41_3
.LBB41_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB41_21
.LBB41_20:                              //   in Loop: Header=BB41_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB41_23
.LBB41_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	eor	w9, w4, w9
	tst	w9, #0x3
	b.eq	.LBB41_20
// %bb.22:                              //   in Loop: Header=BB41_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB41_20
.LBB41_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB41_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB41_27
.LBB41_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB41_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB41_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB41_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end41:
	.size	_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end41-_Z14test_variable4Ih28custom_multiple_variable_xorIhEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc: // @_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB42_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB42_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w3
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB42_4
.LBB42_3:                               //   in Loop: Header=BB42_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB42_23
.LBB42_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB42_9 Depth 2
                                        //     Child Loop BB42_13 Depth 2
                                        //     Child Loop BB42_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB42_6
// %bb.5:                               //   in Loop: Header=BB42_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB42_15
.LBB42_6:                               //   in Loop: Header=BB42_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB42_8
// %bb.7:                               //   in Loop: Header=BB42_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB42_12
.LBB42_8:                               // %.preheader2
                                        //   in Loop: Header=BB42_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB42_9:                               //   Parent Loop BB42_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8h, v1.8h, v0.8h
	add	v2.8h, v2.8h, v0.8h
	subs	x19, x19, #16
	ldp	q4, q3, [x18, #-16]
	add	x18, x18, #32
	add	v1.8h, v1.8h, v4.8h
	add	v2.8h, v2.8h, v3.8h
	b.ne	.LBB42_9
// %bb.10:                              //   in Loop: Header=BB42_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB42_17
// %bb.11:                              //   in Loop: Header=BB42_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB42_15
.LBB42_12:                              //   in Loop: Header=BB42_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB42_13:                              //   Parent Loop BB42_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4h, v1.4h, v0.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB42_13
// %bb.14:                              //   in Loop: Header=BB42_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB42_17
.LBB42_15:                              // %.preheader
                                        //   in Loop: Header=BB42_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB42_16:                              //   Parent Loop BB42_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	add	w18, w18, w3
	subs	x20, x20, #1
	add	w18, w18, w21
	b.ne	.LBB42_16
.LBB42_17:                              //   in Loop: Header=BB42_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	add	w19, w3, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB42_3
// %bb.18:                              //   in Loop: Header=BB42_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB42_3
.LBB42_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB42_21
.LBB42_20:                              //   in Loop: Header=BB42_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB42_23
.LBB42_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w3, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB42_20
// %bb.22:                              //   in Loop: Header=BB42_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB42_20
.LBB42_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB42_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB42_27
.LBB42_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB42_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB42_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB42_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end42:
	.size	_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc, .Lfunc_end42-_Z14test_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc // -- Begin function _Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.p2align	2
	.type	_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc: // @_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w6, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w6, #1
	b.lt	.LBB43_23
// %bb.1:
	mul	w5, w3, w7
	cmp	w7, #0
	b.le	.LBB43_19
// %bb.2:
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #16
	and	x13, x10, #0x7ffffffc
	adrp	x12, init_value
	and	x14, x10, #0x7ffffff0
	and	x15, x10, #0xc
	neg	x16, x13
	mov	w17, #8000                      // =0x1f40
	adrp	x18, .L.str.179
	add	x18, x18, :lo12:.L.str.179
	b	.LBB43_4
.LBB43_3:                               //   in Loop: Header=BB43_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w6
	b.ge	.LBB43_23
.LBB43_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB43_9 Depth 2
                                        //     Child Loop BB43_13 Depth 2
                                        //     Child Loop BB43_16 Depth 2
	cmp	w7, #3
	b.hi	.LBB43_6
// %bb.5:                               //   in Loop: Header=BB43_4 Depth=1
	mov	x21, xzr
	mov	w19, wzr
	b	.LBB43_15
.LBB43_6:                               //   in Loop: Header=BB43_4 Depth=1
	cmp	w7, #16
	b.hs	.LBB43_8
// %bb.7:                               //   in Loop: Header=BB43_4 Depth=1
	mov	x20, xzr
	mov	w19, wzr
	b	.LBB43_12
.LBB43_8:                               // %.preheader2
                                        //   in Loop: Header=BB43_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x19, x11
	mov	x20, x14
.LBB43_9:                               //   Parent Loop BB43_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x19, #-16]
	subs	x20, x20, #16
	add	x19, x19, #32
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB43_9
// %bb.10:                              //   in Loop: Header=BB43_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x14, x10
	addv	h0, v0.8h
	fmov	w19, s0
	b.eq	.LBB43_17
// %bb.11:                              //   in Loop: Header=BB43_4 Depth=1
	mov	x21, x14
	mov	x20, x14
	cbz	x15, .LBB43_15
.LBB43_12:                              //   in Loop: Header=BB43_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w19
	add	x19, x8, x20, lsl #1
	add	x20, x16, x20
.LBB43_13:                              //   Parent Loop BB43_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x19], #8
	adds	x20, x20, #4
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB43_13
// %bb.14:                              //   in Loop: Header=BB43_4 Depth=1
	addv	h0, v0.4h
	cmp	x13, x10
	mov	x21, x13
	fmov	w19, s0
	b.eq	.LBB43_17
.LBB43_15:                              // %.preheader
                                        //   in Loop: Header=BB43_4 Depth=1
	add	x20, x8, x21, lsl #1
	sub	x21, x10, x21
.LBB43_16:                              //   Parent Loop BB43_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w22, [x20], #2
	subs	x21, x21, #1
	add	w19, w22, w19
	b.ne	.LBB43_16
.LBB43_17:                              //   in Loop: Header=BB43_4 Depth=1
	ldr	d0, [x12, :lo12:init_value]
	add	w19, w19, w5
	fcvtzs	w20, d0
	add	w20, w3, w20
	mul	w20, w20, w17
	and	w20, w20, #0xffc0
	cmp	w20, w19, uxth
	b.eq	.LBB43_3
// %bb.18:                              //   in Loop: Header=BB43_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x18
	bl	printf
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB43_3
.LBB43_19:
	adrp	x8, init_value
	mov	w7, wzr
	mov	w9, #8000                       // =0x1f40
	ldr	d0, [x8, :lo12:init_value]
	adrp	x10, .L.str.179
	add	x10, x10, :lo12:.L.str.179
	b	.LBB43_21
.LBB43_20:                              //   in Loop: Header=BB43_21 Depth=1
	add	w7, w7, #1
	cmp	w7, w6
	b.ge	.LBB43_23
.LBB43_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w11, d0
	add	w11, w3, w11
	mul	w11, w11, w9
	and	w11, w11, #0xffc0
	cmp	w11, w5, uxth
	b.eq	.LBB43_20
// %bb.22:                              //   in Loop: Header=BB43_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x10
	bl	printf
	ldr	d0, [x8, :lo12:init_value]
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB43_20
.LBB43_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB43_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB43_27
.LBB43_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB43_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB43_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB43_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end43:
	.size	_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc, .Lfunc_end43-_Z22test_hoisted_variable1Is19custom_add_variableIsEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB44_23
// %bb.1:
	add	w4, w8, w4
	add	w8, w9, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB44_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w4
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB44_4
.LBB44_3:                               //   in Loop: Header=BB44_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB44_23
.LBB44_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB44_9 Depth 2
                                        //     Child Loop BB44_13 Depth 2
                                        //     Child Loop BB44_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB44_6
// %bb.5:                               //   in Loop: Header=BB44_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB44_15
.LBB44_6:                               //   in Loop: Header=BB44_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB44_8
// %bb.7:                               //   in Loop: Header=BB44_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB44_12
.LBB44_8:                               // %.preheader2
                                        //   in Loop: Header=BB44_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB44_9:                               //   Parent Loop BB44_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8h, v0.8h, v1.8h
	add	v2.8h, v0.8h, v2.8h
	subs	x19, x19, #16
	ldp	q4, q3, [x18, #-16]
	add	x18, x18, #32
	add	v1.8h, v1.8h, v4.8h
	add	v2.8h, v2.8h, v3.8h
	b.ne	.LBB44_9
// %bb.10:                              //   in Loop: Header=BB44_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB44_17
// %bb.11:                              //   in Loop: Header=BB44_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB44_15
.LBB44_12:                              //   in Loop: Header=BB44_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB44_13:                              //   Parent Loop BB44_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4h, v0.4h, v1.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB44_13
// %bb.14:                              //   in Loop: Header=BB44_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB44_17
.LBB44_15:                              // %.preheader
                                        //   in Loop: Header=BB44_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB44_16:                              //   Parent Loop BB44_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	add	w18, w4, w18
	subs	x20, x20, #1
	add	w18, w18, w21
	b.ne	.LBB44_16
.LBB44_17:                              //   in Loop: Header=BB44_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	add	w19, w4, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB44_3
// %bb.18:                              //   in Loop: Header=BB44_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB44_3
.LBB44_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB44_21
.LBB44_20:                              //   in Loop: Header=BB44_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB44_23
.LBB44_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB44_20
// %bb.22:                              //   in Loop: Header=BB44_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB44_20
.LBB44_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB44_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB44_27
.LBB44_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB44_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB44_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB44_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end44:
	.size	_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end44-_Z14test_variable4Is28custom_add_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc: // @_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB45_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB45_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w3
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB45_4
.LBB45_3:                               //   in Loop: Header=BB45_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB45_23
.LBB45_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB45_9 Depth 2
                                        //     Child Loop BB45_13 Depth 2
                                        //     Child Loop BB45_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB45_6
// %bb.5:                               //   in Loop: Header=BB45_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB45_15
.LBB45_6:                               //   in Loop: Header=BB45_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB45_8
// %bb.7:                               //   in Loop: Header=BB45_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB45_12
.LBB45_8:                               // %.preheader2
                                        //   in Loop: Header=BB45_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB45_9:                               //   Parent Loop BB45_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.8h, v1.8h, v0.8h
	sub	v2.8h, v2.8h, v0.8h
	subs	x19, x19, #16
	ldp	q4, q3, [x18, #-16]
	add	x18, x18, #32
	add	v1.8h, v1.8h, v4.8h
	add	v2.8h, v2.8h, v3.8h
	b.ne	.LBB45_9
// %bb.10:                              //   in Loop: Header=BB45_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB45_17
// %bb.11:                              //   in Loop: Header=BB45_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB45_15
.LBB45_12:                              //   in Loop: Header=BB45_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB45_13:                              //   Parent Loop BB45_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.4h, v1.4h, v0.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB45_13
// %bb.14:                              //   in Loop: Header=BB45_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB45_17
.LBB45_15:                              // %.preheader
                                        //   in Loop: Header=BB45_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB45_16:                              //   Parent Loop BB45_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	sub	w18, w18, w3
	subs	x20, x20, #1
	add	w18, w18, w21
	b.ne	.LBB45_16
.LBB45_17:                              //   in Loop: Header=BB45_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	sub	w19, w19, w3
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB45_3
// %bb.18:                              //   in Loop: Header=BB45_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB45_3
.LBB45_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB45_21
.LBB45_20:                              //   in Loop: Header=BB45_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB45_23
.LBB45_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	sub	w10, w10, w3
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB45_20
// %bb.22:                              //   in Loop: Header=BB45_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB45_20
.LBB45_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB45_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB45_27
.LBB45_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB45_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB45_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB45_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end45:
	.size	_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc, .Lfunc_end45-_Z14test_variable1Is19custom_sub_variableIsEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB46_23
// %bb.1:
	add	w4, w8, w4
	add	w8, w9, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB46_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w4
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB46_4
.LBB46_3:                               //   in Loop: Header=BB46_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB46_23
.LBB46_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB46_9 Depth 2
                                        //     Child Loop BB46_13 Depth 2
                                        //     Child Loop BB46_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB46_6
// %bb.5:                               //   in Loop: Header=BB46_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB46_15
.LBB46_6:                               //   in Loop: Header=BB46_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB46_8
// %bb.7:                               //   in Loop: Header=BB46_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB46_12
.LBB46_8:                               // %.preheader2
                                        //   in Loop: Header=BB46_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB46_9:                               //   Parent Loop BB46_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.8h, v1.8h, v0.8h
	sub	v2.8h, v2.8h, v0.8h
	subs	x19, x19, #16
	ldp	q4, q3, [x18, #-16]
	add	x18, x18, #32
	add	v1.8h, v1.8h, v4.8h
	add	v2.8h, v2.8h, v3.8h
	b.ne	.LBB46_9
// %bb.10:                              //   in Loop: Header=BB46_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB46_17
// %bb.11:                              //   in Loop: Header=BB46_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB46_15
.LBB46_12:                              //   in Loop: Header=BB46_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB46_13:                              //   Parent Loop BB46_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.4h, v1.4h, v0.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB46_13
// %bb.14:                              //   in Loop: Header=BB46_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB46_17
.LBB46_15:                              // %.preheader
                                        //   in Loop: Header=BB46_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB46_16:                              //   Parent Loop BB46_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	sub	w18, w18, w4
	subs	x20, x20, #1
	add	w18, w18, w21
	b.ne	.LBB46_16
.LBB46_17:                              //   in Loop: Header=BB46_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	sub	w19, w19, w4
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB46_3
// %bb.18:                              //   in Loop: Header=BB46_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB46_3
.LBB46_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB46_21
.LBB46_20:                              //   in Loop: Header=BB46_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB46_23
.LBB46_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	sub	w10, w10, w4
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB46_20
// %bb.22:                              //   in Loop: Header=BB46_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB46_20
.LBB46_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB46_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB46_27
.LBB46_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB46_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB46_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB46_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end46:
	.size	_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end46-_Z14test_variable4Is28custom_sub_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc: // @_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB47_23
// %bb.1:
	mov	w4, #8000                       // =0x1f40
	cmp	w7, #0
	mul	w4, w6, w4
	b.le	.LBB47_19
// %bb.2:
	mov	w10, w7
	fmov	s0, w6
	mov	w9, wzr
	and	x12, x10, #0x7ffffffc
	add	x11, x8, #16
	and	x13, x10, #0x7ffffff0
	and	x14, x10, #0xc
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB47_4
.LBB47_3:                               //   in Loop: Header=BB47_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w5
	b.ge	.LBB47_23
.LBB47_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB47_9 Depth 2
                                        //     Child Loop BB47_13 Depth 2
                                        //     Child Loop BB47_16 Depth 2
	cmp	w7, #3
	b.hi	.LBB47_6
// %bb.5:                               //   in Loop: Header=BB47_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB47_15
.LBB47_6:                               //   in Loop: Header=BB47_4 Depth=1
	cmp	w7, #16
	b.hs	.LBB47_8
// %bb.7:                               //   in Loop: Header=BB47_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB47_12
.LBB47_8:                               // %.preheader2
                                        //   in Loop: Header=BB47_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x11
	mov	x19, x13
.LBB47_9:                               //   Parent Loop BB47_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	mla	v1.8h, v4.8h, v0.h[0]
	mla	v2.8h, v3.8h, v0.h[0]
	b.ne	.LBB47_9
// %bb.10:                              //   in Loop: Header=BB47_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x10
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB47_17
// %bb.11:                              //   in Loop: Header=BB47_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB47_15
.LBB47_12:                              //   in Loop: Header=BB47_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x8, x19, lsl #1
	add	x19, x15, x19
.LBB47_13:                              //   Parent Loop BB47_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	mla	v1.4h, v2.4h, v0.h[0]
	b.ne	.LBB47_13
// %bb.14:                              //   in Loop: Header=BB47_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB47_17
.LBB47_15:                              // %.preheader
                                        //   in Loop: Header=BB47_4 Depth=1
	add	x19, x8, x20, lsl #1
	sub	x20, x10, x20
.LBB47_16:                              //   Parent Loop BB47_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	subs	x20, x20, #1
	madd	w18, w21, w6, w18
	b.ne	.LBB47_16
.LBB47_17:                              //   in Loop: Header=BB47_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	and	w18, w18, #0xffff
	fcvtzs	w19, d1
	mul	w19, w4, w19
	cmp	w18, w19, uxth
	b.eq	.LBB47_3
// %bb.18:                              //   in Loop: Header=BB47_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB47_3
.LBB47_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB47_21
.LBB47_20:                              //   in Loop: Header=BB47_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB47_23
.LBB47_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w4, w9
	tst	w9, #0xffff
	b.eq	.LBB47_20
// %bb.22:                              //   in Loop: Header=BB47_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB47_20
.LBB47_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB47_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB47_27
.LBB47_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB47_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB47_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB47_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end47:
	.size	_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc, .Lfunc_end47-_Z14test_variable1Is24custom_multiply_variableIsEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB48_23
// %bb.1:
	mul	w11, w8, w4
	mov	w8, #8000                       // =0x1f40
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	mul	w4, w4, w8
	b.le	.LBB48_19
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x11, x7, #16
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x13, x10, #0x7ffffffc
	and	x12, x10, #0x7ffffff0
	and	x14, x10, #0xc
	neg	x15, x13
	fmov	s0, w9
	b	.LBB48_4
.LBB48_3:                               //   in Loop: Header=BB48_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB48_23
.LBB48_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB48_9 Depth 2
                                        //     Child Loop BB48_13 Depth 2
                                        //     Child Loop BB48_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB48_6
// %bb.5:                               //   in Loop: Header=BB48_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB48_15
.LBB48_6:                               //   in Loop: Header=BB48_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB48_8
// %bb.7:                               //   in Loop: Header=BB48_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB48_12
.LBB48_8:                               // %.preheader2
                                        //   in Loop: Header=BB48_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x11
	mov	x19, x12
.LBB48_9:                               //   Parent Loop BB48_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	mla	v1.8h, v4.8h, v0.h[0]
	mla	v2.8h, v3.8h, v0.h[0]
	b.ne	.LBB48_9
// %bb.10:                              //   in Loop: Header=BB48_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x12, x10
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB48_17
// %bb.11:                              //   in Loop: Header=BB48_4 Depth=1
	mov	x20, x12
	mov	x19, x12
	cbz	x14, .LBB48_15
.LBB48_12:                              //   in Loop: Header=BB48_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB48_13:                              //   Parent Loop BB48_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	mla	v1.4h, v2.4h, v0.h[0]
	b.ne	.LBB48_13
// %bb.14:                              //   in Loop: Header=BB48_4 Depth=1
	addv	h1, v1.4h
	cmp	x13, x10
	mov	x20, x13
	fmov	w18, s1
	b.eq	.LBB48_17
.LBB48_15:                              // %.preheader
                                        //   in Loop: Header=BB48_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x10, x20
.LBB48_16:                              //   Parent Loop BB48_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	subs	x20, x20, #1
	madd	w18, w9, w21, w18
	b.ne	.LBB48_16
.LBB48_17:                              //   in Loop: Header=BB48_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	and	w18, w18, #0xffff
	fcvtzs	w19, d1
	mul	w19, w4, w19
	cmp	w18, w19, uxth
	b.eq	.LBB48_3
// %bb.18:                              //   in Loop: Header=BB48_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB48_3
.LBB48_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB48_21
.LBB48_20:                              //   in Loop: Header=BB48_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB48_23
.LBB48_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w4, w9
	tst	w9, #0xffff
	b.eq	.LBB48_20
// %bb.22:                              //   in Loop: Header=BB48_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB48_20
.LBB48_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB48_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB48_27
.LBB48_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB48_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB48_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB48_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end48:
	.size	_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end48-_Z14test_variable4Is33custom_multiply_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB49_23
// %bb.1:
	mul	w11, w8, w4
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	b.le	.LBB49_19
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x14, x7, #16
	adrp	x16, init_value
	mov	w17, #8000                      // =0x1f40
	adrp	x18, .L.str.179
	add	x18, x18, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x13, x10, #0x7ffffffc
	and	x11, x10, #0x7ffffff0
	and	x12, x10, #0xc
	neg	x15, x13
	dup	v0.8h, w9
	b	.LBB49_4
.LBB49_3:                               //   in Loop: Header=BB49_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB49_23
.LBB49_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB49_9 Depth 2
                                        //     Child Loop BB49_13 Depth 2
                                        //     Child Loop BB49_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB49_6
// %bb.5:                               //   in Loop: Header=BB49_4 Depth=1
	mov	x21, xzr
	mov	w19, wzr
	b	.LBB49_15
.LBB49_6:                               //   in Loop: Header=BB49_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB49_8
// %bb.7:                               //   in Loop: Header=BB49_4 Depth=1
	mov	x20, xzr
	mov	w19, wzr
	b	.LBB49_12
.LBB49_8:                               // %.preheader2
                                        //   in Loop: Header=BB49_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x19, x14
	mov	x20, x11
.LBB49_9:                               //   Parent Loop BB49_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8h, v1.8h, v0.8h
	add	v2.8h, v2.8h, v0.8h
	subs	x20, x20, #16
	ldp	q4, q3, [x19, #-16]
	add	x19, x19, #32
	add	v1.8h, v1.8h, v4.8h
	add	v2.8h, v2.8h, v3.8h
	b.ne	.LBB49_9
// %bb.10:                              //   in Loop: Header=BB49_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x11, x10
	addv	h1, v1.8h
	fmov	w19, s1
	b.eq	.LBB49_17
// %bb.11:                              //   in Loop: Header=BB49_4 Depth=1
	mov	x21, x11
	mov	x20, x11
	cbz	x12, .LBB49_15
.LBB49_12:                              //   in Loop: Header=BB49_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w19
	add	x19, x7, x20, lsl #1
	add	x20, x15, x20
.LBB49_13:                              //   Parent Loop BB49_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4h, v1.4h, v0.4h
	ldr	d2, [x19], #8
	adds	x20, x20, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB49_13
// %bb.14:                              //   in Loop: Header=BB49_4 Depth=1
	addv	h1, v1.4h
	cmp	x13, x10
	mov	x21, x13
	fmov	w19, s1
	b.eq	.LBB49_17
.LBB49_15:                              // %.preheader
                                        //   in Loop: Header=BB49_4 Depth=1
	add	x20, x7, x21, lsl #1
	sub	x21, x10, x21
.LBB49_16:                              //   Parent Loop BB49_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w22, [x20], #2
	add	w19, w19, w9
	subs	x21, x21, #1
	add	w19, w19, w22
	b.ne	.LBB49_16
.LBB49_17:                              //   in Loop: Header=BB49_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	fcvtzs	w20, d1
	add	w20, w4, w20
	mul	w20, w20, w17
	and	w20, w20, #0xffc0
	cmp	w20, w19, uxth
	b.eq	.LBB49_3
// %bb.18:                              //   in Loop: Header=BB49_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x18
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB49_3
.LBB49_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB49_21
.LBB49_20:                              //   in Loop: Header=BB49_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB49_23
.LBB49_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB49_20
// %bb.22:                              //   in Loop: Header=BB49_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB49_20
.LBB49_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB49_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB49_27
.LBB49_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB49_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB49_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB49_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end49:
	.size	_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end49-_Z14test_variable4Is34custom_multiply_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc: // @_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB50_17
// %bb.1:
	sxth	w4, w4
	cmp	w6, #0
	b.le	.LBB50_13
// %bb.2:
	mov	w9, w6
	mov	w8, wzr
	add	x10, x7, #2
	adrp	x11, init_value
	and	x12, x9, #0x7ffffffe
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB50_4
.LBB50_3:                               //   in Loop: Header=BB50_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB50_17
.LBB50_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB50_7 Depth 2
                                        //     Child Loop BB50_10 Depth 2
	cmp	w6, #1
	b.ne	.LBB50_6
// %bb.5:                               //   in Loop: Header=BB50_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB50_9
.LBB50_6:                               // %.preheader2
                                        //   in Loop: Header=BB50_4 Depth=1
	mov	w15, wzr
	mov	w16, wzr
	mov	x17, x10
	mov	x18, x12
.LBB50_7:                               //   Parent Loop BB50_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldursh	w19, [x17, #-2]
	ldrsh	w20, [x17]
	subs	x18, x18, #2
	add	x17, x17, #4
	sdiv	w19, w19, w4
	sdiv	w20, w20, w4
	add	w15, w15, w19
	add	w16, w16, w20
	b.ne	.LBB50_7
// %bb.8:                               //   in Loop: Header=BB50_4 Depth=1
	cmp	x12, x9
	add	w15, w16, w15
	mov	x17, x12
	b.eq	.LBB50_11
.LBB50_9:                               // %.preheader
                                        //   in Loop: Header=BB50_4 Depth=1
	add	x16, x7, x17, lsl #1
	sub	x17, x9, x17
.LBB50_10:                              //   Parent Loop BB50_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsh	w18, [x16], #2
	subs	x17, x17, #1
	sdiv	w18, w18, w4
	add	w15, w15, w18
	b.ne	.LBB50_10
.LBB50_11:                              //   in Loop: Header=BB50_4 Depth=1
	ldr	d0, [x11, :lo12:init_value]
	fcvtzs	w16, d0
	sdiv	w16, w16, w4
	mul	w16, w16, w13
	and	w16, w16, #0xffc0
	cmp	w16, w15, uxth
	b.eq	.LBB50_3
// %bb.12:                              //   in Loop: Header=BB50_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB50_3
.LBB50_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB50_15
.LBB50_14:                              //   in Loop: Header=BB50_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB50_17
.LBB50_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	sdiv	w10, w10, w4
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB50_14
// %bb.16:                              //   in Loop: Header=BB50_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB50_14
.LBB50_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB50_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB50_21
.LBB50_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB50_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB50_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB50_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end50:
	.size	_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc, .Lfunc_end50-_Z14test_variable1Is22custom_divide_variableIsEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w8, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB51_17
// %bb.1:
	sxth	w4, w4
	sxth	w5, w5
	sxth	w6, w6
	sxth	w7, w7
	cmp	w9, #0
	b.le	.LBB51_13
// %bb.2:
	mov	w12, w9
	mov	w11, wzr
	add	x13, x10, #2
	adrp	x14, init_value
	and	x15, x12, #0x7ffffffe
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB51_4
.LBB51_3:                               //   in Loop: Header=BB51_4 Depth=1
	add	w11, w11, #1
	cmp	w11, w8
	b.ge	.LBB51_17
.LBB51_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB51_7 Depth 2
                                        //     Child Loop BB51_10 Depth 2
	cmp	w9, #1
	b.ne	.LBB51_6
// %bb.5:                               //   in Loop: Header=BB51_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB51_9
.LBB51_6:                               // %.preheader2
                                        //   in Loop: Header=BB51_4 Depth=1
	mov	w18, wzr
	mov	w19, wzr
	mov	x20, x13
	mov	x21, x15
.LBB51_7:                               //   Parent Loop BB51_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldursh	w22, [x20, #-2]
	ldrsh	w23, [x20]
	subs	x21, x21, #2
	add	x20, x20, #4
	sdiv	w22, w22, w4
	sdiv	w23, w23, w4
	sdiv	w22, w22, w5
	sdiv	w23, w23, w5
	sdiv	w22, w22, w6
	sdiv	w23, w23, w6
	sdiv	w22, w22, w7
	sdiv	w23, w23, w7
	add	w18, w18, w22
	add	w19, w19, w23
	b.ne	.LBB51_7
// %bb.8:                               //   in Loop: Header=BB51_4 Depth=1
	cmp	x15, x12
	add	w18, w19, w18
	mov	x20, x15
	b.eq	.LBB51_11
.LBB51_9:                               // %.preheader
                                        //   in Loop: Header=BB51_4 Depth=1
	add	x19, x10, x20, lsl #1
	sub	x20, x12, x20
.LBB51_10:                              //   Parent Loop BB51_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsh	w21, [x19], #2
	subs	x20, x20, #1
	sdiv	w21, w21, w4
	sdiv	w21, w21, w5
	sdiv	w21, w21, w6
	sdiv	w21, w21, w7
	add	w18, w18, w21
	b.ne	.LBB51_10
.LBB51_11:                              //   in Loop: Header=BB51_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	fcvtzs	w19, d0
	sdiv	w19, w19, w4
	sdiv	w19, w19, w5
	sdiv	w19, w19, w6
	sdiv	w19, w19, w7
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB51_3
// %bb.12:                              //   in Loop: Header=BB51_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w8, [x3, :lo12:iterations]
	b	.LBB51_3
.LBB51_13:
	adrp	x10, init_value
	mov	w9, wzr
	mov	w11, #8000                      // =0x1f40
	ldr	d0, [x10, :lo12:init_value]
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB51_15
.LBB51_14:                              //   in Loop: Header=BB51_15 Depth=1
	add	w9, w9, #1
	cmp	w9, w8
	b.ge	.LBB51_17
.LBB51_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w13, d0
	sdiv	w13, w13, w4
	sdiv	w13, w13, w5
	sdiv	w13, w13, w6
	sdiv	w13, w13, w7
	mul	w13, w13, w11
	tst	w13, #0xffc0
	b.eq	.LBB51_14
// %bb.16:                              //   in Loop: Header=BB51_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	d0, [x10, :lo12:init_value]
	ldr	w8, [x3, :lo12:iterations]
	b	.LBB51_14
.LBB51_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB51_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB51_21
.LBB51_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB51_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB51_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB51_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end51:
	.size	_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end51-_Z14test_variable4Is31custom_divide_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB52_23
// %bb.1:
	sxth	w10, w10
	sxth	w9, w9
	sxth	w8, w8
	sxth	w4, w4
	cmp	w6, #0
	sdiv	w9, w10, w9
	sdiv	w8, w9, w8
	sdiv	w4, w8, w4
	b.le	.LBB52_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w4
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB52_4
.LBB52_3:                               //   in Loop: Header=BB52_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB52_23
.LBB52_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB52_9 Depth 2
                                        //     Child Loop BB52_13 Depth 2
                                        //     Child Loop BB52_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB52_6
// %bb.5:                               //   in Loop: Header=BB52_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB52_15
.LBB52_6:                               //   in Loop: Header=BB52_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB52_8
// %bb.7:                               //   in Loop: Header=BB52_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB52_12
.LBB52_8:                               // %.preheader2
                                        //   in Loop: Header=BB52_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB52_9:                               //   Parent Loop BB52_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	add	v1.8h, v4.8h, v1.8h
	add	v2.8h, v3.8h, v2.8h
	add	v1.8h, v1.8h, v0.8h
	add	v2.8h, v2.8h, v0.8h
	b.ne	.LBB52_9
// %bb.10:                              //   in Loop: Header=BB52_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB52_17
// %bb.11:                              //   in Loop: Header=BB52_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB52_15
.LBB52_12:                              //   in Loop: Header=BB52_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB52_13:                              //   Parent Loop BB52_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4h, v1.4h, v0.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v2.4h, v1.4h
	b.ne	.LBB52_13
// %bb.14:                              //   in Loop: Header=BB52_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB52_17
.LBB52_15:                              // %.preheader
                                        //   in Loop: Header=BB52_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB52_16:                              //   Parent Loop BB52_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	add	w18, w18, w4
	subs	x20, x20, #1
	add	w18, w21, w18
	b.ne	.LBB52_16
.LBB52_17:                              //   in Loop: Header=BB52_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	add	w19, w4, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB52_3
// %bb.18:                              //   in Loop: Header=BB52_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB52_3
.LBB52_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB52_21
.LBB52_20:                              //   in Loop: Header=BB52_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB52_23
.LBB52_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB52_20
// %bb.22:                              //   in Loop: Header=BB52_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB52_20
.LBB52_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB52_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB52_27
.LBB52_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB52_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB52_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB52_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end52:
	.size	_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end52-_Z14test_variable4Is32custom_divide_multiple_variable2IsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB53_23
// %bb.1:
	sxth	w10, w10
	sxth	w9, w9
	sxth	w8, w8
	cmp	w6, #0
	mul	w9, w9, w10
	sdiv	w8, w9, w8
	sub	w4, w4, w8
	b.le	.LBB53_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w4
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB53_4
.LBB53_3:                               //   in Loop: Header=BB53_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB53_23
.LBB53_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB53_9 Depth 2
                                        //     Child Loop BB53_13 Depth 2
                                        //     Child Loop BB53_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB53_6
// %bb.5:                               //   in Loop: Header=BB53_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB53_15
.LBB53_6:                               //   in Loop: Header=BB53_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB53_8
// %bb.7:                               //   in Loop: Header=BB53_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB53_12
.LBB53_8:                               // %.preheader2
                                        //   in Loop: Header=BB53_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB53_9:                               //   Parent Loop BB53_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	add	v3.8h, v0.8h, v3.8h
	add	v4.8h, v0.8h, v4.8h
	add	v1.8h, v3.8h, v1.8h
	add	v2.8h, v4.8h, v2.8h
	b.ne	.LBB53_9
// %bb.10:                              //   in Loop: Header=BB53_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB53_17
// %bb.11:                              //   in Loop: Header=BB53_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB53_15
.LBB53_12:                              //   in Loop: Header=BB53_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB53_13:                              //   Parent Loop BB53_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4h, v0.4h, v1.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB53_13
// %bb.14:                              //   in Loop: Header=BB53_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB53_17
.LBB53_15:                              // %.preheader
                                        //   in Loop: Header=BB53_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB53_16:                              //   Parent Loop BB53_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	add	w18, w4, w18
	subs	x20, x20, #1
	add	w18, w18, w21
	b.ne	.LBB53_16
.LBB53_17:                              //   in Loop: Header=BB53_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	add	w19, w4, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB53_3
// %bb.18:                              //   in Loop: Header=BB53_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB53_3
.LBB53_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB53_21
.LBB53_20:                              //   in Loop: Header=BB53_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB53_23
.LBB53_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB53_20
// %bb.22:                              //   in Loop: Header=BB53_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB53_20
.LBB53_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB53_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB53_27
.LBB53_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB53_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB53_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB53_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end53:
	.size	_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end53-_Z14test_variable4Is30custom_mixed_multiple_variableIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc: // @_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB54_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB54_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w3
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB54_4
.LBB54_3:                               //   in Loop: Header=BB54_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB54_23
.LBB54_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB54_9 Depth 2
                                        //     Child Loop BB54_13 Depth 2
                                        //     Child Loop BB54_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB54_6
// %bb.5:                               //   in Loop: Header=BB54_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB54_15
.LBB54_6:                               //   in Loop: Header=BB54_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB54_8
// %bb.7:                               //   in Loop: Header=BB54_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB54_12
.LBB54_8:                               // %.preheader2
                                        //   in Loop: Header=BB54_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB54_9:                               //   Parent Loop BB54_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	and	v4.16b, v4.16b, v0.16b
	and	v3.16b, v3.16b, v0.16b
	add	v1.8h, v4.8h, v1.8h
	add	v2.8h, v3.8h, v2.8h
	b.ne	.LBB54_9
// %bb.10:                              //   in Loop: Header=BB54_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB54_17
// %bb.11:                              //   in Loop: Header=BB54_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB54_15
.LBB54_12:                              //   in Loop: Header=BB54_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB54_13:                              //   Parent Loop BB54_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	and	v2.8b, v2.8b, v0.8b
	add	v1.4h, v2.4h, v1.4h
	b.ne	.LBB54_13
// %bb.14:                              //   in Loop: Header=BB54_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB54_17
.LBB54_15:                              // %.preheader
                                        //   in Loop: Header=BB54_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB54_16:                              //   Parent Loop BB54_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	subs	x20, x20, #1
	and	w21, w21, w3
	add	w18, w21, w18
	b.ne	.LBB54_16
.LBB54_17:                              //   in Loop: Header=BB54_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	and	w19, w3, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB54_3
// %bb.18:                              //   in Loop: Header=BB54_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB54_3
.LBB54_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB54_21
.LBB54_20:                              //   in Loop: Header=BB54_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB54_23
.LBB54_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	and	w10, w3, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB54_20
// %bb.22:                              //   in Loop: Header=BB54_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB54_20
.LBB54_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB54_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB54_27
.LBB54_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB54_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB54_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB54_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end54:
	.size	_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc, .Lfunc_end54-_Z14test_variable1Is19custom_variable_andIsEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB55_23
// %bb.1:
	and	w4, w11, w9
	and	w8, w12, w10
	cmp	w6, #0
	and	w4, w8, w4
	b.le	.LBB55_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	and	w11, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	and	w10, w10, w12
	and	w10, w10, w11
	mov	w9, w6
	mov	w8, wzr
	and	v0.16b, v0.16b, v1.16b
	and	x13, x9, #0x7ffffffc
	and	x11, x9, #0x7ffffff0
	and	v1.16b, v2.16b, v3.16b
	and	x12, x9, #0xc
	add	x14, x7, #16
	neg	x15, x13
	adrp	x16, init_value
	mov	w17, #8000                      // =0x1f40
	adrp	x18, .L.str.179
	add	x18, x18, :lo12:.L.str.179
	and	v1.16b, v0.16b, v1.16b
	dup	v0.4h, w10
	dup	v1.8h, v1.h[0]
	b	.LBB55_4
.LBB55_3:                               //   in Loop: Header=BB55_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB55_23
.LBB55_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB55_9 Depth 2
                                        //     Child Loop BB55_13 Depth 2
                                        //     Child Loop BB55_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB55_6
// %bb.5:                               //   in Loop: Header=BB55_4 Depth=1
	mov	x21, xzr
	mov	w19, wzr
	b	.LBB55_15
.LBB55_6:                               //   in Loop: Header=BB55_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB55_8
// %bb.7:                               //   in Loop: Header=BB55_4 Depth=1
	mov	x20, xzr
	mov	w19, wzr
	b	.LBB55_12
.LBB55_8:                               // %.preheader2
                                        //   in Loop: Header=BB55_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x19, x14
	mov	x20, x11
.LBB55_9:                               //   Parent Loop BB55_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x19, #-16]
	subs	x20, x20, #16
	add	x19, x19, #32
	and	v4.16b, v4.16b, v1.16b
	and	v5.16b, v5.16b, v1.16b
	add	v2.8h, v4.8h, v2.8h
	add	v3.8h, v5.8h, v3.8h
	b.ne	.LBB55_9
// %bb.10:                              //   in Loop: Header=BB55_4 Depth=1
	add	v2.8h, v3.8h, v2.8h
	cmp	x11, x9
	addv	h2, v2.8h
	fmov	w19, s2
	b.eq	.LBB55_17
// %bb.11:                              //   in Loop: Header=BB55_4 Depth=1
	mov	x21, x11
	mov	x20, x11
	cbz	x12, .LBB55_15
.LBB55_12:                              //   in Loop: Header=BB55_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.h[0], w19
	add	x19, x7, x20, lsl #1
	add	x20, x15, x20
.LBB55_13:                              //   Parent Loop BB55_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x20, x20, #4
	and	v3.8b, v0.8b, v3.8b
	add	v2.4h, v3.4h, v2.4h
	b.ne	.LBB55_13
// %bb.14:                              //   in Loop: Header=BB55_4 Depth=1
	addv	h2, v2.4h
	cmp	x13, x9
	mov	x21, x13
	fmov	w19, s2
	b.eq	.LBB55_17
.LBB55_15:                              // %.preheader
                                        //   in Loop: Header=BB55_4 Depth=1
	add	x20, x7, x21, lsl #1
	sub	x21, x9, x21
.LBB55_16:                              //   Parent Loop BB55_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w22, [x20], #2
	subs	x21, x21, #1
	and	w22, w22, w10
	add	w19, w22, w19
	b.ne	.LBB55_16
.LBB55_17:                              //   in Loop: Header=BB55_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w20, d2
	and	w20, w4, w20
	mul	w20, w20, w17
	and	w20, w20, #0xffc0
	cmp	w20, w19, uxth
	b.eq	.LBB55_3
// %bb.18:                              //   in Loop: Header=BB55_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x18
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB55_3
.LBB55_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB55_21
.LBB55_20:                              //   in Loop: Header=BB55_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB55_23
.LBB55_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	and	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB55_20
// %bb.22:                              //   in Loop: Header=BB55_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB55_20
.LBB55_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB55_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB55_27
.LBB55_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB55_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB55_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB55_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end55:
	.size	_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end55-_Z14test_variable4Is28custom_multiple_variable_andIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc: // @_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB56_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB56_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w3
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB56_4
.LBB56_3:                               //   in Loop: Header=BB56_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB56_23
.LBB56_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB56_9 Depth 2
                                        //     Child Loop BB56_13 Depth 2
                                        //     Child Loop BB56_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB56_6
// %bb.5:                               //   in Loop: Header=BB56_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB56_15
.LBB56_6:                               //   in Loop: Header=BB56_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB56_8
// %bb.7:                               //   in Loop: Header=BB56_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB56_12
.LBB56_8:                               // %.preheader2
                                        //   in Loop: Header=BB56_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB56_9:                               //   Parent Loop BB56_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	orr	v4.16b, v4.16b, v0.16b
	orr	v3.16b, v3.16b, v0.16b
	add	v1.8h, v4.8h, v1.8h
	add	v2.8h, v3.8h, v2.8h
	b.ne	.LBB56_9
// %bb.10:                              //   in Loop: Header=BB56_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB56_17
// %bb.11:                              //   in Loop: Header=BB56_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB56_15
.LBB56_12:                              //   in Loop: Header=BB56_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB56_13:                              //   Parent Loop BB56_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	orr	v2.8b, v2.8b, v0.8b
	add	v1.4h, v2.4h, v1.4h
	b.ne	.LBB56_13
// %bb.14:                              //   in Loop: Header=BB56_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB56_17
.LBB56_15:                              // %.preheader
                                        //   in Loop: Header=BB56_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB56_16:                              //   Parent Loop BB56_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	subs	x20, x20, #1
	orr	w21, w21, w3
	add	w18, w21, w18
	b.ne	.LBB56_16
.LBB56_17:                              //   in Loop: Header=BB56_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	orr	w19, w3, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB56_3
// %bb.18:                              //   in Loop: Header=BB56_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB56_3
.LBB56_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB56_21
.LBB56_20:                              //   in Loop: Header=BB56_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB56_23
.LBB56_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	orr	w10, w3, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB56_20
// %bb.22:                              //   in Loop: Header=BB56_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB56_20
.LBB56_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB56_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB56_27
.LBB56_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB56_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB56_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB56_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end56:
	.size	_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc, .Lfunc_end56-_Z14test_variable1Is18custom_variable_orIsEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB57_23
// %bb.1:
	orr	w4, w11, w9
	orr	w8, w12, w10
	cmp	w6, #0
	orr	w4, w8, w4
	b.le	.LBB57_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	orr	w11, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	orr	w10, w10, w12
	orr	w10, w10, w11
	mov	w9, w6
	mov	w8, wzr
	orr	v0.16b, v0.16b, v1.16b
	and	x13, x9, #0x7ffffffc
	and	x11, x9, #0x7ffffff0
	orr	v1.16b, v2.16b, v3.16b
	and	x12, x9, #0xc
	add	x14, x7, #16
	neg	x15, x13
	adrp	x16, init_value
	mov	w17, #8000                      // =0x1f40
	adrp	x18, .L.str.179
	add	x18, x18, :lo12:.L.str.179
	orr	v1.16b, v0.16b, v1.16b
	dup	v0.4h, w10
	dup	v1.8h, v1.h[0]
	b	.LBB57_4
.LBB57_3:                               //   in Loop: Header=BB57_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB57_23
.LBB57_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB57_9 Depth 2
                                        //     Child Loop BB57_13 Depth 2
                                        //     Child Loop BB57_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB57_6
// %bb.5:                               //   in Loop: Header=BB57_4 Depth=1
	mov	x21, xzr
	mov	w19, wzr
	b	.LBB57_15
.LBB57_6:                               //   in Loop: Header=BB57_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB57_8
// %bb.7:                               //   in Loop: Header=BB57_4 Depth=1
	mov	x20, xzr
	mov	w19, wzr
	b	.LBB57_12
.LBB57_8:                               // %.preheader2
                                        //   in Loop: Header=BB57_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x19, x14
	mov	x20, x11
.LBB57_9:                               //   Parent Loop BB57_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x19, #-16]
	subs	x20, x20, #16
	add	x19, x19, #32
	orr	v4.16b, v4.16b, v1.16b
	orr	v5.16b, v5.16b, v1.16b
	add	v2.8h, v4.8h, v2.8h
	add	v3.8h, v5.8h, v3.8h
	b.ne	.LBB57_9
// %bb.10:                              //   in Loop: Header=BB57_4 Depth=1
	add	v2.8h, v3.8h, v2.8h
	cmp	x11, x9
	addv	h2, v2.8h
	fmov	w19, s2
	b.eq	.LBB57_17
// %bb.11:                              //   in Loop: Header=BB57_4 Depth=1
	mov	x21, x11
	mov	x20, x11
	cbz	x12, .LBB57_15
.LBB57_12:                              //   in Loop: Header=BB57_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.h[0], w19
	add	x19, x7, x20, lsl #1
	add	x20, x15, x20
.LBB57_13:                              //   Parent Loop BB57_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x20, x20, #4
	orr	v3.8b, v0.8b, v3.8b
	add	v2.4h, v3.4h, v2.4h
	b.ne	.LBB57_13
// %bb.14:                              //   in Loop: Header=BB57_4 Depth=1
	addv	h2, v2.4h
	cmp	x13, x9
	mov	x21, x13
	fmov	w19, s2
	b.eq	.LBB57_17
.LBB57_15:                              // %.preheader
                                        //   in Loop: Header=BB57_4 Depth=1
	add	x20, x7, x21, lsl #1
	sub	x21, x9, x21
.LBB57_16:                              //   Parent Loop BB57_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w22, [x20], #2
	subs	x21, x21, #1
	orr	w22, w22, w10
	add	w19, w22, w19
	b.ne	.LBB57_16
.LBB57_17:                              //   in Loop: Header=BB57_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w20, d2
	orr	w20, w4, w20
	mul	w20, w20, w17
	and	w20, w20, #0xffc0
	cmp	w20, w19, uxth
	b.eq	.LBB57_3
// %bb.18:                              //   in Loop: Header=BB57_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x18
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB57_3
.LBB57_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB57_21
.LBB57_20:                              //   in Loop: Header=BB57_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB57_23
.LBB57_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	orr	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB57_20
// %bb.22:                              //   in Loop: Header=BB57_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB57_20
.LBB57_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB57_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB57_27
.LBB57_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB57_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB57_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB57_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end57:
	.size	_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end57-_Z14test_variable4Is27custom_multiple_variable_orIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc,@function
_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc: // @_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB58_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB58_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w3
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB58_4
.LBB58_3:                               //   in Loop: Header=BB58_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB58_23
.LBB58_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB58_9 Depth 2
                                        //     Child Loop BB58_13 Depth 2
                                        //     Child Loop BB58_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB58_6
// %bb.5:                               //   in Loop: Header=BB58_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB58_15
.LBB58_6:                               //   in Loop: Header=BB58_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB58_8
// %bb.7:                               //   in Loop: Header=BB58_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB58_12
.LBB58_8:                               // %.preheader2
                                        //   in Loop: Header=BB58_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB58_9:                               //   Parent Loop BB58_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	eor	v4.16b, v4.16b, v0.16b
	eor	v3.16b, v3.16b, v0.16b
	add	v1.8h, v4.8h, v1.8h
	add	v2.8h, v3.8h, v2.8h
	b.ne	.LBB58_9
// %bb.10:                              //   in Loop: Header=BB58_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB58_17
// %bb.11:                              //   in Loop: Header=BB58_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB58_15
.LBB58_12:                              //   in Loop: Header=BB58_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB58_13:                              //   Parent Loop BB58_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	eor	v2.8b, v2.8b, v0.8b
	add	v1.4h, v2.4h, v1.4h
	b.ne	.LBB58_13
// %bb.14:                              //   in Loop: Header=BB58_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB58_17
.LBB58_15:                              // %.preheader
                                        //   in Loop: Header=BB58_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB58_16:                              //   Parent Loop BB58_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	subs	x20, x20, #1
	eor	w21, w21, w3
	add	w18, w21, w18
	b.ne	.LBB58_16
.LBB58_17:                              //   in Loop: Header=BB58_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	eor	w19, w3, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB58_3
// %bb.18:                              //   in Loop: Header=BB58_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB58_3
.LBB58_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB58_21
.LBB58_20:                              //   in Loop: Header=BB58_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB58_23
.LBB58_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	eor	w10, w3, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB58_20
// %bb.22:                              //   in Loop: Header=BB58_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB58_20
.LBB58_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB58_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB58_27
.LBB58_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB58_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB58_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB58_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end58:
	.size	_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc, .Lfunc_end58-_Z14test_variable1Is19custom_variable_xorIsEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB59_23
// %bb.1:
	eor	w4, w11, w9
	eor	w8, w12, w10
	cmp	w6, #0
	eor	w4, w8, w4
	b.le	.LBB59_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	eor	w11, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	eor	w10, w10, w12
	eor	w10, w10, w11
	mov	w9, w6
	mov	w8, wzr
	eor	v0.16b, v0.16b, v1.16b
	and	x13, x9, #0x7ffffffc
	and	x11, x9, #0x7ffffff0
	eor	v1.16b, v2.16b, v3.16b
	and	x12, x9, #0xc
	add	x14, x7, #16
	neg	x15, x13
	adrp	x16, init_value
	mov	w17, #8000                      // =0x1f40
	adrp	x18, .L.str.179
	add	x18, x18, :lo12:.L.str.179
	eor	v1.16b, v0.16b, v1.16b
	dup	v0.4h, w10
	dup	v1.8h, v1.h[0]
	b	.LBB59_4
.LBB59_3:                               //   in Loop: Header=BB59_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB59_23
.LBB59_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB59_9 Depth 2
                                        //     Child Loop BB59_13 Depth 2
                                        //     Child Loop BB59_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB59_6
// %bb.5:                               //   in Loop: Header=BB59_4 Depth=1
	mov	x21, xzr
	mov	w19, wzr
	b	.LBB59_15
.LBB59_6:                               //   in Loop: Header=BB59_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB59_8
// %bb.7:                               //   in Loop: Header=BB59_4 Depth=1
	mov	x20, xzr
	mov	w19, wzr
	b	.LBB59_12
.LBB59_8:                               // %.preheader2
                                        //   in Loop: Header=BB59_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x19, x14
	mov	x20, x11
.LBB59_9:                               //   Parent Loop BB59_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x19, #-16]
	subs	x20, x20, #16
	add	x19, x19, #32
	eor	v4.16b, v4.16b, v1.16b
	eor	v5.16b, v5.16b, v1.16b
	add	v2.8h, v4.8h, v2.8h
	add	v3.8h, v5.8h, v3.8h
	b.ne	.LBB59_9
// %bb.10:                              //   in Loop: Header=BB59_4 Depth=1
	add	v2.8h, v3.8h, v2.8h
	cmp	x11, x9
	addv	h2, v2.8h
	fmov	w19, s2
	b.eq	.LBB59_17
// %bb.11:                              //   in Loop: Header=BB59_4 Depth=1
	mov	x21, x11
	mov	x20, x11
	cbz	x12, .LBB59_15
.LBB59_12:                              //   in Loop: Header=BB59_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.h[0], w19
	add	x19, x7, x20, lsl #1
	add	x20, x15, x20
.LBB59_13:                              //   Parent Loop BB59_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x20, x20, #4
	eor	v3.8b, v0.8b, v3.8b
	add	v2.4h, v3.4h, v2.4h
	b.ne	.LBB59_13
// %bb.14:                              //   in Loop: Header=BB59_4 Depth=1
	addv	h2, v2.4h
	cmp	x13, x9
	mov	x21, x13
	fmov	w19, s2
	b.eq	.LBB59_17
.LBB59_15:                              // %.preheader
                                        //   in Loop: Header=BB59_4 Depth=1
	add	x20, x7, x21, lsl #1
	sub	x21, x9, x21
.LBB59_16:                              //   Parent Loop BB59_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w22, [x20], #2
	subs	x21, x21, #1
	eor	w22, w22, w10
	add	w19, w22, w19
	b.ne	.LBB59_16
.LBB59_17:                              //   in Loop: Header=BB59_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w20, d2
	eor	w20, w4, w20
	mul	w20, w20, w17
	and	w20, w20, #0xffc0
	cmp	w20, w19, uxth
	b.eq	.LBB59_3
// %bb.18:                              //   in Loop: Header=BB59_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x18
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB59_3
.LBB59_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB59_21
.LBB59_20:                              //   in Loop: Header=BB59_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB59_23
.LBB59_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	eor	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB59_20
// %bb.22:                              //   in Loop: Header=BB59_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB59_20
.LBB59_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB59_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB59_27
.LBB59_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB59_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB59_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB59_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end59:
	.size	_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end59-_Z14test_variable4Is28custom_multiple_variable_xorIsEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc // -- Begin function _Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc,@function
_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc: // @_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB60_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB60_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w3
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB60_4
.LBB60_3:                               //   in Loop: Header=BB60_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB60_23
.LBB60_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB60_9 Depth 2
                                        //     Child Loop BB60_13 Depth 2
                                        //     Child Loop BB60_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB60_6
// %bb.5:                               //   in Loop: Header=BB60_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB60_15
.LBB60_6:                               //   in Loop: Header=BB60_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB60_8
// %bb.7:                               //   in Loop: Header=BB60_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB60_12
.LBB60_8:                               // %.preheader2
                                        //   in Loop: Header=BB60_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB60_9:                               //   Parent Loop BB60_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8h, v1.8h, v0.8h
	add	v2.8h, v2.8h, v0.8h
	subs	x19, x19, #16
	ldp	q4, q3, [x18, #-16]
	add	x18, x18, #32
	add	v1.8h, v1.8h, v4.8h
	add	v2.8h, v2.8h, v3.8h
	b.ne	.LBB60_9
// %bb.10:                              //   in Loop: Header=BB60_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB60_17
// %bb.11:                              //   in Loop: Header=BB60_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB60_15
.LBB60_12:                              //   in Loop: Header=BB60_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB60_13:                              //   Parent Loop BB60_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4h, v1.4h, v0.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB60_13
// %bb.14:                              //   in Loop: Header=BB60_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB60_17
.LBB60_15:                              // %.preheader
                                        //   in Loop: Header=BB60_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB60_16:                              //   Parent Loop BB60_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	add	w18, w18, w3
	subs	x20, x20, #1
	add	w18, w18, w21
	b.ne	.LBB60_16
.LBB60_17:                              //   in Loop: Header=BB60_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	add	w19, w3, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB60_3
// %bb.18:                              //   in Loop: Header=BB60_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB60_3
.LBB60_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB60_21
.LBB60_20:                              //   in Loop: Header=BB60_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB60_23
.LBB60_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w3, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB60_20
// %bb.22:                              //   in Loop: Header=BB60_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB60_20
.LBB60_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB60_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB60_27
.LBB60_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB60_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB60_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB60_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end60:
	.size	_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc, .Lfunc_end60-_Z14test_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc // -- Begin function _Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.p2align	2
	.type	_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc: // @_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w6, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w6, #1
	b.lt	.LBB61_23
// %bb.1:
	mul	w5, w3, w7
	cmp	w7, #0
	b.le	.LBB61_19
// %bb.2:
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #16
	and	x13, x10, #0x7ffffffc
	adrp	x12, init_value
	and	x14, x10, #0x7ffffff0
	and	x15, x10, #0xc
	neg	x16, x13
	mov	w17, #8000                      // =0x1f40
	adrp	x18, .L.str.179
	add	x18, x18, :lo12:.L.str.179
	b	.LBB61_4
.LBB61_3:                               //   in Loop: Header=BB61_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w6
	b.ge	.LBB61_23
.LBB61_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB61_9 Depth 2
                                        //     Child Loop BB61_13 Depth 2
                                        //     Child Loop BB61_16 Depth 2
	cmp	w7, #3
	b.hi	.LBB61_6
// %bb.5:                               //   in Loop: Header=BB61_4 Depth=1
	mov	x21, xzr
	mov	w19, wzr
	b	.LBB61_15
.LBB61_6:                               //   in Loop: Header=BB61_4 Depth=1
	cmp	w7, #16
	b.hs	.LBB61_8
// %bb.7:                               //   in Loop: Header=BB61_4 Depth=1
	mov	x20, xzr
	mov	w19, wzr
	b	.LBB61_12
.LBB61_8:                               // %.preheader2
                                        //   in Loop: Header=BB61_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x19, x11
	mov	x20, x14
.LBB61_9:                               //   Parent Loop BB61_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x19, #-16]
	subs	x20, x20, #16
	add	x19, x19, #32
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB61_9
// %bb.10:                              //   in Loop: Header=BB61_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x14, x10
	addv	h0, v0.8h
	fmov	w19, s0
	b.eq	.LBB61_17
// %bb.11:                              //   in Loop: Header=BB61_4 Depth=1
	mov	x21, x14
	mov	x20, x14
	cbz	x15, .LBB61_15
.LBB61_12:                              //   in Loop: Header=BB61_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w19
	add	x19, x8, x20, lsl #1
	add	x20, x16, x20
.LBB61_13:                              //   Parent Loop BB61_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x19], #8
	adds	x20, x20, #4
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB61_13
// %bb.14:                              //   in Loop: Header=BB61_4 Depth=1
	addv	h0, v0.4h
	cmp	x13, x10
	mov	x21, x13
	fmov	w19, s0
	b.eq	.LBB61_17
.LBB61_15:                              // %.preheader
                                        //   in Loop: Header=BB61_4 Depth=1
	add	x20, x8, x21, lsl #1
	sub	x21, x10, x21
.LBB61_16:                              //   Parent Loop BB61_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w22, [x20], #2
	subs	x21, x21, #1
	add	w19, w22, w19
	b.ne	.LBB61_16
.LBB61_17:                              //   in Loop: Header=BB61_4 Depth=1
	ldr	d0, [x12, :lo12:init_value]
	add	w19, w19, w5
	fcvtzs	w20, d0
	add	w20, w3, w20
	mul	w20, w20, w17
	and	w20, w20, #0xffc0
	cmp	w20, w19, uxth
	b.eq	.LBB61_3
// %bb.18:                              //   in Loop: Header=BB61_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x18
	bl	printf
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB61_3
.LBB61_19:
	adrp	x8, init_value
	mov	w7, wzr
	mov	w9, #8000                       // =0x1f40
	ldr	d0, [x8, :lo12:init_value]
	adrp	x10, .L.str.179
	add	x10, x10, :lo12:.L.str.179
	b	.LBB61_21
.LBB61_20:                              //   in Loop: Header=BB61_21 Depth=1
	add	w7, w7, #1
	cmp	w7, w6
	b.ge	.LBB61_23
.LBB61_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w11, d0
	add	w11, w3, w11
	mul	w11, w11, w9
	and	w11, w11, #0xffc0
	cmp	w11, w5, uxth
	b.eq	.LBB61_20
// %bb.22:                              //   in Loop: Header=BB61_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x10
	bl	printf
	ldr	d0, [x8, :lo12:init_value]
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB61_20
.LBB61_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB61_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB61_27
.LBB61_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB61_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB61_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB61_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end61:
	.size	_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc, .Lfunc_end61-_Z22test_hoisted_variable1It19custom_add_variableItEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB62_23
// %bb.1:
	add	w4, w8, w4
	add	w8, w9, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB62_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w4
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB62_4
.LBB62_3:                               //   in Loop: Header=BB62_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB62_23
.LBB62_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB62_9 Depth 2
                                        //     Child Loop BB62_13 Depth 2
                                        //     Child Loop BB62_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB62_6
// %bb.5:                               //   in Loop: Header=BB62_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB62_15
.LBB62_6:                               //   in Loop: Header=BB62_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB62_8
// %bb.7:                               //   in Loop: Header=BB62_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB62_12
.LBB62_8:                               // %.preheader2
                                        //   in Loop: Header=BB62_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB62_9:                               //   Parent Loop BB62_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8h, v0.8h, v1.8h
	add	v2.8h, v0.8h, v2.8h
	subs	x19, x19, #16
	ldp	q4, q3, [x18, #-16]
	add	x18, x18, #32
	add	v1.8h, v1.8h, v4.8h
	add	v2.8h, v2.8h, v3.8h
	b.ne	.LBB62_9
// %bb.10:                              //   in Loop: Header=BB62_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB62_17
// %bb.11:                              //   in Loop: Header=BB62_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB62_15
.LBB62_12:                              //   in Loop: Header=BB62_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB62_13:                              //   Parent Loop BB62_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4h, v0.4h, v1.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB62_13
// %bb.14:                              //   in Loop: Header=BB62_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB62_17
.LBB62_15:                              // %.preheader
                                        //   in Loop: Header=BB62_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB62_16:                              //   Parent Loop BB62_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	add	w18, w4, w18
	subs	x20, x20, #1
	add	w18, w18, w21
	b.ne	.LBB62_16
.LBB62_17:                              //   in Loop: Header=BB62_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	add	w19, w4, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB62_3
// %bb.18:                              //   in Loop: Header=BB62_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB62_3
.LBB62_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB62_21
.LBB62_20:                              //   in Loop: Header=BB62_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB62_23
.LBB62_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB62_20
// %bb.22:                              //   in Loop: Header=BB62_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB62_20
.LBB62_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB62_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB62_27
.LBB62_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB62_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB62_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB62_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end62:
	.size	_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end62-_Z14test_variable4It28custom_add_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc // -- Begin function _Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc,@function
_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc: // @_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB63_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB63_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w3
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB63_4
.LBB63_3:                               //   in Loop: Header=BB63_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB63_23
.LBB63_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB63_9 Depth 2
                                        //     Child Loop BB63_13 Depth 2
                                        //     Child Loop BB63_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB63_6
// %bb.5:                               //   in Loop: Header=BB63_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB63_15
.LBB63_6:                               //   in Loop: Header=BB63_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB63_8
// %bb.7:                               //   in Loop: Header=BB63_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB63_12
.LBB63_8:                               // %.preheader2
                                        //   in Loop: Header=BB63_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB63_9:                               //   Parent Loop BB63_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.8h, v1.8h, v0.8h
	sub	v2.8h, v2.8h, v0.8h
	subs	x19, x19, #16
	ldp	q4, q3, [x18, #-16]
	add	x18, x18, #32
	add	v1.8h, v1.8h, v4.8h
	add	v2.8h, v2.8h, v3.8h
	b.ne	.LBB63_9
// %bb.10:                              //   in Loop: Header=BB63_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB63_17
// %bb.11:                              //   in Loop: Header=BB63_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB63_15
.LBB63_12:                              //   in Loop: Header=BB63_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB63_13:                              //   Parent Loop BB63_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.4h, v1.4h, v0.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB63_13
// %bb.14:                              //   in Loop: Header=BB63_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB63_17
.LBB63_15:                              // %.preheader
                                        //   in Loop: Header=BB63_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB63_16:                              //   Parent Loop BB63_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	sub	w18, w18, w3
	subs	x20, x20, #1
	add	w18, w18, w21
	b.ne	.LBB63_16
.LBB63_17:                              //   in Loop: Header=BB63_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	sub	w19, w19, w3
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB63_3
// %bb.18:                              //   in Loop: Header=BB63_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB63_3
.LBB63_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB63_21
.LBB63_20:                              //   in Loop: Header=BB63_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB63_23
.LBB63_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	sub	w10, w10, w3
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB63_20
// %bb.22:                              //   in Loop: Header=BB63_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB63_20
.LBB63_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB63_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB63_27
.LBB63_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB63_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB63_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB63_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end63:
	.size	_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc, .Lfunc_end63-_Z14test_variable1It19custom_sub_variableItEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB64_23
// %bb.1:
	add	w4, w8, w4
	add	w8, w9, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB64_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w4
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB64_4
.LBB64_3:                               //   in Loop: Header=BB64_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB64_23
.LBB64_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB64_9 Depth 2
                                        //     Child Loop BB64_13 Depth 2
                                        //     Child Loop BB64_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB64_6
// %bb.5:                               //   in Loop: Header=BB64_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB64_15
.LBB64_6:                               //   in Loop: Header=BB64_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB64_8
// %bb.7:                               //   in Loop: Header=BB64_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB64_12
.LBB64_8:                               // %.preheader2
                                        //   in Loop: Header=BB64_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB64_9:                               //   Parent Loop BB64_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.8h, v1.8h, v0.8h
	sub	v2.8h, v2.8h, v0.8h
	subs	x19, x19, #16
	ldp	q4, q3, [x18, #-16]
	add	x18, x18, #32
	add	v1.8h, v1.8h, v4.8h
	add	v2.8h, v2.8h, v3.8h
	b.ne	.LBB64_9
// %bb.10:                              //   in Loop: Header=BB64_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB64_17
// %bb.11:                              //   in Loop: Header=BB64_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB64_15
.LBB64_12:                              //   in Loop: Header=BB64_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB64_13:                              //   Parent Loop BB64_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.4h, v1.4h, v0.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB64_13
// %bb.14:                              //   in Loop: Header=BB64_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB64_17
.LBB64_15:                              // %.preheader
                                        //   in Loop: Header=BB64_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB64_16:                              //   Parent Loop BB64_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	sub	w18, w18, w4
	subs	x20, x20, #1
	add	w18, w18, w21
	b.ne	.LBB64_16
.LBB64_17:                              //   in Loop: Header=BB64_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	sub	w19, w19, w4
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB64_3
// %bb.18:                              //   in Loop: Header=BB64_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB64_3
.LBB64_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB64_21
.LBB64_20:                              //   in Loop: Header=BB64_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB64_23
.LBB64_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	sub	w10, w10, w4
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB64_20
// %bb.22:                              //   in Loop: Header=BB64_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB64_20
.LBB64_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB64_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB64_27
.LBB64_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB64_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB64_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB64_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end64:
	.size	_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end64-_Z14test_variable4It28custom_sub_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc // -- Begin function _Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc,@function
_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc: // @_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB65_23
// %bb.1:
	mov	w4, #8000                       // =0x1f40
	cmp	w7, #0
	mul	w4, w6, w4
	b.le	.LBB65_19
// %bb.2:
	mov	w10, w7
	fmov	s0, w6
	mov	w9, wzr
	and	x12, x10, #0x7ffffffc
	add	x11, x8, #16
	and	x13, x10, #0x7ffffff0
	and	x14, x10, #0xc
	neg	x15, x12
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB65_4
.LBB65_3:                               //   in Loop: Header=BB65_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w5
	b.ge	.LBB65_23
.LBB65_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB65_9 Depth 2
                                        //     Child Loop BB65_13 Depth 2
                                        //     Child Loop BB65_16 Depth 2
	cmp	w7, #3
	b.hi	.LBB65_6
// %bb.5:                               //   in Loop: Header=BB65_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB65_15
.LBB65_6:                               //   in Loop: Header=BB65_4 Depth=1
	cmp	w7, #16
	b.hs	.LBB65_8
// %bb.7:                               //   in Loop: Header=BB65_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB65_12
.LBB65_8:                               // %.preheader2
                                        //   in Loop: Header=BB65_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x11
	mov	x19, x13
.LBB65_9:                               //   Parent Loop BB65_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	mla	v1.8h, v4.8h, v0.h[0]
	mla	v2.8h, v3.8h, v0.h[0]
	b.ne	.LBB65_9
// %bb.10:                              //   in Loop: Header=BB65_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x10
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB65_17
// %bb.11:                              //   in Loop: Header=BB65_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB65_15
.LBB65_12:                              //   in Loop: Header=BB65_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x8, x19, lsl #1
	add	x19, x15, x19
.LBB65_13:                              //   Parent Loop BB65_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	mla	v1.4h, v2.4h, v0.h[0]
	b.ne	.LBB65_13
// %bb.14:                              //   in Loop: Header=BB65_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x10
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB65_17
.LBB65_15:                              // %.preheader
                                        //   in Loop: Header=BB65_4 Depth=1
	add	x19, x8, x20, lsl #1
	sub	x20, x10, x20
.LBB65_16:                              //   Parent Loop BB65_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	subs	x20, x20, #1
	madd	w18, w21, w6, w18
	b.ne	.LBB65_16
.LBB65_17:                              //   in Loop: Header=BB65_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	and	w18, w18, #0xffff
	fcvtzs	w19, d1
	mul	w19, w4, w19
	cmp	w18, w19, uxth
	b.eq	.LBB65_3
// %bb.18:                              //   in Loop: Header=BB65_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB65_3
.LBB65_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB65_21
.LBB65_20:                              //   in Loop: Header=BB65_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB65_23
.LBB65_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w4, w9
	tst	w9, #0xffff
	b.eq	.LBB65_20
// %bb.22:                              //   in Loop: Header=BB65_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB65_20
.LBB65_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB65_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB65_27
.LBB65_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB65_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB65_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB65_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end65:
	.size	_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc, .Lfunc_end65-_Z14test_variable1It24custom_multiply_variableItEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB66_23
// %bb.1:
	mul	w11, w8, w4
	mov	w8, #8000                       // =0x1f40
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	mul	w4, w4, w8
	b.le	.LBB66_19
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x11, x7, #16
	adrp	x16, init_value
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x13, x10, #0x7ffffffc
	and	x12, x10, #0x7ffffff0
	and	x14, x10, #0xc
	neg	x15, x13
	fmov	s0, w9
	b	.LBB66_4
.LBB66_3:                               //   in Loop: Header=BB66_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB66_23
.LBB66_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB66_9 Depth 2
                                        //     Child Loop BB66_13 Depth 2
                                        //     Child Loop BB66_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB66_6
// %bb.5:                               //   in Loop: Header=BB66_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB66_15
.LBB66_6:                               //   in Loop: Header=BB66_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB66_8
// %bb.7:                               //   in Loop: Header=BB66_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB66_12
.LBB66_8:                               // %.preheader2
                                        //   in Loop: Header=BB66_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x11
	mov	x19, x12
.LBB66_9:                               //   Parent Loop BB66_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	mla	v1.8h, v4.8h, v0.h[0]
	mla	v2.8h, v3.8h, v0.h[0]
	b.ne	.LBB66_9
// %bb.10:                              //   in Loop: Header=BB66_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x12, x10
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB66_17
// %bb.11:                              //   in Loop: Header=BB66_4 Depth=1
	mov	x20, x12
	mov	x19, x12
	cbz	x14, .LBB66_15
.LBB66_12:                              //   in Loop: Header=BB66_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB66_13:                              //   Parent Loop BB66_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	mla	v1.4h, v2.4h, v0.h[0]
	b.ne	.LBB66_13
// %bb.14:                              //   in Loop: Header=BB66_4 Depth=1
	addv	h1, v1.4h
	cmp	x13, x10
	mov	x20, x13
	fmov	w18, s1
	b.eq	.LBB66_17
.LBB66_15:                              // %.preheader
                                        //   in Loop: Header=BB66_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x10, x20
.LBB66_16:                              //   Parent Loop BB66_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	subs	x20, x20, #1
	madd	w18, w9, w21, w18
	b.ne	.LBB66_16
.LBB66_17:                              //   in Loop: Header=BB66_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	and	w18, w18, #0xffff
	fcvtzs	w19, d1
	mul	w19, w4, w19
	cmp	w18, w19, uxth
	b.eq	.LBB66_3
// %bb.18:                              //   in Loop: Header=BB66_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB66_3
.LBB66_19:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB66_21
.LBB66_20:                              //   in Loop: Header=BB66_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB66_23
.LBB66_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w4, w9
	tst	w9, #0xffff
	b.eq	.LBB66_20
// %bb.22:                              //   in Loop: Header=BB66_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB66_20
.LBB66_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB66_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB66_27
.LBB66_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB66_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB66_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB66_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end66:
	.size	_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end66-_Z14test_variable4It33custom_multiply_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB67_23
// %bb.1:
	mul	w11, w8, w4
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	b.le	.LBB67_19
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x14, x7, #16
	adrp	x16, init_value
	mov	w17, #8000                      // =0x1f40
	adrp	x18, .L.str.179
	add	x18, x18, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x13, x10, #0x7ffffffc
	and	x11, x10, #0x7ffffff0
	and	x12, x10, #0xc
	neg	x15, x13
	dup	v0.8h, w9
	b	.LBB67_4
.LBB67_3:                               //   in Loop: Header=BB67_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB67_23
.LBB67_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB67_9 Depth 2
                                        //     Child Loop BB67_13 Depth 2
                                        //     Child Loop BB67_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB67_6
// %bb.5:                               //   in Loop: Header=BB67_4 Depth=1
	mov	x21, xzr
	mov	w19, wzr
	b	.LBB67_15
.LBB67_6:                               //   in Loop: Header=BB67_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB67_8
// %bb.7:                               //   in Loop: Header=BB67_4 Depth=1
	mov	x20, xzr
	mov	w19, wzr
	b	.LBB67_12
.LBB67_8:                               // %.preheader2
                                        //   in Loop: Header=BB67_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x19, x14
	mov	x20, x11
.LBB67_9:                               //   Parent Loop BB67_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.8h, v1.8h, v0.8h
	add	v2.8h, v2.8h, v0.8h
	subs	x20, x20, #16
	ldp	q4, q3, [x19, #-16]
	add	x19, x19, #32
	add	v1.8h, v1.8h, v4.8h
	add	v2.8h, v2.8h, v3.8h
	b.ne	.LBB67_9
// %bb.10:                              //   in Loop: Header=BB67_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x11, x10
	addv	h1, v1.8h
	fmov	w19, s1
	b.eq	.LBB67_17
// %bb.11:                              //   in Loop: Header=BB67_4 Depth=1
	mov	x21, x11
	mov	x20, x11
	cbz	x12, .LBB67_15
.LBB67_12:                              //   in Loop: Header=BB67_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w19
	add	x19, x7, x20, lsl #1
	add	x20, x15, x20
.LBB67_13:                              //   Parent Loop BB67_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4h, v1.4h, v0.4h
	ldr	d2, [x19], #8
	adds	x20, x20, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB67_13
// %bb.14:                              //   in Loop: Header=BB67_4 Depth=1
	addv	h1, v1.4h
	cmp	x13, x10
	mov	x21, x13
	fmov	w19, s1
	b.eq	.LBB67_17
.LBB67_15:                              // %.preheader
                                        //   in Loop: Header=BB67_4 Depth=1
	add	x20, x7, x21, lsl #1
	sub	x21, x10, x21
.LBB67_16:                              //   Parent Loop BB67_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w22, [x20], #2
	add	w19, w19, w9
	subs	x21, x21, #1
	add	w19, w19, w22
	b.ne	.LBB67_16
.LBB67_17:                              //   in Loop: Header=BB67_4 Depth=1
	ldr	d1, [x16, :lo12:init_value]
	fcvtzs	w20, d1
	add	w20, w4, w20
	mul	w20, w20, w17
	and	w20, w20, #0xffc0
	cmp	w20, w19, uxth
	b.eq	.LBB67_3
// %bb.18:                              //   in Loop: Header=BB67_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x18
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB67_3
.LBB67_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB67_21
.LBB67_20:                              //   in Loop: Header=BB67_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB67_23
.LBB67_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB67_20
// %bb.22:                              //   in Loop: Header=BB67_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB67_20
.LBB67_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB67_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB67_27
.LBB67_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB67_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB67_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB67_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end67:
	.size	_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end67-_Z14test_variable4It34custom_multiply_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc // -- Begin function _Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc,@function
_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc: // @_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB68_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB68_13
// %bb.2:
	mov	w9, w6
	mov	w8, wzr
	add	x10, x7, #2
	adrp	x11, init_value
	and	x12, x9, #0x7ffffffe
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB68_4
.LBB68_3:                               //   in Loop: Header=BB68_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB68_17
.LBB68_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB68_7 Depth 2
                                        //     Child Loop BB68_10 Depth 2
	cmp	w6, #1
	b.ne	.LBB68_6
// %bb.5:                               //   in Loop: Header=BB68_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB68_9
.LBB68_6:                               // %.preheader2
                                        //   in Loop: Header=BB68_4 Depth=1
	mov	w15, wzr
	mov	w16, wzr
	mov	x17, x10
	mov	x18, x12
.LBB68_7:                               //   Parent Loop BB68_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldurh	w19, [x17, #-2]
	ldrh	w21, [x17], #4
	and	w20, w3, #0xffff
	subs	x18, x18, #2
	udiv	w19, w19, w20
	udiv	w20, w21, w20
	add	w15, w19, w15
	add	w16, w20, w16
	b.ne	.LBB68_7
// %bb.8:                               //   in Loop: Header=BB68_4 Depth=1
	cmp	x12, x9
	add	w15, w16, w15
	mov	x17, x12
	b.eq	.LBB68_11
.LBB68_9:                               // %.preheader
                                        //   in Loop: Header=BB68_4 Depth=1
	add	x16, x7, x17, lsl #1
	sub	x17, x9, x17
.LBB68_10:                              //   Parent Loop BB68_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w18, [x16], #2
	and	w19, w3, #0xffff
	subs	x17, x17, #1
	udiv	w18, w18, w19
	add	w15, w18, w15
	b.ne	.LBB68_10
.LBB68_11:                              //   in Loop: Header=BB68_4 Depth=1
	ldr	d0, [x11, :lo12:init_value]
	and	w17, w3, #0xffff
	fcvtzs	w16, d0
	udiv	w16, w16, w17
	mul	w16, w16, w13
	and	w16, w16, #0xffc0
	cmp	w16, w15, uxth
	b.eq	.LBB68_3
// %bb.12:                              //   in Loop: Header=BB68_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB68_3
.LBB68_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB68_15
.LBB68_14:                              //   in Loop: Header=BB68_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB68_17
.LBB68_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	and	w11, w3, #0xffff
	udiv	w10, w10, w11
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB68_14
// %bb.16:                              //   in Loop: Header=BB68_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB68_14
.LBB68_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB68_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB68_21
.LBB68_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB68_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB68_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB68_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end68:
	.size	_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc, .Lfunc_end68-_Z14test_variable1It22custom_divide_variableItEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	bl	clock
	adrp	x7, iterations
	adrp	x4, start_time
	adrp	x1, current_test
	ldr	w8, [x7, :lo12:iterations]
	str	x0, [x4, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB69_17
// %bb.1:
	cmp	w9, #0
	b.le	.LBB69_13
// %bb.2:
	mov	w12, w9
	mov	w11, wzr
	add	x13, x10, #2
	adrp	x14, init_value
	and	x15, x12, #0x7ffffffe
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB69_4
.LBB69_3:                               //   in Loop: Header=BB69_4 Depth=1
	add	w11, w11, #1
	cmp	w11, w8
	b.ge	.LBB69_17
.LBB69_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB69_7 Depth 2
                                        //     Child Loop BB69_10 Depth 2
	cmp	w9, #1
	b.ne	.LBB69_6
// %bb.5:                               //   in Loop: Header=BB69_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB69_9
.LBB69_6:                               // %.preheader2
                                        //   in Loop: Header=BB69_4 Depth=1
	mov	w18, wzr
	mov	w19, wzr
	mov	x20, x13
	mov	x21, x15
.LBB69_7:                               //   Parent Loop BB69_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldurh	w22, [x20, #-2]
	ldrh	w24, [x20], #4
	and	w23, w6, #0xffff
	subs	x21, x21, #2
	udiv	w22, w22, w23
	udiv	w23, w24, w23
	and	w24, w5, #0xffff
	udiv	w22, w22, w24
	udiv	w23, w23, w24
	and	w24, w3, #0xffff
	udiv	w22, w22, w24
	udiv	w23, w23, w24
	and	w24, w2, #0xffff
	udiv	w22, w22, w24
	udiv	w23, w23, w24
	add	w18, w22, w18
	add	w19, w23, w19
	b.ne	.LBB69_7
// %bb.8:                               //   in Loop: Header=BB69_4 Depth=1
	cmp	x15, x12
	add	w18, w19, w18
	mov	x20, x15
	b.eq	.LBB69_11
.LBB69_9:                               // %.preheader
                                        //   in Loop: Header=BB69_4 Depth=1
	add	x19, x10, x20, lsl #1
	sub	x20, x12, x20
.LBB69_10:                              //   Parent Loop BB69_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	and	w22, w6, #0xffff
	subs	x20, x20, #1
	udiv	w21, w21, w22
	and	w22, w5, #0xffff
	udiv	w21, w21, w22
	and	w22, w3, #0xffff
	udiv	w21, w21, w22
	and	w22, w2, #0xffff
	udiv	w21, w21, w22
	add	w18, w21, w18
	b.ne	.LBB69_10
.LBB69_11:                              //   in Loop: Header=BB69_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	and	w20, w6, #0xffff
	fcvtzs	w19, d0
	udiv	w19, w19, w20
	and	w20, w5, #0xffff
	udiv	w19, w19, w20
	and	w20, w3, #0xffff
	udiv	w19, w19, w20
	and	w20, w2, #0xffff
	udiv	w19, w19, w20
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB69_3
// %bb.12:                              //   in Loop: Header=BB69_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB69_3
.LBB69_13:
	adrp	x10, init_value
	mov	w9, wzr
	mov	w11, #8000                      // =0x1f40
	ldr	d0, [x10, :lo12:init_value]
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB69_15
.LBB69_14:                              //   in Loop: Header=BB69_15 Depth=1
	add	w9, w9, #1
	cmp	w9, w8
	b.ge	.LBB69_17
.LBB69_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w13, d0
	and	w14, w6, #0xffff
	udiv	w13, w13, w14
	and	w14, w5, #0xffff
	udiv	w13, w13, w14
	and	w14, w3, #0xffff
	udiv	w13, w13, w14
	and	w14, w2, #0xffff
	udiv	w13, w13, w14
	mul	w13, w13, w11
	tst	w13, #0xffc0
	b.eq	.LBB69_14
// %bb.16:                              //   in Loop: Header=BB69_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	d0, [x10, :lo12:init_value]
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB69_14
.LBB69_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x4, [x4, :lo12:start_time]
	ldr	x3, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x2, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x3, .LBB69_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB69_21
.LBB69_19:
	add	w6, w8, #10
	mov	x0, x3
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB69_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x3, x0
.LBB69_21:
	sub	x2, x2, x4
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x3, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB69_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end69:
	.size	_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end69-_Z14test_variable4It31custom_divide_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB70_23
// %bb.1:
	and	w10, w10, #0xffff
	and	w9, w9, #0xffff
	and	w8, w8, #0xffff
	udiv	w9, w9, w10
	and	w4, w4, #0xffff
	cmp	w6, #0
	udiv	w8, w9, w8
	udiv	w4, w8, w4
	b.le	.LBB70_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w4
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB70_4
.LBB70_3:                               //   in Loop: Header=BB70_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB70_23
.LBB70_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB70_9 Depth 2
                                        //     Child Loop BB70_13 Depth 2
                                        //     Child Loop BB70_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB70_6
// %bb.5:                               //   in Loop: Header=BB70_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB70_15
.LBB70_6:                               //   in Loop: Header=BB70_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB70_8
// %bb.7:                               //   in Loop: Header=BB70_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB70_12
.LBB70_8:                               // %.preheader2
                                        //   in Loop: Header=BB70_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB70_9:                               //   Parent Loop BB70_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	add	v1.8h, v4.8h, v1.8h
	add	v2.8h, v3.8h, v2.8h
	add	v1.8h, v1.8h, v0.8h
	add	v2.8h, v2.8h, v0.8h
	b.ne	.LBB70_9
// %bb.10:                              //   in Loop: Header=BB70_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB70_17
// %bb.11:                              //   in Loop: Header=BB70_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB70_15
.LBB70_12:                              //   in Loop: Header=BB70_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB70_13:                              //   Parent Loop BB70_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4h, v1.4h, v0.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v2.4h, v1.4h
	b.ne	.LBB70_13
// %bb.14:                              //   in Loop: Header=BB70_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB70_17
.LBB70_15:                              // %.preheader
                                        //   in Loop: Header=BB70_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB70_16:                              //   Parent Loop BB70_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	add	w18, w18, w4
	subs	x20, x20, #1
	add	w18, w21, w18
	b.ne	.LBB70_16
.LBB70_17:                              //   in Loop: Header=BB70_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	add	w19, w4, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB70_3
// %bb.18:                              //   in Loop: Header=BB70_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB70_3
.LBB70_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB70_21
.LBB70_20:                              //   in Loop: Header=BB70_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB70_23
.LBB70_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB70_20
// %bb.22:                              //   in Loop: Header=BB70_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB70_20
.LBB70_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB70_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB70_27
.LBB70_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB70_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB70_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB70_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end70:
	.size	_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end70-_Z14test_variable4It32custom_divide_multiple_variable2ItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB71_23
// %bb.1:
	and	w10, w10, #0xffff
	and	w9, w9, #0xffff
	and	w8, w8, #0xffff
	mul	w9, w9, w10
	cmp	w6, #0
	udiv	w8, w9, w8
	sub	w4, w4, w8
	b.le	.LBB71_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w4
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB71_4
.LBB71_3:                               //   in Loop: Header=BB71_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB71_23
.LBB71_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB71_9 Depth 2
                                        //     Child Loop BB71_13 Depth 2
                                        //     Child Loop BB71_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB71_6
// %bb.5:                               //   in Loop: Header=BB71_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB71_15
.LBB71_6:                               //   in Loop: Header=BB71_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB71_8
// %bb.7:                               //   in Loop: Header=BB71_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB71_12
.LBB71_8:                               // %.preheader2
                                        //   in Loop: Header=BB71_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB71_9:                               //   Parent Loop BB71_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	add	v3.8h, v0.8h, v3.8h
	add	v4.8h, v0.8h, v4.8h
	add	v1.8h, v3.8h, v1.8h
	add	v2.8h, v4.8h, v2.8h
	b.ne	.LBB71_9
// %bb.10:                              //   in Loop: Header=BB71_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB71_17
// %bb.11:                              //   in Loop: Header=BB71_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB71_15
.LBB71_12:                              //   in Loop: Header=BB71_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB71_13:                              //   Parent Loop BB71_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4h, v0.4h, v1.4h
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	add	v1.4h, v1.4h, v2.4h
	b.ne	.LBB71_13
// %bb.14:                              //   in Loop: Header=BB71_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB71_17
.LBB71_15:                              // %.preheader
                                        //   in Loop: Header=BB71_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB71_16:                              //   Parent Loop BB71_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	add	w18, w4, w18
	subs	x20, x20, #1
	add	w18, w18, w21
	b.ne	.LBB71_16
.LBB71_17:                              //   in Loop: Header=BB71_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	add	w19, w4, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB71_3
// %bb.18:                              //   in Loop: Header=BB71_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB71_3
.LBB71_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB71_21
.LBB71_20:                              //   in Loop: Header=BB71_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB71_23
.LBB71_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB71_20
// %bb.22:                              //   in Loop: Header=BB71_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB71_20
.LBB71_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB71_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB71_27
.LBB71_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB71_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB71_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB71_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end71:
	.size	_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end71-_Z14test_variable4It30custom_mixed_multiple_variableItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc // -- Begin function _Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc,@function
_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc: // @_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB72_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB72_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w3
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB72_4
.LBB72_3:                               //   in Loop: Header=BB72_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB72_23
.LBB72_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB72_9 Depth 2
                                        //     Child Loop BB72_13 Depth 2
                                        //     Child Loop BB72_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB72_6
// %bb.5:                               //   in Loop: Header=BB72_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB72_15
.LBB72_6:                               //   in Loop: Header=BB72_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB72_8
// %bb.7:                               //   in Loop: Header=BB72_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB72_12
.LBB72_8:                               // %.preheader2
                                        //   in Loop: Header=BB72_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB72_9:                               //   Parent Loop BB72_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	and	v4.16b, v4.16b, v0.16b
	and	v3.16b, v3.16b, v0.16b
	add	v1.8h, v4.8h, v1.8h
	add	v2.8h, v3.8h, v2.8h
	b.ne	.LBB72_9
// %bb.10:                              //   in Loop: Header=BB72_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB72_17
// %bb.11:                              //   in Loop: Header=BB72_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB72_15
.LBB72_12:                              //   in Loop: Header=BB72_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB72_13:                              //   Parent Loop BB72_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	and	v2.8b, v2.8b, v0.8b
	add	v1.4h, v2.4h, v1.4h
	b.ne	.LBB72_13
// %bb.14:                              //   in Loop: Header=BB72_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB72_17
.LBB72_15:                              // %.preheader
                                        //   in Loop: Header=BB72_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB72_16:                              //   Parent Loop BB72_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	subs	x20, x20, #1
	and	w21, w21, w3
	add	w18, w21, w18
	b.ne	.LBB72_16
.LBB72_17:                              //   in Loop: Header=BB72_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	and	w19, w3, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB72_3
// %bb.18:                              //   in Loop: Header=BB72_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB72_3
.LBB72_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB72_21
.LBB72_20:                              //   in Loop: Header=BB72_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB72_23
.LBB72_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	and	w10, w3, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB72_20
// %bb.22:                              //   in Loop: Header=BB72_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB72_20
.LBB72_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB72_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB72_27
.LBB72_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB72_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB72_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB72_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end72:
	.size	_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc, .Lfunc_end72-_Z14test_variable1It19custom_variable_andItEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB73_23
// %bb.1:
	and	w4, w11, w9
	and	w8, w12, w10
	cmp	w6, #0
	and	w4, w8, w4
	b.le	.LBB73_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	and	w11, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	and	w10, w10, w12
	and	w10, w10, w11
	mov	w9, w6
	mov	w8, wzr
	and	v0.16b, v0.16b, v1.16b
	and	x13, x9, #0x7ffffffc
	and	x11, x9, #0x7ffffff0
	and	v1.16b, v2.16b, v3.16b
	and	x12, x9, #0xc
	add	x14, x7, #16
	neg	x15, x13
	adrp	x16, init_value
	mov	w17, #8000                      // =0x1f40
	adrp	x18, .L.str.179
	add	x18, x18, :lo12:.L.str.179
	and	v1.16b, v0.16b, v1.16b
	dup	v0.4h, w10
	dup	v1.8h, v1.h[0]
	b	.LBB73_4
.LBB73_3:                               //   in Loop: Header=BB73_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB73_23
.LBB73_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB73_9 Depth 2
                                        //     Child Loop BB73_13 Depth 2
                                        //     Child Loop BB73_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB73_6
// %bb.5:                               //   in Loop: Header=BB73_4 Depth=1
	mov	x21, xzr
	mov	w19, wzr
	b	.LBB73_15
.LBB73_6:                               //   in Loop: Header=BB73_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB73_8
// %bb.7:                               //   in Loop: Header=BB73_4 Depth=1
	mov	x20, xzr
	mov	w19, wzr
	b	.LBB73_12
.LBB73_8:                               // %.preheader2
                                        //   in Loop: Header=BB73_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x19, x14
	mov	x20, x11
.LBB73_9:                               //   Parent Loop BB73_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x19, #-16]
	subs	x20, x20, #16
	add	x19, x19, #32
	and	v4.16b, v4.16b, v1.16b
	and	v5.16b, v5.16b, v1.16b
	add	v2.8h, v4.8h, v2.8h
	add	v3.8h, v5.8h, v3.8h
	b.ne	.LBB73_9
// %bb.10:                              //   in Loop: Header=BB73_4 Depth=1
	add	v2.8h, v3.8h, v2.8h
	cmp	x11, x9
	addv	h2, v2.8h
	fmov	w19, s2
	b.eq	.LBB73_17
// %bb.11:                              //   in Loop: Header=BB73_4 Depth=1
	mov	x21, x11
	mov	x20, x11
	cbz	x12, .LBB73_15
.LBB73_12:                              //   in Loop: Header=BB73_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.h[0], w19
	add	x19, x7, x20, lsl #1
	add	x20, x15, x20
.LBB73_13:                              //   Parent Loop BB73_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x20, x20, #4
	and	v3.8b, v0.8b, v3.8b
	add	v2.4h, v3.4h, v2.4h
	b.ne	.LBB73_13
// %bb.14:                              //   in Loop: Header=BB73_4 Depth=1
	addv	h2, v2.4h
	cmp	x13, x9
	mov	x21, x13
	fmov	w19, s2
	b.eq	.LBB73_17
.LBB73_15:                              // %.preheader
                                        //   in Loop: Header=BB73_4 Depth=1
	add	x20, x7, x21, lsl #1
	sub	x21, x9, x21
.LBB73_16:                              //   Parent Loop BB73_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w22, [x20], #2
	subs	x21, x21, #1
	and	w22, w22, w10
	add	w19, w22, w19
	b.ne	.LBB73_16
.LBB73_17:                              //   in Loop: Header=BB73_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w20, d2
	and	w20, w4, w20
	mul	w20, w20, w17
	and	w20, w20, #0xffc0
	cmp	w20, w19, uxth
	b.eq	.LBB73_3
// %bb.18:                              //   in Loop: Header=BB73_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x18
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB73_3
.LBB73_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB73_21
.LBB73_20:                              //   in Loop: Header=BB73_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB73_23
.LBB73_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	and	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB73_20
// %bb.22:                              //   in Loop: Header=BB73_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB73_20
.LBB73_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB73_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB73_27
.LBB73_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB73_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB73_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB73_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end73:
	.size	_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end73-_Z14test_variable4It28custom_multiple_variable_andItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc // -- Begin function _Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc,@function
_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc: // @_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB74_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB74_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w3
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB74_4
.LBB74_3:                               //   in Loop: Header=BB74_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB74_23
.LBB74_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB74_9 Depth 2
                                        //     Child Loop BB74_13 Depth 2
                                        //     Child Loop BB74_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB74_6
// %bb.5:                               //   in Loop: Header=BB74_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB74_15
.LBB74_6:                               //   in Loop: Header=BB74_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB74_8
// %bb.7:                               //   in Loop: Header=BB74_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB74_12
.LBB74_8:                               // %.preheader2
                                        //   in Loop: Header=BB74_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB74_9:                               //   Parent Loop BB74_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	orr	v4.16b, v4.16b, v0.16b
	orr	v3.16b, v3.16b, v0.16b
	add	v1.8h, v4.8h, v1.8h
	add	v2.8h, v3.8h, v2.8h
	b.ne	.LBB74_9
// %bb.10:                              //   in Loop: Header=BB74_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB74_17
// %bb.11:                              //   in Loop: Header=BB74_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB74_15
.LBB74_12:                              //   in Loop: Header=BB74_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB74_13:                              //   Parent Loop BB74_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	orr	v2.8b, v2.8b, v0.8b
	add	v1.4h, v2.4h, v1.4h
	b.ne	.LBB74_13
// %bb.14:                              //   in Loop: Header=BB74_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB74_17
.LBB74_15:                              // %.preheader
                                        //   in Loop: Header=BB74_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB74_16:                              //   Parent Loop BB74_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	subs	x20, x20, #1
	orr	w21, w21, w3
	add	w18, w21, w18
	b.ne	.LBB74_16
.LBB74_17:                              //   in Loop: Header=BB74_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	orr	w19, w3, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB74_3
// %bb.18:                              //   in Loop: Header=BB74_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB74_3
.LBB74_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB74_21
.LBB74_20:                              //   in Loop: Header=BB74_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB74_23
.LBB74_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	orr	w10, w3, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB74_20
// %bb.22:                              //   in Loop: Header=BB74_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB74_20
.LBB74_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB74_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB74_27
.LBB74_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB74_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB74_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB74_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end74:
	.size	_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc, .Lfunc_end74-_Z14test_variable1It18custom_variable_orItEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB75_23
// %bb.1:
	orr	w4, w11, w9
	orr	w8, w12, w10
	cmp	w6, #0
	orr	w4, w8, w4
	b.le	.LBB75_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	orr	w11, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	orr	w10, w10, w12
	orr	w10, w10, w11
	mov	w9, w6
	mov	w8, wzr
	orr	v0.16b, v0.16b, v1.16b
	and	x13, x9, #0x7ffffffc
	and	x11, x9, #0x7ffffff0
	orr	v1.16b, v2.16b, v3.16b
	and	x12, x9, #0xc
	add	x14, x7, #16
	neg	x15, x13
	adrp	x16, init_value
	mov	w17, #8000                      // =0x1f40
	adrp	x18, .L.str.179
	add	x18, x18, :lo12:.L.str.179
	orr	v1.16b, v0.16b, v1.16b
	dup	v0.4h, w10
	dup	v1.8h, v1.h[0]
	b	.LBB75_4
.LBB75_3:                               //   in Loop: Header=BB75_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB75_23
.LBB75_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB75_9 Depth 2
                                        //     Child Loop BB75_13 Depth 2
                                        //     Child Loop BB75_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB75_6
// %bb.5:                               //   in Loop: Header=BB75_4 Depth=1
	mov	x21, xzr
	mov	w19, wzr
	b	.LBB75_15
.LBB75_6:                               //   in Loop: Header=BB75_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB75_8
// %bb.7:                               //   in Loop: Header=BB75_4 Depth=1
	mov	x20, xzr
	mov	w19, wzr
	b	.LBB75_12
.LBB75_8:                               // %.preheader2
                                        //   in Loop: Header=BB75_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x19, x14
	mov	x20, x11
.LBB75_9:                               //   Parent Loop BB75_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x19, #-16]
	subs	x20, x20, #16
	add	x19, x19, #32
	orr	v4.16b, v4.16b, v1.16b
	orr	v5.16b, v5.16b, v1.16b
	add	v2.8h, v4.8h, v2.8h
	add	v3.8h, v5.8h, v3.8h
	b.ne	.LBB75_9
// %bb.10:                              //   in Loop: Header=BB75_4 Depth=1
	add	v2.8h, v3.8h, v2.8h
	cmp	x11, x9
	addv	h2, v2.8h
	fmov	w19, s2
	b.eq	.LBB75_17
// %bb.11:                              //   in Loop: Header=BB75_4 Depth=1
	mov	x21, x11
	mov	x20, x11
	cbz	x12, .LBB75_15
.LBB75_12:                              //   in Loop: Header=BB75_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.h[0], w19
	add	x19, x7, x20, lsl #1
	add	x20, x15, x20
.LBB75_13:                              //   Parent Loop BB75_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x20, x20, #4
	orr	v3.8b, v0.8b, v3.8b
	add	v2.4h, v3.4h, v2.4h
	b.ne	.LBB75_13
// %bb.14:                              //   in Loop: Header=BB75_4 Depth=1
	addv	h2, v2.4h
	cmp	x13, x9
	mov	x21, x13
	fmov	w19, s2
	b.eq	.LBB75_17
.LBB75_15:                              // %.preheader
                                        //   in Loop: Header=BB75_4 Depth=1
	add	x20, x7, x21, lsl #1
	sub	x21, x9, x21
.LBB75_16:                              //   Parent Loop BB75_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w22, [x20], #2
	subs	x21, x21, #1
	orr	w22, w22, w10
	add	w19, w22, w19
	b.ne	.LBB75_16
.LBB75_17:                              //   in Loop: Header=BB75_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w20, d2
	orr	w20, w4, w20
	mul	w20, w20, w17
	and	w20, w20, #0xffc0
	cmp	w20, w19, uxth
	b.eq	.LBB75_3
// %bb.18:                              //   in Loop: Header=BB75_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x18
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB75_3
.LBB75_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB75_21
.LBB75_20:                              //   in Loop: Header=BB75_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB75_23
.LBB75_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	orr	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB75_20
// %bb.22:                              //   in Loop: Header=BB75_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB75_20
.LBB75_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB75_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB75_27
.LBB75_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB75_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB75_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB75_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end75:
	.size	_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end75-_Z14test_variable4It27custom_multiple_variable_orItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc // -- Begin function _Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc,@function
_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc: // @_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	str	x21, [sp, #16]                  // 8-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB76_23
// %bb.1:
	cmp	w6, #0
	b.le	.LBB76_19
// %bb.2:
	mov	w9, w6
	dup	v0.8h, w3
	mov	w8, wzr
	and	x12, x9, #0x7ffffffc
	add	x10, x7, #16
	adrp	x11, init_value
	and	x13, x9, #0x7ffffff0
	and	x14, x9, #0xc
	neg	x15, x12
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB76_4
.LBB76_3:                               //   in Loop: Header=BB76_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB76_23
.LBB76_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB76_9 Depth 2
                                        //     Child Loop BB76_13 Depth 2
                                        //     Child Loop BB76_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB76_6
// %bb.5:                               //   in Loop: Header=BB76_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB76_15
.LBB76_6:                               //   in Loop: Header=BB76_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB76_8
// %bb.7:                               //   in Loop: Header=BB76_4 Depth=1
	mov	x19, xzr
	mov	w18, wzr
	b	.LBB76_12
.LBB76_8:                               // %.preheader2
                                        //   in Loop: Header=BB76_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x18, x10
	mov	x19, x13
.LBB76_9:                               //   Parent Loop BB76_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x18, #-16]
	subs	x19, x19, #16
	add	x18, x18, #32
	eor	v4.16b, v4.16b, v0.16b
	eor	v3.16b, v3.16b, v0.16b
	add	v1.8h, v4.8h, v1.8h
	add	v2.8h, v3.8h, v2.8h
	b.ne	.LBB76_9
// %bb.10:                              //   in Loop: Header=BB76_4 Depth=1
	add	v1.8h, v2.8h, v1.8h
	cmp	x13, x9
	addv	h1, v1.8h
	fmov	w18, s1
	b.eq	.LBB76_17
// %bb.11:                              //   in Loop: Header=BB76_4 Depth=1
	mov	x20, x13
	mov	x19, x13
	cbz	x14, .LBB76_15
.LBB76_12:                              //   in Loop: Header=BB76_4 Depth=1
	movi	v1.2d, #0000000000000000
	mov	v1.h[0], w18
	add	x18, x7, x19, lsl #1
	add	x19, x15, x19
.LBB76_13:                              //   Parent Loop BB76_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d2, [x18], #8
	adds	x19, x19, #4
	eor	v2.8b, v2.8b, v0.8b
	add	v1.4h, v2.4h, v1.4h
	b.ne	.LBB76_13
// %bb.14:                              //   in Loop: Header=BB76_4 Depth=1
	addv	h1, v1.4h
	cmp	x12, x9
	mov	x20, x12
	fmov	w18, s1
	b.eq	.LBB76_17
.LBB76_15:                              // %.preheader
                                        //   in Loop: Header=BB76_4 Depth=1
	add	x19, x7, x20, lsl #1
	sub	x20, x9, x20
.LBB76_16:                              //   Parent Loop BB76_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w21, [x19], #2
	subs	x20, x20, #1
	eor	w21, w21, w3
	add	w18, w21, w18
	b.ne	.LBB76_16
.LBB76_17:                              //   in Loop: Header=BB76_4 Depth=1
	ldr	d1, [x11, :lo12:init_value]
	fcvtzs	w19, d1
	eor	w19, w3, w19
	mul	w19, w19, w16
	and	w19, w19, #0xffc0
	cmp	w19, w18, uxth
	b.eq	.LBB76_3
// %bb.18:                              //   in Loop: Header=BB76_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB76_3
.LBB76_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB76_21
.LBB76_20:                              //   in Loop: Header=BB76_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB76_23
.LBB76_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	eor	w10, w3, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB76_20
// %bb.22:                              //   in Loop: Header=BB76_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB76_20
.LBB76_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB76_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB76_27
.LBB76_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB76_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB76_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldr	x21, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB76_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end76:
	.size	_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc, .Lfunc_end76-_Z14test_variable1It19custom_variable_xorItEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	x22, x21, [sp, #16]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #32]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB77_23
// %bb.1:
	eor	w4, w11, w9
	eor	w8, w12, w10
	cmp	w6, #0
	eor	w4, w8, w4
	b.le	.LBB77_19
// %bb.2:
	fmov	s0, w11
	fmov	s1, w9
	eor	w11, w9, w11
	fmov	s2, w12
	fmov	s3, w10
	eor	w10, w10, w12
	eor	w10, w10, w11
	mov	w9, w6
	mov	w8, wzr
	eor	v0.16b, v0.16b, v1.16b
	and	x13, x9, #0x7ffffffc
	and	x11, x9, #0x7ffffff0
	eor	v1.16b, v2.16b, v3.16b
	and	x12, x9, #0xc
	add	x14, x7, #16
	neg	x15, x13
	adrp	x16, init_value
	mov	w17, #8000                      // =0x1f40
	adrp	x18, .L.str.179
	add	x18, x18, :lo12:.L.str.179
	eor	v1.16b, v0.16b, v1.16b
	dup	v0.4h, w10
	dup	v1.8h, v1.h[0]
	b	.LBB77_4
.LBB77_3:                               //   in Loop: Header=BB77_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB77_23
.LBB77_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB77_9 Depth 2
                                        //     Child Loop BB77_13 Depth 2
                                        //     Child Loop BB77_16 Depth 2
	cmp	w6, #3
	b.hi	.LBB77_6
// %bb.5:                               //   in Loop: Header=BB77_4 Depth=1
	mov	x21, xzr
	mov	w19, wzr
	b	.LBB77_15
.LBB77_6:                               //   in Loop: Header=BB77_4 Depth=1
	cmp	w6, #16
	b.hs	.LBB77_8
// %bb.7:                               //   in Loop: Header=BB77_4 Depth=1
	mov	x20, xzr
	mov	w19, wzr
	b	.LBB77_12
.LBB77_8:                               // %.preheader2
                                        //   in Loop: Header=BB77_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x19, x14
	mov	x20, x11
.LBB77_9:                               //   Parent Loop BB77_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q5, [x19, #-16]
	subs	x20, x20, #16
	add	x19, x19, #32
	eor	v4.16b, v4.16b, v1.16b
	eor	v5.16b, v5.16b, v1.16b
	add	v2.8h, v4.8h, v2.8h
	add	v3.8h, v5.8h, v3.8h
	b.ne	.LBB77_9
// %bb.10:                              //   in Loop: Header=BB77_4 Depth=1
	add	v2.8h, v3.8h, v2.8h
	cmp	x11, x9
	addv	h2, v2.8h
	fmov	w19, s2
	b.eq	.LBB77_17
// %bb.11:                              //   in Loop: Header=BB77_4 Depth=1
	mov	x21, x11
	mov	x20, x11
	cbz	x12, .LBB77_15
.LBB77_12:                              //   in Loop: Header=BB77_4 Depth=1
	movi	v2.2d, #0000000000000000
	mov	v2.h[0], w19
	add	x19, x7, x20, lsl #1
	add	x20, x15, x20
.LBB77_13:                              //   Parent Loop BB77_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d3, [x19], #8
	adds	x20, x20, #4
	eor	v3.8b, v0.8b, v3.8b
	add	v2.4h, v3.4h, v2.4h
	b.ne	.LBB77_13
// %bb.14:                              //   in Loop: Header=BB77_4 Depth=1
	addv	h2, v2.4h
	cmp	x13, x9
	mov	x21, x13
	fmov	w19, s2
	b.eq	.LBB77_17
.LBB77_15:                              // %.preheader
                                        //   in Loop: Header=BB77_4 Depth=1
	add	x20, x7, x21, lsl #1
	sub	x21, x9, x21
.LBB77_16:                              //   Parent Loop BB77_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w22, [x20], #2
	subs	x21, x21, #1
	eor	w22, w22, w10
	add	w19, w22, w19
	b.ne	.LBB77_16
.LBB77_17:                              //   in Loop: Header=BB77_4 Depth=1
	ldr	d2, [x16, :lo12:init_value]
	fcvtzs	w20, d2
	eor	w20, w4, w20
	mul	w20, w20, w17
	and	w20, w20, #0xffc0
	cmp	w20, w19, uxth
	b.eq	.LBB77_3
// %bb.18:                              //   in Loop: Header=BB77_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x18
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB77_3
.LBB77_19:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB77_21
.LBB77_20:                              //   in Loop: Header=BB77_21 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB77_23
.LBB77_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w10, d0
	eor	w10, w4, w10
	mul	w10, w10, w8
	tst	w10, #0xffc0
	b.eq	.LBB77_20
// %bb.22:                              //   in Loop: Header=BB77_21 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB77_20
.LBB77_23:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB77_25
// %bb.24:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB77_27
.LBB77_25:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB77_28
// %bb.26:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB77_27:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x20, x19, [sp, #32]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB77_28:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end77:
	.size	_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end77-_Z14test_variable4It28custom_multiple_variable_xorItEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc: // @_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB78_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB78_13
// %bb.2:
	dup	v0.4s, w3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB78_4
.LBB78_3:                               //   in Loop: Header=BB78_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB78_17
.LBB78_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB78_7 Depth 2
                                        //     Child Loop BB78_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB78_6
// %bb.5:                               //   in Loop: Header=BB78_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB78_9
.LBB78_6:                               // %.preheader2
                                        //   in Loop: Header=BB78_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB78_7:                               //   Parent Loop BB78_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4s, v1.4s, v0.4s
	add	v2.4s, v2.4s, v0.4s
	subs	x16, x16, #8
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.4s, v1.4s, v4.4s
	add	v2.4s, v2.4s, v3.4s
	b.ne	.LBB78_7
// %bb.8:                               //   in Loop: Header=BB78_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB78_11
.LBB78_9:                               // %.preheader
                                        //   in Loop: Header=BB78_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB78_10:                              //   Parent Loop BB78_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	add	w15, w15, w3
	subs	x17, x17, #1
	add	w15, w15, w18
	b.ne	.LBB78_10
.LBB78_11:                              //   in Loop: Header=BB78_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	w16, d1
	add	w16, w3, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB78_3
// %bb.12:                              //   in Loop: Header=BB78_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB78_3
.LBB78_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB78_15
.LBB78_14:                              //   in Loop: Header=BB78_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB78_17
.LBB78_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmn	w3, w9
	b.eq	.LBB78_14
// %bb.16:                              //   in Loop: Header=BB78_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB78_14
.LBB78_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB78_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB78_21
.LBB78_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB78_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB78_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB78_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end78:
	.size	_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc, .Lfunc_end78-_Z14test_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc // -- Begin function _Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.p2align	2
	.type	_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc: // @_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w6, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w6, #1
	b.lt	.LBB79_17
// %bb.1:
	mul	w5, w3, w7
	cmp	w7, #0
	b.le	.LBB79_13
// %bb.2:
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #16
	adrp	x12, init_value
	and	x13, x10, #0x7ffffff8
	mov	w14, #8000                      // =0x1f40
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	b	.LBB79_4
.LBB79_3:                               //   in Loop: Header=BB79_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w6
	b.ge	.LBB79_17
.LBB79_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB79_7 Depth 2
                                        //     Child Loop BB79_10 Depth 2
	cmp	w7, #8
	b.hs	.LBB79_6
// %bb.5:                               //   in Loop: Header=BB79_4 Depth=1
	mov	x18, xzr
	mov	w16, wzr
	b	.LBB79_9
.LBB79_6:                               // %.preheader2
                                        //   in Loop: Header=BB79_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x16, x11
	mov	x17, x13
.LBB79_7:                               //   Parent Loop BB79_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q2, [x16, #-16]
	subs	x17, x17, #8
	add	x16, x16, #32
	add	v0.4s, v3.4s, v0.4s
	add	v1.4s, v2.4s, v1.4s
	b.ne	.LBB79_7
// %bb.8:                               //   in Loop: Header=BB79_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x13, x10
	mov	x18, x13
	addv	s0, v0.4s
	fmov	w16, s0
	b.eq	.LBB79_11
.LBB79_9:                               // %.preheader
                                        //   in Loop: Header=BB79_4 Depth=1
	add	x17, x8, x18, lsl #2
	sub	x18, x10, x18
.LBB79_10:                              //   Parent Loop BB79_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w19, [x17], #4
	subs	x18, x18, #1
	add	w16, w19, w16
	b.ne	.LBB79_10
.LBB79_11:                              //   in Loop: Header=BB79_4 Depth=1
	ldr	d0, [x12, :lo12:init_value]
	add	w16, w16, w5
	fcvtzs	w17, d0
	add	w17, w3, w17
	mul	w17, w17, w14
	cmp	w16, w17
	b.eq	.LBB79_3
// %bb.12:                              //   in Loop: Header=BB79_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB79_3
.LBB79_13:
	adrp	x8, init_value
	mov	w7, wzr
	mov	w9, #8000                       // =0x1f40
	ldr	d0, [x8, :lo12:init_value]
	adrp	x10, .L.str.179
	add	x10, x10, :lo12:.L.str.179
	b	.LBB79_15
.LBB79_14:                              //   in Loop: Header=BB79_15 Depth=1
	add	w7, w7, #1
	cmp	w7, w6
	b.ge	.LBB79_17
.LBB79_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w11, d0
	add	w11, w3, w11
	mul	w11, w11, w9
	cmp	w5, w11
	b.eq	.LBB79_14
// %bb.16:                              //   in Loop: Header=BB79_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x10
	bl	printf
	ldr	d0, [x8, :lo12:init_value]
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB79_14
.LBB79_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB79_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB79_21
.LBB79_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB79_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB79_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB79_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end79:
	.size	_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc, .Lfunc_end79-_Z22test_hoisted_variable1Ii19custom_add_variableIiEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB80_17
// %bb.1:
	add	w4, w9, w4
	add	w8, w8, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB80_13
// %bb.2:
	dup	v0.4s, w4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB80_4
.LBB80_3:                               //   in Loop: Header=BB80_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB80_17
.LBB80_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB80_7 Depth 2
                                        //     Child Loop BB80_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB80_6
// %bb.5:                               //   in Loop: Header=BB80_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB80_9
.LBB80_6:                               // %.preheader2
                                        //   in Loop: Header=BB80_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB80_7:                               //   Parent Loop BB80_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4s, v0.4s, v1.4s
	add	v2.4s, v0.4s, v2.4s
	subs	x16, x16, #8
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.4s, v1.4s, v4.4s
	add	v2.4s, v2.4s, v3.4s
	b.ne	.LBB80_7
// %bb.8:                               //   in Loop: Header=BB80_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB80_11
.LBB80_9:                               // %.preheader
                                        //   in Loop: Header=BB80_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB80_10:                              //   Parent Loop BB80_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	add	w15, w4, w15
	subs	x17, x17, #1
	add	w15, w15, w18
	b.ne	.LBB80_10
.LBB80_11:                              //   in Loop: Header=BB80_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	w16, d1
	add	w16, w4, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB80_3
// %bb.12:                              //   in Loop: Header=BB80_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB80_3
.LBB80_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB80_15
.LBB80_14:                              //   in Loop: Header=BB80_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB80_17
.LBB80_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmn	w4, w9
	b.eq	.LBB80_14
// %bb.16:                              //   in Loop: Header=BB80_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB80_14
.LBB80_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB80_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB80_21
.LBB80_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB80_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB80_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB80_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end80:
	.size	_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end80-_Z14test_variable4Ii28custom_add_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc: // @_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB81_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB81_13
// %bb.2:
	dup	v0.4s, w3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB81_4
.LBB81_3:                               //   in Loop: Header=BB81_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB81_17
.LBB81_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB81_7 Depth 2
                                        //     Child Loop BB81_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB81_6
// %bb.5:                               //   in Loop: Header=BB81_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB81_9
.LBB81_6:                               // %.preheader2
                                        //   in Loop: Header=BB81_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB81_7:                               //   Parent Loop BB81_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.4s, v1.4s, v0.4s
	sub	v2.4s, v2.4s, v0.4s
	subs	x16, x16, #8
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.4s, v1.4s, v4.4s
	add	v2.4s, v2.4s, v3.4s
	b.ne	.LBB81_7
// %bb.8:                               //   in Loop: Header=BB81_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB81_11
.LBB81_9:                               // %.preheader
                                        //   in Loop: Header=BB81_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB81_10:                              //   Parent Loop BB81_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	sub	w15, w15, w3
	subs	x17, x17, #1
	add	w15, w15, w18
	b.ne	.LBB81_10
.LBB81_11:                              //   in Loop: Header=BB81_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	w16, d1
	sub	w16, w16, w3
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB81_3
// %bb.12:                              //   in Loop: Header=BB81_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB81_3
.LBB81_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB81_15
.LBB81_14:                              //   in Loop: Header=BB81_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB81_17
.LBB81_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmp	w3, w9
	b.eq	.LBB81_14
// %bb.16:                              //   in Loop: Header=BB81_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB81_14
.LBB81_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB81_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB81_21
.LBB81_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB81_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB81_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB81_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end81:
	.size	_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc, .Lfunc_end81-_Z14test_variable1Ii19custom_sub_variableIiEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB82_17
// %bb.1:
	add	w4, w9, w4
	add	w8, w8, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB82_13
// %bb.2:
	dup	v0.4s, w4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB82_4
.LBB82_3:                               //   in Loop: Header=BB82_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB82_17
.LBB82_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB82_7 Depth 2
                                        //     Child Loop BB82_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB82_6
// %bb.5:                               //   in Loop: Header=BB82_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB82_9
.LBB82_6:                               // %.preheader2
                                        //   in Loop: Header=BB82_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB82_7:                               //   Parent Loop BB82_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.4s, v1.4s, v0.4s
	sub	v2.4s, v2.4s, v0.4s
	subs	x16, x16, #8
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.4s, v1.4s, v4.4s
	add	v2.4s, v2.4s, v3.4s
	b.ne	.LBB82_7
// %bb.8:                               //   in Loop: Header=BB82_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB82_11
.LBB82_9:                               // %.preheader
                                        //   in Loop: Header=BB82_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB82_10:                              //   Parent Loop BB82_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	sub	w15, w15, w4
	subs	x17, x17, #1
	add	w15, w15, w18
	b.ne	.LBB82_10
.LBB82_11:                              //   in Loop: Header=BB82_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	w16, d1
	sub	w16, w16, w4
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB82_3
// %bb.12:                              //   in Loop: Header=BB82_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB82_3
.LBB82_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB82_15
.LBB82_14:                              //   in Loop: Header=BB82_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB82_17
.LBB82_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmp	w4, w9
	b.eq	.LBB82_14
// %bb.16:                              //   in Loop: Header=BB82_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB82_14
.LBB82_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB82_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB82_21
.LBB82_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB82_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB82_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB82_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end82:
	.size	_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end82-_Z14test_variable4Ii28custom_sub_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc: // @_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB83_17
// %bb.1:
	mov	w4, #8000                       // =0x1f40
	cmp	w7, #0
	mul	w4, w6, w4
	b.le	.LBB83_13
// %bb.2:
	fmov	s0, w6
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #16
	and	x12, x10, #0x7ffffff8
	adrp	x13, init_value
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB83_4
.LBB83_3:                               //   in Loop: Header=BB83_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w5
	b.ge	.LBB83_17
.LBB83_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB83_7 Depth 2
                                        //     Child Loop BB83_10 Depth 2
	cmp	w7, #8
	b.hs	.LBB83_6
// %bb.5:                               //   in Loop: Header=BB83_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB83_9
.LBB83_6:                               // %.preheader2
                                        //   in Loop: Header=BB83_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x12
.LBB83_7:                               //   Parent Loop BB83_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	mla	v1.4s, v4.4s, v0.s[0]
	mla	v2.4s, v3.4s, v0.s[0]
	b.ne	.LBB83_7
// %bb.8:                               //   in Loop: Header=BB83_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x12, x10
	mov	x17, x12
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB83_11
.LBB83_9:                               // %.preheader
                                        //   in Loop: Header=BB83_4 Depth=1
	add	x16, x8, x17, lsl #2
	sub	x17, x10, x17
.LBB83_10:                              //   Parent Loop BB83_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	madd	w15, w18, w6, w15
	b.ne	.LBB83_10
.LBB83_11:                              //   in Loop: Header=BB83_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzs	w16, d1
	mul	w16, w4, w16
	cmp	w15, w16
	b.eq	.LBB83_3
// %bb.12:                              //   in Loop: Header=BB83_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB83_3
.LBB83_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB83_15
.LBB83_14:                              //   in Loop: Header=BB83_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB83_17
.LBB83_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w4, w9
	cbz	w9, .LBB83_14
// %bb.16:                              //   in Loop: Header=BB83_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB83_14
.LBB83_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB83_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB83_21
.LBB83_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB83_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB83_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB83_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end83:
	.size	_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc, .Lfunc_end83-_Z14test_variable1Ii24custom_multiply_variableIiEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB84_17
// %bb.1:
	mul	w11, w8, w4
	mov	w8, #8000                       // =0x1f40
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	mul	w4, w4, w8
	b.le	.LBB84_13
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x11, x7, #16
	adrp	x13, init_value
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x12, x10, #0x7ffffff8
	fmov	s0, w9
	b	.LBB84_4
.LBB84_3:                               //   in Loop: Header=BB84_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB84_17
.LBB84_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB84_7 Depth 2
                                        //     Child Loop BB84_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB84_6
// %bb.5:                               //   in Loop: Header=BB84_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB84_9
.LBB84_6:                               // %.preheader2
                                        //   in Loop: Header=BB84_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x12
.LBB84_7:                               //   Parent Loop BB84_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	mla	v1.4s, v4.4s, v0.s[0]
	mla	v2.4s, v3.4s, v0.s[0]
	b.ne	.LBB84_7
// %bb.8:                               //   in Loop: Header=BB84_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x12, x10
	mov	x17, x12
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB84_11
.LBB84_9:                               // %.preheader
                                        //   in Loop: Header=BB84_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x10, x17
.LBB84_10:                              //   Parent Loop BB84_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	madd	w15, w9, w18, w15
	b.ne	.LBB84_10
.LBB84_11:                              //   in Loop: Header=BB84_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzs	w16, d1
	mul	w16, w4, w16
	cmp	w15, w16
	b.eq	.LBB84_3
// %bb.12:                              //   in Loop: Header=BB84_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB84_3
.LBB84_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB84_15
.LBB84_14:                              //   in Loop: Header=BB84_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB84_17
.LBB84_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w4, w9
	cbz	w9, .LBB84_14
// %bb.16:                              //   in Loop: Header=BB84_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB84_14
.LBB84_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB84_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB84_21
.LBB84_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB84_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB84_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB84_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end84:
	.size	_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end84-_Z14test_variable4Ii33custom_multiply_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB85_17
// %bb.1:
	mul	w11, w8, w4
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	b.le	.LBB85_13
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x12, x7, #16
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x11, x10, #0x7ffffff8
	dup	v0.4s, w9
	b	.LBB85_4
.LBB85_3:                               //   in Loop: Header=BB85_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB85_17
.LBB85_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB85_7 Depth 2
                                        //     Child Loop BB85_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB85_6
// %bb.5:                               //   in Loop: Header=BB85_4 Depth=1
	mov	x18, xzr
	mov	w16, wzr
	b	.LBB85_9
.LBB85_6:                               // %.preheader2
                                        //   in Loop: Header=BB85_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x11
.LBB85_7:                               //   Parent Loop BB85_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4s, v1.4s, v0.4s
	add	v2.4s, v2.4s, v0.4s
	subs	x17, x17, #8
	ldp	q4, q3, [x16, #-16]
	add	x16, x16, #32
	add	v1.4s, v1.4s, v4.4s
	add	v2.4s, v2.4s, v3.4s
	b.ne	.LBB85_7
// %bb.8:                               //   in Loop: Header=BB85_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x11, x10
	mov	x18, x11
	addv	s1, v1.4s
	fmov	w16, s1
	b.eq	.LBB85_11
.LBB85_9:                               // %.preheader
                                        //   in Loop: Header=BB85_4 Depth=1
	add	x17, x7, x18, lsl #2
	sub	x18, x10, x18
.LBB85_10:                              //   Parent Loop BB85_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w19, [x17], #4
	add	w16, w16, w9
	subs	x18, x18, #1
	add	w16, w16, w19
	b.ne	.LBB85_10
.LBB85_11:                              //   in Loop: Header=BB85_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzs	w17, d1
	add	w17, w4, w17
	mul	w17, w17, w14
	cmp	w16, w17
	b.eq	.LBB85_3
// %bb.12:                              //   in Loop: Header=BB85_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB85_3
.LBB85_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB85_15
.LBB85_14:                              //   in Loop: Header=BB85_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB85_17
.LBB85_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmn	w4, w9
	b.eq	.LBB85_14
// %bb.16:                              //   in Loop: Header=BB85_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB85_14
.LBB85_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB85_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB85_21
.LBB85_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB85_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB85_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB85_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end85:
	.size	_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end85-_Z14test_variable4Ii34custom_multiply_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc: // @_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB86_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB86_13
// %bb.2:
	mov	w9, w6
	mov	w8, wzr
	add	x10, x7, #4
	adrp	x11, init_value
	and	x12, x9, #0x7ffffffe
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB86_4
.LBB86_3:                               //   in Loop: Header=BB86_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB86_17
.LBB86_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB86_7 Depth 2
                                        //     Child Loop BB86_10 Depth 2
	cmp	w6, #1
	b.ne	.LBB86_6
// %bb.5:                               //   in Loop: Header=BB86_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB86_9
.LBB86_6:                               // %.preheader2
                                        //   in Loop: Header=BB86_4 Depth=1
	mov	w15, wzr
	mov	w16, wzr
	mov	x17, x10
	mov	x18, x12
.LBB86_7:                               //   Parent Loop BB86_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w19, w20, [x17, #-4]
	subs	x18, x18, #2
	add	x17, x17, #8
	sdiv	w19, w19, w3
	sdiv	w20, w20, w3
	add	w15, w19, w15
	add	w16, w20, w16
	b.ne	.LBB86_7
// %bb.8:                               //   in Loop: Header=BB86_4 Depth=1
	cmp	x12, x9
	add	w15, w16, w15
	mov	x17, x12
	b.eq	.LBB86_11
.LBB86_9:                               // %.preheader
                                        //   in Loop: Header=BB86_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB86_10:                              //   Parent Loop BB86_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	sdiv	w18, w18, w3
	add	w15, w18, w15
	b.ne	.LBB86_10
.LBB86_11:                              //   in Loop: Header=BB86_4 Depth=1
	ldr	d0, [x11, :lo12:init_value]
	fcvtzs	w16, d0
	sdiv	w16, w16, w3
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB86_3
// %bb.12:                              //   in Loop: Header=BB86_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB86_3
.LBB86_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB86_15
.LBB86_14:                              //   in Loop: Header=BB86_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB86_17
.LBB86_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	sdiv	w9, w9, w3
	cbz	w9, .LBB86_14
// %bb.16:                              //   in Loop: Header=BB86_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB86_14
.LBB86_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB86_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB86_21
.LBB86_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB86_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB86_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB86_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end86:
	.size	_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc, .Lfunc_end86-_Z14test_variable1Ii22custom_divide_variableIiEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	bl	clock
	adrp	x7, iterations
	adrp	x4, start_time
	adrp	x1, current_test
	ldr	w8, [x7, :lo12:iterations]
	str	x0, [x4, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB87_17
// %bb.1:
	cmp	w9, #0
	b.le	.LBB87_13
// %bb.2:
	mov	w12, w9
	mov	w11, wzr
	add	x13, x10, #4
	adrp	x14, init_value
	and	x15, x12, #0x7ffffffe
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB87_4
.LBB87_3:                               //   in Loop: Header=BB87_4 Depth=1
	add	w11, w11, #1
	cmp	w11, w8
	b.ge	.LBB87_17
.LBB87_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB87_7 Depth 2
                                        //     Child Loop BB87_10 Depth 2
	cmp	w9, #1
	b.ne	.LBB87_6
// %bb.5:                               //   in Loop: Header=BB87_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB87_9
.LBB87_6:                               // %.preheader2
                                        //   in Loop: Header=BB87_4 Depth=1
	mov	w18, wzr
	mov	w19, wzr
	mov	x20, x13
	mov	x21, x15
.LBB87_7:                               //   Parent Loop BB87_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	w22, [x20, #-4]
	subs	x21, x21, #2
	sdiv	w23, w22, w6
	ldr	w22, [x20], #8
	sdiv	w22, w22, w6
	sdiv	w23, w23, w5
	sdiv	w22, w22, w5
	sdiv	w24, w23, w3
	sdiv	w23, w22, w3
	sdiv	w22, w24, w2
	sdiv	w23, w23, w2
	add	w18, w22, w18
	add	w19, w23, w19
	b.ne	.LBB87_7
// %bb.8:                               //   in Loop: Header=BB87_4 Depth=1
	cmp	x15, x12
	add	w18, w19, w18
	mov	x20, x15
	b.eq	.LBB87_11
.LBB87_9:                               // %.preheader
                                        //   in Loop: Header=BB87_4 Depth=1
	add	x19, x10, x20, lsl #2
	sub	x20, x12, x20
.LBB87_10:                              //   Parent Loop BB87_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w21, [x19], #4
	subs	x20, x20, #1
	sdiv	w21, w21, w6
	sdiv	w21, w21, w5
	sdiv	w21, w21, w3
	sdiv	w21, w21, w2
	add	w18, w21, w18
	b.ne	.LBB87_10
.LBB87_11:                              //   in Loop: Header=BB87_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	fcvtzs	w19, d0
	sdiv	w19, w19, w6
	sdiv	w19, w19, w5
	sdiv	w19, w19, w3
	sdiv	w19, w19, w2
	mul	w19, w19, w16
	cmp	w18, w19
	b.eq	.LBB87_3
// %bb.12:                              //   in Loop: Header=BB87_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB87_3
.LBB87_13:
	adrp	x10, init_value
	mov	w9, wzr
	adrp	x11, .L.str.179
	add	x11, x11, :lo12:.L.str.179
	ldr	d0, [x10, :lo12:init_value]
	b	.LBB87_15
.LBB87_14:                              //   in Loop: Header=BB87_15 Depth=1
	add	w9, w9, #1
	cmp	w9, w8
	b.ge	.LBB87_17
.LBB87_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w12, d0
	sdiv	w12, w12, w6
	sdiv	w12, w12, w5
	sdiv	w12, w12, w3
	sdiv	w12, w12, w2
	cbz	w12, .LBB87_14
// %bb.16:                              //   in Loop: Header=BB87_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x11
	bl	printf
	ldr	d0, [x10, :lo12:init_value]
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB87_14
.LBB87_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x4, [x4, :lo12:start_time]
	ldr	x3, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x2, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x3, .LBB87_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB87_21
.LBB87_19:
	add	w6, w8, #10
	mov	x0, x3
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB87_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x3, x0
.LBB87_21:
	sub	x2, x2, x4
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x3, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB87_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end87:
	.size	_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end87-_Z14test_variable4Ii31custom_divide_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB88_17
// %bb.1:
	sdiv	w9, w10, w9
	cmp	w6, #0
	sdiv	w8, w9, w8
	sdiv	w4, w8, w4
	b.le	.LBB88_13
// %bb.2:
	dup	v0.4s, w4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB88_4
.LBB88_3:                               //   in Loop: Header=BB88_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB88_17
.LBB88_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB88_7 Depth 2
                                        //     Child Loop BB88_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB88_6
// %bb.5:                               //   in Loop: Header=BB88_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB88_9
.LBB88_6:                               // %.preheader2
                                        //   in Loop: Header=BB88_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB88_7:                               //   Parent Loop BB88_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	add	v1.4s, v3.4s, v1.4s
	add	v2.4s, v4.4s, v2.4s
	add	v1.4s, v1.4s, v0.4s
	add	v2.4s, v2.4s, v0.4s
	b.ne	.LBB88_7
// %bb.8:                               //   in Loop: Header=BB88_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB88_11
.LBB88_9:                               // %.preheader
                                        //   in Loop: Header=BB88_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB88_10:                              //   Parent Loop BB88_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	add	w15, w15, w4
	subs	x17, x17, #1
	add	w15, w18, w15
	b.ne	.LBB88_10
.LBB88_11:                              //   in Loop: Header=BB88_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	w16, d1
	add	w16, w4, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB88_3
// %bb.12:                              //   in Loop: Header=BB88_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB88_3
.LBB88_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB88_15
.LBB88_14:                              //   in Loop: Header=BB88_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB88_17
.LBB88_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmn	w4, w9
	b.eq	.LBB88_14
// %bb.16:                              //   in Loop: Header=BB88_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB88_14
.LBB88_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB88_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB88_21
.LBB88_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB88_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB88_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB88_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end88:
	.size	_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end88-_Z14test_variable4Ii32custom_divide_multiple_variable2IiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB89_17
// %bb.1:
	mul	w9, w9, w10
	cmp	w7, #0
	sdiv	w9, w9, w4
	sub	w4, w6, w9
	b.le	.LBB89_13
// %bb.2:
	dup	v0.4s, w6
	dup	v1.4s, w9
	mov	w11, w7
	mov	w10, wzr
	and	x12, x11, #0x7ffffff8
	add	x13, x8, #16
	adrp	x14, init_value
	mov	w15, #8000                      // =0x1f40
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB89_4
.LBB89_3:                               //   in Loop: Header=BB89_4 Depth=1
	add	w10, w10, #1
	cmp	w10, w5
	b.ge	.LBB89_17
.LBB89_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB89_7 Depth 2
                                        //     Child Loop BB89_10 Depth 2
	cmp	w7, #8
	b.hs	.LBB89_6
// %bb.5:                               //   in Loop: Header=BB89_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB89_9
.LBB89_6:                               // %.preheader2
                                        //   in Loop: Header=BB89_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x17, x13
	mov	x18, x12
.LBB89_7:                               //   Parent Loop BB89_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v2.4s, v2.4s, v0.4s
	add	v3.4s, v3.4s, v0.4s
	subs	x18, x18, #8
	ldp	q5, q4, [x17, #-16]
	add	x17, x17, #32
	add	v2.4s, v2.4s, v5.4s
	add	v3.4s, v3.4s, v4.4s
	sub	v2.4s, v2.4s, v1.4s
	sub	v3.4s, v3.4s, v1.4s
	b.ne	.LBB89_7
// %bb.8:                               //   in Loop: Header=BB89_4 Depth=1
	add	v2.4s, v3.4s, v2.4s
	cmp	x12, x11
	mov	x19, x12
	addv	s2, v2.4s
	fmov	w17, s2
	b.eq	.LBB89_11
.LBB89_9:                               // %.preheader
                                        //   in Loop: Header=BB89_4 Depth=1
	add	x18, x8, x19, lsl #2
	sub	x19, x11, x19
.LBB89_10:                              //   Parent Loop BB89_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w20, [x18], #4
	add	w17, w17, w6
	subs	x19, x19, #1
	add	w17, w17, w20
	sub	w17, w17, w9
	b.ne	.LBB89_10
.LBB89_11:                              //   in Loop: Header=BB89_4 Depth=1
	ldr	d2, [x14, :lo12:init_value]
	fcvtzs	w18, d2
	add	w18, w4, w18
	mul	w18, w18, w15
	cmp	w17, w18
	b.eq	.LBB89_3
// %bb.12:                              //   in Loop: Header=BB89_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB89_3
.LBB89_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB89_15
.LBB89_14:                              //   in Loop: Header=BB89_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB89_17
.LBB89_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmn	w4, w9
	b.eq	.LBB89_14
// %bb.16:                              //   in Loop: Header=BB89_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB89_14
.LBB89_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB89_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB89_21
.LBB89_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB89_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB89_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB89_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end89:
	.size	_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end89-_Z14test_variable4Ii30custom_mixed_multiple_variableIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc: // @_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB90_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB90_13
// %bb.2:
	dup	v0.4s, w3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB90_4
.LBB90_3:                               //   in Loop: Header=BB90_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB90_17
.LBB90_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB90_7 Depth 2
                                        //     Child Loop BB90_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB90_6
// %bb.5:                               //   in Loop: Header=BB90_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB90_9
.LBB90_6:                               // %.preheader2
                                        //   in Loop: Header=BB90_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB90_7:                               //   Parent Loop BB90_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	and	v5.16b, v3.16b, v0.16b
	and	v3.16b, v4.16b, v0.16b
	add	v1.4s, v5.4s, v1.4s
	add	v2.4s, v3.4s, v2.4s
	b.ne	.LBB90_7
// %bb.8:                               //   in Loop: Header=BB90_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB90_11
.LBB90_9:                               // %.preheader
                                        //   in Loop: Header=BB90_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB90_10:                              //   Parent Loop BB90_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	and	w18, w18, w3
	add	w15, w18, w15
	b.ne	.LBB90_10
.LBB90_11:                              //   in Loop: Header=BB90_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	w16, d1
	and	w16, w3, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB90_3
// %bb.12:                              //   in Loop: Header=BB90_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB90_3
.LBB90_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB90_15
.LBB90_14:                              //   in Loop: Header=BB90_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB90_17
.LBB90_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w3, w9
	b.eq	.LBB90_14
// %bb.16:                              //   in Loop: Header=BB90_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB90_14
.LBB90_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB90_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB90_21
.LBB90_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB90_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB90_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB90_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end90:
	.size	_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc, .Lfunc_end90-_Z14test_variable1Ii19custom_variable_andIiEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB91_17
// %bb.1:
	and	w13, w12, w10
	and	w14, w11, w9
	cmp	w6, #0
	and	w4, w14, w13
	b.le	.LBB91_13
// %bb.2:
	fmov	s0, w12
	fmov	s2, w10
	mov	w8, wzr
	fmov	s1, w11
	fmov	s3, w9
	mov	w9, w6
	and	x10, x9, #0x7ffffff8
	and	w11, w13, w14
	add	x12, x7, #16
	and	v0.16b, v0.16b, v2.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	and	v1.16b, v1.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	and	v0.16b, v0.16b, v1.16b
	dup	v0.4s, v0.s[0]
	b	.LBB91_4
.LBB91_3:                               //   in Loop: Header=BB91_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB91_17
.LBB91_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB91_7 Depth 2
                                        //     Child Loop BB91_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB91_6
// %bb.5:                               //   in Loop: Header=BB91_4 Depth=1
	mov	x18, xzr
	mov	w16, wzr
	b	.LBB91_9
.LBB91_6:                               // %.preheader2
                                        //   in Loop: Header=BB91_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB91_7:                               //   Parent Loop BB91_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #8
	add	x16, x16, #32
	and	v3.16b, v3.16b, v0.16b
	and	v4.16b, v4.16b, v0.16b
	add	v1.4s, v3.4s, v1.4s
	add	v2.4s, v4.4s, v2.4s
	b.ne	.LBB91_7
// %bb.8:                               //   in Loop: Header=BB91_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x18, x10
	addv	s1, v1.4s
	fmov	w16, s1
	b.eq	.LBB91_11
.LBB91_9:                               // %.preheader
                                        //   in Loop: Header=BB91_4 Depth=1
	add	x17, x7, x18, lsl #2
	sub	x18, x9, x18
.LBB91_10:                              //   Parent Loop BB91_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w19, [x17], #4
	subs	x18, x18, #1
	and	w19, w19, w11
	add	w16, w19, w16
	b.ne	.LBB91_10
.LBB91_11:                              //   in Loop: Header=BB91_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzs	w17, d1
	and	w17, w4, w17
	mul	w17, w17, w14
	cmp	w16, w17
	b.eq	.LBB91_3
// %bb.12:                              //   in Loop: Header=BB91_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB91_3
.LBB91_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB91_15
.LBB91_14:                              //   in Loop: Header=BB91_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB91_17
.LBB91_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w4, w9
	b.eq	.LBB91_14
// %bb.16:                              //   in Loop: Header=BB91_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB91_14
.LBB91_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB91_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB91_21
.LBB91_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB91_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB91_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB91_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end91:
	.size	_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end91-_Z14test_variable4Ii28custom_multiple_variable_andIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc: // @_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB92_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB92_13
// %bb.2:
	dup	v0.4s, w3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB92_4
.LBB92_3:                               //   in Loop: Header=BB92_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB92_17
.LBB92_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB92_7 Depth 2
                                        //     Child Loop BB92_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB92_6
// %bb.5:                               //   in Loop: Header=BB92_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB92_9
.LBB92_6:                               // %.preheader2
                                        //   in Loop: Header=BB92_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB92_7:                               //   Parent Loop BB92_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	orr	v3.16b, v3.16b, v0.16b
	orr	v4.16b, v4.16b, v0.16b
	add	v1.4s, v3.4s, v1.4s
	add	v2.4s, v4.4s, v2.4s
	b.ne	.LBB92_7
// %bb.8:                               //   in Loop: Header=BB92_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB92_11
.LBB92_9:                               // %.preheader
                                        //   in Loop: Header=BB92_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB92_10:                              //   Parent Loop BB92_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	orr	w18, w18, w3
	add	w15, w18, w15
	b.ne	.LBB92_10
.LBB92_11:                              //   in Loop: Header=BB92_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	w16, d1
	orr	w16, w3, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB92_3
// %bb.12:                              //   in Loop: Header=BB92_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB92_3
.LBB92_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB92_15
.LBB92_14:                              //   in Loop: Header=BB92_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB92_17
.LBB92_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	orr	w9, w3, w9
	cbz	w9, .LBB92_14
// %bb.16:                              //   in Loop: Header=BB92_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB92_14
.LBB92_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB92_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB92_21
.LBB92_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB92_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB92_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB92_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end92:
	.size	_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc, .Lfunc_end92-_Z14test_variable1Ii18custom_variable_orIiEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB93_17
// %bb.1:
	orr	w13, w12, w10
	orr	w14, w11, w9
	cmp	w6, #0
	orr	w4, w14, w13
	b.le	.LBB93_13
// %bb.2:
	fmov	s0, w12
	fmov	s2, w10
	mov	w8, wzr
	fmov	s1, w11
	fmov	s3, w9
	mov	w9, w6
	and	x10, x9, #0x7ffffff8
	orr	w11, w13, w14
	add	x12, x7, #16
	orr	v0.16b, v0.16b, v2.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	orr	v1.16b, v1.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	orr	v0.16b, v0.16b, v1.16b
	dup	v0.4s, v0.s[0]
	b	.LBB93_4
.LBB93_3:                               //   in Loop: Header=BB93_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB93_17
.LBB93_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB93_7 Depth 2
                                        //     Child Loop BB93_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB93_6
// %bb.5:                               //   in Loop: Header=BB93_4 Depth=1
	mov	x18, xzr
	mov	w16, wzr
	b	.LBB93_9
.LBB93_6:                               // %.preheader2
                                        //   in Loop: Header=BB93_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB93_7:                               //   Parent Loop BB93_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #8
	add	x16, x16, #32
	orr	v3.16b, v3.16b, v0.16b
	orr	v4.16b, v4.16b, v0.16b
	add	v1.4s, v3.4s, v1.4s
	add	v2.4s, v4.4s, v2.4s
	b.ne	.LBB93_7
// %bb.8:                               //   in Loop: Header=BB93_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x18, x10
	addv	s1, v1.4s
	fmov	w16, s1
	b.eq	.LBB93_11
.LBB93_9:                               // %.preheader
                                        //   in Loop: Header=BB93_4 Depth=1
	add	x17, x7, x18, lsl #2
	sub	x18, x9, x18
.LBB93_10:                              //   Parent Loop BB93_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w19, [x17], #4
	subs	x18, x18, #1
	orr	w19, w19, w11
	add	w16, w19, w16
	b.ne	.LBB93_10
.LBB93_11:                              //   in Loop: Header=BB93_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzs	w17, d1
	orr	w17, w4, w17
	mul	w17, w17, w14
	cmp	w16, w17
	b.eq	.LBB93_3
// %bb.12:                              //   in Loop: Header=BB93_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB93_3
.LBB93_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB93_15
.LBB93_14:                              //   in Loop: Header=BB93_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB93_17
.LBB93_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	orr	w9, w4, w9
	cbz	w9, .LBB93_14
// %bb.16:                              //   in Loop: Header=BB93_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB93_14
.LBB93_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB93_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB93_21
.LBB93_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB93_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB93_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB93_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end93:
	.size	_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end93-_Z14test_variable4Ii27custom_multiple_variable_orIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc,@function
_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc: // @_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB94_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB94_13
// %bb.2:
	dup	v0.4s, w3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB94_4
.LBB94_3:                               //   in Loop: Header=BB94_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB94_17
.LBB94_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB94_7 Depth 2
                                        //     Child Loop BB94_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB94_6
// %bb.5:                               //   in Loop: Header=BB94_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB94_9
.LBB94_6:                               // %.preheader2
                                        //   in Loop: Header=BB94_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB94_7:                               //   Parent Loop BB94_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	eor	v5.16b, v3.16b, v0.16b
	eor	v3.16b, v4.16b, v0.16b
	add	v1.4s, v5.4s, v1.4s
	add	v2.4s, v3.4s, v2.4s
	b.ne	.LBB94_7
// %bb.8:                               //   in Loop: Header=BB94_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB94_11
.LBB94_9:                               // %.preheader
                                        //   in Loop: Header=BB94_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB94_10:                              //   Parent Loop BB94_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	eor	w18, w18, w3
	add	w15, w18, w15
	b.ne	.LBB94_10
.LBB94_11:                              //   in Loop: Header=BB94_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	w16, d1
	eor	w16, w3, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB94_3
// %bb.12:                              //   in Loop: Header=BB94_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB94_3
.LBB94_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB94_15
.LBB94_14:                              //   in Loop: Header=BB94_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB94_17
.LBB94_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmp	w3, w9
	b.eq	.LBB94_14
// %bb.16:                              //   in Loop: Header=BB94_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB94_14
.LBB94_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB94_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB94_21
.LBB94_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB94_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB94_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB94_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end94:
	.size	_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc, .Lfunc_end94-_Z14test_variable1Ii19custom_variable_xorIiEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB95_17
// %bb.1:
	eor	w13, w12, w10
	eor	w14, w11, w9
	cmp	w6, #0
	eor	w4, w14, w13
	b.le	.LBB95_13
// %bb.2:
	fmov	s0, w12
	fmov	s2, w10
	mov	w8, wzr
	fmov	s1, w11
	fmov	s3, w9
	mov	w9, w6
	and	x10, x9, #0x7ffffff8
	eor	w11, w13, w14
	add	x12, x7, #16
	eor	v0.16b, v0.16b, v2.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	eor	v1.16b, v1.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	eor	v0.16b, v0.16b, v1.16b
	dup	v0.4s, v0.s[0]
	b	.LBB95_4
.LBB95_3:                               //   in Loop: Header=BB95_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB95_17
.LBB95_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB95_7 Depth 2
                                        //     Child Loop BB95_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB95_6
// %bb.5:                               //   in Loop: Header=BB95_4 Depth=1
	mov	x18, xzr
	mov	w16, wzr
	b	.LBB95_9
.LBB95_6:                               // %.preheader2
                                        //   in Loop: Header=BB95_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB95_7:                               //   Parent Loop BB95_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #8
	add	x16, x16, #32
	eor	v3.16b, v3.16b, v0.16b
	eor	v4.16b, v4.16b, v0.16b
	add	v1.4s, v3.4s, v1.4s
	add	v2.4s, v4.4s, v2.4s
	b.ne	.LBB95_7
// %bb.8:                               //   in Loop: Header=BB95_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x18, x10
	addv	s1, v1.4s
	fmov	w16, s1
	b.eq	.LBB95_11
.LBB95_9:                               // %.preheader
                                        //   in Loop: Header=BB95_4 Depth=1
	add	x17, x7, x18, lsl #2
	sub	x18, x9, x18
.LBB95_10:                              //   Parent Loop BB95_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w19, [x17], #4
	subs	x18, x18, #1
	eor	w19, w19, w11
	add	w16, w19, w16
	b.ne	.LBB95_10
.LBB95_11:                              //   in Loop: Header=BB95_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzs	w17, d1
	eor	w17, w4, w17
	mul	w17, w17, w14
	cmp	w16, w17
	b.eq	.LBB95_3
// %bb.12:                              //   in Loop: Header=BB95_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB95_3
.LBB95_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB95_15
.LBB95_14:                              //   in Loop: Header=BB95_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB95_17
.LBB95_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmp	w4, w9
	b.eq	.LBB95_14
// %bb.16:                              //   in Loop: Header=BB95_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB95_14
.LBB95_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB95_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB95_21
.LBB95_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB95_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB95_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB95_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end95:
	.size	_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end95-_Z14test_variable4Ii28custom_multiple_variable_xorIiEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc: // @_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB96_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB96_13
// %bb.2:
	dup	v0.4s, w3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB96_4
.LBB96_3:                               //   in Loop: Header=BB96_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB96_17
.LBB96_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB96_7 Depth 2
                                        //     Child Loop BB96_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB96_6
// %bb.5:                               //   in Loop: Header=BB96_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB96_9
.LBB96_6:                               // %.preheader2
                                        //   in Loop: Header=BB96_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB96_7:                               //   Parent Loop BB96_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4s, v1.4s, v0.4s
	add	v2.4s, v2.4s, v0.4s
	subs	x16, x16, #8
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.4s, v1.4s, v4.4s
	add	v2.4s, v2.4s, v3.4s
	b.ne	.LBB96_7
// %bb.8:                               //   in Loop: Header=BB96_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB96_11
.LBB96_9:                               // %.preheader
                                        //   in Loop: Header=BB96_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB96_10:                              //   Parent Loop BB96_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	add	w15, w15, w3
	subs	x17, x17, #1
	add	w15, w15, w18
	b.ne	.LBB96_10
.LBB96_11:                              //   in Loop: Header=BB96_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	w16, d1
	add	w16, w3, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB96_3
// %bb.12:                              //   in Loop: Header=BB96_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB96_3
.LBB96_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB96_15
.LBB96_14:                              //   in Loop: Header=BB96_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB96_17
.LBB96_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	add	w10, w3, w10
	mul	w10, w10, w8
	cbz	w10, .LBB96_14
// %bb.16:                              //   in Loop: Header=BB96_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB96_14
.LBB96_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB96_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB96_21
.LBB96_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB96_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB96_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB96_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end96:
	.size	_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc, .Lfunc_end96-_Z14test_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc // -- Begin function _Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.p2align	2
	.type	_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc: // @_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w6, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w6, #1
	b.lt	.LBB97_17
// %bb.1:
	mul	w5, w3, w7
	cmp	w7, #0
	b.le	.LBB97_13
// %bb.2:
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #16
	adrp	x12, init_value
	and	x13, x10, #0x7ffffff8
	mov	w14, #8000                      // =0x1f40
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	b	.LBB97_4
.LBB97_3:                               //   in Loop: Header=BB97_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w6
	b.ge	.LBB97_17
.LBB97_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB97_7 Depth 2
                                        //     Child Loop BB97_10 Depth 2
	cmp	w7, #8
	b.hs	.LBB97_6
// %bb.5:                               //   in Loop: Header=BB97_4 Depth=1
	mov	x18, xzr
	mov	w16, wzr
	b	.LBB97_9
.LBB97_6:                               // %.preheader2
                                        //   in Loop: Header=BB97_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x16, x11
	mov	x17, x13
.LBB97_7:                               //   Parent Loop BB97_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q2, [x16, #-16]
	subs	x17, x17, #8
	add	x16, x16, #32
	add	v0.4s, v3.4s, v0.4s
	add	v1.4s, v2.4s, v1.4s
	b.ne	.LBB97_7
// %bb.8:                               //   in Loop: Header=BB97_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x13, x10
	mov	x18, x13
	addv	s0, v0.4s
	fmov	w16, s0
	b.eq	.LBB97_11
.LBB97_9:                               // %.preheader
                                        //   in Loop: Header=BB97_4 Depth=1
	add	x17, x8, x18, lsl #2
	sub	x18, x10, x18
.LBB97_10:                              //   Parent Loop BB97_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w19, [x17], #4
	subs	x18, x18, #1
	add	w16, w19, w16
	b.ne	.LBB97_10
.LBB97_11:                              //   in Loop: Header=BB97_4 Depth=1
	ldr	d0, [x12, :lo12:init_value]
	add	w16, w16, w5
	fcvtzu	w17, d0
	add	w17, w3, w17
	mul	w17, w17, w14
	cmp	w16, w17
	b.eq	.LBB97_3
// %bb.12:                              //   in Loop: Header=BB97_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB97_3
.LBB97_13:
	adrp	x8, init_value
	mov	w7, wzr
	mov	w9, #8000                       // =0x1f40
	ldr	d0, [x8, :lo12:init_value]
	adrp	x10, .L.str.179
	add	x10, x10, :lo12:.L.str.179
	b	.LBB97_15
.LBB97_14:                              //   in Loop: Header=BB97_15 Depth=1
	add	w7, w7, #1
	cmp	w7, w6
	b.ge	.LBB97_17
.LBB97_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzu	w11, d0
	add	w11, w3, w11
	mul	w11, w11, w9
	cmp	w5, w11
	b.eq	.LBB97_14
// %bb.16:                              //   in Loop: Header=BB97_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x10
	bl	printf
	ldr	d0, [x8, :lo12:init_value]
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB97_14
.LBB97_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB97_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB97_21
.LBB97_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB97_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB97_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB97_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end97:
	.size	_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc, .Lfunc_end97-_Z22test_hoisted_variable1Ij19custom_add_variableIjEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB98_17
// %bb.1:
	add	w4, w9, w4
	add	w8, w8, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB98_13
// %bb.2:
	dup	v0.4s, w4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB98_4
.LBB98_3:                               //   in Loop: Header=BB98_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB98_17
.LBB98_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB98_7 Depth 2
                                        //     Child Loop BB98_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB98_6
// %bb.5:                               //   in Loop: Header=BB98_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB98_9
.LBB98_6:                               // %.preheader2
                                        //   in Loop: Header=BB98_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB98_7:                               //   Parent Loop BB98_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4s, v0.4s, v1.4s
	add	v2.4s, v0.4s, v2.4s
	subs	x16, x16, #8
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.4s, v1.4s, v4.4s
	add	v2.4s, v2.4s, v3.4s
	b.ne	.LBB98_7
// %bb.8:                               //   in Loop: Header=BB98_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB98_11
.LBB98_9:                               // %.preheader
                                        //   in Loop: Header=BB98_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB98_10:                              //   Parent Loop BB98_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	add	w15, w4, w15
	subs	x17, x17, #1
	add	w15, w15, w18
	b.ne	.LBB98_10
.LBB98_11:                              //   in Loop: Header=BB98_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	w16, d1
	add	w16, w4, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB98_3
// %bb.12:                              //   in Loop: Header=BB98_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB98_3
.LBB98_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB98_15
.LBB98_14:                              //   in Loop: Header=BB98_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB98_17
.LBB98_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	cbz	w10, .LBB98_14
// %bb.16:                              //   in Loop: Header=BB98_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB98_14
.LBB98_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB98_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB98_21
.LBB98_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB98_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB98_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB98_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end98:
	.size	_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end98-_Z14test_variable4Ij28custom_add_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc: // @_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB99_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB99_13
// %bb.2:
	dup	v0.4s, w3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB99_4
.LBB99_3:                               //   in Loop: Header=BB99_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB99_17
.LBB99_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB99_7 Depth 2
                                        //     Child Loop BB99_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB99_6
// %bb.5:                               //   in Loop: Header=BB99_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB99_9
.LBB99_6:                               // %.preheader2
                                        //   in Loop: Header=BB99_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB99_7:                               //   Parent Loop BB99_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.4s, v1.4s, v0.4s
	sub	v2.4s, v2.4s, v0.4s
	subs	x16, x16, #8
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.4s, v1.4s, v4.4s
	add	v2.4s, v2.4s, v3.4s
	b.ne	.LBB99_7
// %bb.8:                               //   in Loop: Header=BB99_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB99_11
.LBB99_9:                               // %.preheader
                                        //   in Loop: Header=BB99_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB99_10:                              //   Parent Loop BB99_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	sub	w15, w15, w3
	subs	x17, x17, #1
	add	w15, w15, w18
	b.ne	.LBB99_10
.LBB99_11:                              //   in Loop: Header=BB99_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	w16, d1
	sub	w16, w16, w3
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB99_3
// %bb.12:                              //   in Loop: Header=BB99_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB99_3
.LBB99_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB99_15
.LBB99_14:                              //   in Loop: Header=BB99_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB99_17
.LBB99_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	sub	w10, w10, w3
	mul	w10, w10, w8
	cbz	w10, .LBB99_14
// %bb.16:                              //   in Loop: Header=BB99_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB99_14
.LBB99_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB99_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB99_21
.LBB99_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB99_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB99_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB99_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end99:
	.size	_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc, .Lfunc_end99-_Z14test_variable1Ij19custom_sub_variableIjEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB100_17
// %bb.1:
	add	w4, w9, w4
	add	w8, w8, w10
	cmp	w6, #0
	add	w4, w8, w4
	b.le	.LBB100_13
// %bb.2:
	dup	v0.4s, w4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB100_4
.LBB100_3:                              //   in Loop: Header=BB100_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB100_17
.LBB100_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB100_7 Depth 2
                                        //     Child Loop BB100_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB100_6
// %bb.5:                               //   in Loop: Header=BB100_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB100_9
.LBB100_6:                              // %.preheader2
                                        //   in Loop: Header=BB100_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB100_7:                              //   Parent Loop BB100_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.4s, v1.4s, v0.4s
	sub	v2.4s, v2.4s, v0.4s
	subs	x16, x16, #8
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.4s, v1.4s, v4.4s
	add	v2.4s, v2.4s, v3.4s
	b.ne	.LBB100_7
// %bb.8:                               //   in Loop: Header=BB100_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB100_11
.LBB100_9:                              // %.preheader
                                        //   in Loop: Header=BB100_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB100_10:                             //   Parent Loop BB100_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	sub	w15, w15, w4
	subs	x17, x17, #1
	add	w15, w15, w18
	b.ne	.LBB100_10
.LBB100_11:                             //   in Loop: Header=BB100_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	w16, d1
	sub	w16, w16, w4
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB100_3
// %bb.12:                              //   in Loop: Header=BB100_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB100_3
.LBB100_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB100_15
.LBB100_14:                             //   in Loop: Header=BB100_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB100_17
.LBB100_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	sub	w10, w10, w4
	mul	w10, w10, w8
	cbz	w10, .LBB100_14
// %bb.16:                              //   in Loop: Header=BB100_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB100_14
.LBB100_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB100_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB100_21
.LBB100_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB100_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB100_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB100_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end100:
	.size	_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end100-_Z14test_variable4Ij28custom_sub_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc: // @_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB101_17
// %bb.1:
	mov	w4, #8000                       // =0x1f40
	cmp	w7, #0
	mul	w4, w6, w4
	b.le	.LBB101_13
// %bb.2:
	fmov	s0, w6
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #16
	and	x12, x10, #0x7ffffff8
	adrp	x13, init_value
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB101_4
.LBB101_3:                              //   in Loop: Header=BB101_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w5
	b.ge	.LBB101_17
.LBB101_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB101_7 Depth 2
                                        //     Child Loop BB101_10 Depth 2
	cmp	w7, #8
	b.hs	.LBB101_6
// %bb.5:                               //   in Loop: Header=BB101_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB101_9
.LBB101_6:                              // %.preheader2
                                        //   in Loop: Header=BB101_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x12
.LBB101_7:                              //   Parent Loop BB101_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	mla	v1.4s, v4.4s, v0.s[0]
	mla	v2.4s, v3.4s, v0.s[0]
	b.ne	.LBB101_7
// %bb.8:                               //   in Loop: Header=BB101_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x12, x10
	mov	x17, x12
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB101_11
.LBB101_9:                              // %.preheader
                                        //   in Loop: Header=BB101_4 Depth=1
	add	x16, x8, x17, lsl #2
	sub	x17, x10, x17
.LBB101_10:                             //   Parent Loop BB101_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	madd	w15, w18, w6, w15
	b.ne	.LBB101_10
.LBB101_11:                             //   in Loop: Header=BB101_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzu	w16, d1
	mul	w16, w4, w16
	cmp	w15, w16
	b.eq	.LBB101_3
// %bb.12:                              //   in Loop: Header=BB101_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB101_3
.LBB101_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB101_15
.LBB101_14:                             //   in Loop: Header=BB101_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB101_17
.LBB101_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	mul	w9, w4, w9
	cbz	w9, .LBB101_14
// %bb.16:                              //   in Loop: Header=BB101_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB101_14
.LBB101_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB101_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB101_21
.LBB101_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB101_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB101_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB101_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end101:
	.size	_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc, .Lfunc_end101-_Z14test_variable1Ij24custom_multiply_variableIjEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB102_17
// %bb.1:
	mul	w11, w8, w4
	mov	w8, #8000                       // =0x1f40
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	mul	w4, w4, w8
	b.le	.LBB102_13
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x11, x7, #16
	adrp	x13, init_value
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x12, x10, #0x7ffffff8
	fmov	s0, w9
	b	.LBB102_4
.LBB102_3:                              //   in Loop: Header=BB102_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB102_17
.LBB102_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB102_7 Depth 2
                                        //     Child Loop BB102_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB102_6
// %bb.5:                               //   in Loop: Header=BB102_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB102_9
.LBB102_6:                              // %.preheader2
                                        //   in Loop: Header=BB102_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x12
.LBB102_7:                              //   Parent Loop BB102_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q4, q3, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	mla	v1.4s, v4.4s, v0.s[0]
	mla	v2.4s, v3.4s, v0.s[0]
	b.ne	.LBB102_7
// %bb.8:                               //   in Loop: Header=BB102_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x12, x10
	mov	x17, x12
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB102_11
.LBB102_9:                              // %.preheader
                                        //   in Loop: Header=BB102_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x10, x17
.LBB102_10:                             //   Parent Loop BB102_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	madd	w15, w9, w18, w15
	b.ne	.LBB102_10
.LBB102_11:                             //   in Loop: Header=BB102_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzu	w16, d1
	mul	w16, w4, w16
	cmp	w15, w16
	b.eq	.LBB102_3
// %bb.12:                              //   in Loop: Header=BB102_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB102_3
.LBB102_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB102_15
.LBB102_14:                             //   in Loop: Header=BB102_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB102_17
.LBB102_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	mul	w9, w4, w9
	cbz	w9, .LBB102_14
// %bb.16:                              //   in Loop: Header=BB102_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB102_14
.LBB102_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB102_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB102_21
.LBB102_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB102_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB102_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB102_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end102:
	.size	_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end102-_Z14test_variable4Ij33custom_multiply_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB103_17
// %bb.1:
	mul	w11, w8, w4
	cmp	w6, #0
	mul	w4, w11, w9
	mul	w4, w4, w10
	b.le	.LBB103_13
// %bb.2:
	mul	w10, w11, w10
	mov	w8, wzr
	add	x12, x7, #16
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	mul	w9, w10, w9
	mov	w10, w6
	and	x11, x10, #0x7ffffff8
	dup	v0.4s, w9
	b	.LBB103_4
.LBB103_3:                              //   in Loop: Header=BB103_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB103_17
.LBB103_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB103_7 Depth 2
                                        //     Child Loop BB103_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB103_6
// %bb.5:                               //   in Loop: Header=BB103_4 Depth=1
	mov	x18, xzr
	mov	w16, wzr
	b	.LBB103_9
.LBB103_6:                              // %.preheader2
                                        //   in Loop: Header=BB103_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x11
.LBB103_7:                              //   Parent Loop BB103_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.4s, v1.4s, v0.4s
	add	v2.4s, v2.4s, v0.4s
	subs	x17, x17, #8
	ldp	q4, q3, [x16, #-16]
	add	x16, x16, #32
	add	v1.4s, v1.4s, v4.4s
	add	v2.4s, v2.4s, v3.4s
	b.ne	.LBB103_7
// %bb.8:                               //   in Loop: Header=BB103_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x11, x10
	mov	x18, x11
	addv	s1, v1.4s
	fmov	w16, s1
	b.eq	.LBB103_11
.LBB103_9:                              // %.preheader
                                        //   in Loop: Header=BB103_4 Depth=1
	add	x17, x7, x18, lsl #2
	sub	x18, x10, x18
.LBB103_10:                             //   Parent Loop BB103_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w19, [x17], #4
	add	w16, w16, w9
	subs	x18, x18, #1
	add	w16, w16, w19
	b.ne	.LBB103_10
.LBB103_11:                             //   in Loop: Header=BB103_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzu	w17, d1
	add	w17, w4, w17
	mul	w17, w17, w14
	cmp	w16, w17
	b.eq	.LBB103_3
// %bb.12:                              //   in Loop: Header=BB103_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB103_3
.LBB103_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB103_15
.LBB103_14:                             //   in Loop: Header=BB103_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB103_17
.LBB103_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	cbz	w10, .LBB103_14
// %bb.16:                              //   in Loop: Header=BB103_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB103_14
.LBB103_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB103_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB103_21
.LBB103_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB103_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB103_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB103_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end103:
	.size	_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end103-_Z14test_variable4Ij34custom_multiply_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc: // @_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB104_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB104_13
// %bb.2:
	mov	w9, w6
	mov	w8, wzr
	add	x10, x7, #4
	adrp	x11, init_value
	and	x12, x9, #0x7ffffffe
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB104_4
.LBB104_3:                              //   in Loop: Header=BB104_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB104_17
.LBB104_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB104_7 Depth 2
                                        //     Child Loop BB104_10 Depth 2
	cmp	w6, #1
	b.ne	.LBB104_6
// %bb.5:                               //   in Loop: Header=BB104_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB104_9
.LBB104_6:                              // %.preheader2
                                        //   in Loop: Header=BB104_4 Depth=1
	mov	w15, wzr
	mov	w16, wzr
	mov	x17, x10
	mov	x18, x12
.LBB104_7:                              //   Parent Loop BB104_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w19, w20, [x17, #-4]
	subs	x18, x18, #2
	add	x17, x17, #8
	udiv	w19, w19, w3
	udiv	w20, w20, w3
	add	w15, w19, w15
	add	w16, w20, w16
	b.ne	.LBB104_7
// %bb.8:                               //   in Loop: Header=BB104_4 Depth=1
	cmp	x12, x9
	add	w15, w16, w15
	mov	x17, x12
	b.eq	.LBB104_11
.LBB104_9:                              // %.preheader
                                        //   in Loop: Header=BB104_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB104_10:                             //   Parent Loop BB104_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	udiv	w18, w18, w3
	add	w15, w18, w15
	b.ne	.LBB104_10
.LBB104_11:                             //   in Loop: Header=BB104_4 Depth=1
	ldr	d0, [x11, :lo12:init_value]
	fcvtzu	w16, d0
	udiv	w16, w16, w3
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB104_3
// %bb.12:                              //   in Loop: Header=BB104_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB104_3
.LBB104_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB104_15
.LBB104_14:                             //   in Loop: Header=BB104_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB104_17
.LBB104_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	udiv	w10, w10, w3
	mul	w10, w10, w8
	cbz	w10, .LBB104_14
// %bb.16:                              //   in Loop: Header=BB104_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB104_14
.LBB104_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB104_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB104_21
.LBB104_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB104_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB104_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB104_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end104:
	.size	_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc, .Lfunc_end104-_Z14test_variable1Ij22custom_divide_variableIjEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	bl	clock
	adrp	x7, iterations
	adrp	x4, start_time
	adrp	x1, current_test
	ldr	w8, [x7, :lo12:iterations]
	str	x0, [x4, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB105_17
// %bb.1:
	cmp	w9, #0
	b.le	.LBB105_13
// %bb.2:
	mov	w12, w9
	mov	w11, wzr
	add	x13, x10, #4
	adrp	x14, init_value
	and	x15, x12, #0x7ffffffe
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB105_4
.LBB105_3:                              //   in Loop: Header=BB105_4 Depth=1
	add	w11, w11, #1
	cmp	w11, w8
	b.ge	.LBB105_17
.LBB105_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB105_7 Depth 2
                                        //     Child Loop BB105_10 Depth 2
	cmp	w9, #1
	b.ne	.LBB105_6
// %bb.5:                               //   in Loop: Header=BB105_4 Depth=1
	mov	x20, xzr
	mov	w18, wzr
	b	.LBB105_9
.LBB105_6:                              // %.preheader2
                                        //   in Loop: Header=BB105_4 Depth=1
	mov	w18, wzr
	mov	w19, wzr
	mov	x20, x13
	mov	x21, x15
.LBB105_7:                              //   Parent Loop BB105_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	w22, [x20, #-4]
	subs	x21, x21, #2
	udiv	w23, w22, w6
	ldr	w22, [x20], #8
	udiv	w22, w22, w6
	udiv	w23, w23, w5
	udiv	w22, w22, w5
	udiv	w23, w23, w3
	udiv	w24, w22, w3
	udiv	w22, w23, w2
	udiv	w23, w24, w2
	add	w18, w22, w18
	add	w19, w23, w19
	b.ne	.LBB105_7
// %bb.8:                               //   in Loop: Header=BB105_4 Depth=1
	cmp	x15, x12
	add	w18, w19, w18
	mov	x20, x15
	b.eq	.LBB105_11
.LBB105_9:                              // %.preheader
                                        //   in Loop: Header=BB105_4 Depth=1
	add	x19, x10, x20, lsl #2
	sub	x20, x12, x20
.LBB105_10:                             //   Parent Loop BB105_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w21, [x19], #4
	subs	x20, x20, #1
	udiv	w21, w21, w6
	udiv	w21, w21, w5
	udiv	w21, w21, w3
	udiv	w21, w21, w2
	add	w18, w21, w18
	b.ne	.LBB105_10
.LBB105_11:                             //   in Loop: Header=BB105_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	fcvtzu	w19, d0
	udiv	w19, w19, w6
	udiv	w19, w19, w5
	udiv	w19, w19, w3
	udiv	w19, w19, w2
	mul	w19, w19, w16
	cmp	w18, w19
	b.eq	.LBB105_3
// %bb.12:                              //   in Loop: Header=BB105_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB105_3
.LBB105_13:
	adrp	x10, init_value
	mov	w9, wzr
	mov	w11, #8000                      // =0x1f40
	ldr	d0, [x10, :lo12:init_value]
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB105_15
.LBB105_14:                             //   in Loop: Header=BB105_15 Depth=1
	add	w9, w9, #1
	cmp	w9, w8
	b.ge	.LBB105_17
.LBB105_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w13, d0
	udiv	w13, w13, w6
	udiv	w13, w13, w5
	udiv	w13, w13, w3
	udiv	w13, w13, w2
	mul	w13, w13, w11
	cbz	w13, .LBB105_14
// %bb.16:                              //   in Loop: Header=BB105_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	d0, [x10, :lo12:init_value]
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB105_14
.LBB105_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x4, [x4, :lo12:start_time]
	ldr	x3, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x2, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x3, .LBB105_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB105_21
.LBB105_19:
	add	w6, w8, #10
	mov	x0, x3
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB105_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x3, x0
.LBB105_21:
	sub	x2, x2, x4
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x3, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB105_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end105:
	.size	_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end105-_Z14test_variable4Ij31custom_divide_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB106_17
// %bb.1:
	udiv	w9, w10, w9
	cmp	w6, #0
	udiv	w8, w9, w8
	udiv	w4, w8, w4
	b.le	.LBB106_13
// %bb.2:
	dup	v0.4s, w4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB106_4
.LBB106_3:                              //   in Loop: Header=BB106_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB106_17
.LBB106_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB106_7 Depth 2
                                        //     Child Loop BB106_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB106_6
// %bb.5:                               //   in Loop: Header=BB106_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB106_9
.LBB106_6:                              // %.preheader2
                                        //   in Loop: Header=BB106_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB106_7:                              //   Parent Loop BB106_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	add	v1.4s, v3.4s, v1.4s
	add	v2.4s, v4.4s, v2.4s
	add	v1.4s, v1.4s, v0.4s
	add	v2.4s, v2.4s, v0.4s
	b.ne	.LBB106_7
// %bb.8:                               //   in Loop: Header=BB106_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB106_11
.LBB106_9:                              // %.preheader
                                        //   in Loop: Header=BB106_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB106_10:                             //   Parent Loop BB106_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	add	w15, w15, w4
	subs	x17, x17, #1
	add	w15, w18, w15
	b.ne	.LBB106_10
.LBB106_11:                             //   in Loop: Header=BB106_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	w16, d1
	add	w16, w4, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB106_3
// %bb.12:                              //   in Loop: Header=BB106_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB106_3
.LBB106_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB106_15
.LBB106_14:                             //   in Loop: Header=BB106_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB106_17
.LBB106_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	cbz	w10, .LBB106_14
// %bb.16:                              //   in Loop: Header=BB106_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB106_14
.LBB106_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB106_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB106_21
.LBB106_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB106_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB106_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB106_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end106:
	.size	_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end106-_Z14test_variable4Ij32custom_divide_multiple_variable2IjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB107_17
// %bb.1:
	mul	w9, w9, w10
	cmp	w7, #0
	udiv	w9, w9, w4
	sub	w4, w6, w9
	b.le	.LBB107_13
// %bb.2:
	dup	v0.4s, w6
	dup	v1.4s, w9
	mov	w11, w7
	mov	w10, wzr
	and	x12, x11, #0x7ffffff8
	add	x13, x8, #16
	adrp	x14, init_value
	mov	w15, #8000                      // =0x1f40
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB107_4
.LBB107_3:                              //   in Loop: Header=BB107_4 Depth=1
	add	w10, w10, #1
	cmp	w10, w5
	b.ge	.LBB107_17
.LBB107_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB107_7 Depth 2
                                        //     Child Loop BB107_10 Depth 2
	cmp	w7, #8
	b.hs	.LBB107_6
// %bb.5:                               //   in Loop: Header=BB107_4 Depth=1
	mov	x19, xzr
	mov	w17, wzr
	b	.LBB107_9
.LBB107_6:                              // %.preheader2
                                        //   in Loop: Header=BB107_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x17, x13
	mov	x18, x12
.LBB107_7:                              //   Parent Loop BB107_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v2.4s, v2.4s, v0.4s
	add	v3.4s, v3.4s, v0.4s
	subs	x18, x18, #8
	ldp	q5, q4, [x17, #-16]
	add	x17, x17, #32
	add	v2.4s, v2.4s, v5.4s
	add	v3.4s, v3.4s, v4.4s
	sub	v2.4s, v2.4s, v1.4s
	sub	v3.4s, v3.4s, v1.4s
	b.ne	.LBB107_7
// %bb.8:                               //   in Loop: Header=BB107_4 Depth=1
	add	v2.4s, v3.4s, v2.4s
	cmp	x12, x11
	mov	x19, x12
	addv	s2, v2.4s
	fmov	w17, s2
	b.eq	.LBB107_11
.LBB107_9:                              // %.preheader
                                        //   in Loop: Header=BB107_4 Depth=1
	add	x18, x8, x19, lsl #2
	sub	x19, x11, x19
.LBB107_10:                             //   Parent Loop BB107_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w20, [x18], #4
	add	w17, w17, w6
	subs	x19, x19, #1
	add	w17, w17, w20
	sub	w17, w17, w9
	b.ne	.LBB107_10
.LBB107_11:                             //   in Loop: Header=BB107_4 Depth=1
	ldr	d2, [x14, :lo12:init_value]
	fcvtzu	w18, d2
	add	w18, w4, w18
	mul	w18, w18, w15
	cmp	w17, w18
	b.eq	.LBB107_3
// %bb.12:                              //   in Loop: Header=BB107_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB107_3
.LBB107_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB107_15
.LBB107_14:                             //   in Loop: Header=BB107_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB107_17
.LBB107_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	add	w10, w4, w10
	mul	w10, w10, w8
	cbz	w10, .LBB107_14
// %bb.16:                              //   in Loop: Header=BB107_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB107_14
.LBB107_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB107_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB107_21
.LBB107_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB107_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB107_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB107_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end107:
	.size	_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end107-_Z14test_variable4Ij30custom_mixed_multiple_variableIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc: // @_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB108_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB108_13
// %bb.2:
	dup	v0.4s, w3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB108_4
.LBB108_3:                              //   in Loop: Header=BB108_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB108_17
.LBB108_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB108_7 Depth 2
                                        //     Child Loop BB108_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB108_6
// %bb.5:                               //   in Loop: Header=BB108_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB108_9
.LBB108_6:                              // %.preheader2
                                        //   in Loop: Header=BB108_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB108_7:                              //   Parent Loop BB108_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q5, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	and	v4.16b, v3.16b, v0.16b
	and	v3.16b, v5.16b, v0.16b
	add	v1.4s, v4.4s, v1.4s
	add	v2.4s, v3.4s, v2.4s
	b.ne	.LBB108_7
// %bb.8:                               //   in Loop: Header=BB108_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB108_11
.LBB108_9:                              // %.preheader
                                        //   in Loop: Header=BB108_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB108_10:                             //   Parent Loop BB108_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	and	w18, w18, w3
	add	w15, w18, w15
	b.ne	.LBB108_10
.LBB108_11:                             //   in Loop: Header=BB108_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	w16, d1
	and	w16, w3, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB108_3
// %bb.12:                              //   in Loop: Header=BB108_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB108_3
.LBB108_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB108_15
.LBB108_14:                             //   in Loop: Header=BB108_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB108_17
.LBB108_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	and	w10, w3, w10
	mul	w10, w10, w8
	cbz	w10, .LBB108_14
// %bb.16:                              //   in Loop: Header=BB108_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB108_14
.LBB108_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB108_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB108_21
.LBB108_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB108_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB108_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB108_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end108:
	.size	_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc, .Lfunc_end108-_Z14test_variable1Ij19custom_variable_andIjEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB109_17
// %bb.1:
	and	w13, w12, w10
	and	w14, w11, w9
	cmp	w6, #0
	and	w4, w14, w13
	b.le	.LBB109_13
// %bb.2:
	fmov	s0, w12
	fmov	s1, w10
	mov	w8, wzr
	fmov	s2, w11
	fmov	s3, w9
	mov	w9, w6
	and	x10, x9, #0x7ffffff8
	and	w11, w13, w14
	add	x12, x7, #16
	and	v0.16b, v0.16b, v1.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	and	v1.16b, v2.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	and	v0.16b, v0.16b, v1.16b
	dup	v0.4s, v0.s[0]
	b	.LBB109_4
.LBB109_3:                              //   in Loop: Header=BB109_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB109_17
.LBB109_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB109_7 Depth 2
                                        //     Child Loop BB109_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB109_6
// %bb.5:                               //   in Loop: Header=BB109_4 Depth=1
	mov	x18, xzr
	mov	w16, wzr
	b	.LBB109_9
.LBB109_6:                              // %.preheader2
                                        //   in Loop: Header=BB109_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB109_7:                              //   Parent Loop BB109_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #8
	add	x16, x16, #32
	and	v3.16b, v3.16b, v0.16b
	and	v4.16b, v4.16b, v0.16b
	add	v1.4s, v3.4s, v1.4s
	add	v2.4s, v4.4s, v2.4s
	b.ne	.LBB109_7
// %bb.8:                               //   in Loop: Header=BB109_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x18, x10
	addv	s1, v1.4s
	fmov	w16, s1
	b.eq	.LBB109_11
.LBB109_9:                              // %.preheader
                                        //   in Loop: Header=BB109_4 Depth=1
	add	x17, x7, x18, lsl #2
	sub	x18, x9, x18
.LBB109_10:                             //   Parent Loop BB109_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w19, [x17], #4
	subs	x18, x18, #1
	and	w19, w19, w11
	add	w16, w19, w16
	b.ne	.LBB109_10
.LBB109_11:                             //   in Loop: Header=BB109_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzu	w17, d1
	and	w17, w4, w17
	mul	w17, w17, w14
	cmp	w16, w17
	b.eq	.LBB109_3
// %bb.12:                              //   in Loop: Header=BB109_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB109_3
.LBB109_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB109_15
.LBB109_14:                             //   in Loop: Header=BB109_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB109_17
.LBB109_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	and	w10, w4, w10
	mul	w10, w10, w8
	cbz	w10, .LBB109_14
// %bb.16:                              //   in Loop: Header=BB109_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB109_14
.LBB109_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB109_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB109_21
.LBB109_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB109_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB109_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB109_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end109:
	.size	_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end109-_Z14test_variable4Ij28custom_multiple_variable_andIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc: // @_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB110_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB110_13
// %bb.2:
	dup	v0.4s, w3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB110_4
.LBB110_3:                              //   in Loop: Header=BB110_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB110_17
.LBB110_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB110_7 Depth 2
                                        //     Child Loop BB110_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB110_6
// %bb.5:                               //   in Loop: Header=BB110_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB110_9
.LBB110_6:                              // %.preheader2
                                        //   in Loop: Header=BB110_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB110_7:                              //   Parent Loop BB110_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q5, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	orr	v4.16b, v3.16b, v0.16b
	orr	v3.16b, v5.16b, v0.16b
	add	v1.4s, v4.4s, v1.4s
	add	v2.4s, v3.4s, v2.4s
	b.ne	.LBB110_7
// %bb.8:                               //   in Loop: Header=BB110_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB110_11
.LBB110_9:                              // %.preheader
                                        //   in Loop: Header=BB110_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB110_10:                             //   Parent Loop BB110_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	orr	w18, w18, w3
	add	w15, w18, w15
	b.ne	.LBB110_10
.LBB110_11:                             //   in Loop: Header=BB110_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	w16, d1
	orr	w16, w3, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB110_3
// %bb.12:                              //   in Loop: Header=BB110_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB110_3
.LBB110_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB110_15
.LBB110_14:                             //   in Loop: Header=BB110_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB110_17
.LBB110_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	orr	w10, w3, w10
	mul	w10, w10, w8
	cbz	w10, .LBB110_14
// %bb.16:                              //   in Loop: Header=BB110_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB110_14
.LBB110_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB110_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB110_21
.LBB110_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB110_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB110_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB110_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end110:
	.size	_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc, .Lfunc_end110-_Z14test_variable1Ij18custom_variable_orIjEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB111_17
// %bb.1:
	orr	w13, w12, w10
	orr	w14, w11, w9
	cmp	w6, #0
	orr	w4, w14, w13
	b.le	.LBB111_13
// %bb.2:
	fmov	s0, w12
	fmov	s1, w10
	mov	w8, wzr
	fmov	s2, w11
	fmov	s3, w9
	mov	w9, w6
	and	x10, x9, #0x7ffffff8
	orr	w11, w13, w14
	add	x12, x7, #16
	orr	v0.16b, v0.16b, v1.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	orr	v1.16b, v2.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	orr	v0.16b, v0.16b, v1.16b
	dup	v0.4s, v0.s[0]
	b	.LBB111_4
.LBB111_3:                              //   in Loop: Header=BB111_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB111_17
.LBB111_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB111_7 Depth 2
                                        //     Child Loop BB111_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB111_6
// %bb.5:                               //   in Loop: Header=BB111_4 Depth=1
	mov	x18, xzr
	mov	w16, wzr
	b	.LBB111_9
.LBB111_6:                              // %.preheader2
                                        //   in Loop: Header=BB111_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB111_7:                              //   Parent Loop BB111_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #8
	add	x16, x16, #32
	orr	v3.16b, v3.16b, v0.16b
	orr	v4.16b, v4.16b, v0.16b
	add	v1.4s, v3.4s, v1.4s
	add	v2.4s, v4.4s, v2.4s
	b.ne	.LBB111_7
// %bb.8:                               //   in Loop: Header=BB111_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x18, x10
	addv	s1, v1.4s
	fmov	w16, s1
	b.eq	.LBB111_11
.LBB111_9:                              // %.preheader
                                        //   in Loop: Header=BB111_4 Depth=1
	add	x17, x7, x18, lsl #2
	sub	x18, x9, x18
.LBB111_10:                             //   Parent Loop BB111_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w19, [x17], #4
	subs	x18, x18, #1
	orr	w19, w19, w11
	add	w16, w19, w16
	b.ne	.LBB111_10
.LBB111_11:                             //   in Loop: Header=BB111_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzu	w17, d1
	orr	w17, w4, w17
	mul	w17, w17, w14
	cmp	w16, w17
	b.eq	.LBB111_3
// %bb.12:                              //   in Loop: Header=BB111_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB111_3
.LBB111_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB111_15
.LBB111_14:                             //   in Loop: Header=BB111_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB111_17
.LBB111_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	orr	w10, w4, w10
	mul	w10, w10, w8
	cbz	w10, .LBB111_14
// %bb.16:                              //   in Loop: Header=BB111_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB111_14
.LBB111_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB111_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB111_21
.LBB111_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB111_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB111_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB111_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end111:
	.size	_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end111-_Z14test_variable4Ij27custom_multiple_variable_orIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc,@function
_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc: // @_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB112_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB112_13
// %bb.2:
	dup	v0.4s, w3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffff8
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB112_4
.LBB112_3:                              //   in Loop: Header=BB112_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB112_17
.LBB112_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB112_7 Depth 2
                                        //     Child Loop BB112_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB112_6
// %bb.5:                               //   in Loop: Header=BB112_4 Depth=1
	mov	x17, xzr
	mov	w15, wzr
	b	.LBB112_9
.LBB112_6:                              // %.preheader2
                                        //   in Loop: Header=BB112_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB112_7:                              //   Parent Loop BB112_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q5, [x15, #-16]
	subs	x16, x16, #8
	add	x15, x15, #32
	eor	v4.16b, v3.16b, v0.16b
	eor	v3.16b, v5.16b, v0.16b
	add	v1.4s, v4.4s, v1.4s
	add	v2.4s, v3.4s, v2.4s
	b.ne	.LBB112_7
// %bb.8:                               //   in Loop: Header=BB112_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x17, x10
	addv	s1, v1.4s
	fmov	w15, s1
	b.eq	.LBB112_11
.LBB112_9:                              // %.preheader
                                        //   in Loop: Header=BB112_4 Depth=1
	add	x16, x7, x17, lsl #2
	sub	x17, x9, x17
.LBB112_10:                             //   Parent Loop BB112_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w18, [x16], #4
	subs	x17, x17, #1
	eor	w18, w18, w3
	add	w15, w18, w15
	b.ne	.LBB112_10
.LBB112_11:                             //   in Loop: Header=BB112_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	w16, d1
	eor	w16, w3, w16
	mul	w16, w16, w13
	cmp	w15, w16
	b.eq	.LBB112_3
// %bb.12:                              //   in Loop: Header=BB112_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB112_3
.LBB112_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB112_15
.LBB112_14:                             //   in Loop: Header=BB112_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB112_17
.LBB112_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	eor	w10, w3, w10
	mul	w10, w10, w8
	cbz	w10, .LBB112_14
// %bb.16:                              //   in Loop: Header=BB112_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB112_14
.LBB112_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB112_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB112_21
.LBB112_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB112_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB112_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB112_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end112:
	.size	_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc, .Lfunc_end112-_Z14test_variable1Ij19custom_variable_xorIjEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB113_17
// %bb.1:
	eor	w13, w12, w10
	eor	w14, w11, w9
	cmp	w6, #0
	eor	w4, w14, w13
	b.le	.LBB113_13
// %bb.2:
	fmov	s0, w12
	fmov	s1, w10
	mov	w8, wzr
	fmov	s2, w11
	fmov	s3, w9
	mov	w9, w6
	and	x10, x9, #0x7ffffff8
	eor	w11, w13, w14
	add	x12, x7, #16
	eor	v0.16b, v0.16b, v1.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	eor	v1.16b, v2.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	eor	v0.16b, v0.16b, v1.16b
	dup	v0.4s, v0.s[0]
	b	.LBB113_4
.LBB113_3:                              //   in Loop: Header=BB113_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB113_17
.LBB113_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB113_7 Depth 2
                                        //     Child Loop BB113_10 Depth 2
	cmp	w6, #8
	b.hs	.LBB113_6
// %bb.5:                               //   in Loop: Header=BB113_4 Depth=1
	mov	x18, xzr
	mov	w16, wzr
	b	.LBB113_9
.LBB113_6:                              // %.preheader2
                                        //   in Loop: Header=BB113_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB113_7:                              //   Parent Loop BB113_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #8
	add	x16, x16, #32
	eor	v3.16b, v3.16b, v0.16b
	eor	v4.16b, v4.16b, v0.16b
	add	v1.4s, v3.4s, v1.4s
	add	v2.4s, v4.4s, v2.4s
	b.ne	.LBB113_7
// %bb.8:                               //   in Loop: Header=BB113_4 Depth=1
	add	v1.4s, v2.4s, v1.4s
	cmp	x10, x9
	mov	x18, x10
	addv	s1, v1.4s
	fmov	w16, s1
	b.eq	.LBB113_11
.LBB113_9:                              // %.preheader
                                        //   in Loop: Header=BB113_4 Depth=1
	add	x17, x7, x18, lsl #2
	sub	x18, x9, x18
.LBB113_10:                             //   Parent Loop BB113_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w19, [x17], #4
	subs	x18, x18, #1
	eor	w19, w19, w11
	add	w16, w19, w16
	b.ne	.LBB113_10
.LBB113_11:                             //   in Loop: Header=BB113_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzu	w17, d1
	eor	w17, w4, w17
	mul	w17, w17, w14
	cmp	w16, w17
	b.eq	.LBB113_3
// %bb.12:                              //   in Loop: Header=BB113_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB113_3
.LBB113_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB113_15
.LBB113_14:                             //   in Loop: Header=BB113_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB113_17
.LBB113_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w10, d0
	eor	w10, w4, w10
	mul	w10, w10, w8
	cbz	w10, .LBB113_14
// %bb.16:                              //   in Loop: Header=BB113_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB113_14
.LBB113_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB113_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB113_21
.LBB113_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB113_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB113_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB113_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end113:
	.size	_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end113-_Z14test_variable4Ij28custom_multiple_variable_xorIjEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc: // @_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB114_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB114_13
// %bb.2:
	dup	v0.2d, x3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB114_4
.LBB114_3:                              //   in Loop: Header=BB114_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB114_17
.LBB114_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB114_7 Depth 2
                                        //     Child Loop BB114_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB114_6
// %bb.5:                               //   in Loop: Header=BB114_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB114_9
.LBB114_6:                              // %.preheader2
                                        //   in Loop: Header=BB114_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB114_7:                              //   Parent Loop BB114_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.2d, v1.2d, v0.2d
	add	v2.2d, v2.2d, v0.2d
	subs	x16, x16, #4
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.2d, v1.2d, v4.2d
	add	v2.2d, v2.2d, v3.2d
	b.ne	.LBB114_7
// %bb.8:                               //   in Loop: Header=BB114_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB114_11
.LBB114_9:                              // %.preheader
                                        //   in Loop: Header=BB114_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB114_10:                             //   Parent Loop BB114_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	add	x15, x15, x3
	subs	x17, x17, #1
	add	x15, x15, x18
	b.ne	.LBB114_10
.LBB114_11:                             //   in Loop: Header=BB114_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	x16, d1
	add	x16, x3, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB114_3
// %bb.12:                              //   in Loop: Header=BB114_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB114_3
.LBB114_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB114_15
.LBB114_14:                             //   in Loop: Header=BB114_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB114_17
.LBB114_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cmn	x3, x9
	b.eq	.LBB114_14
// %bb.16:                              //   in Loop: Header=BB114_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB114_14
.LBB114_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB114_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB114_21
.LBB114_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB114_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB114_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB114_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end114:
	.size	_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc, .Lfunc_end114-_Z14test_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc // -- Begin function _Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.p2align	2
	.type	_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc: // @_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w6, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w6, #1
	b.lt	.LBB115_17
// %bb.1:
	sxtw	x5, w7
	cmp	w7, #0
	mul	x5, x3, x5
	b.le	.LBB115_13
// %bb.2:
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #16
	adrp	x12, init_value
	and	x13, x10, #0x7ffffffc
	mov	w14, #8000                      // =0x1f40
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	b	.LBB115_4
.LBB115_3:                              //   in Loop: Header=BB115_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w6
	b.ge	.LBB115_17
.LBB115_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB115_7 Depth 2
                                        //     Child Loop BB115_10 Depth 2
	cmp	w7, #4
	b.hs	.LBB115_6
// %bb.5:                               //   in Loop: Header=BB115_4 Depth=1
	mov	x18, xzr
	mov	x16, xzr
	b	.LBB115_9
.LBB115_6:                              // %.preheader2
                                        //   in Loop: Header=BB115_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x16, x11
	mov	x17, x13
.LBB115_7:                              //   Parent Loop BB115_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x16, #-16]
	subs	x17, x17, #4
	add	x16, x16, #32
	add	v0.2d, v2.2d, v0.2d
	add	v1.2d, v3.2d, v1.2d
	b.ne	.LBB115_7
// %bb.8:                               //   in Loop: Header=BB115_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x13, x10
	mov	x18, x13
	addp	d0, v0.2d
	fmov	x16, d0
	b.eq	.LBB115_11
.LBB115_9:                              // %.preheader
                                        //   in Loop: Header=BB115_4 Depth=1
	add	x17, x8, x18, lsl #3
	sub	x18, x10, x18
.LBB115_10:                             //   Parent Loop BB115_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x19, [x17], #8
	subs	x18, x18, #1
	add	x16, x19, x16
	b.ne	.LBB115_10
.LBB115_11:                             //   in Loop: Header=BB115_4 Depth=1
	ldr	d0, [x12, :lo12:init_value]
	add	x16, x16, x5
	fcvtzs	x17, d0
	add	x17, x3, x17
	mul	x17, x17, x14
	cmp	x16, x17
	b.eq	.LBB115_3
// %bb.12:                              //   in Loop: Header=BB115_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB115_3
.LBB115_13:
	adrp	x8, init_value
	mov	w7, wzr
	mov	w9, #8000                       // =0x1f40
	ldr	d0, [x8, :lo12:init_value]
	adrp	x10, .L.str.179
	add	x10, x10, :lo12:.L.str.179
	b	.LBB115_15
.LBB115_14:                             //   in Loop: Header=BB115_15 Depth=1
	add	w7, w7, #1
	cmp	w7, w6
	b.ge	.LBB115_17
.LBB115_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x11, d0
	add	x11, x3, x11
	mul	x11, x11, x9
	cmp	x5, x11
	b.eq	.LBB115_14
// %bb.16:                              //   in Loop: Header=BB115_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x10
	bl	printf
	ldr	d0, [x8, :lo12:init_value]
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB115_14
.LBB115_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB115_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB115_21
.LBB115_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB115_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB115_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB115_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end115:
	.size	_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc, .Lfunc_end115-_Z22test_hoisted_variable1Il19custom_add_variableIlEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB116_17
// %bb.1:
	add	x4, x9, x4
	add	x8, x8, x10
	cmp	w6, #0
	add	x4, x8, x4
	b.le	.LBB116_13
// %bb.2:
	dup	v0.2d, x4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB116_4
.LBB116_3:                              //   in Loop: Header=BB116_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB116_17
.LBB116_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB116_7 Depth 2
                                        //     Child Loop BB116_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB116_6
// %bb.5:                               //   in Loop: Header=BB116_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB116_9
.LBB116_6:                              // %.preheader2
                                        //   in Loop: Header=BB116_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB116_7:                              //   Parent Loop BB116_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.2d, v0.2d, v1.2d
	add	v2.2d, v0.2d, v2.2d
	subs	x16, x16, #4
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.2d, v1.2d, v4.2d
	add	v2.2d, v2.2d, v3.2d
	b.ne	.LBB116_7
// %bb.8:                               //   in Loop: Header=BB116_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB116_11
.LBB116_9:                              // %.preheader
                                        //   in Loop: Header=BB116_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB116_10:                             //   Parent Loop BB116_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	add	x15, x4, x15
	subs	x17, x17, #1
	add	x15, x15, x18
	b.ne	.LBB116_10
.LBB116_11:                             //   in Loop: Header=BB116_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	x16, d1
	add	x16, x4, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB116_3
// %bb.12:                              //   in Loop: Header=BB116_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB116_3
.LBB116_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB116_15
.LBB116_14:                             //   in Loop: Header=BB116_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB116_17
.LBB116_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cmn	x4, x9
	b.eq	.LBB116_14
// %bb.16:                              //   in Loop: Header=BB116_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB116_14
.LBB116_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB116_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB116_21
.LBB116_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB116_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB116_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB116_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end116:
	.size	_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end116-_Z14test_variable4Il28custom_add_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc: // @_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB117_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB117_13
// %bb.2:
	dup	v0.2d, x3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB117_4
.LBB117_3:                              //   in Loop: Header=BB117_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB117_17
.LBB117_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB117_7 Depth 2
                                        //     Child Loop BB117_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB117_6
// %bb.5:                               //   in Loop: Header=BB117_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB117_9
.LBB117_6:                              // %.preheader2
                                        //   in Loop: Header=BB117_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB117_7:                              //   Parent Loop BB117_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.2d, v1.2d, v0.2d
	sub	v2.2d, v2.2d, v0.2d
	subs	x16, x16, #4
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.2d, v1.2d, v4.2d
	add	v2.2d, v2.2d, v3.2d
	b.ne	.LBB117_7
// %bb.8:                               //   in Loop: Header=BB117_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB117_11
.LBB117_9:                              // %.preheader
                                        //   in Loop: Header=BB117_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB117_10:                             //   Parent Loop BB117_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	sub	x15, x15, x3
	subs	x17, x17, #1
	add	x15, x15, x18
	b.ne	.LBB117_10
.LBB117_11:                             //   in Loop: Header=BB117_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	x16, d1
	sub	x16, x16, x3
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB117_3
// %bb.12:                              //   in Loop: Header=BB117_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB117_3
.LBB117_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB117_15
.LBB117_14:                             //   in Loop: Header=BB117_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB117_17
.LBB117_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cmp	x3, x9
	b.eq	.LBB117_14
// %bb.16:                              //   in Loop: Header=BB117_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB117_14
.LBB117_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB117_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB117_21
.LBB117_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB117_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB117_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB117_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end117:
	.size	_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc, .Lfunc_end117-_Z14test_variable1Il19custom_sub_variableIlEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB118_17
// %bb.1:
	add	x4, x9, x4
	add	x8, x8, x10
	cmp	w6, #0
	add	x4, x8, x4
	b.le	.LBB118_13
// %bb.2:
	dup	v0.2d, x4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB118_4
.LBB118_3:                              //   in Loop: Header=BB118_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB118_17
.LBB118_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB118_7 Depth 2
                                        //     Child Loop BB118_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB118_6
// %bb.5:                               //   in Loop: Header=BB118_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB118_9
.LBB118_6:                              // %.preheader2
                                        //   in Loop: Header=BB118_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB118_7:                              //   Parent Loop BB118_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.2d, v1.2d, v0.2d
	sub	v2.2d, v2.2d, v0.2d
	subs	x16, x16, #4
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.2d, v1.2d, v4.2d
	add	v2.2d, v2.2d, v3.2d
	b.ne	.LBB118_7
// %bb.8:                               //   in Loop: Header=BB118_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB118_11
.LBB118_9:                              // %.preheader
                                        //   in Loop: Header=BB118_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB118_10:                             //   Parent Loop BB118_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	sub	x15, x15, x4
	subs	x17, x17, #1
	add	x15, x15, x18
	b.ne	.LBB118_10
.LBB118_11:                             //   in Loop: Header=BB118_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	x16, d1
	sub	x16, x16, x4
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB118_3
// %bb.12:                              //   in Loop: Header=BB118_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB118_3
.LBB118_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB118_15
.LBB118_14:                             //   in Loop: Header=BB118_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB118_17
.LBB118_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cmp	x4, x9
	b.eq	.LBB118_14
// %bb.16:                              //   in Loop: Header=BB118_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB118_14
.LBB118_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB118_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB118_21
.LBB118_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB118_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB118_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB118_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end118:
	.size	_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end118-_Z14test_variable4Il28custom_sub_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc: // @_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB119_17
// %bb.1:
	mov	w4, #8000                       // =0x1f40
	cmp	w7, #0
	mul	x4, x6, x4
	b.le	.LBB119_13
// %bb.2:
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #8
	and	x12, x10, #0x7ffffffe
	adrp	x13, init_value
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB119_4
.LBB119_3:                              //   in Loop: Header=BB119_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w5
	b.ge	.LBB119_17
.LBB119_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB119_7 Depth 2
                                        //     Child Loop BB119_10 Depth 2
	cmp	w7, #1
	b.ne	.LBB119_6
// %bb.5:                               //   in Loop: Header=BB119_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB119_9
.LBB119_6:                              // %.preheader2
                                        //   in Loop: Header=BB119_4 Depth=1
	mov	x15, xzr
	mov	x16, xzr
	mov	x17, x11
	mov	x18, x12
.LBB119_7:                              //   Parent Loop BB119_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x20, x19, [x17, #-8]
	subs	x18, x18, #2
	add	x17, x17, #16
	madd	x15, x20, x6, x15
	madd	x16, x19, x6, x16
	b.ne	.LBB119_7
// %bb.8:                               //   in Loop: Header=BB119_4 Depth=1
	cmp	x12, x10
	add	x15, x16, x15
	mov	x17, x12
	b.eq	.LBB119_11
.LBB119_9:                              // %.preheader
                                        //   in Loop: Header=BB119_4 Depth=1
	add	x16, x8, x17, lsl #3
	sub	x17, x10, x17
.LBB119_10:                             //   Parent Loop BB119_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	madd	x15, x18, x6, x15
	b.ne	.LBB119_10
.LBB119_11:                             //   in Loop: Header=BB119_4 Depth=1
	ldr	d0, [x13, :lo12:init_value]
	fcvtzs	x16, d0
	mul	x16, x4, x16
	cmp	x15, x16
	b.eq	.LBB119_3
// %bb.12:                              //   in Loop: Header=BB119_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB119_3
.LBB119_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB119_15
.LBB119_14:                             //   in Loop: Header=BB119_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB119_17
.LBB119_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	mul	x9, x4, x9
	cbz	x9, .LBB119_14
// %bb.16:                              //   in Loop: Header=BB119_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB119_14
.LBB119_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB119_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB119_21
.LBB119_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB119_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB119_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB119_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end119:
	.size	_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc, .Lfunc_end119-_Z14test_variable1Il24custom_multiply_variableIlEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB120_17
// %bb.1:
	mul	x11, x8, x4
	mov	w8, #8000                       // =0x1f40
	cmp	w6, #0
	mul	x4, x11, x9
	mul	x4, x4, x10
	mul	x4, x4, x8
	b.le	.LBB120_13
// %bb.2:
	mul	x10, x11, x10
	mov	w8, wzr
	add	x12, x7, #8
	adrp	x13, init_value
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	mul	x9, x10, x9
	mov	w10, w6
	and	x11, x10, #0x7ffffffe
	b	.LBB120_4
.LBB120_3:                              //   in Loop: Header=BB120_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB120_17
.LBB120_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB120_7 Depth 2
                                        //     Child Loop BB120_10 Depth 2
	cmp	w6, #1
	b.ne	.LBB120_6
// %bb.5:                               //   in Loop: Header=BB120_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB120_9
.LBB120_6:                              // %.preheader2
                                        //   in Loop: Header=BB120_4 Depth=1
	mov	x15, xzr
	mov	x16, xzr
	mov	x17, x12
	mov	x18, x11
.LBB120_7:                              //   Parent Loop BB120_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x20, x19, [x17, #-8]
	subs	x18, x18, #2
	add	x17, x17, #16
	madd	x15, x9, x20, x15
	madd	x16, x9, x19, x16
	b.ne	.LBB120_7
// %bb.8:                               //   in Loop: Header=BB120_4 Depth=1
	cmp	x11, x10
	add	x15, x16, x15
	mov	x17, x11
	b.eq	.LBB120_11
.LBB120_9:                              // %.preheader
                                        //   in Loop: Header=BB120_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x10, x17
.LBB120_10:                             //   Parent Loop BB120_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	madd	x15, x9, x18, x15
	b.ne	.LBB120_10
.LBB120_11:                             //   in Loop: Header=BB120_4 Depth=1
	ldr	d0, [x13, :lo12:init_value]
	fcvtzs	x16, d0
	mul	x16, x4, x16
	cmp	x15, x16
	b.eq	.LBB120_3
// %bb.12:                              //   in Loop: Header=BB120_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB120_3
.LBB120_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB120_15
.LBB120_14:                             //   in Loop: Header=BB120_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB120_17
.LBB120_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	mul	x9, x4, x9
	cbz	x9, .LBB120_14
// %bb.16:                              //   in Loop: Header=BB120_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB120_14
.LBB120_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB120_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB120_21
.LBB120_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB120_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB120_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB120_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end120:
	.size	_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end120-_Z14test_variable4Il33custom_multiply_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB121_17
// %bb.1:
	mul	x11, x8, x4
	cmp	w6, #0
	mul	x4, x11, x9
	mul	x4, x4, x10
	b.le	.LBB121_13
// %bb.2:
	mul	x10, x11, x10
	mov	w8, wzr
	add	x12, x7, #16
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	mul	x9, x10, x9
	mov	w10, w6
	and	x11, x10, #0x7ffffffc
	dup	v0.2d, x9
	b	.LBB121_4
.LBB121_3:                              //   in Loop: Header=BB121_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB121_17
.LBB121_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB121_7 Depth 2
                                        //     Child Loop BB121_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB121_6
// %bb.5:                               //   in Loop: Header=BB121_4 Depth=1
	mov	x18, xzr
	mov	x16, xzr
	b	.LBB121_9
.LBB121_6:                              // %.preheader2
                                        //   in Loop: Header=BB121_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x11
.LBB121_7:                              //   Parent Loop BB121_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.2d, v1.2d, v0.2d
	add	v2.2d, v2.2d, v0.2d
	subs	x17, x17, #4
	ldp	q4, q3, [x16, #-16]
	add	x16, x16, #32
	add	v1.2d, v1.2d, v4.2d
	add	v2.2d, v2.2d, v3.2d
	b.ne	.LBB121_7
// %bb.8:                               //   in Loop: Header=BB121_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x11, x10
	mov	x18, x11
	addp	d1, v1.2d
	fmov	x16, d1
	b.eq	.LBB121_11
.LBB121_9:                              // %.preheader
                                        //   in Loop: Header=BB121_4 Depth=1
	add	x17, x7, x18, lsl #3
	sub	x18, x10, x18
.LBB121_10:                             //   Parent Loop BB121_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x19, [x17], #8
	add	x16, x16, x9
	subs	x18, x18, #1
	add	x16, x16, x19
	b.ne	.LBB121_10
.LBB121_11:                             //   in Loop: Header=BB121_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzs	x17, d1
	add	x17, x4, x17
	mul	x17, x17, x14
	cmp	x16, x17
	b.eq	.LBB121_3
// %bb.12:                              //   in Loop: Header=BB121_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB121_3
.LBB121_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB121_15
.LBB121_14:                             //   in Loop: Header=BB121_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB121_17
.LBB121_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cmn	x4, x9
	b.eq	.LBB121_14
// %bb.16:                              //   in Loop: Header=BB121_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB121_14
.LBB121_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB121_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB121_21
.LBB121_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB121_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB121_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB121_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end121:
	.size	_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end121-_Z14test_variable4Il34custom_multiply_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc: // @_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB122_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB122_13
// %bb.2:
	mov	w9, w6
	mov	w8, wzr
	add	x10, x7, #8
	adrp	x11, init_value
	and	x12, x9, #0x7ffffffe
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB122_4
.LBB122_3:                              //   in Loop: Header=BB122_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB122_17
.LBB122_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB122_7 Depth 2
                                        //     Child Loop BB122_10 Depth 2
	cmp	w6, #1
	b.ne	.LBB122_6
// %bb.5:                               //   in Loop: Header=BB122_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB122_9
.LBB122_6:                              // %.preheader2
                                        //   in Loop: Header=BB122_4 Depth=1
	mov	x15, xzr
	mov	x16, xzr
	mov	x17, x10
	mov	x18, x12
.LBB122_7:                              //   Parent Loop BB122_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x19, x20, [x17, #-8]
	subs	x18, x18, #2
	add	x17, x17, #16
	sdiv	x19, x19, x3
	sdiv	x20, x20, x3
	add	x15, x19, x15
	add	x16, x20, x16
	b.ne	.LBB122_7
// %bb.8:                               //   in Loop: Header=BB122_4 Depth=1
	cmp	x12, x9
	add	x15, x16, x15
	mov	x17, x12
	b.eq	.LBB122_11
.LBB122_9:                              // %.preheader
                                        //   in Loop: Header=BB122_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB122_10:                             //   Parent Loop BB122_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	sdiv	x18, x18, x3
	add	x15, x18, x15
	b.ne	.LBB122_10
.LBB122_11:                             //   in Loop: Header=BB122_4 Depth=1
	ldr	d0, [x11, :lo12:init_value]
	fcvtzs	x16, d0
	sdiv	x16, x16, x3
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB122_3
// %bb.12:                              //   in Loop: Header=BB122_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB122_3
.LBB122_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB122_15
.LBB122_14:                             //   in Loop: Header=BB122_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB122_17
.LBB122_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	sdiv	x9, x9, x3
	cbz	x9, .LBB122_14
// %bb.16:                              //   in Loop: Header=BB122_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB122_14
.LBB122_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB122_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB122_21
.LBB122_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB122_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB122_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB122_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end122:
	.size	_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc, .Lfunc_end122-_Z14test_variable1Il22custom_divide_variableIlEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	bl	clock
	adrp	x7, iterations
	adrp	x4, start_time
	adrp	x1, current_test
	ldr	w8, [x7, :lo12:iterations]
	str	x0, [x4, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB123_17
// %bb.1:
	cmp	w9, #0
	b.le	.LBB123_13
// %bb.2:
	mov	w12, w9
	mov	w11, wzr
	add	x13, x10, #8
	adrp	x14, init_value
	and	x15, x12, #0x7ffffffe
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB123_4
.LBB123_3:                              //   in Loop: Header=BB123_4 Depth=1
	add	w11, w11, #1
	cmp	w11, w8
	b.ge	.LBB123_17
.LBB123_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB123_7 Depth 2
                                        //     Child Loop BB123_10 Depth 2
	cmp	w9, #1
	b.ne	.LBB123_6
// %bb.5:                               //   in Loop: Header=BB123_4 Depth=1
	mov	x20, xzr
	mov	x18, xzr
	b	.LBB123_9
.LBB123_6:                              // %.preheader2
                                        //   in Loop: Header=BB123_4 Depth=1
	mov	x18, xzr
	mov	x19, xzr
	mov	x20, x13
	mov	x21, x15
.LBB123_7:                              //   Parent Loop BB123_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x22, x23, [x20, #-8]
	subs	x21, x21, #2
	add	x20, x20, #16
	sdiv	x22, x22, x6
	sdiv	x23, x23, x6
	sdiv	x22, x22, x5
	sdiv	x23, x23, x5
	sdiv	x22, x22, x3
	sdiv	x23, x23, x3
	sdiv	x22, x22, x2
	sdiv	x23, x23, x2
	add	x18, x22, x18
	add	x19, x23, x19
	b.ne	.LBB123_7
// %bb.8:                               //   in Loop: Header=BB123_4 Depth=1
	cmp	x15, x12
	add	x18, x19, x18
	mov	x20, x15
	b.eq	.LBB123_11
.LBB123_9:                              // %.preheader
                                        //   in Loop: Header=BB123_4 Depth=1
	add	x19, x10, x20, lsl #3
	sub	x20, x12, x20
.LBB123_10:                             //   Parent Loop BB123_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x21, [x19], #8
	subs	x20, x20, #1
	sdiv	x21, x21, x6
	sdiv	x21, x21, x5
	sdiv	x21, x21, x3
	sdiv	x21, x21, x2
	add	x18, x21, x18
	b.ne	.LBB123_10
.LBB123_11:                             //   in Loop: Header=BB123_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	fcvtzs	x19, d0
	sdiv	x19, x19, x6
	sdiv	x19, x19, x5
	sdiv	x19, x19, x3
	sdiv	x19, x19, x2
	mul	x19, x19, x16
	cmp	x18, x19
	b.eq	.LBB123_3
// %bb.12:                              //   in Loop: Header=BB123_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB123_3
.LBB123_13:
	adrp	x10, init_value
	mov	w9, wzr
	adrp	x11, .L.str.179
	add	x11, x11, :lo12:.L.str.179
	ldr	d0, [x10, :lo12:init_value]
	b	.LBB123_15
.LBB123_14:                             //   in Loop: Header=BB123_15 Depth=1
	add	w9, w9, #1
	cmp	w9, w8
	b.ge	.LBB123_17
.LBB123_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x12, d0
	sdiv	x12, x12, x6
	sdiv	x12, x12, x5
	sdiv	x12, x12, x3
	sdiv	x12, x12, x2
	cbz	x12, .LBB123_14
// %bb.16:                              //   in Loop: Header=BB123_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x11
	bl	printf
	ldr	d0, [x10, :lo12:init_value]
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB123_14
.LBB123_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x4, [x4, :lo12:start_time]
	ldr	x3, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x2, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x3, .LBB123_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB123_21
.LBB123_19:
	add	w6, w8, #10
	mov	x0, x3
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB123_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x3, x0
.LBB123_21:
	sub	x2, x2, x4
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x3, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB123_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end123:
	.size	_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end123-_Z14test_variable4Il31custom_divide_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB124_17
// %bb.1:
	sdiv	x9, x10, x9
	cmp	w6, #0
	sdiv	x8, x9, x8
	sdiv	x4, x8, x4
	b.le	.LBB124_13
// %bb.2:
	dup	v0.2d, x4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB124_4
.LBB124_3:                              //   in Loop: Header=BB124_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB124_17
.LBB124_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB124_7 Depth 2
                                        //     Child Loop BB124_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB124_6
// %bb.5:                               //   in Loop: Header=BB124_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB124_9
.LBB124_6:                              // %.preheader2
                                        //   in Loop: Header=BB124_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB124_7:                              //   Parent Loop BB124_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x15, #-16]
	subs	x16, x16, #4
	add	x15, x15, #32
	add	v1.2d, v3.2d, v1.2d
	add	v2.2d, v4.2d, v2.2d
	add	v1.2d, v1.2d, v0.2d
	add	v2.2d, v2.2d, v0.2d
	b.ne	.LBB124_7
// %bb.8:                               //   in Loop: Header=BB124_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB124_11
.LBB124_9:                              // %.preheader
                                        //   in Loop: Header=BB124_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB124_10:                             //   Parent Loop BB124_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	add	x15, x15, x4
	subs	x17, x17, #1
	add	x15, x18, x15
	b.ne	.LBB124_10
.LBB124_11:                             //   in Loop: Header=BB124_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	x16, d1
	add	x16, x4, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB124_3
// %bb.12:                              //   in Loop: Header=BB124_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB124_3
.LBB124_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB124_15
.LBB124_14:                             //   in Loop: Header=BB124_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB124_17
.LBB124_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cmn	x4, x9
	b.eq	.LBB124_14
// %bb.16:                              //   in Loop: Header=BB124_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB124_14
.LBB124_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB124_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB124_21
.LBB124_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB124_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB124_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB124_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end124:
	.size	_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end124-_Z14test_variable4Il32custom_divide_multiple_variable2IlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB125_17
// %bb.1:
	mul	x9, x9, x10
	cmp	w7, #0
	sdiv	x9, x9, x4
	sub	x4, x6, x9
	b.le	.LBB125_13
// %bb.2:
	dup	v0.2d, x6
	dup	v1.2d, x9
	mov	w11, w7
	mov	w10, wzr
	and	x12, x11, #0x7ffffffc
	add	x13, x8, #16
	adrp	x14, init_value
	mov	w15, #8000                      // =0x1f40
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB125_4
.LBB125_3:                              //   in Loop: Header=BB125_4 Depth=1
	add	w10, w10, #1
	cmp	w10, w5
	b.ge	.LBB125_17
.LBB125_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB125_7 Depth 2
                                        //     Child Loop BB125_10 Depth 2
	cmp	w7, #4
	b.hs	.LBB125_6
// %bb.5:                               //   in Loop: Header=BB125_4 Depth=1
	mov	x19, xzr
	mov	x17, xzr
	b	.LBB125_9
.LBB125_6:                              // %.preheader2
                                        //   in Loop: Header=BB125_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x17, x13
	mov	x18, x12
.LBB125_7:                              //   Parent Loop BB125_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v2.2d, v2.2d, v0.2d
	add	v3.2d, v3.2d, v0.2d
	subs	x18, x18, #4
	ldp	q5, q4, [x17, #-16]
	add	x17, x17, #32
	add	v2.2d, v2.2d, v5.2d
	add	v3.2d, v3.2d, v4.2d
	sub	v2.2d, v2.2d, v1.2d
	sub	v3.2d, v3.2d, v1.2d
	b.ne	.LBB125_7
// %bb.8:                               //   in Loop: Header=BB125_4 Depth=1
	add	v2.2d, v3.2d, v2.2d
	cmp	x12, x11
	mov	x19, x12
	addp	d2, v2.2d
	fmov	x17, d2
	b.eq	.LBB125_11
.LBB125_9:                              // %.preheader
                                        //   in Loop: Header=BB125_4 Depth=1
	add	x18, x8, x19, lsl #3
	sub	x19, x11, x19
.LBB125_10:                             //   Parent Loop BB125_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x20, [x18], #8
	add	x17, x17, x6
	subs	x19, x19, #1
	add	x17, x17, x20
	sub	x17, x17, x9
	b.ne	.LBB125_10
.LBB125_11:                             //   in Loop: Header=BB125_4 Depth=1
	ldr	d2, [x14, :lo12:init_value]
	fcvtzs	x18, d2
	add	x18, x4, x18
	mul	x18, x18, x15
	cmp	x17, x18
	b.eq	.LBB125_3
// %bb.12:                              //   in Loop: Header=BB125_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB125_3
.LBB125_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB125_15
.LBB125_14:                             //   in Loop: Header=BB125_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB125_17
.LBB125_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cmn	x4, x9
	b.eq	.LBB125_14
// %bb.16:                              //   in Loop: Header=BB125_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB125_14
.LBB125_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB125_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB125_21
.LBB125_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB125_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB125_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB125_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end125:
	.size	_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end125-_Z14test_variable4Il30custom_mixed_multiple_variableIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc: // @_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB126_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB126_13
// %bb.2:
	dup	v0.2d, x3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB126_4
.LBB126_3:                              //   in Loop: Header=BB126_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB126_17
.LBB126_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB126_7 Depth 2
                                        //     Child Loop BB126_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB126_6
// %bb.5:                               //   in Loop: Header=BB126_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB126_9
.LBB126_6:                              // %.preheader2
                                        //   in Loop: Header=BB126_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB126_7:                              //   Parent Loop BB126_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x15, #-16]
	subs	x16, x16, #4
	add	x15, x15, #32
	and	v5.16b, v3.16b, v0.16b
	and	v3.16b, v4.16b, v0.16b
	add	v1.2d, v5.2d, v1.2d
	add	v2.2d, v3.2d, v2.2d
	b.ne	.LBB126_7
// %bb.8:                               //   in Loop: Header=BB126_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB126_11
.LBB126_9:                              // %.preheader
                                        //   in Loop: Header=BB126_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB126_10:                             //   Parent Loop BB126_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	and	x18, x18, x3
	add	x15, x18, x15
	b.ne	.LBB126_10
.LBB126_11:                             //   in Loop: Header=BB126_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	x16, d1
	and	x16, x3, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB126_3
// %bb.12:                              //   in Loop: Header=BB126_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB126_3
.LBB126_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB126_15
.LBB126_14:                             //   in Loop: Header=BB126_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB126_17
.LBB126_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	tst	x3, x9
	b.eq	.LBB126_14
// %bb.16:                              //   in Loop: Header=BB126_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB126_14
.LBB126_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB126_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB126_21
.LBB126_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB126_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB126_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB126_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end126:
	.size	_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc, .Lfunc_end126-_Z14test_variable1Il19custom_variable_andIlEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB127_17
// %bb.1:
	and	x13, x12, x10
	and	x14, x11, x9
	cmp	w6, #0
	and	x4, x14, x13
	b.le	.LBB127_13
// %bb.2:
	fmov	d0, x12
	fmov	d2, x10
	mov	w8, wzr
	fmov	d1, x11
	fmov	d3, x9
	mov	w9, w6
	and	x10, x9, #0x7ffffffc
	and	x11, x13, x14
	add	x12, x7, #16
	and	v0.16b, v0.16b, v2.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	and	v1.16b, v1.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	and	v0.16b, v0.16b, v1.16b
	dup	v0.2d, v0.d[0]
	b	.LBB127_4
.LBB127_3:                              //   in Loop: Header=BB127_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB127_17
.LBB127_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB127_7 Depth 2
                                        //     Child Loop BB127_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB127_6
// %bb.5:                               //   in Loop: Header=BB127_4 Depth=1
	mov	x18, xzr
	mov	x16, xzr
	b	.LBB127_9
.LBB127_6:                              // %.preheader2
                                        //   in Loop: Header=BB127_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB127_7:                              //   Parent Loop BB127_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #4
	add	x16, x16, #32
	and	v3.16b, v3.16b, v0.16b
	and	v4.16b, v4.16b, v0.16b
	add	v1.2d, v3.2d, v1.2d
	add	v2.2d, v4.2d, v2.2d
	b.ne	.LBB127_7
// %bb.8:                               //   in Loop: Header=BB127_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x18, x10
	addp	d1, v1.2d
	fmov	x16, d1
	b.eq	.LBB127_11
.LBB127_9:                              // %.preheader
                                        //   in Loop: Header=BB127_4 Depth=1
	add	x17, x7, x18, lsl #3
	sub	x18, x9, x18
.LBB127_10:                             //   Parent Loop BB127_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x19, [x17], #8
	subs	x18, x18, #1
	and	x19, x19, x11
	add	x16, x19, x16
	b.ne	.LBB127_10
.LBB127_11:                             //   in Loop: Header=BB127_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzs	x17, d1
	and	x17, x4, x17
	mul	x17, x17, x14
	cmp	x16, x17
	b.eq	.LBB127_3
// %bb.12:                              //   in Loop: Header=BB127_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB127_3
.LBB127_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB127_15
.LBB127_14:                             //   in Loop: Header=BB127_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB127_17
.LBB127_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	tst	x4, x9
	b.eq	.LBB127_14
// %bb.16:                              //   in Loop: Header=BB127_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB127_14
.LBB127_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB127_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB127_21
.LBB127_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB127_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB127_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB127_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end127:
	.size	_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end127-_Z14test_variable4Il28custom_multiple_variable_andIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc: // @_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB128_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB128_13
// %bb.2:
	dup	v0.2d, x3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB128_4
.LBB128_3:                              //   in Loop: Header=BB128_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB128_17
.LBB128_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB128_7 Depth 2
                                        //     Child Loop BB128_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB128_6
// %bb.5:                               //   in Loop: Header=BB128_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB128_9
.LBB128_6:                              // %.preheader2
                                        //   in Loop: Header=BB128_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB128_7:                              //   Parent Loop BB128_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x15, #-16]
	subs	x16, x16, #4
	add	x15, x15, #32
	orr	v3.16b, v3.16b, v0.16b
	orr	v4.16b, v4.16b, v0.16b
	add	v1.2d, v3.2d, v1.2d
	add	v2.2d, v4.2d, v2.2d
	b.ne	.LBB128_7
// %bb.8:                               //   in Loop: Header=BB128_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB128_11
.LBB128_9:                              // %.preheader
                                        //   in Loop: Header=BB128_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB128_10:                             //   Parent Loop BB128_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	orr	x18, x18, x3
	add	x15, x18, x15
	b.ne	.LBB128_10
.LBB128_11:                             //   in Loop: Header=BB128_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	x16, d1
	orr	x16, x3, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB128_3
// %bb.12:                              //   in Loop: Header=BB128_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB128_3
.LBB128_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB128_15
.LBB128_14:                             //   in Loop: Header=BB128_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB128_17
.LBB128_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	orr	x9, x3, x9
	cbz	x9, .LBB128_14
// %bb.16:                              //   in Loop: Header=BB128_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB128_14
.LBB128_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB128_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB128_21
.LBB128_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB128_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB128_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB128_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end128:
	.size	_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc, .Lfunc_end128-_Z14test_variable1Il18custom_variable_orIlEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB129_17
// %bb.1:
	orr	x13, x12, x10
	orr	x14, x11, x9
	cmp	w6, #0
	orr	x4, x14, x13
	b.le	.LBB129_13
// %bb.2:
	fmov	d0, x12
	fmov	d2, x10
	mov	w8, wzr
	fmov	d1, x11
	fmov	d3, x9
	mov	w9, w6
	and	x10, x9, #0x7ffffffc
	orr	x11, x13, x14
	add	x12, x7, #16
	orr	v0.16b, v0.16b, v2.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	orr	v1.16b, v1.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	orr	v0.16b, v0.16b, v1.16b
	dup	v0.2d, v0.d[0]
	b	.LBB129_4
.LBB129_3:                              //   in Loop: Header=BB129_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB129_17
.LBB129_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB129_7 Depth 2
                                        //     Child Loop BB129_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB129_6
// %bb.5:                               //   in Loop: Header=BB129_4 Depth=1
	mov	x18, xzr
	mov	x16, xzr
	b	.LBB129_9
.LBB129_6:                              // %.preheader2
                                        //   in Loop: Header=BB129_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB129_7:                              //   Parent Loop BB129_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #4
	add	x16, x16, #32
	orr	v3.16b, v3.16b, v0.16b
	orr	v4.16b, v4.16b, v0.16b
	add	v1.2d, v3.2d, v1.2d
	add	v2.2d, v4.2d, v2.2d
	b.ne	.LBB129_7
// %bb.8:                               //   in Loop: Header=BB129_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x18, x10
	addp	d1, v1.2d
	fmov	x16, d1
	b.eq	.LBB129_11
.LBB129_9:                              // %.preheader
                                        //   in Loop: Header=BB129_4 Depth=1
	add	x17, x7, x18, lsl #3
	sub	x18, x9, x18
.LBB129_10:                             //   Parent Loop BB129_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x19, [x17], #8
	subs	x18, x18, #1
	orr	x19, x19, x11
	add	x16, x19, x16
	b.ne	.LBB129_10
.LBB129_11:                             //   in Loop: Header=BB129_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzs	x17, d1
	orr	x17, x4, x17
	mul	x17, x17, x14
	cmp	x16, x17
	b.eq	.LBB129_3
// %bb.12:                              //   in Loop: Header=BB129_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB129_3
.LBB129_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB129_15
.LBB129_14:                             //   in Loop: Header=BB129_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB129_17
.LBB129_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	orr	x9, x4, x9
	cbz	x9, .LBB129_14
// %bb.16:                              //   in Loop: Header=BB129_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB129_14
.LBB129_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB129_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB129_21
.LBB129_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB129_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB129_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB129_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end129:
	.size	_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end129-_Z14test_variable4Il27custom_multiple_variable_orIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc,@function
_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc: // @_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB130_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB130_13
// %bb.2:
	dup	v0.2d, x3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB130_4
.LBB130_3:                              //   in Loop: Header=BB130_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB130_17
.LBB130_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB130_7 Depth 2
                                        //     Child Loop BB130_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB130_6
// %bb.5:                               //   in Loop: Header=BB130_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB130_9
.LBB130_6:                              // %.preheader2
                                        //   in Loop: Header=BB130_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB130_7:                              //   Parent Loop BB130_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x15, #-16]
	subs	x16, x16, #4
	add	x15, x15, #32
	eor	v5.16b, v3.16b, v0.16b
	eor	v3.16b, v4.16b, v0.16b
	add	v1.2d, v5.2d, v1.2d
	add	v2.2d, v3.2d, v2.2d
	b.ne	.LBB130_7
// %bb.8:                               //   in Loop: Header=BB130_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB130_11
.LBB130_9:                              // %.preheader
                                        //   in Loop: Header=BB130_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB130_10:                             //   Parent Loop BB130_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	eor	x18, x18, x3
	add	x15, x18, x15
	b.ne	.LBB130_10
.LBB130_11:                             //   in Loop: Header=BB130_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzs	x16, d1
	eor	x16, x3, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB130_3
// %bb.12:                              //   in Loop: Header=BB130_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB130_3
.LBB130_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB130_15
.LBB130_14:                             //   in Loop: Header=BB130_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB130_17
.LBB130_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cmp	x3, x9
	b.eq	.LBB130_14
// %bb.16:                              //   in Loop: Header=BB130_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB130_14
.LBB130_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB130_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB130_21
.LBB130_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB130_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB130_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB130_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end130:
	.size	_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc, .Lfunc_end130-_Z14test_variable1Il19custom_variable_xorIlEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB131_17
// %bb.1:
	eor	x13, x12, x10
	eor	x14, x11, x9
	cmp	w6, #0
	eor	x4, x14, x13
	b.le	.LBB131_13
// %bb.2:
	fmov	d0, x12
	fmov	d2, x10
	mov	w8, wzr
	fmov	d1, x11
	fmov	d3, x9
	mov	w9, w6
	and	x10, x9, #0x7ffffffc
	eor	x11, x13, x14
	add	x12, x7, #16
	eor	v0.16b, v0.16b, v2.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	eor	v1.16b, v1.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	eor	v0.16b, v0.16b, v1.16b
	dup	v0.2d, v0.d[0]
	b	.LBB131_4
.LBB131_3:                              //   in Loop: Header=BB131_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB131_17
.LBB131_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB131_7 Depth 2
                                        //     Child Loop BB131_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB131_6
// %bb.5:                               //   in Loop: Header=BB131_4 Depth=1
	mov	x18, xzr
	mov	x16, xzr
	b	.LBB131_9
.LBB131_6:                              // %.preheader2
                                        //   in Loop: Header=BB131_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB131_7:                              //   Parent Loop BB131_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #4
	add	x16, x16, #32
	eor	v3.16b, v3.16b, v0.16b
	eor	v4.16b, v4.16b, v0.16b
	add	v1.2d, v3.2d, v1.2d
	add	v2.2d, v4.2d, v2.2d
	b.ne	.LBB131_7
// %bb.8:                               //   in Loop: Header=BB131_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x18, x10
	addp	d1, v1.2d
	fmov	x16, d1
	b.eq	.LBB131_11
.LBB131_9:                              // %.preheader
                                        //   in Loop: Header=BB131_4 Depth=1
	add	x17, x7, x18, lsl #3
	sub	x18, x9, x18
.LBB131_10:                             //   Parent Loop BB131_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x19, [x17], #8
	subs	x18, x18, #1
	eor	x19, x19, x11
	add	x16, x19, x16
	b.ne	.LBB131_10
.LBB131_11:                             //   in Loop: Header=BB131_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzs	x17, d1
	eor	x17, x4, x17
	mul	x17, x17, x14
	cmp	x16, x17
	b.eq	.LBB131_3
// %bb.12:                              //   in Loop: Header=BB131_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB131_3
.LBB131_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB131_15
.LBB131_14:                             //   in Loop: Header=BB131_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB131_17
.LBB131_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cmp	x4, x9
	b.eq	.LBB131_14
// %bb.16:                              //   in Loop: Header=BB131_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB131_14
.LBB131_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB131_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB131_21
.LBB131_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB131_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB131_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB131_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end131:
	.size	_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end131-_Z14test_variable4Il28custom_multiple_variable_xorIlEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc,@function
_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc: // @_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB132_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB132_13
// %bb.2:
	dup	v0.2d, x3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB132_4
.LBB132_3:                              //   in Loop: Header=BB132_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB132_17
.LBB132_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB132_7 Depth 2
                                        //     Child Loop BB132_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB132_6
// %bb.5:                               //   in Loop: Header=BB132_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB132_9
.LBB132_6:                              // %.preheader2
                                        //   in Loop: Header=BB132_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB132_7:                              //   Parent Loop BB132_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.2d, v1.2d, v0.2d
	add	v2.2d, v2.2d, v0.2d
	subs	x16, x16, #4
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.2d, v1.2d, v4.2d
	add	v2.2d, v2.2d, v3.2d
	b.ne	.LBB132_7
// %bb.8:                               //   in Loop: Header=BB132_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB132_11
.LBB132_9:                              // %.preheader
                                        //   in Loop: Header=BB132_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB132_10:                             //   Parent Loop BB132_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	add	x15, x15, x3
	subs	x17, x17, #1
	add	x15, x15, x18
	b.ne	.LBB132_10
.LBB132_11:                             //   in Loop: Header=BB132_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	x16, d1
	add	x16, x3, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB132_3
// %bb.12:                              //   in Loop: Header=BB132_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB132_3
.LBB132_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB132_15
.LBB132_14:                             //   in Loop: Header=BB132_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB132_17
.LBB132_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	add	x10, x3, x10
	mul	x10, x10, x8
	cbz	x10, .LBB132_14
// %bb.16:                              //   in Loop: Header=BB132_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB132_14
.LBB132_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB132_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB132_21
.LBB132_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB132_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB132_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB132_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end132:
	.size	_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc, .Lfunc_end132-_Z14test_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc // -- Begin function _Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.p2align	2
	.type	_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc: // @_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w6, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w6, #1
	b.lt	.LBB133_17
// %bb.1:
	sxtw	x5, w7
	cmp	w7, #0
	mul	x5, x3, x5
	b.le	.LBB133_13
// %bb.2:
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #16
	adrp	x12, init_value
	and	x13, x10, #0x7ffffffc
	mov	w14, #8000                      // =0x1f40
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	b	.LBB133_4
.LBB133_3:                              //   in Loop: Header=BB133_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w6
	b.ge	.LBB133_17
.LBB133_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB133_7 Depth 2
                                        //     Child Loop BB133_10 Depth 2
	cmp	w7, #4
	b.hs	.LBB133_6
// %bb.5:                               //   in Loop: Header=BB133_4 Depth=1
	mov	x18, xzr
	mov	x16, xzr
	b	.LBB133_9
.LBB133_6:                              // %.preheader2
                                        //   in Loop: Header=BB133_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x16, x11
	mov	x17, x13
.LBB133_7:                              //   Parent Loop BB133_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x16, #-16]
	subs	x17, x17, #4
	add	x16, x16, #32
	add	v0.2d, v2.2d, v0.2d
	add	v1.2d, v3.2d, v1.2d
	b.ne	.LBB133_7
// %bb.8:                               //   in Loop: Header=BB133_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x13, x10
	mov	x18, x13
	addp	d0, v0.2d
	fmov	x16, d0
	b.eq	.LBB133_11
.LBB133_9:                              // %.preheader
                                        //   in Loop: Header=BB133_4 Depth=1
	add	x17, x8, x18, lsl #3
	sub	x18, x10, x18
.LBB133_10:                             //   Parent Loop BB133_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x19, [x17], #8
	subs	x18, x18, #1
	add	x16, x19, x16
	b.ne	.LBB133_10
.LBB133_11:                             //   in Loop: Header=BB133_4 Depth=1
	ldr	d0, [x12, :lo12:init_value]
	add	x16, x16, x5
	fcvtzu	x17, d0
	add	x17, x3, x17
	mul	x17, x17, x14
	cmp	x16, x17
	b.eq	.LBB133_3
// %bb.12:                              //   in Loop: Header=BB133_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB133_3
.LBB133_13:
	adrp	x8, init_value
	mov	w7, wzr
	mov	w9, #8000                       // =0x1f40
	ldr	d0, [x8, :lo12:init_value]
	adrp	x10, .L.str.179
	add	x10, x10, :lo12:.L.str.179
	b	.LBB133_15
.LBB133_14:                             //   in Loop: Header=BB133_15 Depth=1
	add	w7, w7, #1
	cmp	w7, w6
	b.ge	.LBB133_17
.LBB133_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x11, d0
	add	x11, x3, x11
	mul	x11, x11, x9
	cmp	x5, x11
	b.eq	.LBB133_14
// %bb.16:                              //   in Loop: Header=BB133_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x10
	bl	printf
	ldr	d0, [x8, :lo12:init_value]
	ldr	w6, [x4, :lo12:iterations]
	b	.LBB133_14
.LBB133_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB133_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB133_21
.LBB133_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB133_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB133_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB133_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end133:
	.size	_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc, .Lfunc_end133-_Z22test_hoisted_variable1Im19custom_add_variableImEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB134_17
// %bb.1:
	add	x4, x9, x4
	add	x8, x8, x10
	cmp	w6, #0
	add	x4, x8, x4
	b.le	.LBB134_13
// %bb.2:
	dup	v0.2d, x4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB134_4
.LBB134_3:                              //   in Loop: Header=BB134_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB134_17
.LBB134_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB134_7 Depth 2
                                        //     Child Loop BB134_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB134_6
// %bb.5:                               //   in Loop: Header=BB134_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB134_9
.LBB134_6:                              // %.preheader2
                                        //   in Loop: Header=BB134_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB134_7:                              //   Parent Loop BB134_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.2d, v0.2d, v1.2d
	add	v2.2d, v0.2d, v2.2d
	subs	x16, x16, #4
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.2d, v1.2d, v4.2d
	add	v2.2d, v2.2d, v3.2d
	b.ne	.LBB134_7
// %bb.8:                               //   in Loop: Header=BB134_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB134_11
.LBB134_9:                              // %.preheader
                                        //   in Loop: Header=BB134_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB134_10:                             //   Parent Loop BB134_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	add	x15, x4, x15
	subs	x17, x17, #1
	add	x15, x15, x18
	b.ne	.LBB134_10
.LBB134_11:                             //   in Loop: Header=BB134_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	x16, d1
	add	x16, x4, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB134_3
// %bb.12:                              //   in Loop: Header=BB134_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB134_3
.LBB134_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB134_15
.LBB134_14:                             //   in Loop: Header=BB134_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB134_17
.LBB134_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	add	x10, x4, x10
	mul	x10, x10, x8
	cbz	x10, .LBB134_14
// %bb.16:                              //   in Loop: Header=BB134_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB134_14
.LBB134_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB134_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB134_21
.LBB134_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB134_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB134_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB134_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end134:
	.size	_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end134-_Z14test_variable4Im28custom_add_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc,@function
_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc: // @_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB135_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB135_13
// %bb.2:
	dup	v0.2d, x3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB135_4
.LBB135_3:                              //   in Loop: Header=BB135_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB135_17
.LBB135_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB135_7 Depth 2
                                        //     Child Loop BB135_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB135_6
// %bb.5:                               //   in Loop: Header=BB135_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB135_9
.LBB135_6:                              // %.preheader2
                                        //   in Loop: Header=BB135_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB135_7:                              //   Parent Loop BB135_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.2d, v1.2d, v0.2d
	sub	v2.2d, v2.2d, v0.2d
	subs	x16, x16, #4
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.2d, v1.2d, v4.2d
	add	v2.2d, v2.2d, v3.2d
	b.ne	.LBB135_7
// %bb.8:                               //   in Loop: Header=BB135_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB135_11
.LBB135_9:                              // %.preheader
                                        //   in Loop: Header=BB135_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB135_10:                             //   Parent Loop BB135_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	sub	x15, x15, x3
	subs	x17, x17, #1
	add	x15, x15, x18
	b.ne	.LBB135_10
.LBB135_11:                             //   in Loop: Header=BB135_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	x16, d1
	sub	x16, x16, x3
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB135_3
// %bb.12:                              //   in Loop: Header=BB135_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB135_3
.LBB135_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB135_15
.LBB135_14:                             //   in Loop: Header=BB135_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB135_17
.LBB135_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	sub	x10, x10, x3
	mul	x10, x10, x8
	cbz	x10, .LBB135_14
// %bb.16:                              //   in Loop: Header=BB135_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB135_14
.LBB135_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB135_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB135_21
.LBB135_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB135_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB135_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB135_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end135:
	.size	_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc, .Lfunc_end135-_Z14test_variable1Im19custom_sub_variableImEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB136_17
// %bb.1:
	add	x4, x9, x4
	add	x8, x8, x10
	cmp	w6, #0
	add	x4, x8, x4
	b.le	.LBB136_13
// %bb.2:
	dup	v0.2d, x4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB136_4
.LBB136_3:                              //   in Loop: Header=BB136_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB136_17
.LBB136_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB136_7 Depth 2
                                        //     Child Loop BB136_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB136_6
// %bb.5:                               //   in Loop: Header=BB136_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB136_9
.LBB136_6:                              // %.preheader2
                                        //   in Loop: Header=BB136_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB136_7:                              //   Parent Loop BB136_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	v1.2d, v1.2d, v0.2d
	sub	v2.2d, v2.2d, v0.2d
	subs	x16, x16, #4
	ldp	q4, q3, [x15, #-16]
	add	x15, x15, #32
	add	v1.2d, v1.2d, v4.2d
	add	v2.2d, v2.2d, v3.2d
	b.ne	.LBB136_7
// %bb.8:                               //   in Loop: Header=BB136_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB136_11
.LBB136_9:                              // %.preheader
                                        //   in Loop: Header=BB136_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB136_10:                             //   Parent Loop BB136_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	sub	x15, x15, x4
	subs	x17, x17, #1
	add	x15, x15, x18
	b.ne	.LBB136_10
.LBB136_11:                             //   in Loop: Header=BB136_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	x16, d1
	sub	x16, x16, x4
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB136_3
// %bb.12:                              //   in Loop: Header=BB136_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB136_3
.LBB136_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB136_15
.LBB136_14:                             //   in Loop: Header=BB136_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB136_17
.LBB136_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	sub	x10, x10, x4
	mul	x10, x10, x8
	cbz	x10, .LBB136_14
// %bb.16:                              //   in Loop: Header=BB136_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB136_14
.LBB136_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB136_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB136_21
.LBB136_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB136_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB136_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB136_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end136:
	.size	_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end136-_Z14test_variable4Im28custom_sub_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc,@function
_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc: // @_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB137_17
// %bb.1:
	mov	w4, #8000                       // =0x1f40
	cmp	w7, #0
	mul	x4, x6, x4
	b.le	.LBB137_13
// %bb.2:
	mov	w10, w7
	mov	w9, wzr
	add	x11, x8, #8
	and	x12, x10, #0x7ffffffe
	adrp	x13, init_value
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB137_4
.LBB137_3:                              //   in Loop: Header=BB137_4 Depth=1
	add	w9, w9, #1
	cmp	w9, w5
	b.ge	.LBB137_17
.LBB137_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB137_7 Depth 2
                                        //     Child Loop BB137_10 Depth 2
	cmp	w7, #1
	b.ne	.LBB137_6
// %bb.5:                               //   in Loop: Header=BB137_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB137_9
.LBB137_6:                              // %.preheader2
                                        //   in Loop: Header=BB137_4 Depth=1
	mov	x15, xzr
	mov	x16, xzr
	mov	x17, x11
	mov	x18, x12
.LBB137_7:                              //   Parent Loop BB137_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x20, x19, [x17, #-8]
	subs	x18, x18, #2
	add	x17, x17, #16
	madd	x15, x20, x6, x15
	madd	x16, x19, x6, x16
	b.ne	.LBB137_7
// %bb.8:                               //   in Loop: Header=BB137_4 Depth=1
	cmp	x12, x10
	add	x15, x16, x15
	mov	x17, x12
	b.eq	.LBB137_11
.LBB137_9:                              // %.preheader
                                        //   in Loop: Header=BB137_4 Depth=1
	add	x16, x8, x17, lsl #3
	sub	x17, x10, x17
.LBB137_10:                             //   Parent Loop BB137_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	madd	x15, x18, x6, x15
	b.ne	.LBB137_10
.LBB137_11:                             //   in Loop: Header=BB137_4 Depth=1
	ldr	d0, [x13, :lo12:init_value]
	fcvtzu	x16, d0
	mul	x16, x4, x16
	cmp	x15, x16
	b.eq	.LBB137_3
// %bb.12:                              //   in Loop: Header=BB137_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB137_3
.LBB137_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB137_15
.LBB137_14:                             //   in Loop: Header=BB137_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB137_17
.LBB137_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	mul	x9, x4, x9
	cbz	x9, .LBB137_14
// %bb.16:                              //   in Loop: Header=BB137_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB137_14
.LBB137_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB137_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB137_21
.LBB137_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB137_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB137_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB137_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end137:
	.size	_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc, .Lfunc_end137-_Z14test_variable1Im24custom_multiply_variableImEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB138_17
// %bb.1:
	mul	x11, x8, x4
	mov	w8, #8000                       // =0x1f40
	cmp	w6, #0
	mul	x4, x11, x9
	mul	x4, x4, x10
	mul	x4, x4, x8
	b.le	.LBB138_13
// %bb.2:
	mul	x10, x11, x10
	mov	w8, wzr
	add	x12, x7, #8
	adrp	x13, init_value
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	mul	x9, x10, x9
	mov	w10, w6
	and	x11, x10, #0x7ffffffe
	b	.LBB138_4
.LBB138_3:                              //   in Loop: Header=BB138_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB138_17
.LBB138_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB138_7 Depth 2
                                        //     Child Loop BB138_10 Depth 2
	cmp	w6, #1
	b.ne	.LBB138_6
// %bb.5:                               //   in Loop: Header=BB138_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB138_9
.LBB138_6:                              // %.preheader2
                                        //   in Loop: Header=BB138_4 Depth=1
	mov	x15, xzr
	mov	x16, xzr
	mov	x17, x12
	mov	x18, x11
.LBB138_7:                              //   Parent Loop BB138_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x20, x19, [x17, #-8]
	subs	x18, x18, #2
	add	x17, x17, #16
	madd	x15, x9, x20, x15
	madd	x16, x9, x19, x16
	b.ne	.LBB138_7
// %bb.8:                               //   in Loop: Header=BB138_4 Depth=1
	cmp	x11, x10
	add	x15, x16, x15
	mov	x17, x11
	b.eq	.LBB138_11
.LBB138_9:                              // %.preheader
                                        //   in Loop: Header=BB138_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x10, x17
.LBB138_10:                             //   Parent Loop BB138_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	madd	x15, x9, x18, x15
	b.ne	.LBB138_10
.LBB138_11:                             //   in Loop: Header=BB138_4 Depth=1
	ldr	d0, [x13, :lo12:init_value]
	fcvtzu	x16, d0
	mul	x16, x4, x16
	cmp	x15, x16
	b.eq	.LBB138_3
// %bb.12:                              //   in Loop: Header=BB138_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB138_3
.LBB138_13:
	adrp	x7, init_value
	mov	w6, wzr
	adrp	x8, .L.str.179
	add	x8, x8, :lo12:.L.str.179
	ldr	d0, [x7, :lo12:init_value]
	b	.LBB138_15
.LBB138_14:                             //   in Loop: Header=BB138_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB138_17
.LBB138_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	mul	x9, x4, x9
	cbz	x9, .LBB138_14
// %bb.16:                              //   in Loop: Header=BB138_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x8
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB138_14
.LBB138_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB138_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB138_21
.LBB138_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB138_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB138_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB138_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end138:
	.size	_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end138-_Z14test_variable4Im33custom_multiply_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB139_17
// %bb.1:
	mul	x11, x8, x4
	cmp	w6, #0
	mul	x4, x11, x9
	mul	x4, x4, x10
	b.le	.LBB139_13
// %bb.2:
	mul	x10, x11, x10
	mov	w8, wzr
	add	x12, x7, #16
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	mul	x9, x10, x9
	mov	w10, w6
	and	x11, x10, #0x7ffffffc
	dup	v0.2d, x9
	b	.LBB139_4
.LBB139_3:                              //   in Loop: Header=BB139_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB139_17
.LBB139_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB139_7 Depth 2
                                        //     Child Loop BB139_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB139_6
// %bb.5:                               //   in Loop: Header=BB139_4 Depth=1
	mov	x18, xzr
	mov	x16, xzr
	b	.LBB139_9
.LBB139_6:                              // %.preheader2
                                        //   in Loop: Header=BB139_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x11
.LBB139_7:                              //   Parent Loop BB139_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v1.2d, v1.2d, v0.2d
	add	v2.2d, v2.2d, v0.2d
	subs	x17, x17, #4
	ldp	q4, q3, [x16, #-16]
	add	x16, x16, #32
	add	v1.2d, v1.2d, v4.2d
	add	v2.2d, v2.2d, v3.2d
	b.ne	.LBB139_7
// %bb.8:                               //   in Loop: Header=BB139_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x11, x10
	mov	x18, x11
	addp	d1, v1.2d
	fmov	x16, d1
	b.eq	.LBB139_11
.LBB139_9:                              // %.preheader
                                        //   in Loop: Header=BB139_4 Depth=1
	add	x17, x7, x18, lsl #3
	sub	x18, x10, x18
.LBB139_10:                             //   Parent Loop BB139_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x19, [x17], #8
	add	x16, x16, x9
	subs	x18, x18, #1
	add	x16, x16, x19
	b.ne	.LBB139_10
.LBB139_11:                             //   in Loop: Header=BB139_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzu	x17, d1
	add	x17, x4, x17
	mul	x17, x17, x14
	cmp	x16, x17
	b.eq	.LBB139_3
// %bb.12:                              //   in Loop: Header=BB139_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB139_3
.LBB139_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB139_15
.LBB139_14:                             //   in Loop: Header=BB139_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB139_17
.LBB139_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	add	x10, x4, x10
	mul	x10, x10, x8
	cbz	x10, .LBB139_14
// %bb.16:                              //   in Loop: Header=BB139_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB139_14
.LBB139_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB139_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB139_21
.LBB139_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB139_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB139_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB139_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end139:
	.size	_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end139-_Z14test_variable4Im34custom_multiply_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc,@function
_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc: // @_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB140_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB140_13
// %bb.2:
	mov	w9, w6
	mov	w8, wzr
	add	x10, x7, #8
	adrp	x11, init_value
	and	x12, x9, #0x7ffffffe
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB140_4
.LBB140_3:                              //   in Loop: Header=BB140_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB140_17
.LBB140_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB140_7 Depth 2
                                        //     Child Loop BB140_10 Depth 2
	cmp	w6, #1
	b.ne	.LBB140_6
// %bb.5:                               //   in Loop: Header=BB140_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB140_9
.LBB140_6:                              // %.preheader2
                                        //   in Loop: Header=BB140_4 Depth=1
	mov	x15, xzr
	mov	x16, xzr
	mov	x17, x10
	mov	x18, x12
.LBB140_7:                              //   Parent Loop BB140_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x19, x20, [x17, #-8]
	subs	x18, x18, #2
	add	x17, x17, #16
	udiv	x19, x19, x3
	udiv	x20, x20, x3
	add	x15, x19, x15
	add	x16, x20, x16
	b.ne	.LBB140_7
// %bb.8:                               //   in Loop: Header=BB140_4 Depth=1
	cmp	x12, x9
	add	x15, x16, x15
	mov	x17, x12
	b.eq	.LBB140_11
.LBB140_9:                              // %.preheader
                                        //   in Loop: Header=BB140_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB140_10:                             //   Parent Loop BB140_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	udiv	x18, x18, x3
	add	x15, x18, x15
	b.ne	.LBB140_10
.LBB140_11:                             //   in Loop: Header=BB140_4 Depth=1
	ldr	d0, [x11, :lo12:init_value]
	fcvtzu	x16, d0
	udiv	x16, x16, x3
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB140_3
// %bb.12:                              //   in Loop: Header=BB140_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB140_3
.LBB140_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB140_15
.LBB140_14:                             //   in Loop: Header=BB140_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB140_17
.LBB140_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	udiv	x10, x10, x3
	mul	x10, x10, x8
	cbz	x10, .LBB140_14
// %bb.16:                              //   in Loop: Header=BB140_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB140_14
.LBB140_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB140_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB140_21
.LBB140_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB140_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB140_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB140_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end140:
	.size	_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc, .Lfunc_end140-_Z14test_variable1Im22custom_divide_variableImEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	bl	clock
	adrp	x7, iterations
	adrp	x4, start_time
	adrp	x1, current_test
	ldr	w8, [x7, :lo12:iterations]
	str	x0, [x4, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB141_17
// %bb.1:
	cmp	w9, #0
	b.le	.LBB141_13
// %bb.2:
	mov	w12, w9
	mov	w11, wzr
	add	x13, x10, #8
	adrp	x14, init_value
	and	x15, x12, #0x7ffffffe
	mov	w16, #8000                      // =0x1f40
	adrp	x17, .L.str.179
	add	x17, x17, :lo12:.L.str.179
	b	.LBB141_4
.LBB141_3:                              //   in Loop: Header=BB141_4 Depth=1
	add	w11, w11, #1
	cmp	w11, w8
	b.ge	.LBB141_17
.LBB141_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB141_7 Depth 2
                                        //     Child Loop BB141_10 Depth 2
	cmp	w9, #1
	b.ne	.LBB141_6
// %bb.5:                               //   in Loop: Header=BB141_4 Depth=1
	mov	x20, xzr
	mov	x18, xzr
	b	.LBB141_9
.LBB141_6:                              // %.preheader2
                                        //   in Loop: Header=BB141_4 Depth=1
	mov	x18, xzr
	mov	x19, xzr
	mov	x20, x13
	mov	x21, x15
.LBB141_7:                              //   Parent Loop BB141_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x22, x24, [x20, #-8]
	subs	x21, x21, #2
	add	x20, x20, #16
	udiv	x23, x22, x6
	udiv	x22, x24, x6
	udiv	x23, x23, x5
	udiv	x22, x22, x5
	udiv	x23, x23, x3
	udiv	x24, x22, x3
	udiv	x22, x23, x2
	udiv	x23, x24, x2
	add	x18, x22, x18
	add	x19, x23, x19
	b.ne	.LBB141_7
// %bb.8:                               //   in Loop: Header=BB141_4 Depth=1
	cmp	x15, x12
	add	x18, x19, x18
	mov	x20, x15
	b.eq	.LBB141_11
.LBB141_9:                              // %.preheader
                                        //   in Loop: Header=BB141_4 Depth=1
	add	x19, x10, x20, lsl #3
	sub	x20, x12, x20
.LBB141_10:                             //   Parent Loop BB141_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x21, [x19], #8
	subs	x20, x20, #1
	udiv	x21, x21, x6
	udiv	x21, x21, x5
	udiv	x21, x21, x3
	udiv	x21, x21, x2
	add	x18, x21, x18
	b.ne	.LBB141_10
.LBB141_11:                             //   in Loop: Header=BB141_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	fcvtzu	x19, d0
	udiv	x19, x19, x6
	udiv	x19, x19, x5
	udiv	x19, x19, x3
	udiv	x19, x19, x2
	mul	x19, x19, x16
	cmp	x18, x19
	b.eq	.LBB141_3
// %bb.12:                              //   in Loop: Header=BB141_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x17
	bl	printf
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB141_3
.LBB141_13:
	adrp	x10, init_value
	mov	w9, wzr
	mov	w11, #8000                      // =0x1f40
	ldr	d0, [x10, :lo12:init_value]
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB141_15
.LBB141_14:                             //   in Loop: Header=BB141_15 Depth=1
	add	w9, w9, #1
	cmp	w9, w8
	b.ge	.LBB141_17
.LBB141_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x13, d0
	udiv	x13, x13, x6
	udiv	x13, x13, x5
	udiv	x13, x13, x3
	udiv	x13, x13, x2
	mul	x13, x13, x11
	cbz	x13, .LBB141_14
// %bb.16:                              //   in Loop: Header=BB141_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	d0, [x10, :lo12:init_value]
	ldr	w8, [x7, :lo12:iterations]
	b	.LBB141_14
.LBB141_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x4, [x4, :lo12:start_time]
	ldr	x3, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x2, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x3, .LBB141_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB141_21
.LBB141_19:
	add	w6, w8, #10
	mov	x0, x3
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB141_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x3, x0
.LBB141_21:
	sub	x2, x2, x4
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x3, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB141_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end141:
	.size	_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end141-_Z14test_variable4Im31custom_divide_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB142_17
// %bb.1:
	udiv	x9, x10, x9
	cmp	w6, #0
	udiv	x8, x9, x8
	udiv	x4, x8, x4
	b.le	.LBB142_13
// %bb.2:
	dup	v0.2d, x4
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB142_4
.LBB142_3:                              //   in Loop: Header=BB142_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB142_17
.LBB142_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB142_7 Depth 2
                                        //     Child Loop BB142_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB142_6
// %bb.5:                               //   in Loop: Header=BB142_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB142_9
.LBB142_6:                              // %.preheader2
                                        //   in Loop: Header=BB142_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB142_7:                              //   Parent Loop BB142_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x15, #-16]
	subs	x16, x16, #4
	add	x15, x15, #32
	add	v1.2d, v3.2d, v1.2d
	add	v2.2d, v4.2d, v2.2d
	add	v1.2d, v1.2d, v0.2d
	add	v2.2d, v2.2d, v0.2d
	b.ne	.LBB142_7
// %bb.8:                               //   in Loop: Header=BB142_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB142_11
.LBB142_9:                              // %.preheader
                                        //   in Loop: Header=BB142_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB142_10:                             //   Parent Loop BB142_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	add	x15, x15, x4
	subs	x17, x17, #1
	add	x15, x18, x15
	b.ne	.LBB142_10
.LBB142_11:                             //   in Loop: Header=BB142_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	x16, d1
	add	x16, x4, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB142_3
// %bb.12:                              //   in Loop: Header=BB142_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB142_3
.LBB142_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB142_15
.LBB142_14:                             //   in Loop: Header=BB142_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB142_17
.LBB142_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	add	x10, x4, x10
	mul	x10, x10, x8
	cbz	x10, .LBB142_14
// %bb.16:                              //   in Loop: Header=BB142_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB142_14
.LBB142_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB142_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB142_21
.LBB142_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB142_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB142_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB142_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end142:
	.size	_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end142-_Z14test_variable4Im32custom_divide_multiple_variable2ImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB143_17
// %bb.1:
	mul	x9, x9, x10
	cmp	w7, #0
	udiv	x9, x9, x4
	sub	x4, x6, x9
	b.le	.LBB143_13
// %bb.2:
	dup	v0.2d, x6
	dup	v1.2d, x9
	mov	w11, w7
	mov	w10, wzr
	and	x12, x11, #0x7ffffffc
	add	x13, x8, #16
	adrp	x14, init_value
	mov	w15, #8000                      // =0x1f40
	adrp	x16, .L.str.179
	add	x16, x16, :lo12:.L.str.179
	b	.LBB143_4
.LBB143_3:                              //   in Loop: Header=BB143_4 Depth=1
	add	w10, w10, #1
	cmp	w10, w5
	b.ge	.LBB143_17
.LBB143_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB143_7 Depth 2
                                        //     Child Loop BB143_10 Depth 2
	cmp	w7, #4
	b.hs	.LBB143_6
// %bb.5:                               //   in Loop: Header=BB143_4 Depth=1
	mov	x19, xzr
	mov	x17, xzr
	b	.LBB143_9
.LBB143_6:                              // %.preheader2
                                        //   in Loop: Header=BB143_4 Depth=1
	movi	v2.2d, #0000000000000000
	movi	v3.2d, #0000000000000000
	mov	x17, x13
	mov	x18, x12
.LBB143_7:                              //   Parent Loop BB143_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	v2.2d, v2.2d, v0.2d
	add	v3.2d, v3.2d, v0.2d
	subs	x18, x18, #4
	ldp	q5, q4, [x17, #-16]
	add	x17, x17, #32
	add	v2.2d, v2.2d, v5.2d
	add	v3.2d, v3.2d, v4.2d
	sub	v2.2d, v2.2d, v1.2d
	sub	v3.2d, v3.2d, v1.2d
	b.ne	.LBB143_7
// %bb.8:                               //   in Loop: Header=BB143_4 Depth=1
	add	v2.2d, v3.2d, v2.2d
	cmp	x12, x11
	mov	x19, x12
	addp	d2, v2.2d
	fmov	x17, d2
	b.eq	.LBB143_11
.LBB143_9:                              // %.preheader
                                        //   in Loop: Header=BB143_4 Depth=1
	add	x18, x8, x19, lsl #3
	sub	x19, x11, x19
.LBB143_10:                             //   Parent Loop BB143_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x20, [x18], #8
	add	x17, x17, x6
	subs	x19, x19, #1
	add	x17, x17, x20
	sub	x17, x17, x9
	b.ne	.LBB143_10
.LBB143_11:                             //   in Loop: Header=BB143_4 Depth=1
	ldr	d2, [x14, :lo12:init_value]
	fcvtzu	x18, d2
	add	x18, x4, x18
	mul	x18, x18, x15
	cmp	x17, x18
	b.eq	.LBB143_3
// %bb.12:                              //   in Loop: Header=BB143_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x16
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB143_3
.LBB143_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB143_15
.LBB143_14:                             //   in Loop: Header=BB143_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB143_17
.LBB143_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	add	x10, x4, x10
	mul	x10, x10, x8
	cbz	x10, .LBB143_14
// %bb.16:                              //   in Loop: Header=BB143_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB143_14
.LBB143_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB143_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB143_21
.LBB143_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB143_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB143_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB143_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end143:
	.size	_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end143-_Z14test_variable4Im30custom_mixed_multiple_variableImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc,@function
_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc: // @_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB144_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB144_13
// %bb.2:
	dup	v0.2d, x3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB144_4
.LBB144_3:                              //   in Loop: Header=BB144_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB144_17
.LBB144_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB144_7 Depth 2
                                        //     Child Loop BB144_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB144_6
// %bb.5:                               //   in Loop: Header=BB144_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB144_9
.LBB144_6:                              // %.preheader2
                                        //   in Loop: Header=BB144_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB144_7:                              //   Parent Loop BB144_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q5, [x15, #-16]
	subs	x16, x16, #4
	add	x15, x15, #32
	and	v4.16b, v3.16b, v0.16b
	and	v3.16b, v5.16b, v0.16b
	add	v1.2d, v4.2d, v1.2d
	add	v2.2d, v3.2d, v2.2d
	b.ne	.LBB144_7
// %bb.8:                               //   in Loop: Header=BB144_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB144_11
.LBB144_9:                              // %.preheader
                                        //   in Loop: Header=BB144_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB144_10:                             //   Parent Loop BB144_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	and	x18, x18, x3
	add	x15, x18, x15
	b.ne	.LBB144_10
.LBB144_11:                             //   in Loop: Header=BB144_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	x16, d1
	and	x16, x3, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB144_3
// %bb.12:                              //   in Loop: Header=BB144_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB144_3
.LBB144_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB144_15
.LBB144_14:                             //   in Loop: Header=BB144_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB144_17
.LBB144_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	and	x10, x3, x10
	mul	x10, x10, x8
	cbz	x10, .LBB144_14
// %bb.16:                              //   in Loop: Header=BB144_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB144_14
.LBB144_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB144_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB144_21
.LBB144_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB144_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB144_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB144_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end144:
	.size	_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc, .Lfunc_end144-_Z14test_variable1Im19custom_variable_andImEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB145_17
// %bb.1:
	and	x13, x12, x9
	and	x14, x11, x10
	cmp	w6, #0
	and	x4, x14, x13
	b.le	.LBB145_13
// %bb.2:
	fmov	d0, x12
	fmov	d1, x9
	mov	w9, w6
	fmov	d2, x11
	fmov	d3, x10
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	and	x11, x13, x14
	add	x12, x7, #16
	and	v0.16b, v0.16b, v1.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	and	v1.16b, v2.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	and	v0.16b, v0.16b, v1.16b
	dup	v0.2d, v0.d[0]
	b	.LBB145_4
.LBB145_3:                              //   in Loop: Header=BB145_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB145_17
.LBB145_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB145_7 Depth 2
                                        //     Child Loop BB145_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB145_6
// %bb.5:                               //   in Loop: Header=BB145_4 Depth=1
	mov	x18, xzr
	mov	x16, xzr
	b	.LBB145_9
.LBB145_6:                              // %.preheader2
                                        //   in Loop: Header=BB145_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB145_7:                              //   Parent Loop BB145_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #4
	add	x16, x16, #32
	and	v3.16b, v3.16b, v0.16b
	and	v4.16b, v4.16b, v0.16b
	add	v1.2d, v3.2d, v1.2d
	add	v2.2d, v4.2d, v2.2d
	b.ne	.LBB145_7
// %bb.8:                               //   in Loop: Header=BB145_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x18, x10
	addp	d1, v1.2d
	fmov	x16, d1
	b.eq	.LBB145_11
.LBB145_9:                              // %.preheader
                                        //   in Loop: Header=BB145_4 Depth=1
	add	x17, x7, x18, lsl #3
	sub	x18, x9, x18
.LBB145_10:                             //   Parent Loop BB145_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x19, [x17], #8
	subs	x18, x18, #1
	and	x19, x19, x11
	add	x16, x19, x16
	b.ne	.LBB145_10
.LBB145_11:                             //   in Loop: Header=BB145_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzu	x17, d1
	and	x17, x4, x17
	mul	x17, x17, x14
	cmp	x16, x17
	b.eq	.LBB145_3
// %bb.12:                              //   in Loop: Header=BB145_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB145_3
.LBB145_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB145_15
.LBB145_14:                             //   in Loop: Header=BB145_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB145_17
.LBB145_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	and	x10, x4, x10
	mul	x10, x10, x8
	cbz	x10, .LBB145_14
// %bb.16:                              //   in Loop: Header=BB145_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB145_14
.LBB145_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB145_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB145_21
.LBB145_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB145_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB145_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB145_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end145:
	.size	_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end145-_Z14test_variable4Im28custom_multiple_variable_andImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc,@function
_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc: // @_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB146_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB146_13
// %bb.2:
	dup	v0.2d, x3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB146_4
.LBB146_3:                              //   in Loop: Header=BB146_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB146_17
.LBB146_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB146_7 Depth 2
                                        //     Child Loop BB146_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB146_6
// %bb.5:                               //   in Loop: Header=BB146_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB146_9
.LBB146_6:                              // %.preheader2
                                        //   in Loop: Header=BB146_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB146_7:                              //   Parent Loop BB146_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q5, [x15, #-16]
	subs	x16, x16, #4
	add	x15, x15, #32
	orr	v4.16b, v3.16b, v0.16b
	orr	v3.16b, v5.16b, v0.16b
	add	v1.2d, v4.2d, v1.2d
	add	v2.2d, v3.2d, v2.2d
	b.ne	.LBB146_7
// %bb.8:                               //   in Loop: Header=BB146_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB146_11
.LBB146_9:                              // %.preheader
                                        //   in Loop: Header=BB146_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB146_10:                             //   Parent Loop BB146_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	orr	x18, x18, x3
	add	x15, x18, x15
	b.ne	.LBB146_10
.LBB146_11:                             //   in Loop: Header=BB146_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	x16, d1
	orr	x16, x3, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB146_3
// %bb.12:                              //   in Loop: Header=BB146_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB146_3
.LBB146_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB146_15
.LBB146_14:                             //   in Loop: Header=BB146_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB146_17
.LBB146_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	orr	x10, x3, x10
	mul	x10, x10, x8
	cbz	x10, .LBB146_14
// %bb.16:                              //   in Loop: Header=BB146_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB146_14
.LBB146_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB146_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB146_21
.LBB146_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB146_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB146_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB146_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end146:
	.size	_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc, .Lfunc_end146-_Z14test_variable1Im18custom_variable_orImEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB147_17
// %bb.1:
	orr	x13, x12, x9
	orr	x14, x11, x10
	cmp	w6, #0
	orr	x4, x14, x13
	b.le	.LBB147_13
// %bb.2:
	fmov	d0, x12
	fmov	d1, x9
	mov	w9, w6
	fmov	d2, x11
	fmov	d3, x10
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	orr	x11, x13, x14
	add	x12, x7, #16
	orr	v0.16b, v0.16b, v1.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	orr	v1.16b, v2.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	orr	v0.16b, v0.16b, v1.16b
	dup	v0.2d, v0.d[0]
	b	.LBB147_4
.LBB147_3:                              //   in Loop: Header=BB147_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB147_17
.LBB147_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB147_7 Depth 2
                                        //     Child Loop BB147_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB147_6
// %bb.5:                               //   in Loop: Header=BB147_4 Depth=1
	mov	x18, xzr
	mov	x16, xzr
	b	.LBB147_9
.LBB147_6:                              // %.preheader2
                                        //   in Loop: Header=BB147_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB147_7:                              //   Parent Loop BB147_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #4
	add	x16, x16, #32
	orr	v3.16b, v3.16b, v0.16b
	orr	v4.16b, v4.16b, v0.16b
	add	v1.2d, v3.2d, v1.2d
	add	v2.2d, v4.2d, v2.2d
	b.ne	.LBB147_7
// %bb.8:                               //   in Loop: Header=BB147_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x18, x10
	addp	d1, v1.2d
	fmov	x16, d1
	b.eq	.LBB147_11
.LBB147_9:                              // %.preheader
                                        //   in Loop: Header=BB147_4 Depth=1
	add	x17, x7, x18, lsl #3
	sub	x18, x9, x18
.LBB147_10:                             //   Parent Loop BB147_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x19, [x17], #8
	subs	x18, x18, #1
	orr	x19, x19, x11
	add	x16, x19, x16
	b.ne	.LBB147_10
.LBB147_11:                             //   in Loop: Header=BB147_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzu	x17, d1
	orr	x17, x4, x17
	mul	x17, x17, x14
	cmp	x16, x17
	b.eq	.LBB147_3
// %bb.12:                              //   in Loop: Header=BB147_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB147_3
.LBB147_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB147_15
.LBB147_14:                             //   in Loop: Header=BB147_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB147_17
.LBB147_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	orr	x10, x4, x10
	mul	x10, x10, x8
	cbz	x10, .LBB147_14
// %bb.16:                              //   in Loop: Header=BB147_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB147_14
.LBB147_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB147_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB147_21
.LBB147_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB147_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB147_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB147_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end147:
	.size	_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end147-_Z14test_variable4Im27custom_multiple_variable_orImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc // -- Begin function _Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc,@function
_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc: // @_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
	bl	clock
	adrp	x4, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x4, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB148_17
// %bb.1:
	cmp	w6, #0
	b.le	.LBB148_13
// %bb.2:
	dup	v0.2d, x3
	mov	w9, w6
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	add	x11, x7, #16
	adrp	x12, init_value
	mov	w13, #8000                      // =0x1f40
	adrp	x14, .L.str.179
	add	x14, x14, :lo12:.L.str.179
	b	.LBB148_4
.LBB148_3:                              //   in Loop: Header=BB148_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB148_17
.LBB148_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB148_7 Depth 2
                                        //     Child Loop BB148_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB148_6
// %bb.5:                               //   in Loop: Header=BB148_4 Depth=1
	mov	x17, xzr
	mov	x15, xzr
	b	.LBB148_9
.LBB148_6:                              // %.preheader2
                                        //   in Loop: Header=BB148_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x15, x11
	mov	x16, x10
.LBB148_7:                              //   Parent Loop BB148_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q5, [x15, #-16]
	subs	x16, x16, #4
	add	x15, x15, #32
	eor	v4.16b, v3.16b, v0.16b
	eor	v3.16b, v5.16b, v0.16b
	add	v1.2d, v4.2d, v1.2d
	add	v2.2d, v3.2d, v2.2d
	b.ne	.LBB148_7
// %bb.8:                               //   in Loop: Header=BB148_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x17, x10
	addp	d1, v1.2d
	fmov	x15, d1
	b.eq	.LBB148_11
.LBB148_9:                              // %.preheader
                                        //   in Loop: Header=BB148_4 Depth=1
	add	x16, x7, x17, lsl #3
	sub	x17, x9, x17
.LBB148_10:                             //   Parent Loop BB148_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x18, [x16], #8
	subs	x17, x17, #1
	eor	x18, x18, x3
	add	x15, x18, x15
	b.ne	.LBB148_10
.LBB148_11:                             //   in Loop: Header=BB148_4 Depth=1
	ldr	d1, [x12, :lo12:init_value]
	fcvtzu	x16, d1
	eor	x16, x3, x16
	mul	x16, x16, x13
	cmp	x15, x16
	b.eq	.LBB148_3
// %bb.12:                              //   in Loop: Header=BB148_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x14
	bl	printf
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB148_3
.LBB148_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB148_15
.LBB148_14:                             //   in Loop: Header=BB148_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB148_17
.LBB148_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	eor	x10, x3, x10
	mul	x10, x10, x8
	cbz	x10, .LBB148_14
// %bb.16:                              //   in Loop: Header=BB148_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x4, :lo12:iterations]
	b	.LBB148_14
.LBB148_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB148_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB148_21
.LBB148_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB148_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB148_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB148_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end148:
	.size	_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc, .Lfunc_end148-_Z14test_variable1Im19custom_variable_xorImEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc // -- Begin function _Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	str	x19, [sp, #16]                  // 8-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w5, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w5, #1
	b.lt	.LBB149_17
// %bb.1:
	eor	x13, x12, x9
	eor	x14, x11, x10
	cmp	w6, #0
	eor	x4, x14, x13
	b.le	.LBB149_13
// %bb.2:
	fmov	d0, x12
	fmov	d1, x9
	mov	w9, w6
	fmov	d2, x11
	fmov	d3, x10
	mov	w8, wzr
	and	x10, x9, #0x7ffffffc
	eor	x11, x13, x14
	add	x12, x7, #16
	eor	v0.16b, v0.16b, v1.16b
	adrp	x13, init_value
	mov	w14, #8000                      // =0x1f40
	eor	v1.16b, v2.16b, v3.16b
	adrp	x15, .L.str.179
	add	x15, x15, :lo12:.L.str.179
	eor	v0.16b, v0.16b, v1.16b
	dup	v0.2d, v0.d[0]
	b	.LBB149_4
.LBB149_3:                              //   in Loop: Header=BB149_4 Depth=1
	add	w8, w8, #1
	cmp	w8, w5
	b.ge	.LBB149_17
.LBB149_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB149_7 Depth 2
                                        //     Child Loop BB149_10 Depth 2
	cmp	w6, #4
	b.hs	.LBB149_6
// %bb.5:                               //   in Loop: Header=BB149_4 Depth=1
	mov	x18, xzr
	mov	x16, xzr
	b	.LBB149_9
.LBB149_6:                              // %.preheader2
                                        //   in Loop: Header=BB149_4 Depth=1
	movi	v1.2d, #0000000000000000
	movi	v2.2d, #0000000000000000
	mov	x16, x12
	mov	x17, x10
.LBB149_7:                              //   Parent Loop BB149_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q4, [x16, #-16]
	subs	x17, x17, #4
	add	x16, x16, #32
	eor	v3.16b, v3.16b, v0.16b
	eor	v4.16b, v4.16b, v0.16b
	add	v1.2d, v3.2d, v1.2d
	add	v2.2d, v4.2d, v2.2d
	b.ne	.LBB149_7
// %bb.8:                               //   in Loop: Header=BB149_4 Depth=1
	add	v1.2d, v2.2d, v1.2d
	cmp	x10, x9
	mov	x18, x10
	addp	d1, v1.2d
	fmov	x16, d1
	b.eq	.LBB149_11
.LBB149_9:                              // %.preheader
                                        //   in Loop: Header=BB149_4 Depth=1
	add	x17, x7, x18, lsl #3
	sub	x18, x9, x18
.LBB149_10:                             //   Parent Loop BB149_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x19, [x17], #8
	subs	x18, x18, #1
	eor	x19, x19, x11
	add	x16, x19, x16
	b.ne	.LBB149_10
.LBB149_11:                             //   in Loop: Header=BB149_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fcvtzu	x17, d1
	eor	x17, x4, x17
	mul	x17, x17, x14
	cmp	x16, x17
	b.eq	.LBB149_3
// %bb.12:                              //   in Loop: Header=BB149_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x15
	bl	printf
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB149_3
.LBB149_13:
	adrp	x7, init_value
	mov	w6, wzr
	mov	w8, #8000                       // =0x1f40
	ldr	d0, [x7, :lo12:init_value]
	adrp	x9, .L.str.179
	add	x9, x9, :lo12:.L.str.179
	b	.LBB149_15
.LBB149_14:                             //   in Loop: Header=BB149_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w5
	b.ge	.LBB149_17
.LBB149_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x10, d0
	eor	x10, x4, x10
	mul	x10, x10, x8
	cbz	x10, .LBB149_14
// %bb.16:                              //   in Loop: Header=BB149_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x9
	bl	printf
	ldr	d0, [x7, :lo12:init_value]
	ldr	w5, [x3, :lo12:iterations]
	b	.LBB149_14
.LBB149_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB149_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB149_21
.LBB149_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB149_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB149_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldr	x19, [sp, #16]                  // 8-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB149_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end149:
	.size	_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end149-_Z14test_variable4Im28custom_multiple_variable_xorImEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc
.LCPI150_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI150_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc,@function
_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc: // @_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	d9, d8, [sp, #-32]!             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_remember_state
                                        // kill: def $s0 killed $s0 def $q0
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB150_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB150_13
// %bb.2:
	mov	w13, #-973471744                // =0xc5fa0000
	dup	v1.4s, v0.s[0]
	adrp	x12, .LCPI150_1
	adrp	x14, .LCPI150_0
	fmov	s4, w13
	mov	w8, w5
	ldr	d2, [x12, :lo12:.LCPI150_1]
	ldr	d3, [x14, :lo12:.LCPI150_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffff8
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB150_4
.LBB150_3:                              //   in Loop: Header=BB150_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB150_17
.LBB150_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB150_7 Depth 2
                                        //     Child Loop BB150_10 Depth 2
	movi	d5, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB150_6
// %bb.5:                               //   in Loop: Header=BB150_4 Depth=1
	mov	x14, xzr
	b	.LBB150_9
.LBB150_6:                              // %.preheader2
                                        //   in Loop: Header=BB150_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB150_7:                              //   Parent Loop BB150_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q7, q6, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	fadd	v7.4s, v1.4s, v7.4s
	mov	s8, v7.s[1]
	fadd	s9, s5, s7
	mov	s5, v7.s[2]
	mov	s7, v7.s[3]
	fadd	s8, s9, s8
	fadd	s8, s8, s5
	fadd	v5.4s, v1.4s, v6.4s
	fadd	s6, s8, s7
	mov	s7, v5.s[1]
	fadd	s8, s6, s5
	mov	s6, v5.s[2]
	mov	s5, v5.s[3]
	fadd	s7, s8, s7
	fadd	s6, s7, s6
	fadd	s5, s6, s5
	b.ne	.LBB150_7
// %bb.8:                               //   in Loop: Header=BB150_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB150_11
.LBB150_9:                              // %.preheader
                                        //   in Loop: Header=BB150_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB150_10:                             //   Parent Loop BB150_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s6, [x13], #4
	subs	x14, x14, #1
	fadd	s6, s0, s6
	fadd	s5, s5, s6
	b.ne	.LBB150_10
.LBB150_11:                             //   in Loop: Header=BB150_4 Depth=1
	ldr	d6, [x10, :lo12:init_value]
	fcvt	s6, d6
	fadd	s6, s0, s6
	fmul	s6, s6, s4
	fadd	s6, s5, s6
	fdiv	s7, s6, s5
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d2
	fcsel	s5, s7, s6, gt
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d3
	b.mi	.LBB150_3
// %bb.12:                              //   in Loop: Header=BB150_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB150_3
.LBB150_13:
	movi	d1, #0000000000000000
	mov	w7, #-973471744                 // =0xc5fa0000
	adrp	x6, init_value
	adrp	x8, .LCPI150_0
	fmov	s3, w7
	ldr	d4, [x6, :lo12:init_value]
	ldr	d2, [x8, :lo12:.LCPI150_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB150_15
.LBB150_14:                             //   in Loop: Header=BB150_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB150_17
.LBB150_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s5, d4
	fadd	s5, s0, s5
	fmul	s5, s5, s3
	fadd	s5, s5, s1
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d2
	b.mi	.LBB150_14
// %bb.16:                              //   in Loop: Header=BB150_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d4, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB150_14
.LBB150_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB150_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB150_21
.LBB150_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB150_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB150_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldp	d9, d8, [sp], #32               // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	ret
.LBB150_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end150:
	.size	_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc, .Lfunc_end150-_Z14test_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc
.LCPI151_0:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
.LCPI151_1:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
	.section	.text._Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.p2align	2
	.type	_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc: // @_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	d9, d8, [sp, #-32]!             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB151_20
// %bb.1:
	scvtf	s1, w5
	cmp	w5, #1
	b.lt	.LBB151_13
// %bb.2:
	mov	w13, #-973471744                // =0xc5fa0000
	adrp	x12, .LCPI151_0
	adrp	x14, .LCPI151_1
	fmov	s4, w13
	mov	w8, w5
	ldr	d2, [x12, :lo12:.LCPI151_0]
	ldr	d3, [x14, :lo12:.LCPI151_1]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffff8
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB151_4
.LBB151_3:                              //   in Loop: Header=BB151_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB151_20
.LBB151_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB151_7 Depth 2
                                        //     Child Loop BB151_10 Depth 2
	movi	d5, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB151_6
// %bb.5:                               //   in Loop: Header=BB151_4 Depth=1
	mov	x14, xzr
	b	.LBB151_9
.LBB151_6:                              // %.preheader2
                                        //   in Loop: Header=BB151_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB151_7:                              //   Parent Loop BB151_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q6, q7, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	mov	s8, v6.s[1]
	fadd	s9, s5, s6
	mov	s5, v6.s[2]
	mov	s6, v6.s[3]
	fadd	s8, s9, s8
	fadd	s5, s8, s5
	fadd	s6, s5, s6
	mov	s5, v7.s[1]
	fadd	s8, s6, s7
	mov	s6, v7.s[2]
	fadd	s8, s8, s5
	mov	s5, v7.s[3]
	fadd	s6, s8, s6
	fadd	s5, s6, s5
	b.ne	.LBB151_7
// %bb.8:                               //   in Loop: Header=BB151_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB151_11
.LBB151_9:                              // %.preheader
                                        //   in Loop: Header=BB151_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB151_10:                             //   Parent Loop BB151_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s6, [x13], #4
	subs	x14, x14, #1
	fadd	s5, s5, s6
	b.ne	.LBB151_10
.LBB151_11:                             //   in Loop: Header=BB151_4 Depth=1
	ldr	d6, [x10, :lo12:init_value]
	fcvt	s6, d6
	fadd	s7, s0, s6
	fmadd	s6, s1, s0, s5
	fmul	s5, s7, s4
	fadd	s5, s6, s5
	fdiv	s7, s5, s6
	fabs	s6, s6
	fcvt	d6, s6
	fcmp	d6, d2
	fcsel	s5, s7, s5, gt
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d3
	b.mi	.LBB151_3
// %bb.12:                              //   in Loop: Header=BB151_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB151_3
.LBB151_13:
	movi	d2, #0000000000000000
	adrp	x5, .LCPI151_0
	mov	w8, #-973471744                 // =0xc5fa0000
	ldr	d3, [x5, :lo12:.LCPI151_0]
	adrp	x5, init_value
	adrp	x7, .LCPI151_1
	fmov	s4, w8
	mov	w6, wzr
	fmadd	s1, s1, s0, s2
	fabs	s2, s1
	fcvt	d2, s2
	fcmp	d2, d3
	ldr	d2, [x5, :lo12:init_value]
	ldr	d3, [x7, :lo12:.LCPI151_1]
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b.gt	.LBB151_15
	b	.LBB151_18
.LBB151_14:                             //   in Loop: Header=BB151_15 Depth=1
	add	w6, w6, #1
	cmp	w6, w4
	b.ge	.LBB151_20
.LBB151_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s5, d2
	fadd	s5, s0, s5
	fmul	s5, s5, s4
	fadd	s5, s1, s5
	fdiv	s5, s5, s1
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d3
	b.mi	.LBB151_14
// %bb.16:                              //   in Loop: Header=BB151_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d2, [x5, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB151_14
.LBB151_17:                             //   in Loop: Header=BB151_18 Depth=1
	add	w6, w6, #1
	cmp	w6, w4
	b.ge	.LBB151_20
.LBB151_18:                             // =>This Inner Loop Header: Depth=1
	fcvt	s5, d2
	fadd	s5, s0, s5
	fmul	s5, s5, s4
	fadd	s5, s1, s5
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d3
	b.mi	.LBB151_17
// %bb.19:                              //   in Loop: Header=BB151_18 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d2, [x5, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB151_17
.LBB151_20:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB151_22
// %bb.21:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB151_24
.LBB151_22:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB151_25
// %bb.23:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB151_24:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldp	d9, d8, [sp], #32               // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	ret
.LBB151_25:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end151:
	.size	_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc, .Lfunc_end151-_Z22test_hoisted_variable1If19custom_add_variableIfEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
.LCPI152_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI152_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	d15, d14, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	d13, d12, [sp, #16]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_offset b10, -40
	.cfi_offset b11, -48
	.cfi_offset b12, -56
	.cfi_offset b13, -64
	.cfi_offset b14, -72
	.cfi_offset b15, -80
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB152_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB152_13
// %bb.2:
	adrp	x12, .LCPI152_0
	dup	v4.4s, v3.s[0]
	dup	v5.4s, v2.s[0]
	ldr	d9, [x12, :lo12:.LCPI152_0]
	mov	w12, #-973471744                // =0xc5fa0000
	dup	v6.4s, v1.s[0]
	dup	v7.4s, v0.s[0]
	adrp	x11, .LCPI152_1
	fmov	s10, w12
	mov	w8, w5
	ldr	d8, [x11, :lo12:.LCPI152_1]
	mov	w7, wzr
	and	x9, x8, #0x7ffffff8
	add	x10, x6, #16
	adrp	x11, init_value
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB152_4
.LBB152_3:                              //   in Loop: Header=BB152_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB152_17
.LBB152_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB152_7 Depth 2
                                        //     Child Loop BB152_10 Depth 2
	movi	d11, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB152_6
// %bb.5:                               //   in Loop: Header=BB152_4 Depth=1
	mov	x14, xzr
	b	.LBB152_9
.LBB152_6:                              // %.preheader2
                                        //   in Loop: Header=BB152_4 Depth=1
	mov	x13, x10
	mov	x14, x9
.LBB152_7:                              //   Parent Loop BB152_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q12, q13, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	fadd	v12.4s, v4.4s, v12.4s
	fadd	v13.4s, v4.4s, v13.4s
	fadd	v12.4s, v5.4s, v12.4s
	fadd	v13.4s, v5.4s, v13.4s
	fadd	v12.4s, v6.4s, v12.4s
	fadd	v13.4s, v6.4s, v13.4s
	fadd	v12.4s, v7.4s, v12.4s
	mov	s14, v12.s[1]
	fadd	s15, s11, s12
	mov	s11, v12.s[2]
	mov	s12, v12.s[3]
	fadd	s14, s15, s14
	fadd	s14, s14, s11
	fadd	v11.4s, v7.4s, v13.4s
	fadd	s13, s14, s12
	mov	s12, v11.s[1]
	fadd	s14, s13, s11
	mov	s13, v11.s[2]
	mov	s11, v11.s[3]
	fadd	s12, s14, s12
	fadd	s12, s12, s13
	fadd	s11, s12, s11
	b.ne	.LBB152_7
// %bb.8:                               //   in Loop: Header=BB152_4 Depth=1
	cmp	x9, x8
	mov	x14, x9
	b.eq	.LBB152_11
.LBB152_9:                              // %.preheader
                                        //   in Loop: Header=BB152_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB152_10:                             //   Parent Loop BB152_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s12, [x13], #4
	subs	x14, x14, #1
	fadd	s12, s3, s12
	fadd	s12, s2, s12
	fadd	s12, s1, s12
	fadd	s12, s0, s12
	fadd	s11, s11, s12
	b.ne	.LBB152_10
.LBB152_11:                             //   in Loop: Header=BB152_4 Depth=1
	ldr	d12, [x11, :lo12:init_value]
	fcvt	s12, d12
	fadd	s12, s3, s12
	fadd	s12, s2, s12
	fadd	s12, s1, s12
	fadd	s12, s0, s12
	fmul	s12, s12, s10
	fadd	s12, s11, s12
	fdiv	s13, s12, s11
	fabs	s11, s11
	fcvt	d11, s11
	fcmp	d11, d8
	fcsel	s11, s13, s12, gt
	fabs	s11, s11
	fcvt	d11, s11
	fcmp	d11, d9
	b.mi	.LBB152_3
// %bb.12:                              //   in Loop: Header=BB152_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB152_3
.LBB152_13:
	movi	d4, #0000000000000000
	mov	w7, #-973471744                 // =0xc5fa0000
	adrp	x6, init_value
	adrp	x8, .LCPI152_0
	fmov	s6, w7
	ldr	d7, [x6, :lo12:init_value]
	ldr	d5, [x8, :lo12:.LCPI152_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB152_15
.LBB152_14:                             //   in Loop: Header=BB152_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB152_17
.LBB152_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s8, d7
	fadd	s8, s3, s8
	fadd	s8, s2, s8
	fadd	s8, s1, s8
	fadd	s8, s0, s8
	fmul	s8, s8, s6
	fadd	s8, s8, s4
	fabs	s8, s8
	fcvt	d8, s8
	fcmp	d8, d5
	b.mi	.LBB152_14
// %bb.16:                              //   in Loop: Header=BB152_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d7, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB152_14
.LBB152_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB152_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB152_21
.LBB152_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB152_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB152_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #16]             // 16-byte Folded Reload
	ldp	d15, d14, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	.cfi_restore b15
	ret
.LBB152_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end152:
	.size	_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end152-_Z14test_variable4If28custom_add_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc
.LCPI153_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI153_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc,@function
_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc: // @_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	d9, d8, [sp, #-32]!             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_remember_state
                                        // kill: def $s0 killed $s0 def $q0
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB153_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB153_13
// %bb.2:
	mov	w13, #-973471744                // =0xc5fa0000
	dup	v1.4s, v0.s[0]
	adrp	x12, .LCPI153_1
	adrp	x14, .LCPI153_0
	fmov	s4, w13
	mov	w8, w5
	ldr	d2, [x12, :lo12:.LCPI153_1]
	ldr	d3, [x14, :lo12:.LCPI153_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffff8
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB153_4
.LBB153_3:                              //   in Loop: Header=BB153_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB153_17
.LBB153_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB153_7 Depth 2
                                        //     Child Loop BB153_10 Depth 2
	movi	d5, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB153_6
// %bb.5:                               //   in Loop: Header=BB153_4 Depth=1
	mov	x14, xzr
	b	.LBB153_9
.LBB153_6:                              // %.preheader2
                                        //   in Loop: Header=BB153_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB153_7:                              //   Parent Loop BB153_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q7, q6, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	fsub	v7.4s, v7.4s, v1.4s
	mov	s8, v7.s[1]
	fadd	s9, s5, s7
	mov	s5, v7.s[2]
	mov	s7, v7.s[3]
	fadd	s8, s9, s8
	fadd	s8, s8, s5
	fsub	v5.4s, v6.4s, v1.4s
	fadd	s6, s8, s7
	mov	s7, v5.s[1]
	fadd	s8, s6, s5
	mov	s6, v5.s[2]
	mov	s5, v5.s[3]
	fadd	s7, s8, s7
	fadd	s6, s7, s6
	fadd	s5, s6, s5
	b.ne	.LBB153_7
// %bb.8:                               //   in Loop: Header=BB153_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB153_11
.LBB153_9:                              // %.preheader
                                        //   in Loop: Header=BB153_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB153_10:                             //   Parent Loop BB153_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s6, [x13], #4
	subs	x14, x14, #1
	fsub	s6, s6, s0
	fadd	s5, s5, s6
	b.ne	.LBB153_10
.LBB153_11:                             //   in Loop: Header=BB153_4 Depth=1
	ldr	d6, [x10, :lo12:init_value]
	fcvt	s6, d6
	fsub	s6, s6, s0
	fmul	s6, s6, s4
	fadd	s6, s5, s6
	fdiv	s7, s6, s5
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d2
	fcsel	s5, s7, s6, gt
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d3
	b.mi	.LBB153_3
// %bb.12:                              //   in Loop: Header=BB153_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB153_3
.LBB153_13:
	movi	d1, #0000000000000000
	mov	w7, #-973471744                 // =0xc5fa0000
	adrp	x6, init_value
	adrp	x8, .LCPI153_0
	fmov	s3, w7
	ldr	d4, [x6, :lo12:init_value]
	ldr	d2, [x8, :lo12:.LCPI153_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB153_15
.LBB153_14:                             //   in Loop: Header=BB153_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB153_17
.LBB153_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s5, d4
	fsub	s5, s5, s0
	fmul	s5, s5, s3
	fadd	s5, s5, s1
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d2
	b.mi	.LBB153_14
// %bb.16:                              //   in Loop: Header=BB153_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d4, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB153_14
.LBB153_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB153_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB153_21
.LBB153_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB153_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB153_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldp	d9, d8, [sp], #32               // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	ret
.LBB153_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end153:
	.size	_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc, .Lfunc_end153-_Z14test_variable1If19custom_sub_variableIfEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
.LCPI154_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI154_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	d15, d14, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	d13, d12, [sp, #16]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_offset b10, -40
	.cfi_offset b11, -48
	.cfi_offset b12, -56
	.cfi_offset b13, -64
	.cfi_offset b14, -72
	.cfi_offset b15, -80
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB154_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB154_13
// %bb.2:
	adrp	x12, .LCPI154_0
	dup	v4.4s, v3.s[0]
	dup	v5.4s, v2.s[0]
	ldr	d9, [x12, :lo12:.LCPI154_0]
	mov	w12, #-973471744                // =0xc5fa0000
	dup	v6.4s, v1.s[0]
	dup	v7.4s, v0.s[0]
	adrp	x11, .LCPI154_1
	fmov	s10, w12
	mov	w8, w5
	ldr	d8, [x11, :lo12:.LCPI154_1]
	mov	w7, wzr
	and	x9, x8, #0x7ffffff8
	add	x10, x6, #16
	adrp	x11, init_value
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB154_4
.LBB154_3:                              //   in Loop: Header=BB154_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB154_17
.LBB154_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB154_7 Depth 2
                                        //     Child Loop BB154_10 Depth 2
	movi	d11, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB154_6
// %bb.5:                               //   in Loop: Header=BB154_4 Depth=1
	mov	x14, xzr
	b	.LBB154_9
.LBB154_6:                              // %.preheader2
                                        //   in Loop: Header=BB154_4 Depth=1
	mov	x13, x10
	mov	x14, x9
.LBB154_7:                              //   Parent Loop BB154_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q12, q13, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	fsub	v12.4s, v12.4s, v4.4s
	fsub	v13.4s, v13.4s, v4.4s
	fsub	v12.4s, v12.4s, v5.4s
	fsub	v13.4s, v13.4s, v5.4s
	fsub	v12.4s, v12.4s, v6.4s
	fsub	v13.4s, v13.4s, v6.4s
	fsub	v12.4s, v12.4s, v7.4s
	mov	s14, v12.s[1]
	fadd	s15, s11, s12
	mov	s11, v12.s[2]
	mov	s12, v12.s[3]
	fadd	s14, s15, s14
	fadd	s14, s14, s11
	fsub	v11.4s, v13.4s, v7.4s
	fadd	s13, s14, s12
	mov	s12, v11.s[1]
	fadd	s14, s13, s11
	mov	s13, v11.s[2]
	mov	s11, v11.s[3]
	fadd	s12, s14, s12
	fadd	s12, s12, s13
	fadd	s11, s12, s11
	b.ne	.LBB154_7
// %bb.8:                               //   in Loop: Header=BB154_4 Depth=1
	cmp	x9, x8
	mov	x14, x9
	b.eq	.LBB154_11
.LBB154_9:                              // %.preheader
                                        //   in Loop: Header=BB154_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB154_10:                             //   Parent Loop BB154_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s12, [x13], #4
	subs	x14, x14, #1
	fsub	s12, s12, s3
	fsub	s12, s12, s2
	fsub	s12, s12, s1
	fsub	s12, s12, s0
	fadd	s11, s11, s12
	b.ne	.LBB154_10
.LBB154_11:                             //   in Loop: Header=BB154_4 Depth=1
	ldr	d12, [x11, :lo12:init_value]
	fcvt	s12, d12
	fsub	s12, s12, s3
	fsub	s12, s12, s2
	fsub	s12, s12, s1
	fsub	s12, s12, s0
	fmul	s12, s12, s10
	fadd	s12, s11, s12
	fdiv	s13, s12, s11
	fabs	s11, s11
	fcvt	d11, s11
	fcmp	d11, d8
	fcsel	s11, s13, s12, gt
	fabs	s11, s11
	fcvt	d11, s11
	fcmp	d11, d9
	b.mi	.LBB154_3
// %bb.12:                              //   in Loop: Header=BB154_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB154_3
.LBB154_13:
	movi	d4, #0000000000000000
	mov	w7, #-973471744                 // =0xc5fa0000
	adrp	x6, init_value
	adrp	x8, .LCPI154_0
	fmov	s6, w7
	ldr	d7, [x6, :lo12:init_value]
	ldr	d5, [x8, :lo12:.LCPI154_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB154_15
.LBB154_14:                             //   in Loop: Header=BB154_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB154_17
.LBB154_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s8, d7
	fsub	s8, s8, s3
	fsub	s8, s8, s2
	fsub	s8, s8, s1
	fsub	s8, s8, s0
	fmul	s8, s8, s6
	fadd	s8, s8, s4
	fabs	s8, s8
	fcvt	d8, s8
	fcmp	d8, d5
	b.mi	.LBB154_14
// %bb.16:                              //   in Loop: Header=BB154_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d7, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB154_14
.LBB154_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB154_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB154_21
.LBB154_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB154_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB154_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #16]             // 16-byte Folded Reload
	ldp	d15, d14, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	.cfi_restore b15
	ret
.LBB154_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end154:
	.size	_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end154-_Z14test_variable4If28custom_sub_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc
.LCPI155_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI155_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc,@function
_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc: // @_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-32]!                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -32
	.cfi_remember_state
                                        // kill: def $s0 killed $s0 def $q0
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB155_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB155_13
// %bb.2:
	mov	w13, #-973471744                // =0xc5fa0000
	adrp	x12, .LCPI155_1
	adrp	x14, .LCPI155_0
	fmov	s3, w13
	mov	w8, w5
	ldr	d1, [x12, :lo12:.LCPI155_1]
	ldr	d2, [x14, :lo12:.LCPI155_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffff8
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB155_4
.LBB155_3:                              //   in Loop: Header=BB155_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB155_17
.LBB155_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB155_7 Depth 2
                                        //     Child Loop BB155_10 Depth 2
	movi	d4, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB155_6
// %bb.5:                               //   in Loop: Header=BB155_4 Depth=1
	mov	x14, xzr
	b	.LBB155_9
.LBB155_6:                              // %.preheader2
                                        //   in Loop: Header=BB155_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB155_7:                              //   Parent Loop BB155_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q6, q5, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	fmul	v6.4s, v6.4s, v0.s[0]
	mov	s7, v6.s[1]
	fadd	s8, s4, s6
	mov	s4, v6.s[2]
	mov	s6, v6.s[3]
	fadd	s7, s8, s7
	fadd	s7, s7, s4
	fmul	v4.4s, v5.4s, v0.s[0]
	fadd	s5, s7, s6
	mov	s6, v4.s[1]
	fadd	s7, s5, s4
	mov	s5, v4.s[2]
	mov	s4, v4.s[3]
	fadd	s6, s7, s6
	fadd	s5, s6, s5
	fadd	s4, s5, s4
	b.ne	.LBB155_7
// %bb.8:                               //   in Loop: Header=BB155_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB155_11
.LBB155_9:                              // %.preheader
                                        //   in Loop: Header=BB155_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB155_10:                             //   Parent Loop BB155_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s5, [x13], #4
	subs	x14, x14, #1
	fmul	s5, s0, s5
	fadd	s4, s4, s5
	b.ne	.LBB155_10
.LBB155_11:                             //   in Loop: Header=BB155_4 Depth=1
	ldr	d5, [x10, :lo12:init_value]
	fcvt	s5, d5
	fmul	s5, s0, s5
	fmul	s5, s5, s3
	fadd	s5, s4, s5
	fdiv	s6, s5, s4
	fabs	s4, s4
	fcvt	d4, s4
	fcmp	d4, d1
	fcsel	s4, s6, s5, gt
	fabs	s4, s4
	fcvt	d4, s4
	fcmp	d4, d2
	b.mi	.LBB155_3
// %bb.12:                              //   in Loop: Header=BB155_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB155_3
.LBB155_13:
	movi	d1, #0000000000000000
	mov	w7, #-973471744                 // =0xc5fa0000
	adrp	x6, init_value
	adrp	x8, .LCPI155_0
	fmov	s3, w7
	ldr	d4, [x6, :lo12:init_value]
	ldr	d2, [x8, :lo12:.LCPI155_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB155_15
.LBB155_14:                             //   in Loop: Header=BB155_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB155_17
.LBB155_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s5, d4
	fmul	s5, s0, s5
	fmul	s5, s5, s3
	fadd	s5, s5, s1
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d2
	b.mi	.LBB155_14
// %bb.16:                              //   in Loop: Header=BB155_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d4, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB155_14
.LBB155_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB155_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB155_21
.LBB155_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB155_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB155_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #32                   // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB155_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end155:
	.size	_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc, .Lfunc_end155-_Z14test_variable1If24custom_multiply_variableIfEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
.LCPI156_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI156_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_offset b10, -40
	.cfi_offset b11, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB156_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB156_13
// %bb.2:
	mov	w13, #-973471744                // =0xc5fa0000
	adrp	x12, .LCPI156_1
	adrp	x14, .LCPI156_0
	fmov	s6, w13
	mov	w8, w5
	ldr	d4, [x12, :lo12:.LCPI156_1]
	ldr	d5, [x14, :lo12:.LCPI156_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffff8
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB156_4
.LBB156_3:                              //   in Loop: Header=BB156_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB156_17
.LBB156_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB156_7 Depth 2
                                        //     Child Loop BB156_10 Depth 2
	movi	d7, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB156_6
// %bb.5:                               //   in Loop: Header=BB156_4 Depth=1
	mov	x14, xzr
	b	.LBB156_9
.LBB156_6:                              // %.preheader2
                                        //   in Loop: Header=BB156_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB156_7:                              //   Parent Loop BB156_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q8, q9, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	fmul	v8.4s, v8.4s, v3.s[0]
	fmul	v9.4s, v9.4s, v3.s[0]
	fmul	v8.4s, v8.4s, v2.s[0]
	fmul	v9.4s, v9.4s, v2.s[0]
	fmul	v8.4s, v8.4s, v1.s[0]
	fmul	v9.4s, v9.4s, v1.s[0]
	fmul	v8.4s, v8.4s, v0.s[0]
	mov	s10, v8.s[1]
	fadd	s11, s7, s8
	mov	s7, v8.s[2]
	mov	s8, v8.s[3]
	fadd	s10, s11, s10
	fadd	s10, s10, s7
	fmul	v7.4s, v9.4s, v0.s[0]
	fadd	s9, s10, s8
	mov	s8, v7.s[1]
	fadd	s10, s9, s7
	mov	s9, v7.s[2]
	mov	s7, v7.s[3]
	fadd	s8, s10, s8
	fadd	s8, s8, s9
	fadd	s7, s8, s7
	b.ne	.LBB156_7
// %bb.8:                               //   in Loop: Header=BB156_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB156_11
.LBB156_9:                              // %.preheader
                                        //   in Loop: Header=BB156_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB156_10:                             //   Parent Loop BB156_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s8, [x13], #4
	subs	x14, x14, #1
	fmul	s8, s3, s8
	fmul	s8, s2, s8
	fmul	s8, s1, s8
	fmul	s8, s0, s8
	fadd	s7, s7, s8
	b.ne	.LBB156_10
.LBB156_11:                             //   in Loop: Header=BB156_4 Depth=1
	ldr	d8, [x10, :lo12:init_value]
	fcvt	s8, d8
	fmul	s8, s3, s8
	fmul	s8, s2, s8
	fmul	s8, s1, s8
	fmul	s8, s0, s8
	fmul	s8, s8, s6
	fadd	s8, s7, s8
	fdiv	s9, s8, s7
	fabs	s7, s7
	fcvt	d7, s7
	fcmp	d7, d4
	fcsel	s7, s9, s8, gt
	fabs	s7, s7
	fcvt	d7, s7
	fcmp	d7, d5
	b.mi	.LBB156_3
// %bb.12:                              //   in Loop: Header=BB156_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB156_3
.LBB156_13:
	movi	d4, #0000000000000000
	mov	w7, #-973471744                 // =0xc5fa0000
	adrp	x6, init_value
	adrp	x8, .LCPI156_0
	fmov	s6, w7
	ldr	d7, [x6, :lo12:init_value]
	ldr	d5, [x8, :lo12:.LCPI156_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB156_15
.LBB156_14:                             //   in Loop: Header=BB156_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB156_17
.LBB156_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s8, d7
	fmul	s8, s3, s8
	fmul	s8, s2, s8
	fmul	s8, s1, s8
	fmul	s8, s0, s8
	fmul	s8, s8, s6
	fadd	s8, s8, s4
	fabs	s8, s8
	fcvt	d8, s8
	fcmp	d8, d5
	b.mi	.LBB156_14
// %bb.16:                              //   in Loop: Header=BB156_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d7, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB156_14
.LBB156_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB156_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB156_21
.LBB156_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB156_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB156_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB156_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end156:
	.size	_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end156-_Z14test_variable4If33custom_multiply_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
.LCPI157_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI157_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	str	d10, [sp, #-48]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_offset b10, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB157_17
// %bb.1:
	fmul	s2, s3, s2
	cmp	w5, #0
	fmul	s1, s2, s1
	b.le	.LBB157_13
// %bb.2:
	mov	w14, #-973471744                // =0xc5fa0000
	adrp	x12, .LCPI157_1
	adrp	x13, .LCPI157_0
	dup	v2.4s, v0.s[0]
	fmov	s5, w14
	mov	w8, w5
	ldr	d3, [x12, :lo12:.LCPI157_1]
	ldr	d4, [x13, :lo12:.LCPI157_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffff8
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB157_4
.LBB157_3:                              //   in Loop: Header=BB157_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB157_17
.LBB157_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB157_7 Depth 2
                                        //     Child Loop BB157_10 Depth 2
	movi	d6, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB157_6
// %bb.5:                               //   in Loop: Header=BB157_4 Depth=1
	mov	x14, xzr
	b	.LBB157_9
.LBB157_6:                              // %.preheader2
                                        //   in Loop: Header=BB157_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB157_7:                              //   Parent Loop BB157_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q8, q7, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	fmla	v8.4s, v2.4s, v1.s[0]
	fmla	v7.4s, v2.4s, v1.s[0]
	mov	s9, v8.s[1]
	fadd	s10, s6, s8
	mov	s6, v8.s[2]
	mov	s8, v8.s[3]
	fadd	s9, s10, s9
	fadd	s6, s9, s6
	fadd	s6, s6, s8
	mov	s8, v7.s[1]
	fadd	s9, s6, s7
	mov	s6, v7.s[2]
	mov	s7, v7.s[3]
	fadd	s8, s9, s8
	fadd	s6, s8, s6
	fadd	s6, s6, s7
	b.ne	.LBB157_7
// %bb.8:                               //   in Loop: Header=BB157_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB157_11
.LBB157_9:                              // %.preheader
                                        //   in Loop: Header=BB157_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB157_10:                             //   Parent Loop BB157_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s7, [x13], #4
	subs	x14, x14, #1
	fmadd	s7, s1, s0, s7
	fadd	s6, s6, s7
	b.ne	.LBB157_10
.LBB157_11:                             //   in Loop: Header=BB157_4 Depth=1
	ldr	d7, [x10, :lo12:init_value]
	fcvt	s7, d7
	fmadd	s7, s1, s0, s7
	fmul	s7, s7, s5
	fadd	s7, s6, s7
	fdiv	s8, s7, s6
	fabs	s6, s6
	fcvt	d6, s6
	fcmp	d6, d3
	fcsel	s6, s8, s7, gt
	fabs	s6, s6
	fcvt	d6, s6
	fcmp	d6, d4
	b.mi	.LBB157_3
// %bb.12:                              //   in Loop: Header=BB157_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB157_3
.LBB157_13:
	movi	d2, #0000000000000000
	mov	w8, #-973471744                 // =0xc5fa0000
	adrp	x6, init_value
	adrp	x7, .LCPI157_0
	fmov	s4, w8
	ldr	d5, [x6, :lo12:init_value]
	ldr	d3, [x7, :lo12:.LCPI157_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB157_15
.LBB157_14:                             //   in Loop: Header=BB157_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB157_17
.LBB157_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s6, d5
	fmadd	s6, s1, s0, s6
	fmul	s6, s6, s4
	fadd	s6, s6, s2
	fabs	s6, s6
	fcvt	d6, s6
	fcmp	d6, d3
	b.mi	.LBB157_14
// %bb.16:                              //   in Loop: Header=BB157_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d5, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB157_14
.LBB157_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB157_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB157_21
.LBB157_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB157_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB157_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldr	d10, [sp], #48                  // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	ret
.LBB157_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end157:
	.size	_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end157-_Z14test_variable4If34custom_multiply_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc
.LCPI158_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI158_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc,@function
_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc: // @_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	d9, d8, [sp, #-32]!             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_remember_state
                                        // kill: def $s0 killed $s0 def $q0
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB158_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB158_13
// %bb.2:
	mov	w13, #-973471744                // =0xc5fa0000
	dup	v1.4s, v0.s[0]
	adrp	x12, .LCPI158_1
	adrp	x14, .LCPI158_0
	fmov	s4, w13
	mov	w8, w5
	ldr	d2, [x12, :lo12:.LCPI158_1]
	ldr	d3, [x14, :lo12:.LCPI158_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffff8
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB158_4
.LBB158_3:                              //   in Loop: Header=BB158_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB158_17
.LBB158_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB158_7 Depth 2
                                        //     Child Loop BB158_10 Depth 2
	movi	d5, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB158_6
// %bb.5:                               //   in Loop: Header=BB158_4 Depth=1
	mov	x14, xzr
	b	.LBB158_9
.LBB158_6:                              // %.preheader2
                                        //   in Loop: Header=BB158_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB158_7:                              //   Parent Loop BB158_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q6, q7, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	fdiv	v6.4s, v6.4s, v1.4s
	mov	s8, v6.s[1]
	fadd	s9, s5, s6
	fdiv	v5.4s, v7.4s, v1.4s
	mov	s7, v6.s[2]
	mov	s6, v6.s[3]
	fadd	s8, s9, s8
	fadd	s7, s8, s7
	fadd	s6, s7, s6
	mov	s7, v5.s[1]
	fadd	s8, s6, s5
	mov	s6, v5.s[2]
	mov	s5, v5.s[3]
	fadd	s7, s8, s7
	fadd	s6, s7, s6
	fadd	s5, s6, s5
	b.ne	.LBB158_7
// %bb.8:                               //   in Loop: Header=BB158_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB158_11
.LBB158_9:                              // %.preheader
                                        //   in Loop: Header=BB158_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB158_10:                             //   Parent Loop BB158_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s6, [x13], #4
	subs	x14, x14, #1
	fdiv	s6, s6, s0
	fadd	s5, s5, s6
	b.ne	.LBB158_10
.LBB158_11:                             //   in Loop: Header=BB158_4 Depth=1
	ldr	d6, [x10, :lo12:init_value]
	fcvt	s6, d6
	fdiv	s6, s6, s0
	fmul	s6, s6, s4
	fadd	s6, s5, s6
	fdiv	s7, s6, s5
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d2
	fcsel	s5, s7, s6, gt
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d3
	b.mi	.LBB158_3
// %bb.12:                              //   in Loop: Header=BB158_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB158_3
.LBB158_13:
	movi	d1, #0000000000000000
	mov	w7, #-973471744                 // =0xc5fa0000
	adrp	x6, init_value
	adrp	x8, .LCPI158_0
	fmov	s3, w7
	ldr	d4, [x6, :lo12:init_value]
	ldr	d2, [x8, :lo12:.LCPI158_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB158_15
.LBB158_14:                             //   in Loop: Header=BB158_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB158_17
.LBB158_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s5, d4
	fdiv	s5, s5, s0
	fmul	s5, s5, s3
	fadd	s5, s5, s1
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d2
	b.mi	.LBB158_14
// %bb.16:                              //   in Loop: Header=BB158_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d4, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB158_14
.LBB158_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB158_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB158_21
.LBB158_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB158_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB158_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldp	d9, d8, [sp], #32               // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	ret
.LBB158_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end158:
	.size	_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc, .Lfunc_end158-_Z14test_variable1If22custom_divide_variableIfEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
.LCPI159_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI159_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	d15, d14, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	d13, d12, [sp, #16]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_offset b10, -40
	.cfi_offset b11, -48
	.cfi_offset b12, -56
	.cfi_offset b13, -64
	.cfi_offset b14, -72
	.cfi_offset b15, -80
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB159_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB159_13
// %bb.2:
	adrp	x12, .LCPI159_0
	dup	v4.4s, v3.s[0]
	dup	v5.4s, v2.s[0]
	ldr	d9, [x12, :lo12:.LCPI159_0]
	mov	w12, #-973471744                // =0xc5fa0000
	dup	v6.4s, v1.s[0]
	dup	v7.4s, v0.s[0]
	adrp	x11, .LCPI159_1
	fmov	s10, w12
	mov	w8, w5
	ldr	d8, [x11, :lo12:.LCPI159_1]
	mov	w7, wzr
	and	x9, x8, #0x7ffffff8
	add	x10, x6, #16
	adrp	x11, init_value
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB159_4
.LBB159_3:                              //   in Loop: Header=BB159_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB159_17
.LBB159_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB159_7 Depth 2
                                        //     Child Loop BB159_10 Depth 2
	movi	d11, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB159_6
// %bb.5:                               //   in Loop: Header=BB159_4 Depth=1
	mov	x14, xzr
	b	.LBB159_9
.LBB159_6:                              // %.preheader2
                                        //   in Loop: Header=BB159_4 Depth=1
	mov	x13, x10
	mov	x14, x9
.LBB159_7:                              //   Parent Loop BB159_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q13, q12, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	fdiv	v13.4s, v13.4s, v4.4s
	fdiv	v12.4s, v12.4s, v4.4s
	fdiv	v13.4s, v13.4s, v5.4s
	fdiv	v14.4s, v13.4s, v6.4s
	fdiv	v13.4s, v12.4s, v5.4s
	fdiv	v12.4s, v14.4s, v7.4s
	fdiv	v13.4s, v13.4s, v6.4s
	mov	s14, v12.s[1]
	fadd	s15, s11, s12
	fadd	s14, s15, s14
	fdiv	v11.4s, v13.4s, v7.4s
	mov	s13, v12.s[2]
	mov	s12, v12.s[3]
	fadd	s13, s14, s13
	fadd	s12, s13, s12
	mov	s13, v11.s[1]
	fadd	s14, s12, s11
	mov	s12, v11.s[2]
	mov	s11, v11.s[3]
	fadd	s13, s14, s13
	fadd	s12, s13, s12
	fadd	s11, s12, s11
	b.ne	.LBB159_7
// %bb.8:                               //   in Loop: Header=BB159_4 Depth=1
	cmp	x9, x8
	mov	x14, x9
	b.eq	.LBB159_11
.LBB159_9:                              // %.preheader
                                        //   in Loop: Header=BB159_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB159_10:                             //   Parent Loop BB159_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s12, [x13], #4
	subs	x14, x14, #1
	fdiv	s12, s12, s3
	fdiv	s12, s12, s2
	fdiv	s12, s12, s1
	fdiv	s12, s12, s0
	fadd	s11, s11, s12
	b.ne	.LBB159_10
.LBB159_11:                             //   in Loop: Header=BB159_4 Depth=1
	ldr	d12, [x11, :lo12:init_value]
	fcvt	s12, d12
	fdiv	s12, s12, s3
	fdiv	s12, s12, s2
	fdiv	s12, s12, s1
	fdiv	s12, s12, s0
	fmul	s12, s12, s10
	fadd	s12, s11, s12
	fdiv	s13, s12, s11
	fabs	s11, s11
	fcvt	d11, s11
	fcmp	d11, d8
	fcsel	s11, s13, s12, gt
	fabs	s11, s11
	fcvt	d11, s11
	fcmp	d11, d9
	b.mi	.LBB159_3
// %bb.12:                              //   in Loop: Header=BB159_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB159_3
.LBB159_13:
	movi	d4, #0000000000000000
	mov	w7, #-973471744                 // =0xc5fa0000
	adrp	x6, init_value
	adrp	x8, .LCPI159_0
	fmov	s6, w7
	ldr	d7, [x6, :lo12:init_value]
	ldr	d5, [x8, :lo12:.LCPI159_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB159_15
.LBB159_14:                             //   in Loop: Header=BB159_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB159_17
.LBB159_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s8, d7
	fdiv	s8, s8, s3
	fdiv	s8, s8, s2
	fdiv	s8, s8, s1
	fdiv	s8, s8, s0
	fmul	s8, s8, s6
	fadd	s8, s8, s4
	fabs	s8, s8
	fcvt	d8, s8
	fcmp	d8, d5
	b.mi	.LBB159_14
// %bb.16:                              //   in Loop: Header=BB159_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d7, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB159_14
.LBB159_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB159_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB159_21
.LBB159_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB159_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB159_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #16]             // 16-byte Folded Reload
	ldp	d15, d14, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	.cfi_restore b15
	ret
.LBB159_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end159:
	.size	_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end159-_Z14test_variable4If31custom_divide_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
.LCPI160_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI160_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	d9, d8, [sp, #-32]!             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB160_17
// %bb.1:
	fdiv	s2, s3, s2
	cmp	w5, #0
	fdiv	s1, s2, s1
	fdiv	s0, s1, s0
	b.le	.LBB160_13
// %bb.2:
	mov	w13, #-973471744                // =0xc5fa0000
	dup	v1.4s, v0.s[0]
	adrp	x12, .LCPI160_1
	adrp	x14, .LCPI160_0
	fmov	s4, w13
	mov	w8, w5
	ldr	d2, [x12, :lo12:.LCPI160_1]
	ldr	d3, [x14, :lo12:.LCPI160_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffff8
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB160_4
.LBB160_3:                              //   in Loop: Header=BB160_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB160_17
.LBB160_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB160_7 Depth 2
                                        //     Child Loop BB160_10 Depth 2
	movi	d5, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB160_6
// %bb.5:                               //   in Loop: Header=BB160_4 Depth=1
	mov	x14, xzr
	b	.LBB160_9
.LBB160_6:                              // %.preheader2
                                        //   in Loop: Header=BB160_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB160_7:                              //   Parent Loop BB160_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q7, q6, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	fadd	v7.4s, v1.4s, v7.4s
	mov	s8, v7.s[1]
	fadd	s9, s5, s7
	mov	s5, v7.s[2]
	mov	s7, v7.s[3]
	fadd	s8, s9, s8
	fadd	s8, s8, s5
	fadd	v5.4s, v1.4s, v6.4s
	fadd	s6, s8, s7
	mov	s7, v5.s[1]
	fadd	s8, s6, s5
	mov	s6, v5.s[2]
	mov	s5, v5.s[3]
	fadd	s7, s8, s7
	fadd	s6, s7, s6
	fadd	s5, s6, s5
	b.ne	.LBB160_7
// %bb.8:                               //   in Loop: Header=BB160_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB160_11
.LBB160_9:                              // %.preheader
                                        //   in Loop: Header=BB160_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB160_10:                             //   Parent Loop BB160_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s6, [x13], #4
	subs	x14, x14, #1
	fadd	s6, s0, s6
	fadd	s5, s5, s6
	b.ne	.LBB160_10
.LBB160_11:                             //   in Loop: Header=BB160_4 Depth=1
	ldr	d6, [x10, :lo12:init_value]
	fcvt	s6, d6
	fadd	s6, s0, s6
	fmul	s6, s6, s4
	fadd	s6, s5, s6
	fdiv	s7, s6, s5
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d2
	fcsel	s5, s7, s6, gt
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d3
	b.mi	.LBB160_3
// %bb.12:                              //   in Loop: Header=BB160_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB160_3
.LBB160_13:
	movi	d1, #0000000000000000
	mov	w8, #-973471744                 // =0xc5fa0000
	adrp	x6, init_value
	adrp	x7, .LCPI160_0
	fmov	s3, w8
	ldr	d4, [x6, :lo12:init_value]
	ldr	d2, [x7, :lo12:.LCPI160_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB160_15
.LBB160_14:                             //   in Loop: Header=BB160_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB160_17
.LBB160_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s5, d4
	fadd	s5, s0, s5
	fmul	s5, s5, s3
	fadd	s5, s5, s1
	fabs	s5, s5
	fcvt	d5, s5
	fcmp	d5, d2
	b.mi	.LBB160_14
// %bb.16:                              //   in Loop: Header=BB160_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d4, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB160_14
.LBB160_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB160_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB160_21
.LBB160_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB160_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB160_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldp	d9, d8, [sp], #32               // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	ret
.LBB160_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end160:
	.size	_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end160-_Z14test_variable4If32custom_divide_multiple_variable2IfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
.LCPI161_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI161_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-48]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_offset b10, -40
	.cfi_offset b11, -48
	.cfi_remember_state
                                        // kill: def $s0 killed $s0 def $q0
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB161_17
// %bb.1:
	fmul	s2, s3, s2
	cmp	w5, #0
	fdiv	s1, s2, s1
	b.le	.LBB161_13
// %bb.2:
	mov	w13, #-973471744                // =0xc5fa0000
	dup	v2.4s, v0.s[0]
	dup	v3.4s, v1.s[0]
	adrp	x12, .LCPI161_1
	adrp	x14, .LCPI161_0
	fmov	s6, w13
	mov	w8, w5
	ldr	d4, [x12, :lo12:.LCPI161_1]
	ldr	d5, [x14, :lo12:.LCPI161_0]
	mov	w7, wzr
	add	x9, x6, #16
	and	x10, x8, #0x7ffffff8
	adrp	x11, init_value
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB161_4
.LBB161_3:                              //   in Loop: Header=BB161_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB161_17
.LBB161_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB161_7 Depth 2
                                        //     Child Loop BB161_10 Depth 2
	movi	d7, #0000000000000000
	cmp	w5, #8
	b.hs	.LBB161_6
// %bb.5:                               //   in Loop: Header=BB161_4 Depth=1
	mov	x14, xzr
	b	.LBB161_9
.LBB161_6:                              // %.preheader2
                                        //   in Loop: Header=BB161_4 Depth=1
	mov	x13, x9
	mov	x14, x10
.LBB161_7:                              //   Parent Loop BB161_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q9, q8, [x13, #-16]
	subs	x14, x14, #8
	add	x13, x13, #32
	fadd	v9.4s, v2.4s, v9.4s
	fsub	v9.4s, v9.4s, v3.4s
	mov	s10, v9.s[1]
	fadd	s11, s7, s9
	mov	s7, v9.s[2]
	fadd	s11, s11, s10
	fadd	v10.4s, v2.4s, v8.4s
	mov	s8, v9.s[3]
	fadd	s9, s11, s7
	fsub	v7.4s, v10.4s, v3.4s
	fadd	s9, s9, s8
	mov	s8, v7.s[1]
	fadd	s10, s9, s7
	mov	s9, v7.s[2]
	mov	s7, v7.s[3]
	fadd	s8, s10, s8
	fadd	s8, s8, s9
	fadd	s7, s8, s7
	b.ne	.LBB161_7
// %bb.8:                               //   in Loop: Header=BB161_4 Depth=1
	cmp	x10, x8
	mov	x14, x10
	b.eq	.LBB161_11
.LBB161_9:                              // %.preheader
                                        //   in Loop: Header=BB161_4 Depth=1
	add	x13, x6, x14, lsl #2
	sub	x14, x8, x14
.LBB161_10:                             //   Parent Loop BB161_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s8, [x13], #4
	subs	x14, x14, #1
	fadd	s8, s0, s8
	fsub	s8, s8, s1
	fadd	s7, s7, s8
	b.ne	.LBB161_10
.LBB161_11:                             //   in Loop: Header=BB161_4 Depth=1
	ldr	d8, [x11, :lo12:init_value]
	fcvt	s8, d8
	fadd	s8, s0, s8
	fsub	s8, s8, s1
	fmul	s8, s8, s6
	fadd	s8, s7, s8
	fdiv	s9, s8, s7
	fabs	s7, s7
	fcvt	d7, s7
	fcmp	d7, d4
	fcsel	s7, s9, s8, gt
	fabs	s7, s7
	fcvt	d7, s7
	fcmp	d7, d5
	b.mi	.LBB161_3
// %bb.12:                              //   in Loop: Header=BB161_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB161_3
.LBB161_13:
	movi	d2, #0000000000000000
	mov	w8, #-973471744                 // =0xc5fa0000
	adrp	x6, init_value
	adrp	x7, .LCPI161_0
	fmov	s4, w8
	ldr	d5, [x6, :lo12:init_value]
	ldr	d3, [x7, :lo12:.LCPI161_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB161_15
.LBB161_14:                             //   in Loop: Header=BB161_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB161_17
.LBB161_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s6, d5
	fadd	s6, s0, s6
	fsub	s6, s6, s1
	fmul	s6, s6, s4
	fadd	s6, s6, s2
	fabs	s6, s6
	fcvt	d6, s6
	fcmp	d6, d3
	b.mi	.LBB161_14
// %bb.16:                              //   in Loop: Header=BB161_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d5, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB161_14
.LBB161_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB161_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB161_21
.LBB161_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB161_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB161_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #48             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB161_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end161:
	.size	_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end161-_Z14test_variable4If30custom_mixed_multiple_variableIfEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
.LCPI162_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI162_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,@function
_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc: // @_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-32]!                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -32
	.cfi_remember_state
                                        // kill: def $d0 killed $d0 def $q0
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB162_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB162_13
// %bb.2:
	mov	x13, #70368744177664            // =0x400000000000
	dup	v1.2d, v0.d[0]
	adrp	x12, .LCPI162_1
	movk	x13, #49343, lsl #48
	adrp	x14, .LCPI162_0
	mov	w8, w5
	fmov	d4, x13
	ldr	d2, [x12, :lo12:.LCPI162_1]
	ldr	d3, [x14, :lo12:.LCPI162_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffffc
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB162_4
.LBB162_3:                              //   in Loop: Header=BB162_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB162_17
.LBB162_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB162_7 Depth 2
                                        //     Child Loop BB162_10 Depth 2
	movi	d5, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB162_6
// %bb.5:                               //   in Loop: Header=BB162_4 Depth=1
	mov	x14, xzr
	b	.LBB162_9
.LBB162_6:                              // %.preheader2
                                        //   in Loop: Header=BB162_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB162_7:                              //   Parent Loop BB162_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q7, q6, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	fadd	v8.2d, v1.2d, v7.2d
	mov	d7, v8.d[1]
	fadd	d8, d5, d8
	fadd	v5.2d, v1.2d, v6.2d
	fadd	d7, d8, d7
	mov	d6, v5.d[1]
	fadd	d5, d7, d5
	fadd	d5, d5, d6
	b.ne	.LBB162_7
// %bb.8:                               //   in Loop: Header=BB162_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB162_11
.LBB162_9:                              // %.preheader
                                        //   in Loop: Header=BB162_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB162_10:                             //   Parent Loop BB162_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d6, [x13], #8
	subs	x14, x14, #1
	fadd	d6, d0, d6
	fadd	d5, d5, d6
	b.ne	.LBB162_10
.LBB162_11:                             //   in Loop: Header=BB162_4 Depth=1
	ldr	d6, [x10, :lo12:init_value]
	fadd	d6, d0, d6
	fmul	d6, d6, d4
	fadd	d6, d5, d6
	fdiv	d7, d6, d5
	fabs	d5, d5
	fcmp	d5, d2
	fcsel	d5, d7, d6, gt
	fabs	d5, d5
	fcmp	d5, d3
	b.mi	.LBB162_3
// %bb.12:                              //   in Loop: Header=BB162_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB162_3
.LBB162_13:
	mov	x7, #70368744177664             // =0x400000000000
	movi	d1, #0000000000000000
	adrp	x6, init_value
	movk	x7, #49343, lsl #48
	adrp	x8, .LCPI162_0
	ldr	d4, [x6, :lo12:init_value]
	fmov	d3, x7
	ldr	d2, [x8, :lo12:.LCPI162_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB162_15
.LBB162_14:                             //   in Loop: Header=BB162_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB162_17
.LBB162_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d5, d0, d4
	fmul	d5, d5, d3
	fadd	d5, d5, d1
	fabs	d5, d5
	fcmp	d5, d2
	b.mi	.LBB162_14
// %bb.16:                              //   in Loop: Header=BB162_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d4, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB162_14
.LBB162_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB162_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB162_21
.LBB162_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB162_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB162_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #32                   // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB162_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end162:
	.size	_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc, .Lfunc_end162-_Z14test_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
.LCPI163_0:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
.LCPI163_1:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
	.section	.text._Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,"axG",@progbits,_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,comdat
	.weak	_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.p2align	2
	.type	_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc,@function
_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc: // @_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-32]!                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB163_22
// %bb.1:
	scvtf	d1, w5
	cmp	w5, #1
	b.lt	.LBB163_13
// %bb.2:
	mov	x13, #70368744177664            // =0x400000000000
	adrp	x12, .LCPI163_0
	adrp	x14, .LCPI163_1
	movk	x13, #49343, lsl #48
	mov	w8, w5
	ldr	d2, [x12, :lo12:.LCPI163_0]
	fmov	d4, x13
	ldr	d3, [x14, :lo12:.LCPI163_1]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffffc
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB163_4
.LBB163_3:                              //   in Loop: Header=BB163_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB163_22
.LBB163_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB163_7 Depth 2
                                        //     Child Loop BB163_10 Depth 2
	movi	d5, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB163_6
// %bb.5:                               //   in Loop: Header=BB163_4 Depth=1
	mov	x14, xzr
	b	.LBB163_9
.LBB163_6:                              // %.preheader2
                                        //   in Loop: Header=BB163_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB163_7:                              //   Parent Loop BB163_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q6, q7, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	mov	d8, v6.d[1]
	fadd	d5, d5, d6
	fadd	d6, d5, d8
	mov	d5, v7.d[1]
	fadd	d6, d6, d7
	fadd	d5, d6, d5
	b.ne	.LBB163_7
// %bb.8:                               //   in Loop: Header=BB163_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB163_11
.LBB163_9:                              // %.preheader
                                        //   in Loop: Header=BB163_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB163_10:                             //   Parent Loop BB163_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d6, [x13], #8
	subs	x14, x14, #1
	fadd	d5, d5, d6
	b.ne	.LBB163_10
.LBB163_11:                             //   in Loop: Header=BB163_4 Depth=1
	ldr	d6, [x10, :lo12:init_value]
	fadd	d7, d0, d6
	fmadd	d6, d1, d0, d5
	fmul	d5, d7, d4
	fadd	d5, d6, d5
	fdiv	d7, d5, d6
	fabs	d6, d6
	fcmp	d6, d2
	fcsel	d5, d7, d5, gt
	fabs	d5, d5
	fcmp	d5, d3
	b.mi	.LBB163_3
// %bb.12:                              //   in Loop: Header=BB163_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB163_3
.LBB163_13:
	movi	d2, #0000000000000000
	adrp	x5, .LCPI163_0
	mov	w6, wzr
	ldr	d3, [x5, :lo12:.LCPI163_0]
	adrp	x5, init_value
	fmadd	d1, d1, d0, d2
	fabs	d2, d1
	fcmp	d2, d3
	ldr	d2, [x5, :lo12:init_value]
	b.le	.LBB163_18
// %bb.14:                              // %.preheader4
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x7, .LCPI163_1
	movk	x8, #49343, lsl #48
	ldr	d3, [x7, :lo12:.LCPI163_1]
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	fmov	d4, x8
	b	.LBB163_16
.LBB163_15:                             //   in Loop: Header=BB163_16 Depth=1
	add	w6, w6, #1
	cmp	w6, w4
	b.ge	.LBB163_22
.LBB163_16:                             // =>This Inner Loop Header: Depth=1
	fadd	d5, d0, d2
	fmul	d5, d5, d4
	fadd	d5, d1, d5
	fdiv	d5, d5, d1
	fabs	d5, d5
	fcmp	d5, d3
	b.mi	.LBB163_15
// %bb.17:                              //   in Loop: Header=BB163_16 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d2, [x5, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB163_15
.LBB163_18:                             // %.preheader6
	mov	x7, #70368744177664             // =0x400000000000
	adrp	x8, .LCPI163_1
	movk	x7, #49343, lsl #48
	ldr	d3, [x8, :lo12:.LCPI163_1]
	fmov	d4, x7
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB163_20
.LBB163_19:                             //   in Loop: Header=BB163_20 Depth=1
	add	w6, w6, #1
	cmp	w6, w4
	b.ge	.LBB163_22
.LBB163_20:                             // =>This Inner Loop Header: Depth=1
	fadd	d5, d0, d2
	fmul	d5, d5, d4
	fadd	d5, d1, d5
	fabs	d5, d5
	fcmp	d5, d3
	b.mi	.LBB163_19
// %bb.21:                              //   in Loop: Header=BB163_20 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d2, [x5, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB163_19
.LBB163_22:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB163_24
// %bb.23:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB163_26
.LBB163_24:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB163_27
// %bb.25:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB163_26:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #32                   // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB163_27:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end163:
	.size	_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc, .Lfunc_end163-_Z22test_hoisted_variable1Id19custom_add_variableIdEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
.LCPI164_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI164_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	str	d14, [sp, #-80]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	d13, d12, [sp, #16]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_offset b10, -40
	.cfi_offset b11, -48
	.cfi_offset b12, -56
	.cfi_offset b13, -64
	.cfi_offset b14, -80
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB164_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB164_13
// %bb.2:
	adrp	x12, .LCPI164_0
	dup	v4.2d, v3.d[0]
	dup	v5.2d, v2.d[0]
	ldr	d9, [x12, :lo12:.LCPI164_0]
	mov	x12, #70368744177664            // =0x400000000000
	dup	v6.2d, v1.d[0]
	movk	x12, #49343, lsl #48
	dup	v7.2d, v0.d[0]
	adrp	x11, .LCPI164_1
	fmov	d10, x12
	mov	w8, w5
	ldr	d8, [x11, :lo12:.LCPI164_1]
	mov	w7, wzr
	and	x9, x8, #0x7ffffffc
	add	x10, x6, #16
	adrp	x11, init_value
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB164_4
.LBB164_3:                              //   in Loop: Header=BB164_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB164_17
.LBB164_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB164_7 Depth 2
                                        //     Child Loop BB164_10 Depth 2
	movi	d11, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB164_6
// %bb.5:                               //   in Loop: Header=BB164_4 Depth=1
	mov	x14, xzr
	b	.LBB164_9
.LBB164_6:                              // %.preheader2
                                        //   in Loop: Header=BB164_4 Depth=1
	mov	x13, x10
	mov	x14, x9
.LBB164_7:                              //   Parent Loop BB164_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q13, q12, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	fadd	v13.2d, v4.2d, v13.2d
	fadd	v12.2d, v4.2d, v12.2d
	fadd	v13.2d, v5.2d, v13.2d
	fadd	v12.2d, v5.2d, v12.2d
	fadd	v13.2d, v6.2d, v13.2d
	fadd	v14.2d, v6.2d, v12.2d
	fadd	v13.2d, v7.2d, v13.2d
	mov	d12, v13.d[1]
	fadd	d13, d11, d13
	fadd	v11.2d, v7.2d, v14.2d
	fadd	d13, d13, d12
	mov	d12, v11.d[1]
	fadd	d11, d13, d11
	fadd	d11, d11, d12
	b.ne	.LBB164_7
// %bb.8:                               //   in Loop: Header=BB164_4 Depth=1
	cmp	x9, x8
	mov	x14, x9
	b.eq	.LBB164_11
.LBB164_9:                              // %.preheader
                                        //   in Loop: Header=BB164_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB164_10:                             //   Parent Loop BB164_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d12, [x13], #8
	subs	x14, x14, #1
	fadd	d12, d3, d12
	fadd	d12, d2, d12
	fadd	d12, d1, d12
	fadd	d12, d0, d12
	fadd	d11, d11, d12
	b.ne	.LBB164_10
.LBB164_11:                             //   in Loop: Header=BB164_4 Depth=1
	ldr	d12, [x11, :lo12:init_value]
	fadd	d12, d3, d12
	fadd	d12, d2, d12
	fadd	d12, d1, d12
	fadd	d12, d0, d12
	fmul	d12, d12, d10
	fadd	d12, d11, d12
	fdiv	d13, d12, d11
	fabs	d11, d11
	fcmp	d11, d8
	fcsel	d11, d13, d12, gt
	fabs	d11, d11
	fcmp	d11, d9
	b.mi	.LBB164_3
// %bb.12:                              //   in Loop: Header=BB164_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB164_3
.LBB164_13:
	mov	x7, #70368744177664             // =0x400000000000
	movi	d4, #0000000000000000
	adrp	x6, init_value
	movk	x7, #49343, lsl #48
	adrp	x8, .LCPI164_0
	ldr	d7, [x6, :lo12:init_value]
	fmov	d6, x7
	ldr	d5, [x8, :lo12:.LCPI164_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB164_15
.LBB164_14:                             //   in Loop: Header=BB164_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB164_17
.LBB164_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d8, d3, d7
	fadd	d8, d2, d8
	fadd	d8, d1, d8
	fadd	d8, d0, d8
	fmul	d8, d8, d6
	fadd	d8, d8, d4
	fabs	d8, d8
	fcmp	d8, d5
	b.mi	.LBB164_14
// %bb.16:                              //   in Loop: Header=BB164_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d7, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB164_14
.LBB164_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB164_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB164_21
.LBB164_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB164_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB164_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #16]             // 16-byte Folded Reload
	ldr	d14, [sp], #80                  // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB164_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end164:
	.size	_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end164-_Z14test_variable4Id28custom_add_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc
.LCPI165_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI165_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc,@function
_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc: // @_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-32]!                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -32
	.cfi_remember_state
                                        // kill: def $d0 killed $d0 def $q0
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB165_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB165_13
// %bb.2:
	mov	x13, #70368744177664            // =0x400000000000
	dup	v1.2d, v0.d[0]
	adrp	x12, .LCPI165_1
	movk	x13, #49343, lsl #48
	adrp	x14, .LCPI165_0
	mov	w8, w5
	fmov	d4, x13
	ldr	d2, [x12, :lo12:.LCPI165_1]
	ldr	d3, [x14, :lo12:.LCPI165_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffffc
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB165_4
.LBB165_3:                              //   in Loop: Header=BB165_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB165_17
.LBB165_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB165_7 Depth 2
                                        //     Child Loop BB165_10 Depth 2
	movi	d5, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB165_6
// %bb.5:                               //   in Loop: Header=BB165_4 Depth=1
	mov	x14, xzr
	b	.LBB165_9
.LBB165_6:                              // %.preheader2
                                        //   in Loop: Header=BB165_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB165_7:                              //   Parent Loop BB165_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q7, q6, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	fsub	v8.2d, v7.2d, v1.2d
	mov	d7, v8.d[1]
	fadd	d8, d5, d8
	fsub	v5.2d, v6.2d, v1.2d
	fadd	d7, d8, d7
	mov	d6, v5.d[1]
	fadd	d5, d7, d5
	fadd	d5, d5, d6
	b.ne	.LBB165_7
// %bb.8:                               //   in Loop: Header=BB165_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB165_11
.LBB165_9:                              // %.preheader
                                        //   in Loop: Header=BB165_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB165_10:                             //   Parent Loop BB165_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d6, [x13], #8
	subs	x14, x14, #1
	fsub	d6, d6, d0
	fadd	d5, d5, d6
	b.ne	.LBB165_10
.LBB165_11:                             //   in Loop: Header=BB165_4 Depth=1
	ldr	d6, [x10, :lo12:init_value]
	fsub	d6, d6, d0
	fmul	d6, d6, d4
	fadd	d6, d5, d6
	fdiv	d7, d6, d5
	fabs	d5, d5
	fcmp	d5, d2
	fcsel	d5, d7, d6, gt
	fabs	d5, d5
	fcmp	d5, d3
	b.mi	.LBB165_3
// %bb.12:                              //   in Loop: Header=BB165_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB165_3
.LBB165_13:
	mov	x7, #70368744177664             // =0x400000000000
	movi	d1, #0000000000000000
	adrp	x6, init_value
	movk	x7, #49343, lsl #48
	adrp	x8, .LCPI165_0
	ldr	d4, [x6, :lo12:init_value]
	fmov	d3, x7
	ldr	d2, [x8, :lo12:.LCPI165_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB165_15
.LBB165_14:                             //   in Loop: Header=BB165_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB165_17
.LBB165_15:                             // =>This Inner Loop Header: Depth=1
	fsub	d5, d4, d0
	fmul	d5, d5, d3
	fadd	d5, d5, d1
	fabs	d5, d5
	fcmp	d5, d2
	b.mi	.LBB165_14
// %bb.16:                              //   in Loop: Header=BB165_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d4, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB165_14
.LBB165_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB165_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB165_21
.LBB165_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB165_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB165_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #32                   // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB165_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end165:
	.size	_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc, .Lfunc_end165-_Z14test_variable1Id19custom_sub_variableIdEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
.LCPI166_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI166_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	str	d14, [sp, #-80]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	d13, d12, [sp, #16]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_offset b10, -40
	.cfi_offset b11, -48
	.cfi_offset b12, -56
	.cfi_offset b13, -64
	.cfi_offset b14, -80
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB166_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB166_13
// %bb.2:
	adrp	x12, .LCPI166_0
	dup	v4.2d, v3.d[0]
	dup	v5.2d, v2.d[0]
	ldr	d9, [x12, :lo12:.LCPI166_0]
	mov	x12, #70368744177664            // =0x400000000000
	dup	v6.2d, v1.d[0]
	movk	x12, #49343, lsl #48
	dup	v7.2d, v0.d[0]
	adrp	x11, .LCPI166_1
	fmov	d10, x12
	mov	w8, w5
	ldr	d8, [x11, :lo12:.LCPI166_1]
	mov	w7, wzr
	and	x9, x8, #0x7ffffffc
	add	x10, x6, #16
	adrp	x11, init_value
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB166_4
.LBB166_3:                              //   in Loop: Header=BB166_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB166_17
.LBB166_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB166_7 Depth 2
                                        //     Child Loop BB166_10 Depth 2
	movi	d11, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB166_6
// %bb.5:                               //   in Loop: Header=BB166_4 Depth=1
	mov	x14, xzr
	b	.LBB166_9
.LBB166_6:                              // %.preheader2
                                        //   in Loop: Header=BB166_4 Depth=1
	mov	x13, x10
	mov	x14, x9
.LBB166_7:                              //   Parent Loop BB166_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q13, q12, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	fsub	v13.2d, v13.2d, v4.2d
	fsub	v12.2d, v12.2d, v4.2d
	fsub	v13.2d, v13.2d, v5.2d
	fsub	v12.2d, v12.2d, v5.2d
	fsub	v13.2d, v13.2d, v6.2d
	fsub	v14.2d, v12.2d, v6.2d
	fsub	v13.2d, v13.2d, v7.2d
	mov	d12, v13.d[1]
	fadd	d13, d11, d13
	fsub	v11.2d, v14.2d, v7.2d
	fadd	d13, d13, d12
	mov	d12, v11.d[1]
	fadd	d11, d13, d11
	fadd	d11, d11, d12
	b.ne	.LBB166_7
// %bb.8:                               //   in Loop: Header=BB166_4 Depth=1
	cmp	x9, x8
	mov	x14, x9
	b.eq	.LBB166_11
.LBB166_9:                              // %.preheader
                                        //   in Loop: Header=BB166_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB166_10:                             //   Parent Loop BB166_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d12, [x13], #8
	subs	x14, x14, #1
	fsub	d12, d12, d3
	fsub	d12, d12, d2
	fsub	d12, d12, d1
	fsub	d12, d12, d0
	fadd	d11, d11, d12
	b.ne	.LBB166_10
.LBB166_11:                             //   in Loop: Header=BB166_4 Depth=1
	ldr	d12, [x11, :lo12:init_value]
	fsub	d12, d12, d3
	fsub	d12, d12, d2
	fsub	d12, d12, d1
	fsub	d12, d12, d0
	fmul	d12, d12, d10
	fadd	d12, d11, d12
	fdiv	d13, d12, d11
	fabs	d11, d11
	fcmp	d11, d8
	fcsel	d11, d13, d12, gt
	fabs	d11, d11
	fcmp	d11, d9
	b.mi	.LBB166_3
// %bb.12:                              //   in Loop: Header=BB166_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB166_3
.LBB166_13:
	mov	x7, #70368744177664             // =0x400000000000
	movi	d4, #0000000000000000
	adrp	x6, init_value
	movk	x7, #49343, lsl #48
	adrp	x8, .LCPI166_0
	ldr	d7, [x6, :lo12:init_value]
	fmov	d6, x7
	ldr	d5, [x8, :lo12:.LCPI166_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB166_15
.LBB166_14:                             //   in Loop: Header=BB166_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB166_17
.LBB166_15:                             // =>This Inner Loop Header: Depth=1
	fsub	d8, d7, d3
	fsub	d8, d8, d2
	fsub	d8, d8, d1
	fsub	d8, d8, d0
	fmul	d8, d8, d6
	fadd	d8, d8, d4
	fabs	d8, d8
	fcmp	d8, d5
	b.mi	.LBB166_14
// %bb.16:                              //   in Loop: Header=BB166_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d7, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB166_14
.LBB166_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB166_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB166_21
.LBB166_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB166_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB166_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #16]             // 16-byte Folded Reload
	ldr	d14, [sp], #80                  // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB166_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end166:
	.size	_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end166-_Z14test_variable4Id28custom_sub_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc
.LCPI167_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI167_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc,@function
_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc: // @_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_remember_state
                                        // kill: def $d0 killed $d0 def $q0
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB167_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB167_13
// %bb.2:
	mov	x13, #70368744177664            // =0x400000000000
	adrp	x12, .LCPI167_1
	adrp	x14, .LCPI167_0
	movk	x13, #49343, lsl #48
	mov	w8, w5
	ldr	d1, [x12, :lo12:.LCPI167_1]
	fmov	d3, x13
	ldr	d2, [x14, :lo12:.LCPI167_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffffc
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB167_4
.LBB167_3:                              //   in Loop: Header=BB167_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB167_17
.LBB167_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB167_7 Depth 2
                                        //     Child Loop BB167_10 Depth 2
	movi	d4, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB167_6
// %bb.5:                               //   in Loop: Header=BB167_4 Depth=1
	mov	x14, xzr
	b	.LBB167_9
.LBB167_6:                              // %.preheader2
                                        //   in Loop: Header=BB167_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB167_7:                              //   Parent Loop BB167_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q6, q5, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	fmul	v7.2d, v6.2d, v0.d[0]
	mov	d6, v7.d[1]
	fadd	d7, d4, d7
	fmul	v4.2d, v5.2d, v0.d[0]
	fadd	d6, d7, d6
	mov	d5, v4.d[1]
	fadd	d4, d6, d4
	fadd	d4, d4, d5
	b.ne	.LBB167_7
// %bb.8:                               //   in Loop: Header=BB167_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB167_11
.LBB167_9:                              // %.preheader
                                        //   in Loop: Header=BB167_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB167_10:                             //   Parent Loop BB167_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d5, [x13], #8
	subs	x14, x14, #1
	fmul	d5, d0, d5
	fadd	d4, d4, d5
	b.ne	.LBB167_10
.LBB167_11:                             //   in Loop: Header=BB167_4 Depth=1
	ldr	d5, [x10, :lo12:init_value]
	fmul	d5, d0, d5
	fmul	d5, d5, d3
	fadd	d5, d4, d5
	fdiv	d6, d5, d4
	fabs	d4, d4
	fcmp	d4, d1
	fcsel	d4, d6, d5, gt
	fabs	d4, d4
	fcmp	d4, d2
	b.mi	.LBB167_3
// %bb.12:                              //   in Loop: Header=BB167_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB167_3
.LBB167_13:
	mov	x7, #70368744177664             // =0x400000000000
	movi	d1, #0000000000000000
	adrp	x6, init_value
	movk	x7, #49343, lsl #48
	adrp	x8, .LCPI167_0
	ldr	d4, [x6, :lo12:init_value]
	fmov	d3, x7
	ldr	d2, [x8, :lo12:.LCPI167_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB167_15
.LBB167_14:                             //   in Loop: Header=BB167_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB167_17
.LBB167_15:                             // =>This Inner Loop Header: Depth=1
	fmul	d5, d0, d4
	fmul	d5, d5, d3
	fadd	d5, d5, d1
	fabs	d5, d5
	fcmp	d5, d2
	b.mi	.LBB167_14
// %bb.16:                              //   in Loop: Header=BB167_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d4, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB167_14
.LBB167_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB167_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB167_21
.LBB167_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB167_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB167_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB167_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end167:
	.size	_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc, .Lfunc_end167-_Z14test_variable1Id24custom_multiply_variableIdEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
.LCPI168_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI168_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	str	d10, [sp, #-48]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_offset b10, -48
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB168_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB168_13
// %bb.2:
	mov	x13, #70368744177664            // =0x400000000000
	adrp	x12, .LCPI168_1
	adrp	x14, .LCPI168_0
	movk	x13, #49343, lsl #48
	mov	w8, w5
	ldr	d4, [x12, :lo12:.LCPI168_1]
	fmov	d6, x13
	ldr	d5, [x14, :lo12:.LCPI168_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffffc
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB168_4
.LBB168_3:                              //   in Loop: Header=BB168_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB168_17
.LBB168_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB168_7 Depth 2
                                        //     Child Loop BB168_10 Depth 2
	movi	d7, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB168_6
// %bb.5:                               //   in Loop: Header=BB168_4 Depth=1
	mov	x14, xzr
	b	.LBB168_9
.LBB168_6:                              // %.preheader2
                                        //   in Loop: Header=BB168_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB168_7:                              //   Parent Loop BB168_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q9, q8, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	fmul	v9.2d, v9.2d, v3.d[0]
	fmul	v8.2d, v8.2d, v3.d[0]
	fmul	v9.2d, v9.2d, v2.d[0]
	fmul	v8.2d, v8.2d, v2.d[0]
	fmul	v9.2d, v9.2d, v1.d[0]
	fmul	v10.2d, v8.2d, v1.d[0]
	fmul	v9.2d, v9.2d, v0.d[0]
	mov	d8, v9.d[1]
	fadd	d9, d7, d9
	fmul	v7.2d, v10.2d, v0.d[0]
	fadd	d9, d9, d8
	mov	d8, v7.d[1]
	fadd	d7, d9, d7
	fadd	d7, d7, d8
	b.ne	.LBB168_7
// %bb.8:                               //   in Loop: Header=BB168_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB168_11
.LBB168_9:                              // %.preheader
                                        //   in Loop: Header=BB168_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB168_10:                             //   Parent Loop BB168_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d8, [x13], #8
	subs	x14, x14, #1
	fmul	d8, d3, d8
	fmul	d8, d2, d8
	fmul	d8, d1, d8
	fmul	d8, d0, d8
	fadd	d7, d7, d8
	b.ne	.LBB168_10
.LBB168_11:                             //   in Loop: Header=BB168_4 Depth=1
	ldr	d8, [x10, :lo12:init_value]
	fmul	d8, d3, d8
	fmul	d8, d2, d8
	fmul	d8, d1, d8
	fmul	d8, d0, d8
	fmul	d8, d8, d6
	fadd	d8, d7, d8
	fdiv	d9, d8, d7
	fabs	d7, d7
	fcmp	d7, d4
	fcsel	d7, d9, d8, gt
	fabs	d7, d7
	fcmp	d7, d5
	b.mi	.LBB168_3
// %bb.12:                              //   in Loop: Header=BB168_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB168_3
.LBB168_13:
	mov	x7, #70368744177664             // =0x400000000000
	movi	d4, #0000000000000000
	adrp	x6, init_value
	movk	x7, #49343, lsl #48
	adrp	x8, .LCPI168_0
	ldr	d7, [x6, :lo12:init_value]
	fmov	d6, x7
	ldr	d5, [x8, :lo12:.LCPI168_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB168_15
.LBB168_14:                             //   in Loop: Header=BB168_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB168_17
.LBB168_15:                             // =>This Inner Loop Header: Depth=1
	fmul	d8, d3, d7
	fmul	d8, d2, d8
	fmul	d8, d1, d8
	fmul	d8, d0, d8
	fmul	d8, d8, d6
	fadd	d8, d8, d4
	fabs	d8, d8
	fcmp	d8, d5
	b.mi	.LBB168_14
// %bb.16:                              //   in Loop: Header=BB168_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d7, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB168_14
.LBB168_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB168_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB168_21
.LBB168_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB168_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB168_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldr	d10, [sp], #48                  // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	ret
.LBB168_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end168:
	.size	_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end168-_Z14test_variable4Id33custom_multiply_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
.LCPI169_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI169_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	stp	d9, d8, [sp, #-32]!             // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB169_17
// %bb.1:
	fmul	d2, d3, d2
	cmp	w5, #0
	fmul	d1, d2, d1
	b.le	.LBB169_13
// %bb.2:
	mov	x14, #70368744177664            // =0x400000000000
	adrp	x12, .LCPI169_1
	adrp	x13, .LCPI169_0
	movk	x14, #49343, lsl #48
	dup	v2.2d, v0.d[0]
	mov	w8, w5
	fmov	d5, x14
	ldr	d3, [x12, :lo12:.LCPI169_1]
	ldr	d4, [x13, :lo12:.LCPI169_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffffc
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB169_4
.LBB169_3:                              //   in Loop: Header=BB169_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB169_17
.LBB169_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB169_7 Depth 2
                                        //     Child Loop BB169_10 Depth 2
	movi	d6, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB169_6
// %bb.5:                               //   in Loop: Header=BB169_4 Depth=1
	mov	x14, xzr
	b	.LBB169_9
.LBB169_6:                              // %.preheader2
                                        //   in Loop: Header=BB169_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB169_7:                              //   Parent Loop BB169_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q8, q7, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	fmla	v8.2d, v2.2d, v1.d[0]
	fmla	v7.2d, v2.2d, v1.d[0]
	mov	d9, v8.d[1]
	fadd	d6, d6, d8
	fadd	d8, d6, d9
	mov	d6, v7.d[1]
	fadd	d7, d8, d7
	fadd	d6, d7, d6
	b.ne	.LBB169_7
// %bb.8:                               //   in Loop: Header=BB169_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB169_11
.LBB169_9:                              // %.preheader
                                        //   in Loop: Header=BB169_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB169_10:                             //   Parent Loop BB169_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d7, [x13], #8
	subs	x14, x14, #1
	fmadd	d7, d1, d0, d7
	fadd	d6, d6, d7
	b.ne	.LBB169_10
.LBB169_11:                             //   in Loop: Header=BB169_4 Depth=1
	ldr	d7, [x10, :lo12:init_value]
	fmadd	d7, d1, d0, d7
	fmul	d7, d7, d5
	fadd	d7, d6, d7
	fdiv	d8, d7, d6
	fabs	d6, d6
	fcmp	d6, d3
	fcsel	d6, d8, d7, gt
	fabs	d6, d6
	fcmp	d6, d4
	b.mi	.LBB169_3
// %bb.12:                              //   in Loop: Header=BB169_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB169_3
.LBB169_13:
	mov	x8, #70368744177664             // =0x400000000000
	movi	d2, #0000000000000000
	adrp	x6, init_value
	movk	x8, #49343, lsl #48
	adrp	x7, .LCPI169_0
	ldr	d5, [x6, :lo12:init_value]
	fmov	d4, x8
	ldr	d3, [x7, :lo12:.LCPI169_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB169_15
.LBB169_14:                             //   in Loop: Header=BB169_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB169_17
.LBB169_15:                             // =>This Inner Loop Header: Depth=1
	fmadd	d6, d1, d0, d5
	fmul	d6, d6, d4
	fadd	d6, d6, d2
	fabs	d6, d6
	fcmp	d6, d3
	b.mi	.LBB169_14
// %bb.16:                              //   in Loop: Header=BB169_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d5, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB169_14
.LBB169_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB169_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB169_21
.LBB169_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB169_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB169_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldp	d9, d8, [sp], #32               // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	ret
.LBB169_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end169:
	.size	_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end169-_Z14test_variable4Id34custom_multiply_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc
.LCPI170_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI170_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc,"axG",@progbits,_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc,comdat
	.weak	_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc
	.p2align	2
	.type	_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc,@function
_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc: // @_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-32]!                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -32
	.cfi_remember_state
                                        // kill: def $d0 killed $d0 def $q0
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB170_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB170_13
// %bb.2:
	mov	x13, #70368744177664            // =0x400000000000
	dup	v1.2d, v0.d[0]
	adrp	x12, .LCPI170_1
	movk	x13, #49343, lsl #48
	adrp	x14, .LCPI170_0
	mov	w8, w5
	fmov	d4, x13
	ldr	d2, [x12, :lo12:.LCPI170_1]
	ldr	d3, [x14, :lo12:.LCPI170_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffffc
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB170_4
.LBB170_3:                              //   in Loop: Header=BB170_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB170_17
.LBB170_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB170_7 Depth 2
                                        //     Child Loop BB170_10 Depth 2
	movi	d5, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB170_6
// %bb.5:                               //   in Loop: Header=BB170_4 Depth=1
	mov	x14, xzr
	b	.LBB170_9
.LBB170_6:                              // %.preheader2
                                        //   in Loop: Header=BB170_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB170_7:                              //   Parent Loop BB170_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q6, q7, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	fdiv	v6.2d, v6.2d, v1.2d
	fdiv	v7.2d, v7.2d, v1.2d
	mov	d8, v6.d[1]
	fadd	d5, d5, d6
	fadd	d6, d5, d8
	mov	d5, v7.d[1]
	fadd	d6, d6, d7
	fadd	d5, d6, d5
	b.ne	.LBB170_7
// %bb.8:                               //   in Loop: Header=BB170_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB170_11
.LBB170_9:                              // %.preheader
                                        //   in Loop: Header=BB170_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB170_10:                             //   Parent Loop BB170_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d6, [x13], #8
	subs	x14, x14, #1
	fdiv	d6, d6, d0
	fadd	d5, d5, d6
	b.ne	.LBB170_10
.LBB170_11:                             //   in Loop: Header=BB170_4 Depth=1
	ldr	d6, [x10, :lo12:init_value]
	fdiv	d6, d6, d0
	fmul	d6, d6, d4
	fadd	d6, d5, d6
	fdiv	d7, d6, d5
	fabs	d5, d5
	fcmp	d5, d2
	fcsel	d5, d7, d6, gt
	fabs	d5, d5
	fcmp	d5, d3
	b.mi	.LBB170_3
// %bb.12:                              //   in Loop: Header=BB170_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB170_3
.LBB170_13:
	mov	x7, #70368744177664             // =0x400000000000
	movi	d1, #0000000000000000
	adrp	x6, init_value
	movk	x7, #49343, lsl #48
	adrp	x8, .LCPI170_0
	ldr	d4, [x6, :lo12:init_value]
	fmov	d3, x7
	ldr	d2, [x8, :lo12:.LCPI170_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB170_15
.LBB170_14:                             //   in Loop: Header=BB170_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB170_17
.LBB170_15:                             // =>This Inner Loop Header: Depth=1
	fdiv	d5, d4, d0
	fmul	d5, d5, d3
	fadd	d5, d5, d1
	fabs	d5, d5
	fcmp	d5, d2
	b.mi	.LBB170_14
// %bb.16:                              //   in Loop: Header=BB170_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d4, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB170_14
.LBB170_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB170_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB170_21
.LBB170_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB170_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB170_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #32                   // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB170_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end170:
	.size	_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc, .Lfunc_end170-_Z14test_variable1Id22custom_divide_variableIdEEvPT_iS2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
.LCPI171_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI171_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	str	d14, [sp, #-80]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	d13, d12, [sp, #16]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_offset b10, -40
	.cfi_offset b11, -48
	.cfi_offset b12, -56
	.cfi_offset b13, -64
	.cfi_offset b14, -80
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB171_17
// %bb.1:
	cmp	w5, #0
	b.le	.LBB171_13
// %bb.2:
	adrp	x12, .LCPI171_0
	dup	v4.2d, v3.d[0]
	dup	v5.2d, v2.d[0]
	ldr	d9, [x12, :lo12:.LCPI171_0]
	mov	x12, #70368744177664            // =0x400000000000
	dup	v6.2d, v1.d[0]
	movk	x12, #49343, lsl #48
	dup	v7.2d, v0.d[0]
	adrp	x11, .LCPI171_1
	fmov	d10, x12
	mov	w8, w5
	ldr	d8, [x11, :lo12:.LCPI171_1]
	mov	w7, wzr
	and	x9, x8, #0x7ffffffc
	add	x10, x6, #16
	adrp	x11, init_value
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB171_4
.LBB171_3:                              //   in Loop: Header=BB171_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB171_17
.LBB171_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB171_7 Depth 2
                                        //     Child Loop BB171_10 Depth 2
	movi	d11, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB171_6
// %bb.5:                               //   in Loop: Header=BB171_4 Depth=1
	mov	x14, xzr
	b	.LBB171_9
.LBB171_6:                              // %.preheader2
                                        //   in Loop: Header=BB171_4 Depth=1
	mov	x13, x10
	mov	x14, x9
.LBB171_7:                              //   Parent Loop BB171_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q12, q13, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	fdiv	v12.2d, v12.2d, v4.2d
	fdiv	v13.2d, v13.2d, v4.2d
	fdiv	v12.2d, v12.2d, v5.2d
	fdiv	v13.2d, v13.2d, v5.2d
	fdiv	v12.2d, v12.2d, v6.2d
	fdiv	v13.2d, v13.2d, v6.2d
	fdiv	v12.2d, v12.2d, v7.2d
	fdiv	v13.2d, v13.2d, v7.2d
	mov	d14, v12.d[1]
	fadd	d11, d11, d12
	fadd	d12, d11, d14
	mov	d11, v13.d[1]
	fadd	d12, d12, d13
	fadd	d11, d12, d11
	b.ne	.LBB171_7
// %bb.8:                               //   in Loop: Header=BB171_4 Depth=1
	cmp	x9, x8
	mov	x14, x9
	b.eq	.LBB171_11
.LBB171_9:                              // %.preheader
                                        //   in Loop: Header=BB171_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB171_10:                             //   Parent Loop BB171_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d12, [x13], #8
	subs	x14, x14, #1
	fdiv	d12, d12, d3
	fdiv	d12, d12, d2
	fdiv	d12, d12, d1
	fdiv	d12, d12, d0
	fadd	d11, d11, d12
	b.ne	.LBB171_10
.LBB171_11:                             //   in Loop: Header=BB171_4 Depth=1
	ldr	d12, [x11, :lo12:init_value]
	fdiv	d12, d12, d3
	fdiv	d12, d12, d2
	fdiv	d12, d12, d1
	fdiv	d12, d12, d0
	fmul	d12, d12, d10
	fadd	d12, d11, d12
	fdiv	d13, d12, d11
	fabs	d11, d11
	fcmp	d11, d8
	fcsel	d11, d13, d12, gt
	fabs	d11, d11
	fcmp	d11, d9
	b.mi	.LBB171_3
// %bb.12:                              //   in Loop: Header=BB171_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB171_3
.LBB171_13:
	mov	x7, #70368744177664             // =0x400000000000
	movi	d4, #0000000000000000
	adrp	x6, init_value
	movk	x7, #49343, lsl #48
	adrp	x8, .LCPI171_0
	ldr	d7, [x6, :lo12:init_value]
	fmov	d6, x7
	ldr	d5, [x8, :lo12:.LCPI171_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB171_15
.LBB171_14:                             //   in Loop: Header=BB171_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB171_17
.LBB171_15:                             // =>This Inner Loop Header: Depth=1
	fdiv	d8, d7, d3
	fdiv	d8, d8, d2
	fdiv	d8, d8, d1
	fdiv	d8, d8, d0
	fmul	d8, d8, d6
	fadd	d8, d8, d4
	fabs	d8, d8
	fcmp	d8, d5
	b.mi	.LBB171_14
// %bb.16:                              //   in Loop: Header=BB171_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d7, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB171_14
.LBB171_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB171_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB171_21
.LBB171_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB171_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB171_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #16]             // 16-byte Folded Reload
	ldr	d14, [sp], #80                  // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB171_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end171:
	.size	_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end171-_Z14test_variable4Id31custom_divide_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
.LCPI172_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI172_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-32]!                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -32
	.cfi_remember_state
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB172_17
// %bb.1:
	fdiv	d2, d3, d2
	cmp	w5, #0
	fdiv	d1, d2, d1
	fdiv	d0, d1, d0
	b.le	.LBB172_13
// %bb.2:
	mov	x13, #70368744177664            // =0x400000000000
	dup	v1.2d, v0.d[0]
	adrp	x12, .LCPI172_1
	movk	x13, #49343, lsl #48
	adrp	x14, .LCPI172_0
	mov	w8, w5
	fmov	d4, x13
	ldr	d2, [x12, :lo12:.LCPI172_1]
	ldr	d3, [x14, :lo12:.LCPI172_0]
	mov	w7, wzr
	add	x9, x6, #16
	adrp	x10, init_value
	and	x11, x8, #0x7ffffffc
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB172_4
.LBB172_3:                              //   in Loop: Header=BB172_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB172_17
.LBB172_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB172_7 Depth 2
                                        //     Child Loop BB172_10 Depth 2
	movi	d5, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB172_6
// %bb.5:                               //   in Loop: Header=BB172_4 Depth=1
	mov	x14, xzr
	b	.LBB172_9
.LBB172_6:                              // %.preheader2
                                        //   in Loop: Header=BB172_4 Depth=1
	mov	x13, x9
	mov	x14, x11
.LBB172_7:                              //   Parent Loop BB172_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q7, q6, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	fadd	v8.2d, v1.2d, v7.2d
	fadd	v6.2d, v1.2d, v6.2d
	mov	d7, v8.d[1]
	fadd	d5, d5, d8
	fadd	d7, d5, d7
	mov	d5, v6.d[1]
	fadd	d6, d7, d6
	fadd	d5, d6, d5
	b.ne	.LBB172_7
// %bb.8:                               //   in Loop: Header=BB172_4 Depth=1
	cmp	x11, x8
	mov	x14, x11
	b.eq	.LBB172_11
.LBB172_9:                              // %.preheader
                                        //   in Loop: Header=BB172_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB172_10:                             //   Parent Loop BB172_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d6, [x13], #8
	subs	x14, x14, #1
	fadd	d6, d0, d6
	fadd	d5, d5, d6
	b.ne	.LBB172_10
.LBB172_11:                             //   in Loop: Header=BB172_4 Depth=1
	ldr	d6, [x10, :lo12:init_value]
	fadd	d6, d0, d6
	fmul	d6, d6, d4
	fadd	d6, d5, d6
	fdiv	d7, d6, d5
	fabs	d5, d5
	fcmp	d5, d2
	fcsel	d5, d7, d6, gt
	fabs	d5, d5
	fcmp	d5, d3
	b.mi	.LBB172_3
// %bb.12:                              //   in Loop: Header=BB172_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB172_3
.LBB172_13:
	mov	x8, #70368744177664             // =0x400000000000
	movi	d1, #0000000000000000
	adrp	x6, init_value
	movk	x8, #49343, lsl #48
	adrp	x7, .LCPI172_0
	ldr	d4, [x6, :lo12:init_value]
	fmov	d3, x8
	ldr	d2, [x7, :lo12:.LCPI172_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB172_15
.LBB172_14:                             //   in Loop: Header=BB172_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB172_17
.LBB172_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d5, d0, d4
	fmul	d5, d5, d3
	fadd	d5, d5, d1
	fabs	d5, d5
	fcmp	d5, d2
	b.mi	.LBB172_14
// %bb.16:                              //   in Loop: Header=BB172_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d4, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB172_14
.LBB172_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB172_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB172_21
.LBB172_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB172_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB172_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 32
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #32                   // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB172_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end172:
	.size	_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end172-_Z14test_variable4Id32custom_divide_multiple_variable2IdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
.LCPI173_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI173_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,"axG",@progbits,_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,comdat
	.weak	_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.p2align	2
	.type	_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc,@function
_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc: // @_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_startproc
// %bb.0:
	str	d10, [sp, #-48]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 48
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	.cfi_offset b8, -24
	.cfi_offset b9, -32
	.cfi_offset b10, -48
	.cfi_remember_state
                                        // kill: def $d0 killed $d0 def $q0
	bl	clock
	adrp	x3, iterations
	adrp	x2, start_time
	adrp	x1, current_test
	ldr	w4, [x3, :lo12:iterations]
	str	x0, [x2, :lo12:start_time]
	cmp	w4, #1
	b.lt	.LBB173_17
// %bb.1:
	fmul	d2, d3, d2
	cmp	w5, #0
	fdiv	d1, d2, d1
	b.le	.LBB173_13
// %bb.2:
	mov	x13, #70368744177664            // =0x400000000000
	dup	v2.2d, v0.d[0]
	dup	v3.2d, v1.d[0]
	movk	x13, #49343, lsl #48
	adrp	x12, .LCPI173_1
	adrp	x14, .LCPI173_0
	fmov	d6, x13
	mov	w8, w5
	ldr	d4, [x12, :lo12:.LCPI173_1]
	ldr	d5, [x14, :lo12:.LCPI173_0]
	mov	w7, wzr
	add	x9, x6, #16
	and	x10, x8, #0x7ffffffc
	adrp	x11, init_value
	adrp	x12, .L.str.179
	add	x12, x12, :lo12:.L.str.179
	b	.LBB173_4
.LBB173_3:                              //   in Loop: Header=BB173_4 Depth=1
	add	w7, w7, #1
	cmp	w7, w4
	b.ge	.LBB173_17
.LBB173_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB173_7 Depth 2
                                        //     Child Loop BB173_10 Depth 2
	movi	d7, #0000000000000000
	cmp	w5, #4
	b.hs	.LBB173_6
// %bb.5:                               //   in Loop: Header=BB173_4 Depth=1
	mov	x14, xzr
	b	.LBB173_9
.LBB173_6:                              // %.preheader2
                                        //   in Loop: Header=BB173_4 Depth=1
	mov	x13, x9
	mov	x14, x10
.LBB173_7:                              //   Parent Loop BB173_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q9, q8, [x13, #-16]
	subs	x14, x14, #4
	add	x13, x13, #32
	fadd	v9.2d, v2.2d, v9.2d
	fadd	v10.2d, v2.2d, v8.2d
	fsub	v9.2d, v9.2d, v3.2d
	mov	d8, v9.d[1]
	fadd	d9, d7, d9
	fsub	v7.2d, v10.2d, v3.2d
	fadd	d9, d9, d8
	mov	d8, v7.d[1]
	fadd	d7, d9, d7
	fadd	d7, d7, d8
	b.ne	.LBB173_7
// %bb.8:                               //   in Loop: Header=BB173_4 Depth=1
	cmp	x10, x8
	mov	x14, x10
	b.eq	.LBB173_11
.LBB173_9:                              // %.preheader
                                        //   in Loop: Header=BB173_4 Depth=1
	add	x13, x6, x14, lsl #3
	sub	x14, x8, x14
.LBB173_10:                             //   Parent Loop BB173_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d8, [x13], #8
	subs	x14, x14, #1
	fadd	d8, d0, d8
	fsub	d8, d8, d1
	fadd	d7, d7, d8
	b.ne	.LBB173_10
.LBB173_11:                             //   in Loop: Header=BB173_4 Depth=1
	ldr	d8, [x11, :lo12:init_value]
	fadd	d8, d0, d8
	fsub	d8, d8, d1
	fmul	d8, d8, d6
	fadd	d8, d7, d8
	fdiv	d9, d8, d7
	fabs	d7, d7
	fcmp	d7, d4
	fcsel	d7, d9, d8, gt
	fabs	d7, d7
	fcmp	d7, d5
	b.mi	.LBB173_3
// %bb.12:                              //   in Loop: Header=BB173_4 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x12
	bl	printf
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB173_3
.LBB173_13:
	mov	x8, #70368744177664             // =0x400000000000
	movi	d2, #0000000000000000
	adrp	x6, init_value
	movk	x8, #49343, lsl #48
	adrp	x7, .LCPI173_0
	ldr	d5, [x6, :lo12:init_value]
	fmov	d4, x8
	ldr	d3, [x7, :lo12:.LCPI173_0]
	mov	w5, wzr
	adrp	x7, .L.str.179
	add	x7, x7, :lo12:.L.str.179
	b	.LBB173_15
.LBB173_14:                             //   in Loop: Header=BB173_15 Depth=1
	add	w5, w5, #1
	cmp	w5, w4
	b.ge	.LBB173_17
.LBB173_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d6, d0, d5
	fsub	d6, d6, d1
	fmul	d6, d6, d4
	fadd	d6, d6, d2
	fabs	d6, d6
	fcmp	d6, d3
	b.mi	.LBB173_14
// %bb.16:                              //   in Loop: Header=BB173_15 Depth=1
	ldr	w1, [x1, :lo12:current_test]
	mov	x0, x7
	bl	printf
	ldr	d5, [x6, :lo12:init_value]
	ldr	w4, [x3, :lo12:iterations]
	b	.LBB173_14
.LBB173_17:
	bl	clock
	adrp	x7, results
	adrp	x5, allocated_results
	ldr	x2, [x2, :lo12:start_time]
	ldr	x4, [x7, :lo12:results]
	ldr	w8, [x5, :lo12:allocated_results]
	mov	x3, x0
	adrp	x6, end_time
	str	x0, [x6, :lo12:end_time]
	cbz	x4, .LBB173_19
// %bb.18:
	ldr	w6, [x1, :lo12:current_test]
	cmp	w6, w8
	b.lt	.LBB173_21
.LBB173_19:
	add	w6, w8, #10
	mov	x0, x4
	sbfiz	x1, x6, #4, #32
	str	w6, [x5, :lo12:allocated_results]
	bl	realloc
	str	x0, [x7, :lo12:results]
	cbz	x0, .LBB173_22
// %bb.20:
	ldr	w6, [x1, :lo12:current_test]
	mov	x4, x0
.LBB173_21:
	sub	x2, x3, x2
	scvtf	d0, x2
	mov	x2, #145685290680320            // =0x848000000000
	movk	x2, #16686, lsl #48
	fmov	d1, x2
	add	x2, x4, w6, sxtw #4
	str	x0, [x2, #8]
	add	w0, w6, #1
	fdiv	d0, d0, d1
	str	d0, [x2]
	str	w0, [x1, :lo12:current_test]
	.cfi_def_cfa wsp, 48
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldr	d10, [sp], #48                  // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	ret
.LBB173_22:
	.cfi_restore_state
	ldr	w0, [x5, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	mov	w1, w0
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end173:
	.size	_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc, .Lfunc_end173-_Z14test_variable4Id30custom_mixed_multiple_variableIdEEvPT_iS2_S2_S2_S2_PKc
	.cfi_endproc
                                        // -- End function
	.type	results,@object                 // @results
	.bss
	.globl	results
	.p2align	3, 0x0
results:
	.xword	0
	.size	results, 8

	.type	current_test,@object            // @current_test
	.globl	current_test
	.p2align	2, 0x0
current_test:
	.word	0                               // 0x0
	.size	current_test, 4

	.type	allocated_results,@object       // @allocated_results
	.globl	allocated_results
	.p2align	2, 0x0
allocated_results:
	.word	0                               // 0x0
	.size	allocated_results, 4

	.type	.L.str,@object                  // @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Could not allocate %d results\n"
	.size	.L.str, 31

	.type	.L.str.1,@object                // @.str.1
.L.str.1:
	.asciz	"\ntest %*s description   absolute   operations   ratio with\n"
	.size	.L.str.1, 60

	.type	.L.str.2,@object                // @.str.2
.L.str.2:
	.asciz	" "
	.size	.L.str.2, 2

	.type	.L.str.3,@object                // @.str.3
.L.str.3:
	.asciz	"number %*s time       per second   test0\n\n"
	.size	.L.str.3, 43

	.type	.L.str.4,@object                // @.str.4
.L.str.4:
	.asciz	"%2i %*s\"%s\"  %5.2f sec   %5.2f M     %.2f\n"
	.size	.L.str.4, 43

	.type	.L.str.5,@object                // @.str.5
.L.str.5:
	.zero	1
	.size	.L.str.5, 1

	.type	.L.str.6,@object                // @.str.6
.L.str.6:
	.asciz	"\nTotal absolute time for %s: %.2f sec\n"
	.size	.L.str.6, 39

	.type	.L.str.7,@object                // @.str.7
.L.str.7:
	.asciz	"\n%s Penalty: %.2f\n\n"
	.size	.L.str.7, 20

	.type	.L.str.8,@object                // @.str.8
.L.str.8:
	.asciz	"\ntest %*s description   absolute\n"
	.size	.L.str.8, 34

	.type	.L.str.9,@object                // @.str.9
.L.str.9:
	.asciz	"number %*s time\n\n"
	.size	.L.str.9, 18

	.type	.L.str.10,@object               // @.str.10
.L.str.10:
	.asciz	"%2i %*s\"%s\"  %5.2f sec\n"
	.size	.L.str.10, 24

	.type	start_time,@object              // @start_time
	.bss
	.globl	start_time
	.p2align	3, 0x0
start_time:
	.xword	0                               // 0x0
	.size	start_time, 8

	.type	end_time,@object                // @end_time
	.globl	end_time
	.p2align	3, 0x0
end_time:
	.xword	0                               // 0x0
	.size	end_time, 8

	.type	iterations,@object              // @iterations
	.data
	.globl	iterations
	.p2align	2, 0x0
iterations:
	.word	1000                            // 0x3e8
	.size	iterations, 4

	.type	init_value,@object              // @init_value
	.globl	init_value
	.p2align	3, 0x0
init_value:
	.xword	0x3ff0000000000000              // double 1
	.size	init_value, 8

	.type	dataDouble,@object              // @dataDouble
	.bss
	.globl	dataDouble
	.p2align	3, 0x0
dataDouble:
	.zero	64000
	.size	dataDouble, 64000

	.type	dataFloat,@object               // @dataFloat
	.globl	dataFloat
	.p2align	2, 0x0
dataFloat:
	.zero	32000
	.size	dataFloat, 32000

	.type	data64unsigned,@object          // @data64unsigned
	.globl	data64unsigned
	.p2align	3, 0x0
data64unsigned:
	.zero	64000
	.size	data64unsigned, 64000

	.type	data64,@object                  // @data64
	.globl	data64
	.p2align	3, 0x0
data64:
	.zero	64000
	.size	data64, 64000

	.type	data32unsigned,@object          // @data32unsigned
	.globl	data32unsigned
	.p2align	2, 0x0
data32unsigned:
	.zero	32000
	.size	data32unsigned, 32000

	.type	data32,@object                  // @data32
	.globl	data32
	.p2align	2, 0x0
data32:
	.zero	32000
	.size	data32, 32000

	.type	data16unsigned,@object          // @data16unsigned
	.globl	data16unsigned
	.p2align	1, 0x0
data16unsigned:
	.zero	16000
	.size	data16unsigned, 16000

	.type	data16,@object                  // @data16
	.globl	data16
	.p2align	1, 0x0
data16:
	.zero	16000
	.size	data16, 16000

	.type	data8unsigned,@object           // @data8unsigned
	.globl	data8unsigned
data8unsigned:
	.zero	8000
	.size	data8unsigned, 8000

	.type	data8,@object                   // @data8
	.globl	data8
data8:
	.zero	8000
	.size	data8, 8000

	.type	.L.str.11,@object               // @.str.11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.11:
	.asciz	"int8_t variable add"
	.size	.L.str.11, 20

	.type	.L.str.12,@object               // @.str.12
.L.str.12:
	.asciz	"int8_t variable add hoisted"
	.size	.L.str.12, 28

	.type	.L.str.13,@object               // @.str.13
.L.str.13:
	.asciz	"int8_t multiple variable adds"
	.size	.L.str.13, 30

	.type	.L.str.14,@object               // @.str.14
.L.str.14:
	.asciz	"int8_t variable subtract"
	.size	.L.str.14, 25

	.type	.L.str.15,@object               // @.str.15
.L.str.15:
	.asciz	"int8_t multiple variable subtracts"
	.size	.L.str.15, 35

	.type	.L.str.16,@object               // @.str.16
.L.str.16:
	.asciz	"int8_t variable multiply"
	.size	.L.str.16, 25

	.type	.L.str.17,@object               // @.str.17
.L.str.17:
	.asciz	"int8_t multiple variable multiplies"
	.size	.L.str.17, 36

	.type	.L.str.18,@object               // @.str.18
.L.str.18:
	.asciz	"int8_t multiple variable multiplies2"
	.size	.L.str.18, 37

	.type	.L.str.19,@object               // @.str.19
.L.str.19:
	.asciz	"int8_t variable divide"
	.size	.L.str.19, 23

	.type	.L.str.20,@object               // @.str.20
.L.str.20:
	.asciz	"int8_t multiple variable divides"
	.size	.L.str.20, 33

	.type	.L.str.21,@object               // @.str.21
.L.str.21:
	.asciz	"int8_t multiple variable divides2"
	.size	.L.str.21, 34

	.type	.L.str.22,@object               // @.str.22
.L.str.22:
	.asciz	"int8_t multiple variable mixed"
	.size	.L.str.22, 31

	.type	.L.str.23,@object               // @.str.23
.L.str.23:
	.asciz	"int8_t variable and"
	.size	.L.str.23, 20

	.type	.L.str.24,@object               // @.str.24
.L.str.24:
	.asciz	"int8_t multiple variable and"
	.size	.L.str.24, 29

	.type	.L.str.25,@object               // @.str.25
.L.str.25:
	.asciz	"int8_t variable or"
	.size	.L.str.25, 19

	.type	.L.str.26,@object               // @.str.26
.L.str.26:
	.asciz	"int8_t multiple variable or"
	.size	.L.str.26, 28

	.type	.L.str.27,@object               // @.str.27
.L.str.27:
	.asciz	"int8_t variable xor"
	.size	.L.str.27, 20

	.type	.L.str.28,@object               // @.str.28
.L.str.28:
	.asciz	"int8_t multiple variable xor"
	.size	.L.str.28, 29

	.type	.L.str.29,@object               // @.str.29
.L.str.29:
	.asciz	"uint8_t variable add"
	.size	.L.str.29, 21

	.type	.L.str.30,@object               // @.str.30
.L.str.30:
	.asciz	"uint8_t variable add hoisted"
	.size	.L.str.30, 29

	.type	.L.str.31,@object               // @.str.31
.L.str.31:
	.asciz	"uint8_t multiple variable adds"
	.size	.L.str.31, 31

	.type	.L.str.32,@object               // @.str.32
.L.str.32:
	.asciz	"uint8_t variable subtract"
	.size	.L.str.32, 26

	.type	.L.str.33,@object               // @.str.33
.L.str.33:
	.asciz	"uint8_t multiple variable subtracts"
	.size	.L.str.33, 36

	.type	.L.str.34,@object               // @.str.34
.L.str.34:
	.asciz	"uint8_t variable multiply"
	.size	.L.str.34, 26

	.type	.L.str.35,@object               // @.str.35
.L.str.35:
	.asciz	"uint8_t multiple variable multiplies"
	.size	.L.str.35, 37

	.type	.L.str.36,@object               // @.str.36
.L.str.36:
	.asciz	"uint8_t multiple variable multiplies2"
	.size	.L.str.36, 38

	.type	.L.str.37,@object               // @.str.37
.L.str.37:
	.asciz	"uint8_t variable divide"
	.size	.L.str.37, 24

	.type	.L.str.38,@object               // @.str.38
.L.str.38:
	.asciz	"uint8_t multiple variable divides"
	.size	.L.str.38, 34

	.type	.L.str.39,@object               // @.str.39
.L.str.39:
	.asciz	"uint8_t multiple variable divides2"
	.size	.L.str.39, 35

	.type	.L.str.40,@object               // @.str.40
.L.str.40:
	.asciz	"uint8_t multiple variable mixed"
	.size	.L.str.40, 32

	.type	.L.str.41,@object               // @.str.41
.L.str.41:
	.asciz	"uint8_t variable and"
	.size	.L.str.41, 21

	.type	.L.str.42,@object               // @.str.42
.L.str.42:
	.asciz	"uint8_t multiple variable and"
	.size	.L.str.42, 30

	.type	.L.str.43,@object               // @.str.43
.L.str.43:
	.asciz	"uint8_t variable or"
	.size	.L.str.43, 20

	.type	.L.str.44,@object               // @.str.44
.L.str.44:
	.asciz	"uint8_t multiple variable or"
	.size	.L.str.44, 29

	.type	.L.str.45,@object               // @.str.45
.L.str.45:
	.asciz	"uint8_t variable xor"
	.size	.L.str.45, 21

	.type	.L.str.46,@object               // @.str.46
.L.str.46:
	.asciz	"uint8_t multiple variable xor"
	.size	.L.str.46, 30

	.type	.L.str.47,@object               // @.str.47
.L.str.47:
	.asciz	"int16_t variable add"
	.size	.L.str.47, 21

	.type	.L.str.48,@object               // @.str.48
.L.str.48:
	.asciz	"int16_t variable add hoisted"
	.size	.L.str.48, 29

	.type	.L.str.49,@object               // @.str.49
.L.str.49:
	.asciz	"int16_t multiple variable adds"
	.size	.L.str.49, 31

	.type	.L.str.50,@object               // @.str.50
.L.str.50:
	.asciz	"int16_t variable subtract"
	.size	.L.str.50, 26

	.type	.L.str.51,@object               // @.str.51
.L.str.51:
	.asciz	"int16_t multiple variable subtracts"
	.size	.L.str.51, 36

	.type	.L.str.52,@object               // @.str.52
.L.str.52:
	.asciz	"int16_t variable multiply"
	.size	.L.str.52, 26

	.type	.L.str.53,@object               // @.str.53
.L.str.53:
	.asciz	"int16_t multiple variable multiplies"
	.size	.L.str.53, 37

	.type	.L.str.54,@object               // @.str.54
.L.str.54:
	.asciz	"int16_t multiple variable multiplies2"
	.size	.L.str.54, 38

	.type	.L.str.55,@object               // @.str.55
.L.str.55:
	.asciz	"int16_t variable divide"
	.size	.L.str.55, 24

	.type	.L.str.56,@object               // @.str.56
.L.str.56:
	.asciz	"int16_t multiple variable divides"
	.size	.L.str.56, 34

	.type	.L.str.57,@object               // @.str.57
.L.str.57:
	.asciz	"int16_t multiple variable divides2"
	.size	.L.str.57, 35

	.type	.L.str.58,@object               // @.str.58
.L.str.58:
	.asciz	"int16_t multiple variable mixed"
	.size	.L.str.58, 32

	.type	.L.str.59,@object               // @.str.59
.L.str.59:
	.asciz	"int16_t variable and"
	.size	.L.str.59, 21

	.type	.L.str.60,@object               // @.str.60
.L.str.60:
	.asciz	"int16_t multiple variable and"
	.size	.L.str.60, 30

	.type	.L.str.61,@object               // @.str.61
.L.str.61:
	.asciz	"int16_t variable or"
	.size	.L.str.61, 20

	.type	.L.str.62,@object               // @.str.62
.L.str.62:
	.asciz	"int16_t multiple variable or"
	.size	.L.str.62, 29

	.type	.L.str.63,@object               // @.str.63
.L.str.63:
	.asciz	"int16_t variable xor"
	.size	.L.str.63, 21

	.type	.L.str.64,@object               // @.str.64
.L.str.64:
	.asciz	"int16_t multiple variable xor"
	.size	.L.str.64, 30

	.type	.L.str.65,@object               // @.str.65
.L.str.65:
	.asciz	"uint16_t variable add"
	.size	.L.str.65, 22

	.type	.L.str.66,@object               // @.str.66
.L.str.66:
	.asciz	"uint16_t variable add hoisted"
	.size	.L.str.66, 30

	.type	.L.str.67,@object               // @.str.67
.L.str.67:
	.asciz	"uint16_t multiple variable adds"
	.size	.L.str.67, 32

	.type	.L.str.68,@object               // @.str.68
.L.str.68:
	.asciz	"uint16_t variable subtract"
	.size	.L.str.68, 27

	.type	.L.str.69,@object               // @.str.69
.L.str.69:
	.asciz	"uint16_t multiple variable subtracts"
	.size	.L.str.69, 37

	.type	.L.str.70,@object               // @.str.70
.L.str.70:
	.asciz	"uint16_t variable multiply"
	.size	.L.str.70, 27

	.type	.L.str.71,@object               // @.str.71
.L.str.71:
	.asciz	"uint16_t multiple variable multiplies"
	.size	.L.str.71, 38

	.type	.L.str.72,@object               // @.str.72
.L.str.72:
	.asciz	"uint16_t multiple variable multiplies2"
	.size	.L.str.72, 39

	.type	.L.str.73,@object               // @.str.73
.L.str.73:
	.asciz	"uint16_t variable divide"
	.size	.L.str.73, 25

	.type	.L.str.74,@object               // @.str.74
.L.str.74:
	.asciz	"uint16_t multiple variable divides"
	.size	.L.str.74, 35

	.type	.L.str.75,@object               // @.str.75
.L.str.75:
	.asciz	"uint16_t multiple variable divides2"
	.size	.L.str.75, 36

	.type	.L.str.76,@object               // @.str.76
.L.str.76:
	.asciz	"uint16_t multiple variable mixed"
	.size	.L.str.76, 33

	.type	.L.str.77,@object               // @.str.77
.L.str.77:
	.asciz	"uint16_t variable and"
	.size	.L.str.77, 22

	.type	.L.str.78,@object               // @.str.78
.L.str.78:
	.asciz	"uint16_t multiple variable and"
	.size	.L.str.78, 31

	.type	.L.str.79,@object               // @.str.79
.L.str.79:
	.asciz	"uint16_t variable or"
	.size	.L.str.79, 21

	.type	.L.str.80,@object               // @.str.80
.L.str.80:
	.asciz	"uint16_t multiple variable or"
	.size	.L.str.80, 30

	.type	.L.str.81,@object               // @.str.81
.L.str.81:
	.asciz	"uint16_t variable xor"
	.size	.L.str.81, 22

	.type	.L.str.82,@object               // @.str.82
.L.str.82:
	.asciz	"uint16_t multiple variable xor"
	.size	.L.str.82, 31

	.type	.L.str.83,@object               // @.str.83
.L.str.83:
	.asciz	"int32_t variable add"
	.size	.L.str.83, 21

	.type	.L.str.84,@object               // @.str.84
.L.str.84:
	.asciz	"int32_t variable add hoisted"
	.size	.L.str.84, 29

	.type	.L.str.85,@object               // @.str.85
.L.str.85:
	.asciz	"int32_t multiple variable adds"
	.size	.L.str.85, 31

	.type	.L.str.86,@object               // @.str.86
.L.str.86:
	.asciz	"int32_t variable subtract"
	.size	.L.str.86, 26

	.type	.L.str.87,@object               // @.str.87
.L.str.87:
	.asciz	"int32_t multiple variable subtracts"
	.size	.L.str.87, 36

	.type	.L.str.88,@object               // @.str.88
.L.str.88:
	.asciz	"int32_t variable multiply"
	.size	.L.str.88, 26

	.type	.L.str.89,@object               // @.str.89
.L.str.89:
	.asciz	"int32_t multiple variable multiplies"
	.size	.L.str.89, 37

	.type	.L.str.90,@object               // @.str.90
.L.str.90:
	.asciz	"int32_t multiple variable multiplies2"
	.size	.L.str.90, 38

	.type	.L.str.91,@object               // @.str.91
.L.str.91:
	.asciz	"int32_t variable divide"
	.size	.L.str.91, 24

	.type	.L.str.92,@object               // @.str.92
.L.str.92:
	.asciz	"int32_t multiple variable divides"
	.size	.L.str.92, 34

	.type	.L.str.93,@object               // @.str.93
.L.str.93:
	.asciz	"int32_t multiple variable divides2"
	.size	.L.str.93, 35

	.type	.L.str.94,@object               // @.str.94
.L.str.94:
	.asciz	"int32_t multiple variable mixed"
	.size	.L.str.94, 32

	.type	.L.str.95,@object               // @.str.95
.L.str.95:
	.asciz	"int32_t variable and"
	.size	.L.str.95, 21

	.type	.L.str.96,@object               // @.str.96
.L.str.96:
	.asciz	"int32_t multiple variable and"
	.size	.L.str.96, 30

	.type	.L.str.97,@object               // @.str.97
.L.str.97:
	.asciz	"int32_t variable or"
	.size	.L.str.97, 20

	.type	.L.str.98,@object               // @.str.98
.L.str.98:
	.asciz	"int32_t multiple variable or"
	.size	.L.str.98, 29

	.type	.L.str.99,@object               // @.str.99
.L.str.99:
	.asciz	"int32_t variable xor"
	.size	.L.str.99, 21

	.type	.L.str.100,@object              // @.str.100
.L.str.100:
	.asciz	"int32_t multiple variable xor"
	.size	.L.str.100, 30

	.type	.L.str.101,@object              // @.str.101
.L.str.101:
	.asciz	"uint32_t variable add"
	.size	.L.str.101, 22

	.type	.L.str.102,@object              // @.str.102
.L.str.102:
	.asciz	"uint32_t variable add hoisted"
	.size	.L.str.102, 30

	.type	.L.str.103,@object              // @.str.103
.L.str.103:
	.asciz	"uint32_t multiple variable adds"
	.size	.L.str.103, 32

	.type	.L.str.104,@object              // @.str.104
.L.str.104:
	.asciz	"uint32_t variable subtract"
	.size	.L.str.104, 27

	.type	.L.str.105,@object              // @.str.105
.L.str.105:
	.asciz	"uint32_t multiple variable subtracts"
	.size	.L.str.105, 37

	.type	.L.str.106,@object              // @.str.106
.L.str.106:
	.asciz	"uint32_t variable multiply"
	.size	.L.str.106, 27

	.type	.L.str.107,@object              // @.str.107
.L.str.107:
	.asciz	"uint32_t multiple variable multiplies"
	.size	.L.str.107, 38

	.type	.L.str.108,@object              // @.str.108
.L.str.108:
	.asciz	"uint32_t multiple variable multiplies2"
	.size	.L.str.108, 39

	.type	.L.str.109,@object              // @.str.109
.L.str.109:
	.asciz	"uint32_t variable divide"
	.size	.L.str.109, 25

	.type	.L.str.110,@object              // @.str.110
.L.str.110:
	.asciz	"uint32_t multiple variable divides"
	.size	.L.str.110, 35

	.type	.L.str.111,@object              // @.str.111
.L.str.111:
	.asciz	"uint32_t multiple variable divides2"
	.size	.L.str.111, 36

	.type	.L.str.112,@object              // @.str.112
.L.str.112:
	.asciz	"uint32_t multiple variable mixed"
	.size	.L.str.112, 33

	.type	.L.str.113,@object              // @.str.113
.L.str.113:
	.asciz	"uint32_t variable and"
	.size	.L.str.113, 22

	.type	.L.str.114,@object              // @.str.114
.L.str.114:
	.asciz	"uint32_t multiple variable and"
	.size	.L.str.114, 31

	.type	.L.str.115,@object              // @.str.115
.L.str.115:
	.asciz	"uint32_t variable or"
	.size	.L.str.115, 21

	.type	.L.str.116,@object              // @.str.116
.L.str.116:
	.asciz	"uint32_t multiple variable or"
	.size	.L.str.116, 30

	.type	.L.str.117,@object              // @.str.117
.L.str.117:
	.asciz	"uint32_t variable xor"
	.size	.L.str.117, 22

	.type	.L.str.118,@object              // @.str.118
.L.str.118:
	.asciz	"uint32_t multiple variable xor"
	.size	.L.str.118, 31

	.type	.L.str.119,@object              // @.str.119
.L.str.119:
	.asciz	"int64_t variable add"
	.size	.L.str.119, 21

	.type	.L.str.120,@object              // @.str.120
.L.str.120:
	.asciz	"int64_t variable add hoisted"
	.size	.L.str.120, 29

	.type	.L.str.121,@object              // @.str.121
.L.str.121:
	.asciz	"int64_t multiple variable adds"
	.size	.L.str.121, 31

	.type	.L.str.122,@object              // @.str.122
.L.str.122:
	.asciz	"int64_t variable subtract"
	.size	.L.str.122, 26

	.type	.L.str.123,@object              // @.str.123
.L.str.123:
	.asciz	"int64_t multiple variable subtracts"
	.size	.L.str.123, 36

	.type	.L.str.124,@object              // @.str.124
.L.str.124:
	.asciz	"int64_t variable multiply"
	.size	.L.str.124, 26

	.type	.L.str.125,@object              // @.str.125
.L.str.125:
	.asciz	"int64_t multiple variable multiplies"
	.size	.L.str.125, 37

	.type	.L.str.126,@object              // @.str.126
.L.str.126:
	.asciz	"int64_t multiple variable multiplies2"
	.size	.L.str.126, 38

	.type	.L.str.127,@object              // @.str.127
.L.str.127:
	.asciz	"int64_t variable divide"
	.size	.L.str.127, 24

	.type	.L.str.128,@object              // @.str.128
.L.str.128:
	.asciz	"int64_t multiple variable divides"
	.size	.L.str.128, 34

	.type	.L.str.129,@object              // @.str.129
.L.str.129:
	.asciz	"int64_t multiple variable divides2"
	.size	.L.str.129, 35

	.type	.L.str.130,@object              // @.str.130
.L.str.130:
	.asciz	"int64_t multiple variable mixed"
	.size	.L.str.130, 32

	.type	.L.str.131,@object              // @.str.131
.L.str.131:
	.asciz	"int64_t variable and"
	.size	.L.str.131, 21

	.type	.L.str.132,@object              // @.str.132
.L.str.132:
	.asciz	"int64_t multiple variable and"
	.size	.L.str.132, 30

	.type	.L.str.133,@object              // @.str.133
.L.str.133:
	.asciz	"int64_t variable or"
	.size	.L.str.133, 20

	.type	.L.str.134,@object              // @.str.134
.L.str.134:
	.asciz	"int64_t multiple variable or"
	.size	.L.str.134, 29

	.type	.L.str.135,@object              // @.str.135
.L.str.135:
	.asciz	"int64_t variable xor"
	.size	.L.str.135, 21

	.type	.L.str.136,@object              // @.str.136
.L.str.136:
	.asciz	"int64_t multiple variable xor"
	.size	.L.str.136, 30

	.type	.L.str.137,@object              // @.str.137
.L.str.137:
	.asciz	"uint64_t variable add"
	.size	.L.str.137, 22

	.type	.L.str.138,@object              // @.str.138
.L.str.138:
	.asciz	"uint64_t variable add hoisted"
	.size	.L.str.138, 30

	.type	.L.str.139,@object              // @.str.139
.L.str.139:
	.asciz	"uint64_t multiple variable adds"
	.size	.L.str.139, 32

	.type	.L.str.140,@object              // @.str.140
.L.str.140:
	.asciz	"uint64_t variable subtract"
	.size	.L.str.140, 27

	.type	.L.str.141,@object              // @.str.141
.L.str.141:
	.asciz	"uint64_t multiple variable subtracts"
	.size	.L.str.141, 37

	.type	.L.str.142,@object              // @.str.142
.L.str.142:
	.asciz	"uint64_t variable multiply"
	.size	.L.str.142, 27

	.type	.L.str.143,@object              // @.str.143
.L.str.143:
	.asciz	"uint64_t multiple variable multiplies"
	.size	.L.str.143, 38

	.type	.L.str.144,@object              // @.str.144
.L.str.144:
	.asciz	"uint64_t multiple variable multiplies2"
	.size	.L.str.144, 39

	.type	.L.str.145,@object              // @.str.145
.L.str.145:
	.asciz	"uint64_t variable divide"
	.size	.L.str.145, 25

	.type	.L.str.146,@object              // @.str.146
.L.str.146:
	.asciz	"uint64_t multiple variable divides"
	.size	.L.str.146, 35

	.type	.L.str.147,@object              // @.str.147
.L.str.147:
	.asciz	"uint64_t multiple variable divides2"
	.size	.L.str.147, 36

	.type	.L.str.148,@object              // @.str.148
.L.str.148:
	.asciz	"uint64_t multiple variable mixed"
	.size	.L.str.148, 33

	.type	.L.str.149,@object              // @.str.149
.L.str.149:
	.asciz	"uint64_t variable and"
	.size	.L.str.149, 22

	.type	.L.str.150,@object              // @.str.150
.L.str.150:
	.asciz	"uint64_t multiple variable and"
	.size	.L.str.150, 31

	.type	.L.str.151,@object              // @.str.151
.L.str.151:
	.asciz	"uint64_t variable or"
	.size	.L.str.151, 21

	.type	.L.str.152,@object              // @.str.152
.L.str.152:
	.asciz	"uint64_t multiple variable or"
	.size	.L.str.152, 30

	.type	.L.str.153,@object              // @.str.153
.L.str.153:
	.asciz	"uint64_t variable xor"
	.size	.L.str.153, 22

	.type	.L.str.154,@object              // @.str.154
.L.str.154:
	.asciz	"uint64_t multiple variable xor"
	.size	.L.str.154, 31

	.type	.L.str.155,@object              // @.str.155
.L.str.155:
	.asciz	"float variable add"
	.size	.L.str.155, 19

	.type	.L.str.156,@object              // @.str.156
.L.str.156:
	.asciz	"float variable add hoisted"
	.size	.L.str.156, 27

	.type	.L.str.157,@object              // @.str.157
.L.str.157:
	.asciz	"float multiple variable adds"
	.size	.L.str.157, 29

	.type	.L.str.158,@object              // @.str.158
.L.str.158:
	.asciz	"float variable subtract"
	.size	.L.str.158, 24

	.type	.L.str.159,@object              // @.str.159
.L.str.159:
	.asciz	"float multiple variable subtracts"
	.size	.L.str.159, 34

	.type	.L.str.160,@object              // @.str.160
.L.str.160:
	.asciz	"float variable multiply"
	.size	.L.str.160, 24

	.type	.L.str.161,@object              // @.str.161
.L.str.161:
	.asciz	"float multiple variable multiplies"
	.size	.L.str.161, 35

	.type	.L.str.162,@object              // @.str.162
.L.str.162:
	.asciz	"float multiple variable multiplies2"
	.size	.L.str.162, 36

	.type	.L.str.163,@object              // @.str.163
.L.str.163:
	.asciz	"float variable divide"
	.size	.L.str.163, 22

	.type	.L.str.164,@object              // @.str.164
.L.str.164:
	.asciz	"float multiple variable divides"
	.size	.L.str.164, 32

	.type	.L.str.165,@object              // @.str.165
.L.str.165:
	.asciz	"float multiple variable divides2"
	.size	.L.str.165, 33

	.type	.L.str.166,@object              // @.str.166
.L.str.166:
	.asciz	"float multiple variable mixed"
	.size	.L.str.166, 30

	.type	.L.str.167,@object              // @.str.167
.L.str.167:
	.asciz	"double variable add"
	.size	.L.str.167, 20

	.type	.L.str.168,@object              // @.str.168
.L.str.168:
	.asciz	"double variable add hoisted"
	.size	.L.str.168, 28

	.type	.L.str.169,@object              // @.str.169
.L.str.169:
	.asciz	"double multiple variable adds"
	.size	.L.str.169, 30

	.type	.L.str.170,@object              // @.str.170
.L.str.170:
	.asciz	"double variable subtract"
	.size	.L.str.170, 25

	.type	.L.str.171,@object              // @.str.171
.L.str.171:
	.asciz	"double multiple variable subtracts"
	.size	.L.str.171, 35

	.type	.L.str.172,@object              // @.str.172
.L.str.172:
	.asciz	"double variable multiply"
	.size	.L.str.172, 25

	.type	.L.str.173,@object              // @.str.173
.L.str.173:
	.asciz	"double multiple variable multiplies"
	.size	.L.str.173, 36

	.type	.L.str.174,@object              // @.str.174
.L.str.174:
	.asciz	"double multiple variable multiplies2"
	.size	.L.str.174, 37

	.type	.L.str.175,@object              // @.str.175
.L.str.175:
	.asciz	"double variable divide"
	.size	.L.str.175, 23

	.type	.L.str.176,@object              // @.str.176
.L.str.176:
	.asciz	"double multiple variable divides"
	.size	.L.str.176, 33

	.type	.L.str.177,@object              // @.str.177
.L.str.177:
	.asciz	"double multiple variable divides2"
	.size	.L.str.177, 34

	.type	.L.str.178,@object              // @.str.178
.L.str.178:
	.asciz	"double multiple variable mixed"
	.size	.L.str.178, 31

	.type	.L.str.179,@object              // @.str.179
.L.str.179:
	.asciz	"test %i failed\n"
	.size	.L.str.179, 16

	.ident	"clang version 22.0.0git (https://github.com/steven-studio/llvm-project.git c2901ea177a93cdcea513ae5bdc6a189f274f4ca)"
	.section	".note.GNU-stack","",@progbits
