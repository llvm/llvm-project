	.file	"simple_types_constant_folding.cpp"
	.text
	.globl	_Z13record_resultdPKc           // -- Begin function _Z13record_resultdPKc
	.p2align	2
	.type	_Z13record_resultdPKc,@function
_Z13record_resultdPKc:                  // @_Z13record_resultdPKc
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-64]!                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_offset b8, -64
	.cfi_remember_state
	fmov	d8, d0
	adrp	x22, results
	adrp	x21, allocated_results
	mov	x19, x0
	ldr	x0, [x22, :lo12:results]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x20, current_test
	cbz	x0, .LBB0_2
// %bb.1:
	ldr	w8, [x20, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB0_4
.LBB0_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB0_5
// %bb.3:
	ldr	w8, [x20, :lo12:current_test]
.LBB0_4:
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	d8, [x9]
	str	x19, [x9, #8]
	str	w8, [x20, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #64                   // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB0_5:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end0:
	.size	_Z13record_resultdPKc, .Lfunc_end0-_Z13record_resultdPKc
	.cfi_endproc
                                        // -- End function
	.globl	_Z9summarizePKciiii             // -- Begin function _Z9summarizePKciiii
	.p2align	2
	.type	_Z9summarizePKciiii,@function
_Z9summarizePKciiii:                    // @_Z9summarizePKciiii
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	adrp	x26, current_test
	mov	w20, w4
	mov	w22, w2
	ldr	w24, [x26, :lo12:current_test]
	mov	w23, w1
	mov	x19, x0
	adrp	x27, results
	cmp	w24, #1
	b.lt	.LBB1_3
// %bb.1:
	ldr	x8, [x27, :lo12:results]
	mov	w21, #12                        // =0xc
	add	x25, x8, #8
.LBB1_2:                                // =>This Inner Loop Header: Depth=1
	ldr	x0, [x25], #16
	bl	strlen
	cmp	w21, w0
	csel	w21, w21, w0, gt
	subs	x24, x24, #1
	b.ne	.LBB1_2
	b	.LBB1_4
.LBB1_3:
	mov	w21, #12                        // =0xc
.LBB1_4:
	adrp	x24, .L.str.2
	add	x24, x24, :lo12:.L.str.2
	sub	w1, w21, #12
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	mov	x2, x24
	bl	printf
	adrp	x0, .L.str.3
	add	x0, x0, :lo12:.L.str.3
	mov	w1, w21
	mov	x2, x24
	bl	printf
	movi	d8, #0000000000000000
	ldr	w8, [x26, :lo12:current_test]
	cmp	w8, #1
	b.lt	.LBB1_15
// %bb.5:                               // %.preheader2
	scvtf	d0, w23
	scvtf	d1, w22
	mov	x8, #145685290680320            // =0x848000000000
	movk	x8, #16686, lsl #48
	mov	x28, xzr
	mov	x24, xzr
	adrp	x22, .L.str.4
	add	x22, x22, :lo12:.L.str.4
	adrp	x23, .L.str.5
	add	x23, x23, :lo12:.L.str.5
	str	w20, [sp, #4]                   // 4-byte Folded Spill
	fmul	d0, d0, d1
	fmov	d1, x8
	str	x19, [sp, #8]                   // 8-byte Folded Spill
	fdiv	d9, d0, d1
.LBB1_6:                                // =>This Inner Loop Header: Depth=1
	ldr	x20, [x27, :lo12:results]
	add	x19, x20, x28
	ldr	x25, [x19, #8]
	mov	x0, x25
	bl	strlen
	ldr	d0, [x19]
	ldr	d2, [x20]
	sub	w2, w21, w0
	mov	x0, x22
	mov	w1, w24
	mov	x3, x23
	fdiv	d1, d9, d0
	mov	x4, x25
	fdiv	d2, d0, d2
	bl	printf
	ldrsw	x8, [x26, :lo12:current_test]
	add	x24, x24, #1
	add	x28, x28, #16
	cmp	x24, x8
	b.lt	.LBB1_6
// %bb.7:
	ldr	x19, [sp, #8]                   // 8-byte Folded Reload
	ldr	w20, [sp, #4]                   // 4-byte Folded Reload
	cmp	w8, #1
	b.lt	.LBB1_15
// %bb.8:
	movi	d8, #0000000000000000
	ldr	x9, [x27, :lo12:results]
	cmp	w8, #1
	b.ne	.LBB1_10
// %bb.9:
	mov	x10, xzr
	b	.LBB1_13
.LBB1_10:
	and	x10, x8, #0x7ffffffe
	add	x11, x9, #16
	mov	x12, x10
.LBB1_11:                               // =>This Inner Loop Header: Depth=1
	ldur	d0, [x11, #-16]
	ldr	d1, [x11], #32
	subs	x12, x12, #2
	fadd	d0, d8, d0
	fadd	d8, d0, d1
	b.ne	.LBB1_11
// %bb.12:
	cmp	x10, x8
	b.eq	.LBB1_15
.LBB1_13:                               // %.preheader
	add	x9, x9, x10, lsl #4
	sub	x8, x8, x10
.LBB1_14:                               // =>This Inner Loop Header: Depth=1
	ldr	d0, [x9], #16
	subs	x8, x8, #1
	fadd	d8, d8, d0
	b.ne	.LBB1_14
.LBB1_15:
	fmov	d0, d8
	adrp	x0, .L.str.6
	add	x0, x0, :lo12:.L.str.6
	mov	x1, x19
	bl	printf
	cbz	w20, .LBB1_20
// %bb.16:
	ldr	w8, [x26, :lo12:current_test]
	cmp	w8, #2
	b.lt	.LBB1_20
// %bb.17:
	ldr	x20, [x27, :lo12:results]
	movi	d8, #0000000000000000
	mov	w21, #1                         // =0x1
	ldr	d9, [x20], #16
.LBB1_18:                               // =>This Inner Loop Header: Depth=1
	ldr	d0, [x20], #16
	fdiv	d0, d0, d9
	bl	log
	fadd	d8, d8, d0
	ldrsw	x8, [x26, :lo12:current_test]
	add	x21, x21, #1
	cmp	x21, x8
	b.lt	.LBB1_18
// %bb.19:
	sub	w8, w8, #1
	scvtf	d0, w8
	fdiv	d0, d8, d0
	bl	exp
	adrp	x0, .L.str.7
	add	x0, x0, :lo12:.L.str.7
	mov	x1, x19
	bl	printf
.LBB1_20:
	str	wzr, [x26, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	ret
.Lfunc_end1:
	.size	_Z9summarizePKciiii, .Lfunc_end1-_Z9summarizePKciiii
	.cfi_endproc
                                        // -- End function
	.globl	_Z17summarize_simplefP8_IO_FILEPKc // -- Begin function _Z17summarize_simplefP8_IO_FILEPKc
	.p2align	2
	.type	_Z17summarize_simplefP8_IO_FILEPKc,@function
_Z17summarize_simplefP8_IO_FILEPKc:     // @_Z17summarize_simplefP8_IO_FILEPKc
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-112]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	adrp	x26, current_test
	mov	x19, x1
	mov	x20, x0
	ldr	w22, [x26, :lo12:current_test]
	adrp	x27, results
	cmp	w22, #1
	b.lt	.LBB2_3
// %bb.1:
	ldr	x8, [x27, :lo12:results]
	mov	w21, #12                        // =0xc
	add	x23, x8, #8
.LBB2_2:                                // =>This Inner Loop Header: Depth=1
	ldr	x0, [x23], #16
	bl	strlen
	cmp	w21, w0
	csel	w21, w21, w0, gt
	subs	x22, x22, #1
	b.ne	.LBB2_2
	b	.LBB2_4
.LBB2_3:
	mov	w21, #12                        // =0xc
.LBB2_4:
	adrp	x22, .L.str.2
	add	x22, x22, :lo12:.L.str.2
	sub	w2, w21, #12
	adrp	x1, .L.str.8
	add	x1, x1, :lo12:.L.str.8
	mov	x0, x20
	mov	x3, x22
	bl	fprintf
	adrp	x1, .L.str.9
	add	x1, x1, :lo12:.L.str.9
	mov	x0, x20
	mov	w2, w21
	mov	x3, x22
	bl	fprintf
	movi	d8, #0000000000000000
	ldr	w8, [x26, :lo12:current_test]
	cmp	w8, #1
	b.lt	.LBB2_15
// %bb.5:                               // %.preheader2
	mov	x28, xzr
	mov	x22, xzr
	adrp	x23, .L.str.10
	add	x23, x23, :lo12:.L.str.10
	adrp	x24, .L.str.5
	add	x24, x24, :lo12:.L.str.5
	str	x19, [sp, #8]                   // 8-byte Folded Spill
.LBB2_6:                                // =>This Inner Loop Header: Depth=1
	ldr	x8, [x27, :lo12:results]
	add	x19, x8, x28
	ldr	x25, [x19, #8]
	mov	x0, x25
	bl	strlen
	ldr	d0, [x19]
	sub	w3, w21, w0
	mov	x0, x20
	mov	x1, x23
	mov	w2, w22
	mov	x4, x24
	mov	x5, x25
	bl	fprintf
	ldrsw	x8, [x26, :lo12:current_test]
	add	x22, x22, #1
	add	x28, x28, #16
	cmp	x22, x8
	b.lt	.LBB2_6
// %bb.7:
	ldr	x19, [sp, #8]                   // 8-byte Folded Reload
	cmp	w8, #1
	b.lt	.LBB2_15
// %bb.8:
	movi	d8, #0000000000000000
	ldr	x9, [x27, :lo12:results]
	cmp	w8, #1
	b.ne	.LBB2_10
// %bb.9:
	mov	x10, xzr
	b	.LBB2_13
.LBB2_10:
	and	x10, x8, #0x7ffffffe
	add	x11, x9, #16
	mov	x12, x10
.LBB2_11:                               // =>This Inner Loop Header: Depth=1
	ldur	d0, [x11, #-16]
	ldr	d1, [x11], #32
	subs	x12, x12, #2
	fadd	d0, d8, d0
	fadd	d8, d0, d1
	b.ne	.LBB2_11
// %bb.12:
	cmp	x10, x8
	b.eq	.LBB2_15
.LBB2_13:                               // %.preheader
	add	x9, x9, x10, lsl #4
	sub	x8, x8, x10
.LBB2_14:                               // =>This Inner Loop Header: Depth=1
	ldr	d0, [x9], #16
	subs	x8, x8, #1
	fadd	d8, d8, d0
	b.ne	.LBB2_14
.LBB2_15:
	fmov	d0, d8
	adrp	x1, .L.str.6
	add	x1, x1, :lo12:.L.str.6
	mov	x0, x20
	mov	x2, x19
	bl	fprintf
	str	wzr, [x26, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #112                  // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.Lfunc_end2:
	.size	_Z17summarize_simplefP8_IO_FILEPKc, .Lfunc_end2-_Z17summarize_simplefP8_IO_FILEPKc
	.cfi_endproc
                                        // -- End function
	.globl	_Z11start_timerv                // -- Begin function _Z11start_timerv
	.p2align	2
	.type	_Z11start_timerv,@function
_Z11start_timerv:                       // @_Z11start_timerv
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	bl	clock
	adrp	x8, start_time
	str	x0, [x8, :lo12:start_time]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end3:
	.size	_Z11start_timerv, .Lfunc_end3-_Z11start_timerv
	.cfi_endproc
                                        // -- End function
	.globl	_Z5timerv                       // -- Begin function _Z5timerv
	.p2align	2
	.type	_Z5timerv,@function
_Z5timerv:                              // @_Z5timerv
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	bl	clock
	adrp	x8, start_time
	ldr	x8, [x8, :lo12:start_time]
	sub	x8, x0, x8
	scvtf	d0, x8
	mov	x8, #145685290680320            // =0x848000000000
	movk	x8, #16686, lsl #48
	fmov	d1, x8
	adrp	x8, end_time
	fdiv	d0, d0, d1
	str	x0, [x8, :lo12:end_time]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end4:
	.size	_Z5timerv, .Lfunc_end4-_Z5timerv
	.cfi_endproc
                                        // -- End function
	.globl	main                            // -- Begin function main
	.p2align	2
	.type	main,@function
main:                                   // @main
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	cmp	w0, #2
	adrp	x21, base_iterations
	adrp	x22, init_value
	b.lt	.LBB5_3
// %bb.1:
	mov	w20, w0
	ldr	x0, [x1, #8]
	mov	x19, x1
	mov	x1, xzr
	mov	w2, #10                         // =0xa
	bl	__isoc23_strtol
	cmp	w20, #2
	str	w0, [x21, :lo12:base_iterations]
	b.eq	.LBB5_3
// %bb.2:
	ldr	x0, [x19, #16]
	mov	x1, xzr
	bl	strtod
	str	d0, [x22, :lo12:init_value]
.LBB5_3:
	ldr	d0, [x22, :lo12:init_value]
	adrp	x19, data8
	add	x19, x19, :lo12:data8
	mov	x0, x19
	mov	w2, #8000                       // =0x1f40
	mov	w23, #8000                      // =0x1f40
	fcvtzs	w1, d0
	bl	memset
	ldr	w8, [x21, :lo12:base_iterations]
	adrp	x20, iterations
	adrp	x2, .L.str.11
	add	x2, x2, :lo12:.L.str.11
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantIa10custom_twoIaEEvPT_iPKc
	adrp	x2, .L.str.12
	add	x2, x2, :lo12:.L.str.12
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.13
	add	x2, x2, :lo12:.L.str.13
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.14
	add	x2, x2, :lo12:.L.str.14
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.15
	add	x2, x2, :lo12:.L.str.15
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.16
	add	x2, x2, :lo12:.L.str.16
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.17
	add	x2, x2, :lo12:.L.str.17
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.18
	add	x2, x2, :lo12:.L.str.18
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.19
	add	x2, x2, :lo12:.L.str.19
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.20
	add	x2, x2, :lo12:.L.str.20
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.21
	add	x2, x2, :lo12:.L.str.21
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.22
	add	x2, x2, :lo12:.L.str.22
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.23
	add	x2, x2, :lo12:.L.str.23
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.24
	add	x2, x2, :lo12:.L.str.24
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc
	adrp	x2, .L.str.25
	add	x2, x2, :lo12:.L.str.25
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc
	ldrsw	x8, [x21, :lo12:base_iterations]
	mov	w24, #26215                     // =0x6667
	adrp	x2, .L.str.26
	add	x2, x2, :lo12:.L.str.26
	movk	w24, #26214, lsl #16
	mov	x0, x19
	smull	x8, w8, w24
	mov	w1, #8000                       // =0x1f40
	asr	x8, x8, #34
	add	w8, w8, w8, lsr #31
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc
	adrp	x2, .L.str.27
	add	x2, x2, :lo12:.L.str.27
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc
	adrp	x2, .L.str.28
	add	x2, x2, :lo12:.L.str.28
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc
	adrp	x2, .L.str.29
	add	x2, x2, :lo12:.L.str.29
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc
	adrp	x2, .L.str.30
	add	x2, x2, :lo12:.L.str.30
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc
	adrp	x2, .L.str.31
	add	x2, x2, :lo12:.L.str.31
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc
	adrp	x2, .L.str.32
	add	x2, x2, :lo12:.L.str.32
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc
	adrp	x2, .L.str.33
	add	x2, x2, :lo12:.L.str.33
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc
	adrp	x2, .L.str.34
	add	x2, x2, :lo12:.L.str.34
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc
	adrp	x2, .L.str.35
	add	x2, x2, :lo12:.L.str.35
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc
	adrp	x2, .L.str.36
	add	x2, x2, :lo12:.L.str.36
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc
	adrp	x2, .L.str.37
	add	x2, x2, :lo12:.L.str.37
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc
	adrp	x2, .L.str.38
	add	x2, x2, :lo12:.L.str.38
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc
	adrp	x2, .L.str.39
	add	x2, x2, :lo12:.L.str.39
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc
	adrp	x2, .L.str.40
	add	x2, x2, :lo12:.L.str.40
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc
	adrp	x2, .L.str.41
	add	x2, x2, :lo12:.L.str.41
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc
	adrp	x2, .L.str.42
	add	x2, x2, :lo12:.L.str.42
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc
	ldr	d0, [x22, :lo12:init_value]
	adrp	x19, data8unsigned
	add	x19, x19, :lo12:data8unsigned
	mov	x0, x19
	mov	w2, #8000                       // =0x1f40
	fcvtzs	w1, d0
	bl	memset
	ldr	w8, [x21, :lo12:base_iterations]
	adrp	x2, .L.str.43
	add	x2, x2, :lo12:.L.str.43
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantIh10custom_twoIhEEvPT_iPKc
	adrp	x2, .L.str.44
	add	x2, x2, :lo12:.L.str.44
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.45
	add	x2, x2, :lo12:.L.str.45
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.46
	add	x2, x2, :lo12:.L.str.46
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.47
	add	x2, x2, :lo12:.L.str.47
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.48
	add	x2, x2, :lo12:.L.str.48
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.49
	add	x2, x2, :lo12:.L.str.49
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.50
	add	x2, x2, :lo12:.L.str.50
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.51
	add	x2, x2, :lo12:.L.str.51
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.52
	add	x2, x2, :lo12:.L.str.52
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.53
	add	x2, x2, :lo12:.L.str.53
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.54
	add	x2, x2, :lo12:.L.str.54
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.55
	add	x2, x2, :lo12:.L.str.55
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.56
	add	x2, x2, :lo12:.L.str.56
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc
	adrp	x2, .L.str.57
	add	x2, x2, :lo12:.L.str.57
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc
	ldrsw	x8, [x21, :lo12:base_iterations]
	adrp	x2, .L.str.58
	add	x2, x2, :lo12:.L.str.58
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	smull	x8, w8, w24
	asr	x8, x8, #34
	add	w8, w8, w8, lsr #31
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc
	adrp	x2, .L.str.59
	add	x2, x2, :lo12:.L.str.59
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc
	adrp	x2, .L.str.60
	add	x2, x2, :lo12:.L.str.60
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc
	adrp	x2, .L.str.61
	add	x2, x2, :lo12:.L.str.61
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc
	adrp	x2, .L.str.62
	add	x2, x2, :lo12:.L.str.62
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc
	adrp	x2, .L.str.63
	add	x2, x2, :lo12:.L.str.63
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc
	adrp	x2, .L.str.64
	add	x2, x2, :lo12:.L.str.64
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc
	adrp	x2, .L.str.65
	add	x2, x2, :lo12:.L.str.65
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc
	adrp	x2, .L.str.66
	add	x2, x2, :lo12:.L.str.66
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc
	adrp	x2, .L.str.67
	add	x2, x2, :lo12:.L.str.67
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc
	adrp	x2, .L.str.68
	add	x2, x2, :lo12:.L.str.68
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc
	adrp	x2, .L.str.69
	add	x2, x2, :lo12:.L.str.69
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc
	adrp	x2, .L.str.70
	add	x2, x2, :lo12:.L.str.70
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc
	adrp	x2, .L.str.71
	add	x2, x2, :lo12:.L.str.71
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc
	adrp	x2, .L.str.72
	add	x2, x2, :lo12:.L.str.72
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc
	adrp	x2, .L.str.73
	add	x2, x2, :lo12:.L.str.73
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc
	adrp	x2, .L.str.74
	add	x2, x2, :lo12:.L.str.74
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w8, d0
	dup	v0.8h, w8
	adrp	x8, data16+16
	add	x8, x8, :lo12:data16+16
.LBB5_4:                                // =>This Inner Loop Header: Depth=1
	subs	x23, x23, #16
	stp	q0, q0, [x8, #-16]
	add	x8, x8, #32
	b.ne	.LBB5_4
// %bb.5:
	ldr	w8, [x21, :lo12:base_iterations]
	adrp	x19, data16
	add	x19, x19, :lo12:data16
	adrp	x2, .L.str.75
	add	x2, x2, :lo12:.L.str.75
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	str	w8, [x20, :lo12:iterations]
	mov	w23, #8000                      // =0x1f40
	bl	_Z13test_constantIs10custom_twoIsEEvPT_iPKc
	adrp	x2, .L.str.76
	add	x2, x2, :lo12:.L.str.76
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.77
	add	x2, x2, :lo12:.L.str.77
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.78
	add	x2, x2, :lo12:.L.str.78
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.79
	add	x2, x2, :lo12:.L.str.79
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.80
	add	x2, x2, :lo12:.L.str.80
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.81
	add	x2, x2, :lo12:.L.str.81
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.82
	add	x2, x2, :lo12:.L.str.82
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.83
	add	x2, x2, :lo12:.L.str.83
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.84
	add	x2, x2, :lo12:.L.str.84
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.85
	add	x2, x2, :lo12:.L.str.85
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.86
	add	x2, x2, :lo12:.L.str.86
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.87
	add	x2, x2, :lo12:.L.str.87
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.88
	add	x2, x2, :lo12:.L.str.88
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc
	adrp	x2, .L.str.89
	add	x2, x2, :lo12:.L.str.89
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc
	ldrsw	x8, [x21, :lo12:base_iterations]
	mov	w9, #26215                      // =0x6667
	adrp	x2, .L.str.90
	add	x2, x2, :lo12:.L.str.90
	movk	w9, #26214, lsl #16
	mov	x0, x19
	smull	x8, w8, w9
	mov	w1, #8000                       // =0x1f40
	asr	x8, x8, #34
	add	w8, w8, w8, lsr #31
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc
	adrp	x2, .L.str.91
	add	x2, x2, :lo12:.L.str.91
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc
	adrp	x2, .L.str.92
	add	x2, x2, :lo12:.L.str.92
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc
	adrp	x2, .L.str.93
	add	x2, x2, :lo12:.L.str.93
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc
	adrp	x2, .L.str.94
	add	x2, x2, :lo12:.L.str.94
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc
	adrp	x2, .L.str.95
	add	x2, x2, :lo12:.L.str.95
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc
	adrp	x2, .L.str.96
	add	x2, x2, :lo12:.L.str.96
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc
	adrp	x2, .L.str.97
	add	x2, x2, :lo12:.L.str.97
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc
	adrp	x2, .L.str.98
	add	x2, x2, :lo12:.L.str.98
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc
	adrp	x2, .L.str.99
	add	x2, x2, :lo12:.L.str.99
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc
	adrp	x2, .L.str.100
	add	x2, x2, :lo12:.L.str.100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc
	adrp	x2, .L.str.101
	add	x2, x2, :lo12:.L.str.101
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc
	adrp	x2, .L.str.102
	add	x2, x2, :lo12:.L.str.102
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc
	adrp	x2, .L.str.103
	add	x2, x2, :lo12:.L.str.103
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc
	adrp	x2, .L.str.104
	add	x2, x2, :lo12:.L.str.104
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc
	adrp	x2, .L.str.105
	add	x2, x2, :lo12:.L.str.105
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc
	adrp	x2, .L.str.106
	add	x2, x2, :lo12:.L.str.106
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w8, d0
	dup	v0.8h, w8
	adrp	x8, data16unsigned+16
	add	x8, x8, :lo12:data16unsigned+16
.LBB5_6:                                // =>This Inner Loop Header: Depth=1
	subs	x23, x23, #16
	stp	q0, q0, [x8, #-16]
	add	x8, x8, #32
	b.ne	.LBB5_6
// %bb.7:
	ldr	w8, [x21, :lo12:base_iterations]
	adrp	x19, data16unsigned
	add	x19, x19, :lo12:data16unsigned
	adrp	x2, .L.str.107
	add	x2, x2, :lo12:.L.str.107
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	str	w8, [x20, :lo12:iterations]
	mov	w23, #8000                      // =0x1f40
	bl	_Z13test_constantIt10custom_twoItEEvPT_iPKc
	adrp	x2, .L.str.108
	add	x2, x2, :lo12:.L.str.108
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc
	adrp	x2, .L.str.109
	add	x2, x2, :lo12:.L.str.109
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc
	adrp	x2, .L.str.110
	add	x2, x2, :lo12:.L.str.110
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc
	adrp	x2, .L.str.111
	add	x2, x2, :lo12:.L.str.111
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc
	adrp	x2, .L.str.112
	add	x2, x2, :lo12:.L.str.112
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc
	adrp	x2, .L.str.113
	add	x2, x2, :lo12:.L.str.113
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc
	adrp	x2, .L.str.114
	add	x2, x2, :lo12:.L.str.114
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc
	adrp	x2, .L.str.115
	add	x2, x2, :lo12:.L.str.115
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc
	adrp	x2, .L.str.116
	add	x2, x2, :lo12:.L.str.116
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc
	adrp	x2, .L.str.117
	add	x2, x2, :lo12:.L.str.117
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc
	adrp	x2, .L.str.118
	add	x2, x2, :lo12:.L.str.118
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc
	adrp	x2, .L.str.119
	add	x2, x2, :lo12:.L.str.119
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc
	adrp	x2, .L.str.120
	add	x2, x2, :lo12:.L.str.120
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc
	adrp	x2, .L.str.121
	add	x2, x2, :lo12:.L.str.121
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc
	ldrsw	x8, [x21, :lo12:base_iterations]
	mov	w9, #26215                      // =0x6667
	adrp	x2, .L.str.122
	add	x2, x2, :lo12:.L.str.122
	movk	w9, #26214, lsl #16
	mov	x0, x19
	smull	x8, w8, w9
	mov	w1, #8000                       // =0x1f40
	asr	x8, x8, #34
	add	w8, w8, w8, lsr #31
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantIt19custom_constant_addItEEvPT_iPKc
	adrp	x2, .L.str.123
	add	x2, x2, :lo12:.L.str.123
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc
	adrp	x2, .L.str.124
	add	x2, x2, :lo12:.L.str.124
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt19custom_constant_subItEEvPT_iPKc
	adrp	x2, .L.str.125
	add	x2, x2, :lo12:.L.str.125
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc
	adrp	x2, .L.str.126
	add	x2, x2, :lo12:.L.str.126
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc
	adrp	x2, .L.str.127
	add	x2, x2, :lo12:.L.str.127
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc
	adrp	x2, .L.str.128
	add	x2, x2, :lo12:.L.str.128
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc
	adrp	x2, .L.str.129
	add	x2, x2, :lo12:.L.str.129
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc
	adrp	x2, .L.str.130
	add	x2, x2, :lo12:.L.str.130
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc
	adrp	x2, .L.str.131
	add	x2, x2, :lo12:.L.str.131
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc
	adrp	x2, .L.str.132
	add	x2, x2, :lo12:.L.str.132
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc
	adrp	x2, .L.str.133
	add	x2, x2, :lo12:.L.str.133
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt19custom_constant_andItEEvPT_iPKc
	adrp	x2, .L.str.134
	add	x2, x2, :lo12:.L.str.134
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc
	adrp	x2, .L.str.135
	add	x2, x2, :lo12:.L.str.135
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt18custom_constant_orItEEvPT_iPKc
	adrp	x2, .L.str.136
	add	x2, x2, :lo12:.L.str.136
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc
	adrp	x2, .L.str.137
	add	x2, x2, :lo12:.L.str.137
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc
	adrp	x2, .L.str.138
	add	x2, x2, :lo12:.L.str.138
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w8, d0
	dup	v0.4s, w8
	adrp	x8, data32+16
	add	x8, x8, :lo12:data32+16
.LBB5_8:                                // =>This Inner Loop Header: Depth=1
	subs	x23, x23, #8
	stp	q0, q0, [x8, #-16]
	add	x8, x8, #32
	b.ne	.LBB5_8
// %bb.9:
	ldr	w8, [x21, :lo12:base_iterations]
	adrp	x19, data32
	add	x19, x19, :lo12:data32
	adrp	x2, .L.str.139
	add	x2, x2, :lo12:.L.str.139
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	str	w8, [x20, :lo12:iterations]
	mov	w23, #8000                      // =0x1f40
	bl	_Z13test_constantIi10custom_twoIiEEvPT_iPKc
	adrp	x2, .L.str.140
	add	x2, x2, :lo12:.L.str.140
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.141
	add	x2, x2, :lo12:.L.str.141
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.142
	add	x2, x2, :lo12:.L.str.142
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.143
	add	x2, x2, :lo12:.L.str.143
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.144
	add	x2, x2, :lo12:.L.str.144
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.145
	add	x2, x2, :lo12:.L.str.145
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.146
	add	x2, x2, :lo12:.L.str.146
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.147
	add	x2, x2, :lo12:.L.str.147
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.148
	add	x2, x2, :lo12:.L.str.148
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.149
	add	x2, x2, :lo12:.L.str.149
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.150
	add	x2, x2, :lo12:.L.str.150
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.151
	add	x2, x2, :lo12:.L.str.151
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.152
	add	x2, x2, :lo12:.L.str.152
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc
	adrp	x2, .L.str.153
	add	x2, x2, :lo12:.L.str.153
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc
	ldrsw	x8, [x21, :lo12:base_iterations]
	mov	w9, #26215                      // =0x6667
	adrp	x2, .L.str.154
	add	x2, x2, :lo12:.L.str.154
	movk	w9, #26214, lsl #16
	mov	x0, x19
	smull	x8, w8, w9
	mov	w1, #8000                       // =0x1f40
	asr	x8, x8, #34
	add	w8, w8, w8, lsr #31
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc
	adrp	x2, .L.str.155
	add	x2, x2, :lo12:.L.str.155
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc
	adrp	x2, .L.str.156
	add	x2, x2, :lo12:.L.str.156
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc
	adrp	x2, .L.str.157
	add	x2, x2, :lo12:.L.str.157
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc
	adrp	x2, .L.str.158
	add	x2, x2, :lo12:.L.str.158
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc
	adrp	x2, .L.str.159
	add	x2, x2, :lo12:.L.str.159
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc
	adrp	x2, .L.str.160
	add	x2, x2, :lo12:.L.str.160
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc
	adrp	x2, .L.str.161
	add	x2, x2, :lo12:.L.str.161
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc
	adrp	x2, .L.str.162
	add	x2, x2, :lo12:.L.str.162
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc
	adrp	x2, .L.str.163
	add	x2, x2, :lo12:.L.str.163
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc
	adrp	x2, .L.str.164
	add	x2, x2, :lo12:.L.str.164
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc
	adrp	x2, .L.str.165
	add	x2, x2, :lo12:.L.str.165
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc
	adrp	x2, .L.str.166
	add	x2, x2, :lo12:.L.str.166
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc
	adrp	x2, .L.str.167
	add	x2, x2, :lo12:.L.str.167
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc
	adrp	x2, .L.str.168
	add	x2, x2, :lo12:.L.str.168
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc
	adrp	x2, .L.str.169
	add	x2, x2, :lo12:.L.str.169
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc
	adrp	x2, .L.str.170
	add	x2, x2, :lo12:.L.str.170
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc
	ldr	d0, [x22, :lo12:init_value]
	fcvtzu	w8, d0
	dup	v0.4s, w8
	adrp	x8, data32unsigned+16
	add	x8, x8, :lo12:data32unsigned+16
.LBB5_10:                               // =>This Inner Loop Header: Depth=1
	subs	x23, x23, #8
	stp	q0, q0, [x8, #-16]
	add	x8, x8, #32
	b.ne	.LBB5_10
// %bb.11:
	ldr	w8, [x21, :lo12:base_iterations]
	adrp	x19, data32unsigned
	add	x19, x19, :lo12:data32unsigned
	adrp	x2, .L.str.171
	add	x2, x2, :lo12:.L.str.171
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	str	w8, [x20, :lo12:iterations]
	mov	w23, #8000                      // =0x1f40
	bl	_Z13test_constantIj10custom_twoIjEEvPT_iPKc
	adrp	x2, .L.str.172
	add	x2, x2, :lo12:.L.str.172
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.173
	add	x2, x2, :lo12:.L.str.173
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.174
	add	x2, x2, :lo12:.L.str.174
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.175
	add	x2, x2, :lo12:.L.str.175
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.176
	add	x2, x2, :lo12:.L.str.176
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.177
	add	x2, x2, :lo12:.L.str.177
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.178
	add	x2, x2, :lo12:.L.str.178
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.179
	add	x2, x2, :lo12:.L.str.179
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.180
	add	x2, x2, :lo12:.L.str.180
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.181
	add	x2, x2, :lo12:.L.str.181
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.182
	add	x2, x2, :lo12:.L.str.182
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.183
	add	x2, x2, :lo12:.L.str.183
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.184
	add	x2, x2, :lo12:.L.str.184
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc
	adrp	x2, .L.str.185
	add	x2, x2, :lo12:.L.str.185
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc
	ldrsw	x8, [x21, :lo12:base_iterations]
	mov	w9, #26215                      // =0x6667
	adrp	x2, .L.str.186
	add	x2, x2, :lo12:.L.str.186
	movk	w9, #26214, lsl #16
	mov	x0, x19
	smull	x8, w8, w9
	mov	w1, #8000                       // =0x1f40
	asr	x8, x8, #34
	add	w8, w8, w8, lsr #31
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc
	adrp	x2, .L.str.187
	add	x2, x2, :lo12:.L.str.187
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc
	adrp	x2, .L.str.188
	add	x2, x2, :lo12:.L.str.188
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc
	adrp	x2, .L.str.189
	add	x2, x2, :lo12:.L.str.189
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc
	adrp	x2, .L.str.190
	add	x2, x2, :lo12:.L.str.190
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc
	adrp	x2, .L.str.191
	add	x2, x2, :lo12:.L.str.191
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc
	adrp	x2, .L.str.192
	add	x2, x2, :lo12:.L.str.192
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc
	adrp	x2, .L.str.193
	add	x2, x2, :lo12:.L.str.193
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc
	adrp	x2, .L.str.194
	add	x2, x2, :lo12:.L.str.194
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc
	adrp	x2, .L.str.195
	add	x2, x2, :lo12:.L.str.195
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc
	adrp	x2, .L.str.196
	add	x2, x2, :lo12:.L.str.196
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc
	adrp	x2, .L.str.197
	add	x2, x2, :lo12:.L.str.197
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc
	adrp	x2, .L.str.198
	add	x2, x2, :lo12:.L.str.198
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc
	adrp	x2, .L.str.199
	add	x2, x2, :lo12:.L.str.199
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc
	adrp	x2, .L.str.200
	add	x2, x2, :lo12:.L.str.200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc
	adrp	x2, .L.str.201
	add	x2, x2, :lo12:.L.str.201
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc
	adrp	x2, .L.str.202
	add	x2, x2, :lo12:.L.str.202
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	x8, d0
	dup	v0.2d, x8
	adrp	x8, data64+16
	add	x8, x8, :lo12:data64+16
.LBB5_12:                               // =>This Inner Loop Header: Depth=1
	subs	x23, x23, #4
	stp	q0, q0, [x8, #-16]
	add	x8, x8, #32
	b.ne	.LBB5_12
// %bb.13:
	ldr	w8, [x21, :lo12:base_iterations]
	adrp	x19, data64
	add	x19, x19, :lo12:data64
	adrp	x2, .L.str.203
	add	x2, x2, :lo12:.L.str.203
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	str	w8, [x20, :lo12:iterations]
	mov	w23, #8000                      // =0x1f40
	bl	_Z13test_constantIl10custom_twoIlEEvPT_iPKc
	adrp	x2, .L.str.204
	add	x2, x2, :lo12:.L.str.204
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.205
	add	x2, x2, :lo12:.L.str.205
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.206
	add	x2, x2, :lo12:.L.str.206
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.207
	add	x2, x2, :lo12:.L.str.207
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.208
	add	x2, x2, :lo12:.L.str.208
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.209
	add	x2, x2, :lo12:.L.str.209
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.210
	add	x2, x2, :lo12:.L.str.210
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.211
	add	x2, x2, :lo12:.L.str.211
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.212
	add	x2, x2, :lo12:.L.str.212
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.213
	add	x2, x2, :lo12:.L.str.213
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.214
	add	x2, x2, :lo12:.L.str.214
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.215
	add	x2, x2, :lo12:.L.str.215
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.216
	add	x2, x2, :lo12:.L.str.216
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc
	adrp	x2, .L.str.217
	add	x2, x2, :lo12:.L.str.217
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc
	ldrsw	x8, [x21, :lo12:base_iterations]
	mov	w9, #26215                      // =0x6667
	adrp	x2, .L.str.218
	add	x2, x2, :lo12:.L.str.218
	movk	w9, #26214, lsl #16
	mov	x0, x19
	smull	x8, w8, w9
	mov	w1, #8000                       // =0x1f40
	asr	x8, x8, #34
	add	w8, w8, w8, lsr #31
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc
	adrp	x2, .L.str.219
	add	x2, x2, :lo12:.L.str.219
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc
	adrp	x2, .L.str.220
	add	x2, x2, :lo12:.L.str.220
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc
	adrp	x2, .L.str.221
	add	x2, x2, :lo12:.L.str.221
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc
	adrp	x2, .L.str.222
	add	x2, x2, :lo12:.L.str.222
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc
	adrp	x2, .L.str.223
	add	x2, x2, :lo12:.L.str.223
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc
	adrp	x2, .L.str.224
	add	x2, x2, :lo12:.L.str.224
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc
	adrp	x2, .L.str.225
	add	x2, x2, :lo12:.L.str.225
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc
	adrp	x2, .L.str.226
	add	x2, x2, :lo12:.L.str.226
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc
	adrp	x2, .L.str.227
	add	x2, x2, :lo12:.L.str.227
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc
	adrp	x2, .L.str.228
	add	x2, x2, :lo12:.L.str.228
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc
	adrp	x2, .L.str.229
	add	x2, x2, :lo12:.L.str.229
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc
	adrp	x2, .L.str.230
	add	x2, x2, :lo12:.L.str.230
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc
	adrp	x2, .L.str.231
	add	x2, x2, :lo12:.L.str.231
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc
	adrp	x2, .L.str.232
	add	x2, x2, :lo12:.L.str.232
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc
	adrp	x2, .L.str.233
	add	x2, x2, :lo12:.L.str.233
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc
	adrp	x2, .L.str.234
	add	x2, x2, :lo12:.L.str.234
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc
	ldr	d0, [x22, :lo12:init_value]
	fcvtzu	x8, d0
	dup	v0.2d, x8
	adrp	x8, data64unsigned+16
	add	x8, x8, :lo12:data64unsigned+16
.LBB5_14:                               // =>This Inner Loop Header: Depth=1
	subs	x23, x23, #4
	stp	q0, q0, [x8, #-16]
	add	x8, x8, #32
	b.ne	.LBB5_14
// %bb.15:
	ldr	w8, [x21, :lo12:base_iterations]
	adrp	x19, data64unsigned
	add	x19, x19, :lo12:data64unsigned
	adrp	x2, .L.str.235
	add	x2, x2, :lo12:.L.str.235
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	str	w8, [x20, :lo12:iterations]
	mov	w23, #8000                      // =0x1f40
	bl	_Z13test_constantIm10custom_twoImEEvPT_iPKc
	adrp	x2, .L.str.236
	add	x2, x2, :lo12:.L.str.236
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc
	adrp	x2, .L.str.237
	add	x2, x2, :lo12:.L.str.237
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc
	adrp	x2, .L.str.238
	add	x2, x2, :lo12:.L.str.238
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc
	adrp	x2, .L.str.239
	add	x2, x2, :lo12:.L.str.239
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc
	adrp	x2, .L.str.240
	add	x2, x2, :lo12:.L.str.240
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc
	adrp	x2, .L.str.241
	add	x2, x2, :lo12:.L.str.241
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc
	adrp	x2, .L.str.242
	add	x2, x2, :lo12:.L.str.242
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc
	adrp	x2, .L.str.243
	add	x2, x2, :lo12:.L.str.243
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc
	adrp	x2, .L.str.244
	add	x2, x2, :lo12:.L.str.244
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc
	adrp	x2, .L.str.245
	add	x2, x2, :lo12:.L.str.245
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc
	adrp	x2, .L.str.246
	add	x2, x2, :lo12:.L.str.246
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc
	adrp	x2, .L.str.247
	add	x2, x2, :lo12:.L.str.247
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc
	adrp	x2, .L.str.248
	add	x2, x2, :lo12:.L.str.248
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc
	adrp	x2, .L.str.249
	add	x2, x2, :lo12:.L.str.249
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc
	ldrsw	x8, [x21, :lo12:base_iterations]
	mov	w9, #26215                      // =0x6667
	adrp	x2, .L.str.250
	add	x2, x2, :lo12:.L.str.250
	movk	w9, #26214, lsl #16
	mov	x0, x19
	smull	x8, w8, w9
	mov	w1, #8000                       // =0x1f40
	asr	x8, x8, #34
	add	w8, w8, w8, lsr #31
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantIm19custom_constant_addImEEvPT_iPKc
	adrp	x2, .L.str.251
	add	x2, x2, :lo12:.L.str.251
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc
	adrp	x2, .L.str.252
	add	x2, x2, :lo12:.L.str.252
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm19custom_constant_subImEEvPT_iPKc
	adrp	x2, .L.str.253
	add	x2, x2, :lo12:.L.str.253
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc
	adrp	x2, .L.str.254
	add	x2, x2, :lo12:.L.str.254
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc
	adrp	x2, .L.str.255
	add	x2, x2, :lo12:.L.str.255
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc
	adrp	x2, .L.str.256
	add	x2, x2, :lo12:.L.str.256
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc
	adrp	x2, .L.str.257
	add	x2, x2, :lo12:.L.str.257
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc
	adrp	x2, .L.str.258
	add	x2, x2, :lo12:.L.str.258
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc
	adrp	x2, .L.str.259
	add	x2, x2, :lo12:.L.str.259
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc
	adrp	x2, .L.str.260
	add	x2, x2, :lo12:.L.str.260
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc
	adrp	x2, .L.str.261
	add	x2, x2, :lo12:.L.str.261
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm19custom_constant_andImEEvPT_iPKc
	adrp	x2, .L.str.262
	add	x2, x2, :lo12:.L.str.262
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc
	adrp	x2, .L.str.263
	add	x2, x2, :lo12:.L.str.263
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm18custom_constant_orImEEvPT_iPKc
	adrp	x2, .L.str.264
	add	x2, x2, :lo12:.L.str.264
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc
	adrp	x2, .L.str.265
	add	x2, x2, :lo12:.L.str.265
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc
	adrp	x2, .L.str.266
	add	x2, x2, :lo12:.L.str.266
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc
	ldr	d0, [x22, :lo12:init_value]
	adrp	x8, dataFloat+16
	add	x8, x8, :lo12:dataFloat+16
	fcvt	s0, d0
	dup	v0.4s, v0.s[0]
.LBB5_16:                               // =>This Inner Loop Header: Depth=1
	subs	x23, x23, #8
	stp	q0, q0, [x8, #-16]
	add	x8, x8, #32
	b.ne	.LBB5_16
// %bb.17:
	ldr	w8, [x21, :lo12:base_iterations]
	adrp	x19, dataFloat
	add	x19, x19, :lo12:dataFloat
	adrp	x2, .L.str.267
	add	x2, x2, :lo12:.L.str.267
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	str	w8, [x20, :lo12:iterations]
	mov	w23, #8000                      // =0x1f40
	bl	_Z13test_constantIf10custom_twoIfEEvPT_iPKc
	adrp	x2, .L.str.268
	add	x2, x2, :lo12:.L.str.268
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc
	adrp	x2, .L.str.269
	add	x2, x2, :lo12:.L.str.269
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc
	adrp	x2, .L.str.270
	add	x2, x2, :lo12:.L.str.270
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc
	adrp	x2, .L.str.271
	add	x2, x2, :lo12:.L.str.271
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc
	ldrsw	x8, [x21, :lo12:base_iterations]
	mov	w9, #26215                      // =0x6667
	adrp	x2, .L.str.272
	add	x2, x2, :lo12:.L.str.272
	movk	w9, #26214, lsl #16
	mov	x0, x19
	smull	x8, w8, w9
	mov	w1, #8000                       // =0x1f40
	asr	x8, x8, #34
	add	w8, w8, w8, lsr #31
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc
	adrp	x2, .L.str.273
	add	x2, x2, :lo12:.L.str.273
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc
	adrp	x2, .L.str.274
	add	x2, x2, :lo12:.L.str.274
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc
	adrp	x2, .L.str.275
	add	x2, x2, :lo12:.L.str.275
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc
	adrp	x2, .L.str.276
	add	x2, x2, :lo12:.L.str.276
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc
	adrp	x2, .L.str.277
	add	x2, x2, :lo12:.L.str.277
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc
	adrp	x2, .L.str.278
	add	x2, x2, :lo12:.L.str.278
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc
	adrp	x2, .L.str.279
	add	x2, x2, :lo12:.L.str.279
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc
	adrp	x2, .L.str.280
	add	x2, x2, :lo12:.L.str.280
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc
	adrp	x2, .L.str.281
	add	x2, x2, :lo12:.L.str.281
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc
	adrp	x2, .L.str.282
	add	x2, x2, :lo12:.L.str.282
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc
	ldr	d0, [x22, :lo12:init_value]
	adrp	x8, dataDouble+16
	add	x8, x8, :lo12:dataDouble+16
	dup	v0.2d, v0.d[0]
.LBB5_18:                               // =>This Inner Loop Header: Depth=1
	subs	x23, x23, #4
	stp	q0, q0, [x8, #-16]
	add	x8, x8, #32
	b.ne	.LBB5_18
// %bb.19:
	ldr	w8, [x21, :lo12:base_iterations]
	adrp	x19, dataDouble
	add	x19, x19, :lo12:dataDouble
	adrp	x2, .L.str.283
	add	x2, x2, :lo12:.L.str.283
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantId10custom_twoIdEEvPT_iPKc
	adrp	x2, .L.str.284
	add	x2, x2, :lo12:.L.str.284
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc
	adrp	x2, .L.str.285
	add	x2, x2, :lo12:.L.str.285
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc
	adrp	x2, .L.str.286
	add	x2, x2, :lo12:.L.str.286
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc
	adrp	x2, .L.str.287
	add	x2, x2, :lo12:.L.str.287
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc
	ldrsw	x8, [x21, :lo12:base_iterations]
	mov	w9, #26215                      // =0x6667
	adrp	x2, .L.str.288
	add	x2, x2, :lo12:.L.str.288
	movk	w9, #26214, lsl #16
	mov	x0, x19
	smull	x8, w8, w9
	mov	w1, #8000                       // =0x1f40
	asr	x8, x8, #34
	add	w8, w8, w8, lsr #31
	str	w8, [x20, :lo12:iterations]
	bl	_Z13test_constantId19custom_constant_addIdEEvPT_iPKc
	adrp	x2, .L.str.289
	add	x2, x2, :lo12:.L.str.289
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc
	adrp	x2, .L.str.290
	add	x2, x2, :lo12:.L.str.290
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId19custom_constant_subIdEEvPT_iPKc
	adrp	x2, .L.str.291
	add	x2, x2, :lo12:.L.str.291
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc
	adrp	x2, .L.str.292
	add	x2, x2, :lo12:.L.str.292
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc
	adrp	x2, .L.str.293
	add	x2, x2, :lo12:.L.str.293
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc
	adrp	x2, .L.str.294
	add	x2, x2, :lo12:.L.str.294
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc
	adrp	x2, .L.str.295
	add	x2, x2, :lo12:.L.str.295
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc
	adrp	x2, .L.str.296
	add	x2, x2, :lo12:.L.str.296
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc
	adrp	x2, .L.str.297
	add	x2, x2, :lo12:.L.str.297
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc
	adrp	x2, .L.str.298
	add	x2, x2, :lo12:.L.str.298
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc
	mov	w0, wzr
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end5:
	.size	main, .Lfunc_end5-main
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa10custom_twoIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa10custom_twoIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa10custom_twoIaEEvPT_iPKc // -- Begin function _Z13test_constantIa10custom_twoIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa10custom_twoIaEEvPT_iPKc,@function
_Z13test_constantIa10custom_twoIaEEvPT_iPKc: // @_Z13test_constantIa10custom_twoIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB6_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB6_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7f
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB6_4
.LBB6_3:                                //   in Loop: Header=BB6_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB6_8
.LBB6_4:                                // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB6_3
// %bb.5:                               //   in Loop: Header=BB6_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB6_3
.LBB6_6:                                // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB6_7:                                // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB6_7
.LBB6_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB6_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB6_12
.LBB6_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB6_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB6_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB6_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end6:
	.size	_Z13test_constantIa10custom_twoIaEEvPT_iPKc, .Lfunc_end6-_Z13test_constantIa10custom_twoIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc: // @_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB7_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB7_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB7_4
.LBB7_3:                                //   in Loop: Header=BB7_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB7_8
.LBB7_4:                                // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB7_3
// %bb.5:                               //   in Loop: Header=BB7_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB7_3
.LBB7_6:                                // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB7_7:                                // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB7_7
.LBB7_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB7_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB7_12
.LBB7_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB7_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB7_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB7_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end7:
	.size	_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc, .Lfunc_end7-_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc: // @_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB8_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB8_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB8_4
.LBB8_3:                                //   in Loop: Header=BB8_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB8_8
.LBB8_4:                                // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB8_3
// %bb.5:                               //   in Loop: Header=BB8_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB8_3
.LBB8_6:                                // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB8_7:                                // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB8_7
.LBB8_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB8_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB8_12
.LBB8_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB8_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB8_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB8_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end8:
	.size	_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc, .Lfunc_end8-_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc: // @_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB9_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB9_6
// %bb.2:
	add	w9, w20, w20, lsl #1
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	lsl	w9, w9, #1
	and	w25, w9, #0xff
	b	.LBB9_4
.LBB9_3:                                //   in Loop: Header=BB9_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB9_8
.LBB9_4:                                // =>This Inner Loop Header: Depth=1
	cmp	w25, #128
	b.eq	.LBB9_3
// %bb.5:                               //   in Loop: Header=BB9_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB9_3
.LBB9_6:                                // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB9_7:                                // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB9_7
.LBB9_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB9_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB9_12
.LBB9_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB9_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB9_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB9_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end9:
	.size	_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc, .Lfunc_end9-_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc: // @_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB10_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB10_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7f
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB10_4
.LBB10_3:                               //   in Loop: Header=BB10_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB10_8
.LBB10_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB10_3
// %bb.5:                               //   in Loop: Header=BB10_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB10_3
.LBB10_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB10_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB10_7
.LBB10_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB10_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB10_12
.LBB10_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB10_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB10_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB10_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end10:
	.size	_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc, .Lfunc_end10-_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc: // @_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB11_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB11_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB11_4
.LBB11_3:                               //   in Loop: Header=BB11_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB11_8
.LBB11_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB11_3
// %bb.5:                               //   in Loop: Header=BB11_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB11_3
.LBB11_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB11_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB11_7
.LBB11_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB11_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB11_12
.LBB11_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB11_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB11_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB11_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end11:
	.size	_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc, .Lfunc_end11-_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc: // @_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB12_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB12_4
.LBB12_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB12_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB12_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB12_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end12:
	.size	_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc, .Lfunc_end12-_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc: // @_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB13_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB13_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB13_4
.LBB13_3:                               //   in Loop: Header=BB13_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB13_8
.LBB13_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB13_3
// %bb.5:                               //   in Loop: Header=BB13_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB13_3
.LBB13_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB13_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB13_7
.LBB13_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB13_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB13_12
.LBB13_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB13_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB13_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB13_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end13:
	.size	_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc, .Lfunc_end13-_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc: // @_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB14_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB14_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB14_4
.LBB14_3:                               //   in Loop: Header=BB14_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB14_8
.LBB14_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB14_3
// %bb.5:                               //   in Loop: Header=BB14_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB14_3
.LBB14_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB14_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB14_7
.LBB14_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB14_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB14_12
.LBB14_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB14_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB14_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB14_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end14:
	.size	_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc, .Lfunc_end14-_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc: // @_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB15_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB15_4
.LBB15_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB15_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB15_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB15_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end15:
	.size	_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc, .Lfunc_end15-_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc: // @_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB16_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB16_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB16_4
.LBB16_3:                               //   in Loop: Header=BB16_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB16_8
.LBB16_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB16_3
// %bb.5:                               //   in Loop: Header=BB16_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB16_3
.LBB16_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB16_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB16_7
.LBB16_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB16_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB16_12
.LBB16_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB16_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB16_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB16_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end16:
	.size	_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc, .Lfunc_end16-_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc: // @_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB17_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB17_4
.LBB17_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB17_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB17_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB17_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end17:
	.size	_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc, .Lfunc_end17-_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc: // @_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB18_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB18_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7f
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB18_4
.LBB18_3:                               //   in Loop: Header=BB18_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB18_8
.LBB18_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB18_3
// %bb.5:                               //   in Loop: Header=BB18_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB18_3
.LBB18_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB18_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB18_7
.LBB18_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB18_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB18_12
.LBB18_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB18_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB18_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB18_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end18:
	.size	_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc, .Lfunc_end18-_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc: // @_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB19_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB19_6
// %bb.2:
	lsl	w9, w20, #5
	mov	w24, wzr
	sub	w9, w9, w20
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	and	w25, w9, #0xff
	b	.LBB19_4
.LBB19_3:                               //   in Loop: Header=BB19_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB19_8
.LBB19_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #192
	b.eq	.LBB19_3
// %bb.5:                               //   in Loop: Header=BB19_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB19_3
.LBB19_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB19_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB19_7
.LBB19_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB19_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB19_12
.LBB19_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB19_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB19_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB19_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end19:
	.size	_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc, .Lfunc_end19-_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc // -- Begin function _Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc,@function
_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc: // @_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB20_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB20_6
// %bb.2:
	mov	w9, #29                         // =0x1d
	mov	w24, wzr
	mul	w9, w20, w9
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	and	w25, w9, #0xff
	b	.LBB20_4
.LBB20_3:                               //   in Loop: Header=BB20_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB20_8
.LBB20_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB20_3
// %bb.5:                               //   in Loop: Header=BB20_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB20_3
.LBB20_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB20_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB20_7
.LBB20_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB20_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB20_12
.LBB20_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB20_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB20_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB20_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end20:
	.size	_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc, .Lfunc_end20-_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa19custom_constant_addIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc // -- Begin function _Z13test_constantIa19custom_constant_addIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc,@function
_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc: // @_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB21_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB21_19
// %bb.2:
	movi	v8.8b, #10
	movi	v4.16b, #10
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB21_4
.LBB21_3:                               //   in Loop: Header=BB21_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB21_23
.LBB21_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB21_9 Depth 2
                                        //     Child Loop BB21_13 Depth 2
                                        //     Child Loop BB21_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB21_6
// %bb.5:                               //   in Loop: Header=BB21_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB21_15
.LBB21_6:                               //   in Loop: Header=BB21_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB21_8
// %bb.7:                               //   in Loop: Header=BB21_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB21_12
.LBB21_8:                               // %.preheader2
                                        //   in Loop: Header=BB21_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB21_9:                               //   Parent Loop BB21_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB21_9
// %bb.10:                              //   in Loop: Header=BB21_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB21_17
// %bb.11:                              //   in Loop: Header=BB21_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB21_15
.LBB21_12:                              //   in Loop: Header=BB21_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB21_13:                              //   Parent Loop BB21_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB21_13
// %bb.14:                              //   in Loop: Header=BB21_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB21_17
.LBB21_15:                              // %.preheader
                                        //   in Loop: Header=BB21_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB21_16:                              //   Parent Loop BB21_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB21_16
.LBB21_17:                              //   in Loop: Header=BB21_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB21_3
// %bb.18:                              //   in Loop: Header=BB21_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB21_3
.LBB21_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB21_21
.LBB21_20:                              //   in Loop: Header=BB21_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB21_23
.LBB21_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB21_20
// %bb.22:                              //   in Loop: Header=BB21_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB21_20
.LBB21_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB21_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB21_27
.LBB21_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB21_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB21_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB21_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end21:
	.size	_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc, .Lfunc_end21-_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc // -- Begin function _Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc,@function
_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc: // @_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB22_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB22_19
// %bb.2:
	movi	v8.8b, #10
	movi	v4.16b, #10
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB22_4
.LBB22_3:                               //   in Loop: Header=BB22_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB22_23
.LBB22_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB22_9 Depth 2
                                        //     Child Loop BB22_13 Depth 2
                                        //     Child Loop BB22_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB22_6
// %bb.5:                               //   in Loop: Header=BB22_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB22_15
.LBB22_6:                               //   in Loop: Header=BB22_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB22_8
// %bb.7:                               //   in Loop: Header=BB22_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB22_12
.LBB22_8:                               // %.preheader2
                                        //   in Loop: Header=BB22_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB22_9:                               //   Parent Loop BB22_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB22_9
// %bb.10:                              //   in Loop: Header=BB22_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB22_17
// %bb.11:                              //   in Loop: Header=BB22_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB22_15
.LBB22_12:                              //   in Loop: Header=BB22_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB22_13:                              //   Parent Loop BB22_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB22_13
// %bb.14:                              //   in Loop: Header=BB22_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB22_17
.LBB22_15:                              // %.preheader
                                        //   in Loop: Header=BB22_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB22_16:                              //   Parent Loop BB22_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB22_16
.LBB22_17:                              //   in Loop: Header=BB22_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB22_3
// %bb.18:                              //   in Loop: Header=BB22_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB22_3
.LBB22_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB22_21
.LBB22_20:                              //   in Loop: Header=BB22_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB22_23
.LBB22_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB22_20
// %bb.22:                              //   in Loop: Header=BB22_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB22_20
.LBB22_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB22_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB22_27
.LBB22_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB22_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB22_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB22_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end22:
	.size	_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc, .Lfunc_end22-_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa19custom_constant_subIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc // -- Begin function _Z13test_constantIa19custom_constant_subIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc,@function
_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc: // @_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB23_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB23_19
// %bb.2:
	movi	v8.8b, #246
	movi	v4.16b, #246
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB23_4
.LBB23_3:                               //   in Loop: Header=BB23_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB23_23
.LBB23_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB23_9 Depth 2
                                        //     Child Loop BB23_13 Depth 2
                                        //     Child Loop BB23_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB23_6
// %bb.5:                               //   in Loop: Header=BB23_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB23_15
.LBB23_6:                               //   in Loop: Header=BB23_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB23_8
// %bb.7:                               //   in Loop: Header=BB23_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB23_12
.LBB23_8:                               // %.preheader2
                                        //   in Loop: Header=BB23_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB23_9:                               //   Parent Loop BB23_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB23_9
// %bb.10:                              //   in Loop: Header=BB23_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB23_17
// %bb.11:                              //   in Loop: Header=BB23_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB23_15
.LBB23_12:                              //   in Loop: Header=BB23_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB23_13:                              //   Parent Loop BB23_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB23_13
// %bb.14:                              //   in Loop: Header=BB23_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB23_17
.LBB23_15:                              // %.preheader
                                        //   in Loop: Header=BB23_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB23_16:                              //   Parent Loop BB23_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB23_16
.LBB23_17:                              //   in Loop: Header=BB23_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB23_3
// %bb.18:                              //   in Loop: Header=BB23_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #246
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB23_3
.LBB23_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB23_21
.LBB23_20:                              //   in Loop: Header=BB23_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB23_23
.LBB23_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB23_20
// %bb.22:                              //   in Loop: Header=BB23_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB23_20
.LBB23_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB23_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB23_27
.LBB23_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB23_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB23_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB23_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end23:
	.size	_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc, .Lfunc_end23-_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc // -- Begin function _Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc,@function
_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc: // @_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB24_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB24_19
// %bb.2:
	movi	v8.8b, #246
	movi	v4.16b, #246
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB24_4
.LBB24_3:                               //   in Loop: Header=BB24_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB24_23
.LBB24_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB24_9 Depth 2
                                        //     Child Loop BB24_13 Depth 2
                                        //     Child Loop BB24_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB24_6
// %bb.5:                               //   in Loop: Header=BB24_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB24_15
.LBB24_6:                               //   in Loop: Header=BB24_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB24_8
// %bb.7:                               //   in Loop: Header=BB24_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB24_12
.LBB24_8:                               // %.preheader2
                                        //   in Loop: Header=BB24_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB24_9:                               //   Parent Loop BB24_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB24_9
// %bb.10:                              //   in Loop: Header=BB24_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB24_17
// %bb.11:                              //   in Loop: Header=BB24_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB24_15
.LBB24_12:                              //   in Loop: Header=BB24_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB24_13:                              //   Parent Loop BB24_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB24_13
// %bb.14:                              //   in Loop: Header=BB24_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB24_17
.LBB24_15:                              // %.preheader
                                        //   in Loop: Header=BB24_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB24_16:                              //   Parent Loop BB24_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB24_16
.LBB24_17:                              //   in Loop: Header=BB24_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB24_3
// %bb.18:                              //   in Loop: Header=BB24_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #246
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB24_3
.LBB24_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB24_21
.LBB24_20:                              //   in Loop: Header=BB24_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB24_23
.LBB24_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB24_20
// %bb.22:                              //   in Loop: Header=BB24_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB24_20
.LBB24_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB24_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB24_27
.LBB24_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB24_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB24_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB24_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end24:
	.size	_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc, .Lfunc_end24-_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc // -- Begin function _Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc,@function
_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc: // @_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB25_19
// %bb.1:
	cmp	w20, #1
	b.lt	.LBB25_19
// %bb.2:
	movi	v8.8b, #120
	movi	v4.16b, #120
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x23, x24
	mov	w19, #120                       // =0x78
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB25_4
.LBB25_3:                               //   in Loop: Header=BB25_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB25_19
.LBB25_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB25_9 Depth 2
                                        //     Child Loop BB25_13 Depth 2
                                        //     Child Loop BB25_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB25_6
// %bb.5:                               //   in Loop: Header=BB25_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB25_15
.LBB25_6:                               //   in Loop: Header=BB25_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB25_8
// %bb.7:                               //   in Loop: Header=BB25_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB25_12
.LBB25_8:                               // %.preheader2
                                        //   in Loop: Header=BB25_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB25_9:                               //   Parent Loop BB25_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	mla	v0.16b, v2.16b, v4.16b
	mla	v1.16b, v3.16b, v4.16b
	b.ne	.LBB25_9
// %bb.10:                              //   in Loop: Header=BB25_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB25_17
// %bb.11:                              //   in Loop: Header=BB25_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB25_15
.LBB25_12:                              //   in Loop: Header=BB25_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x23, x10
	add	x10, x21, x10
.LBB25_13:                              //   Parent Loop BB25_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	mla	v0.8b, v1.8b, v8.8b
	b.ne	.LBB25_13
// %bb.14:                              //   in Loop: Header=BB25_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB25_17
.LBB25_15:                              // %.preheader
                                        //   in Loop: Header=BB25_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB25_16:                              //   Parent Loop BB25_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB25_16
.LBB25_17:                              //   in Loop: Header=BB25_4 Depth=1
	tst	w9, #0xff
	b.eq	.LBB25_3
// %bb.18:                              //   in Loop: Header=BB25_4 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.16b, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB25_3
.LBB25_19:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB25_21
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB25_23
.LBB25_21:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB25_24
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
.LBB25_23:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB25_24:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end25:
	.size	_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc, .Lfunc_end25-_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc // -- Begin function _Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc,@function
_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc: // @_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB26_19
// %bb.1:
	cmp	w20, #1
	b.lt	.LBB26_19
// %bb.2:
	movi	v8.8b, #120
	movi	v4.16b, #120
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x23, x24
	mov	w19, #120                       // =0x78
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB26_4
.LBB26_3:                               //   in Loop: Header=BB26_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB26_19
.LBB26_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB26_9 Depth 2
                                        //     Child Loop BB26_13 Depth 2
                                        //     Child Loop BB26_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB26_6
// %bb.5:                               //   in Loop: Header=BB26_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB26_15
.LBB26_6:                               //   in Loop: Header=BB26_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB26_8
// %bb.7:                               //   in Loop: Header=BB26_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB26_12
.LBB26_8:                               // %.preheader2
                                        //   in Loop: Header=BB26_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB26_9:                               //   Parent Loop BB26_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	mla	v0.16b, v2.16b, v4.16b
	mla	v1.16b, v3.16b, v4.16b
	b.ne	.LBB26_9
// %bb.10:                              //   in Loop: Header=BB26_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB26_17
// %bb.11:                              //   in Loop: Header=BB26_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB26_15
.LBB26_12:                              //   in Loop: Header=BB26_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x23, x10
	add	x10, x21, x10
.LBB26_13:                              //   Parent Loop BB26_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	mla	v0.8b, v1.8b, v8.8b
	b.ne	.LBB26_13
// %bb.14:                              //   in Loop: Header=BB26_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB26_17
.LBB26_15:                              // %.preheader
                                        //   in Loop: Header=BB26_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB26_16:                              //   Parent Loop BB26_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB26_16
.LBB26_17:                              //   in Loop: Header=BB26_4 Depth=1
	tst	w9, #0xff
	b.eq	.LBB26_3
// %bb.18:                              //   in Loop: Header=BB26_4 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.16b, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB26_3
.LBB26_19:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB26_21
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB26_23
.LBB26_21:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB26_24
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
.LBB26_23:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB26_24:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end26:
	.size	_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc, .Lfunc_end26-_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc // -- Begin function _Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc,@function
_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc: // @_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB27_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB27_19
// %bb.2:
	movi	v8.8b, #120
	movi	v4.16b, #120
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB27_4
.LBB27_3:                               //   in Loop: Header=BB27_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB27_23
.LBB27_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB27_9 Depth 2
                                        //     Child Loop BB27_13 Depth 2
                                        //     Child Loop BB27_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB27_6
// %bb.5:                               //   in Loop: Header=BB27_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB27_15
.LBB27_6:                               //   in Loop: Header=BB27_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB27_8
// %bb.7:                               //   in Loop: Header=BB27_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB27_12
.LBB27_8:                               // %.preheader2
                                        //   in Loop: Header=BB27_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB27_9:                               //   Parent Loop BB27_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB27_9
// %bb.10:                              //   in Loop: Header=BB27_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB27_17
// %bb.11:                              //   in Loop: Header=BB27_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB27_15
.LBB27_12:                              //   in Loop: Header=BB27_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB27_13:                              //   Parent Loop BB27_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB27_13
// %bb.14:                              //   in Loop: Header=BB27_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB27_17
.LBB27_15:                              // %.preheader
                                        //   in Loop: Header=BB27_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB27_16:                              //   Parent Loop BB27_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	add	w9, w9, #120
	b.ne	.LBB27_16
.LBB27_17:                              //   in Loop: Header=BB27_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	ubfiz	w10, w10, #6, #2
	cmp	w10, w9, uxtb
	b.eq	.LBB27_3
// %bb.18:                              //   in Loop: Header=BB27_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB27_3
.LBB27_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB27_21
.LBB27_20:                              //   in Loop: Header=BB27_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB27_23
.LBB27_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w9, #0x3
	b.eq	.LBB27_20
// %bb.22:                              //   in Loop: Header=BB27_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB27_20
.LBB27_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB27_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB27_27
.LBB27_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB27_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB27_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB27_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end27:
	.size	_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc, .Lfunc_end27-_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc // -- Begin function _Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc,@function
_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc: // @_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB28_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB28_19
// %bb.2:
	movi	v8.8b, #103
	movi	v6.16b, #103
	mov	w27, w20
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	mov	w24, #103                       // =0x67
	adrp	x23, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB28_4
.LBB28_3:                               //   in Loop: Header=BB28_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB28_23
.LBB28_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_9 Depth 2
                                        //     Child Loop BB28_13 Depth 2
                                        //     Child Loop BB28_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB28_6
// %bb.5:                               //   in Loop: Header=BB28_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB28_15
.LBB28_6:                               //   in Loop: Header=BB28_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB28_8
// %bb.7:                               //   in Loop: Header=BB28_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB28_12
.LBB28_8:                               // %.preheader2
                                        //   in Loop: Header=BB28_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB28_9:                               //   Parent Loop BB28_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	smull2	v4.8h, v2.16b, v6.16b
	smull	v2.8h, v2.8b, v6.8b
	smull2	v5.8h, v3.16b, v6.16b
	smull	v3.8h, v3.8b, v6.8b
	uzp2	v2.16b, v2.16b, v4.16b
	uzp2	v3.16b, v3.16b, v5.16b
	sshr	v2.16b, v2.16b, #1
	sshr	v3.16b, v3.16b, #1
	usra	v2.16b, v2.16b, #7
	usra	v3.16b, v3.16b, #7
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB28_9
// %bb.10:                              //   in Loop: Header=BB28_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB28_17
// %bb.11:                              //   in Loop: Header=BB28_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB28_15
.LBB28_12:                              //   in Loop: Header=BB28_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB28_13:                              //   Parent Loop BB28_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	smull	v1.8h, v1.8b, v8.8b
	shrn	v1.8b, v1.8h, #8
	sshr	v1.8b, v1.8b, #1
	usra	v1.8b, v1.8b, #7
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB28_13
// %bb.14:                              //   in Loop: Header=BB28_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB28_17
.LBB28_15:                              // %.preheader
                                        //   in Loop: Header=BB28_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB28_16:                              //   Parent Loop BB28_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsb	w12, [x11], #1
	subs	x10, x10, #1
	mul	w12, w12, w24
	asr	w13, w12, #9
	add	w12, w13, w12, lsr #31
	add	w9, w12, w9
	b.ne	.LBB28_16
.LBB28_17:                              //   in Loop: Header=BB28_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w24
	lsr	w11, w10, #9
	add	w10, w11, w10, lsr #31
	ubfiz	w10, w10, #6, #2
	cmp	w10, w9, uxtb
	b.eq	.LBB28_3
// %bb.18:                              //   in Loop: Header=BB28_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v6.16b, #103
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB28_3
.LBB28_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #103                       // =0x67
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB28_21
.LBB28_20:                              //   in Loop: Header=BB28_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB28_23
.LBB28_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	lsr	w10, w9, #9
	add	w9, w10, w9, lsr #31
	tst	w9, #0x3
	b.eq	.LBB28_20
// %bb.22:                              //   in Loop: Header=BB28_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB28_20
.LBB28_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB28_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB28_27
.LBB28_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB28_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB28_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB28_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end28:
	.size	_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc, .Lfunc_end28-_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc // -- Begin function _Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc,@function
_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc: // @_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB29_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB29_19
// %bb.2:
	movi	v8.8b, #137
	movi	v16.16b, #137
	mov	w27, w20
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	mov	w24, #-119                      // =0xffffff89
	adrp	x23, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB29_4
.LBB29_3:                               //   in Loop: Header=BB29_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB29_23
.LBB29_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB29_9 Depth 2
                                        //     Child Loop BB29_13 Depth 2
                                        //     Child Loop BB29_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB29_6
// %bb.5:                               //   in Loop: Header=BB29_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB29_15
.LBB29_6:                               //   in Loop: Header=BB29_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB29_8
// %bb.7:                               //   in Loop: Header=BB29_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB29_12
.LBB29_8:                               // %.preheader2
                                        //   in Loop: Header=BB29_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB29_9:                               //   Parent Loop BB29_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	smull2	v4.8h, v2.16b, v16.16b
	smull	v5.8h, v2.8b, v16.8b
	smull2	v6.8h, v3.16b, v16.16b
	smull	v7.8h, v3.8b, v16.8b
	uzp2	v4.16b, v5.16b, v4.16b
	uzp2	v5.16b, v7.16b, v6.16b
	add	v2.16b, v4.16b, v2.16b
	add	v3.16b, v5.16b, v3.16b
	sshr	v2.16b, v2.16b, #6
	sshr	v3.16b, v3.16b, #6
	usra	v2.16b, v2.16b, #7
	usra	v3.16b, v3.16b, #7
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB29_9
// %bb.10:                              //   in Loop: Header=BB29_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB29_17
// %bb.11:                              //   in Loop: Header=BB29_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB29_15
.LBB29_12:                              //   in Loop: Header=BB29_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB29_13:                              //   Parent Loop BB29_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	smull	v2.8h, v1.8b, v8.8b
	shrn	v2.8b, v2.8h, #8
	add	v1.8b, v2.8b, v1.8b
	sshr	v1.8b, v1.8b, #6
	usra	v1.8b, v1.8b, #7
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB29_13
// %bb.14:                              //   in Loop: Header=BB29_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB29_17
.LBB29_15:                              // %.preheader
                                        //   in Loop: Header=BB29_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB29_16:                              //   Parent Loop BB29_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsb	w12, [x11], #1
	subs	x10, x10, #1
	mul	w13, w12, w24
	add	w12, w12, w13, lsr #8
	sbfx	w13, w12, #6, #2
	and	w12, w12, #0x80
	add	w12, w13, w12, lsr #7
	add	w9, w12, w9
	b.ne	.LBB29_16
.LBB29_17:                              //   in Loop: Header=BB29_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w11, w10, w24
	add	w10, w10, w11, lsr #8
	lsr	w11, w10, #6
	and	w10, w10, #0x80
	add	w10, w11, w10, lsr #7
	ubfiz	w10, w10, #6, #2
	cmp	w10, w9, uxtb
	b.eq	.LBB29_3
// %bb.18:                              //   in Loop: Header=BB29_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v16.16b, #137
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB29_3
.LBB29_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB29_21
.LBB29_20:                              //   in Loop: Header=BB29_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB29_23
.LBB29_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w9, #119
	and	w9, w9, #0xff
	cmp	w9, #239
	b.lo	.LBB29_20
// %bb.22:                              //   in Loop: Header=BB29_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB29_20
.LBB29_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB29_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB29_27
.LBB29_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB29_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB29_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB29_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end29:
	.size	_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc, .Lfunc_end29-_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc // -- Begin function _Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc,@function
_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc: // @_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB30_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB30_19
// %bb.2:
	movi	v8.8b, #2
	movi	v4.16b, #2
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB30_4
.LBB30_3:                               //   in Loop: Header=BB30_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB30_23
.LBB30_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB30_9 Depth 2
                                        //     Child Loop BB30_13 Depth 2
                                        //     Child Loop BB30_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB30_6
// %bb.5:                               //   in Loop: Header=BB30_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB30_15
.LBB30_6:                               //   in Loop: Header=BB30_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB30_8
// %bb.7:                               //   in Loop: Header=BB30_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB30_12
.LBB30_8:                               // %.preheader2
                                        //   in Loop: Header=BB30_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB30_9:                               //   Parent Loop BB30_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB30_9
// %bb.10:                              //   in Loop: Header=BB30_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB30_17
// %bb.11:                              //   in Loop: Header=BB30_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB30_15
.LBB30_12:                              //   in Loop: Header=BB30_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB30_13:                              //   Parent Loop BB30_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB30_13
// %bb.14:                              //   in Loop: Header=BB30_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB30_17
.LBB30_15:                              // %.preheader
                                        //   in Loop: Header=BB30_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB30_16:                              //   Parent Loop BB30_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	add	w9, w9, #2
	b.ne	.LBB30_16
.LBB30_17:                              //   in Loop: Header=BB30_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB30_3
// %bb.18:                              //   in Loop: Header=BB30_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #2
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB30_3
.LBB30_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB30_21
.LBB30_20:                              //   in Loop: Header=BB30_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB30_23
.LBB30_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB30_20
// %bb.22:                              //   in Loop: Header=BB30_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB30_20
.LBB30_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB30_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB30_27
.LBB30_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB30_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB30_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB30_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end30:
	.size	_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc, .Lfunc_end30-_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc // -- Begin function _Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc,@function
_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc: // @_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB31_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB31_19
// %bb.2:
	mov	w27, w20
	add	x9, x21, #16
	mov	w26, wzr
	and	x24, x27, #0x7ffffff8
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	and	x19, x27, #0x7fffffe0
	and	x9, x27, #0x18
	neg	x22, x24
	adrp	x28, init_value
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB31_4
.LBB31_3:                               //   in Loop: Header=BB31_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB31_23
.LBB31_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB31_9 Depth 2
                                        //     Child Loop BB31_13 Depth 2
                                        //     Child Loop BB31_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB31_6
// %bb.5:                               //   in Loop: Header=BB31_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB31_15
.LBB31_6:                               //   in Loop: Header=BB31_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB31_8
// %bb.7:                               //   in Loop: Header=BB31_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB31_12
.LBB31_8:                               // %.preheader2
                                        //   in Loop: Header=BB31_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x19
.LBB31_9:                               //   Parent Loop BB31_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB31_9
// %bb.10:                              //   in Loop: Header=BB31_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x19, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB31_17
// %bb.11:                              //   in Loop: Header=BB31_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x19
	mov	x10, x19
	cbz	x12, .LBB31_15
.LBB31_12:                              //   in Loop: Header=BB31_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB31_13:                              //   Parent Loop BB31_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB31_13
// %bb.14:                              //   in Loop: Header=BB31_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB31_17
.LBB31_15:                              // %.preheader
                                        //   in Loop: Header=BB31_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB31_16:                              //   Parent Loop BB31_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w12, w9
	b.ne	.LBB31_16
.LBB31_17:                              //   in Loop: Header=BB31_4 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	ubfiz	w10, w10, #6, #2
	cmp	w10, w9, uxtb
	b.eq	.LBB31_3
// %bb.18:                              //   in Loop: Header=BB31_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB31_3
.LBB31_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB31_21
.LBB31_20:                              //   in Loop: Header=BB31_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB31_23
.LBB31_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w9, #0x3
	b.eq	.LBB31_20
// %bb.22:                              //   in Loop: Header=BB31_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB31_20
.LBB31_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB31_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB31_27
.LBB31_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB31_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB31_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB31_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end31:
	.size	_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc, .Lfunc_end31-_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa19custom_constant_andIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc // -- Begin function _Z13test_constantIa19custom_constant_andIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc,@function
_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc: // @_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB32_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB32_19
// %bb.2:
	movi	v8.8b, #10
	movi	v4.16b, #10
	mov	w27, w20
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	mov	w24, #10                        // =0xa
	adrp	x23, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB32_4
.LBB32_3:                               //   in Loop: Header=BB32_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB32_23
.LBB32_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB32_9 Depth 2
                                        //     Child Loop BB32_13 Depth 2
                                        //     Child Loop BB32_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB32_6
// %bb.5:                               //   in Loop: Header=BB32_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB32_15
.LBB32_6:                               //   in Loop: Header=BB32_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB32_8
// %bb.7:                               //   in Loop: Header=BB32_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB32_12
.LBB32_8:                               // %.preheader2
                                        //   in Loop: Header=BB32_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB32_9:                               //   Parent Loop BB32_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB32_9
// %bb.10:                              //   in Loop: Header=BB32_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB32_17
// %bb.11:                              //   in Loop: Header=BB32_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB32_15
.LBB32_12:                              //   in Loop: Header=BB32_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB32_13:                              //   Parent Loop BB32_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	and	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB32_13
// %bb.14:                              //   in Loop: Header=BB32_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB32_17
.LBB32_15:                              // %.preheader
                                        //   in Loop: Header=BB32_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB32_16:                              //   Parent Loop BB32_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	and	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB32_16
.LBB32_17:                              //   in Loop: Header=BB32_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	lsl	w10, w10, #6
	and	w10, w10, #0x80
	cmp	w10, w9, uxtb
	b.eq	.LBB32_3
// %bb.18:                              //   in Loop: Header=BB32_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.16b, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB32_3
.LBB32_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB32_21
.LBB32_20:                              //   in Loop: Header=BB32_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB32_23
.LBB32_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tbz	w9, #1, .LBB32_20
// %bb.22:                              //   in Loop: Header=BB32_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB32_20
.LBB32_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB32_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB32_27
.LBB32_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB32_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB32_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB32_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end32:
	.size	_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc, .Lfunc_end32-_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc // -- Begin function _Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc,@function
_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc: // @_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB33_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB33_19
// %bb.2:
	movi	v8.8b, #14
	movi	v4.16b, #14
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB33_4
.LBB33_3:                               //   in Loop: Header=BB33_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB33_23
.LBB33_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB33_9 Depth 2
                                        //     Child Loop BB33_13 Depth 2
                                        //     Child Loop BB33_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB33_6
// %bb.5:                               //   in Loop: Header=BB33_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB33_15
.LBB33_6:                               //   in Loop: Header=BB33_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB33_8
// %bb.7:                               //   in Loop: Header=BB33_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB33_12
.LBB33_8:                               // %.preheader2
                                        //   in Loop: Header=BB33_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB33_9:                               //   Parent Loop BB33_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB33_9
// %bb.10:                              //   in Loop: Header=BB33_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB33_17
// %bb.11:                              //   in Loop: Header=BB33_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB33_15
.LBB33_12:                              //   in Loop: Header=BB33_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB33_13:                              //   Parent Loop BB33_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	and	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB33_13
// %bb.14:                              //   in Loop: Header=BB33_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB33_17
.LBB33_15:                              // %.preheader
                                        //   in Loop: Header=BB33_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB33_16:                              //   Parent Loop BB33_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	and	w12, w12, #0xe
	add	w9, w12, w9
	b.ne	.LBB33_16
.LBB33_17:                              //   in Loop: Header=BB33_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	lsl	w10, w10, #6
	and	w10, w10, #0x80
	cmp	w10, w9, uxtb
	b.eq	.LBB33_3
// %bb.18:                              //   in Loop: Header=BB33_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #14
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB33_3
.LBB33_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB33_21
.LBB33_20:                              //   in Loop: Header=BB33_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB33_23
.LBB33_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tbz	w9, #1, .LBB33_20
// %bb.22:                              //   in Loop: Header=BB33_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB33_20
.LBB33_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB33_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB33_27
.LBB33_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB33_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB33_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB33_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end33:
	.size	_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc, .Lfunc_end33-_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa18custom_constant_orIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc // -- Begin function _Z13test_constantIa18custom_constant_orIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc,@function
_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc: // @_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB34_21
// %bb.1:
	cmp	w20, #0
	b.le	.LBB34_19
// %bb.2:
	mov	w27, w20
	movi	v8.8b, #10
	movi	v4.16b, #10
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7fffffe0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #10                        // =0xa
	adrp	x22, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB34_4
.LBB34_3:                               //   in Loop: Header=BB34_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB34_21
.LBB34_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB34_9 Depth 2
                                        //     Child Loop BB34_13 Depth 2
                                        //     Child Loop BB34_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB34_6
// %bb.5:                               //   in Loop: Header=BB34_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB34_15
.LBB34_6:                               //   in Loop: Header=BB34_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB34_8
// %bb.7:                               //   in Loop: Header=BB34_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB34_12
.LBB34_8:                               // %.preheader2
                                        //   in Loop: Header=BB34_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB34_9:                               //   Parent Loop BB34_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	orr	v2.16b, v2.16b, v4.16b
	orr	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB34_9
// %bb.10:                              //   in Loop: Header=BB34_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB34_17
// %bb.11:                              //   in Loop: Header=BB34_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB34_15
.LBB34_12:                              //   in Loop: Header=BB34_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	add	x9, x9, x10
	add	x10, x21, x10
.LBB34_13:                              //   Parent Loop BB34_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	orr	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB34_13
// %bb.14:                              //   in Loop: Header=BB34_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB34_17
.LBB34_15:                              // %.preheader
                                        //   in Loop: Header=BB34_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB34_16:                              //   Parent Loop BB34_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	orr	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB34_16
.LBB34_17:                              //   in Loop: Header=BB34_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	lsl	w10, w10, #6
	orr	w10, w10, #0x80
	and	w10, w10, #0xc0
	cmp	w10, w9, uxtb
	b.eq	.LBB34_3
// %bb.18:                              //   in Loop: Header=BB34_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB34_3
.LBB34_19:                              // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB34_20:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB34_20
.LBB34_21:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB34_23
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB34_25
.LBB34_23:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB34_26
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
.LBB34_25:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB34_26:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end34:
	.size	_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc, .Lfunc_end34-_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc // -- Begin function _Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc,@function
_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc: // @_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	stur	x2, [x29, #-8]                  // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB35_21
// %bb.1:
	cmp	w20, #0
	b.le	.LBB35_19
// %bb.2:
	movi	v8.8b, #63
	movi	v4.16b, #63
	mov	w27, w20
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	and	x9, x27, #0x18
	add	x24, x21, #16
	neg	x22, x19
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB35_4
.LBB35_3:                               //   in Loop: Header=BB35_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB35_21
.LBB35_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB35_9 Depth 2
                                        //     Child Loop BB35_13 Depth 2
                                        //     Child Loop BB35_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB35_6
// %bb.5:                               //   in Loop: Header=BB35_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB35_15
.LBB35_6:                               //   in Loop: Header=BB35_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB35_8
// %bb.7:                               //   in Loop: Header=BB35_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB35_12
.LBB35_8:                               // %.preheader2
                                        //   in Loop: Header=BB35_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB35_9:                               //   Parent Loop BB35_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	orr	v2.16b, v2.16b, v4.16b
	orr	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB35_9
// %bb.10:                              //   in Loop: Header=BB35_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB35_17
// %bb.11:                              //   in Loop: Header=BB35_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB35_15
.LBB35_12:                              //   in Loop: Header=BB35_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB35_13:                              //   Parent Loop BB35_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	orr	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB35_13
// %bb.14:                              //   in Loop: Header=BB35_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB35_17
.LBB35_15:                              // %.preheader
                                        //   in Loop: Header=BB35_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB35_16:                              //   Parent Loop BB35_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	orr	w12, w12, #0x3f
	add	w9, w12, w9
	b.ne	.LBB35_16
.LBB35_17:                              //   in Loop: Header=BB35_4 Depth=1
	and	w9, w9, #0xff
	cmp	w9, #192
	b.eq	.LBB35_3
// %bb.18:                              //   in Loop: Header=BB35_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #63
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB35_3
.LBB35_19:                              // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB35_20:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB35_20
.LBB35_21:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB35_23
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB35_25
.LBB35_23:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB35_26
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
.LBB35_25:
	sub	x9, x20, x19
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB35_26:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end35:
	.size	_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc, .Lfunc_end35-_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc // -- Begin function _Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc,@function
_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc: // @_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB36_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB36_19
// %bb.2:
	movi	v8.8b, #10
	movi	v4.16b, #10
	mov	w27, w20
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	mov	w24, #10                        // =0xa
	adrp	x23, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB36_4
.LBB36_3:                               //   in Loop: Header=BB36_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB36_23
.LBB36_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB36_9 Depth 2
                                        //     Child Loop BB36_13 Depth 2
                                        //     Child Loop BB36_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB36_6
// %bb.5:                               //   in Loop: Header=BB36_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB36_15
.LBB36_6:                               //   in Loop: Header=BB36_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB36_8
// %bb.7:                               //   in Loop: Header=BB36_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB36_12
.LBB36_8:                               // %.preheader2
                                        //   in Loop: Header=BB36_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB36_9:                               //   Parent Loop BB36_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB36_9
// %bb.10:                              //   in Loop: Header=BB36_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB36_17
// %bb.11:                              //   in Loop: Header=BB36_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB36_15
.LBB36_12:                              //   in Loop: Header=BB36_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB36_13:                              //   Parent Loop BB36_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	eor	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB36_13
// %bb.14:                              //   in Loop: Header=BB36_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB36_17
.LBB36_15:                              // %.preheader
                                        //   in Loop: Header=BB36_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB36_16:                              //   Parent Loop BB36_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	eor	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB36_16
.LBB36_17:                              //   in Loop: Header=BB36_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB36_3
// %bb.18:                              //   in Loop: Header=BB36_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.16b, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB36_3
.LBB36_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB36_21
.LBB36_20:                              //   in Loop: Header=BB36_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB36_23
.LBB36_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB36_20
// %bb.22:                              //   in Loop: Header=BB36_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB36_20
.LBB36_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB36_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB36_27
.LBB36_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB36_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB36_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB36_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end36:
	.size	_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc, .Lfunc_end36-_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc,"axG",@progbits,_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc,comdat
	.weak	_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc // -- Begin function _Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc,@function
_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc: // @_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB37_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB37_19
// %bb.2:
	movi	v8.8b, #49
	movi	v4.16b, #49
	mov	w27, w20
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	mov	w24, #49                        // =0x31
	adrp	x23, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB37_4
.LBB37_3:                               //   in Loop: Header=BB37_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB37_23
.LBB37_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB37_9 Depth 2
                                        //     Child Loop BB37_13 Depth 2
                                        //     Child Loop BB37_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB37_6
// %bb.5:                               //   in Loop: Header=BB37_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB37_15
.LBB37_6:                               //   in Loop: Header=BB37_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB37_8
// %bb.7:                               //   in Loop: Header=BB37_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB37_12
.LBB37_8:                               // %.preheader2
                                        //   in Loop: Header=BB37_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB37_9:                               //   Parent Loop BB37_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB37_9
// %bb.10:                              //   in Loop: Header=BB37_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB37_17
// %bb.11:                              //   in Loop: Header=BB37_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB37_15
.LBB37_12:                              //   in Loop: Header=BB37_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB37_13:                              //   Parent Loop BB37_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	eor	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB37_13
// %bb.14:                              //   in Loop: Header=BB37_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB37_17
.LBB37_15:                              // %.preheader
                                        //   in Loop: Header=BB37_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB37_16:                              //   Parent Loop BB37_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	eor	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB37_16
.LBB37_17:                              //   in Loop: Header=BB37_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #64
	b.eq	.LBB37_3
// %bb.18:                              //   in Loop: Header=BB37_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.16b, #49
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB37_3
.LBB37_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB37_21
.LBB37_20:                              //   in Loop: Header=BB37_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB37_23
.LBB37_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #1
	b.eq	.LBB37_20
// %bb.22:                              //   in Loop: Header=BB37_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB37_20
.LBB37_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB37_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB37_27
.LBB37_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB37_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB37_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB37_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end37:
	.size	_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc, .Lfunc_end37-_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh10custom_twoIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh10custom_twoIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh10custom_twoIhEEvPT_iPKc // -- Begin function _Z13test_constantIh10custom_twoIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh10custom_twoIhEEvPT_iPKc,@function
_Z13test_constantIh10custom_twoIhEEvPT_iPKc: // @_Z13test_constantIh10custom_twoIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB38_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB38_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7f
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB38_4
.LBB38_3:                               //   in Loop: Header=BB38_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB38_8
.LBB38_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB38_3
// %bb.5:                               //   in Loop: Header=BB38_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB38_3
.LBB38_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB38_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB38_7
.LBB38_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB38_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB38_12
.LBB38_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB38_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB38_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB38_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end38:
	.size	_Z13test_constantIh10custom_twoIhEEvPT_iPKc, .Lfunc_end38-_Z13test_constantIh10custom_twoIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc: // @_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB39_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB39_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB39_4
.LBB39_3:                               //   in Loop: Header=BB39_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB39_8
.LBB39_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB39_3
// %bb.5:                               //   in Loop: Header=BB39_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB39_3
.LBB39_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB39_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB39_7
.LBB39_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB39_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB39_12
.LBB39_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB39_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB39_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB39_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end39:
	.size	_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc, .Lfunc_end39-_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc: // @_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB40_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB40_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB40_4
.LBB40_3:                               //   in Loop: Header=BB40_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB40_8
.LBB40_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB40_3
// %bb.5:                               //   in Loop: Header=BB40_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB40_3
.LBB40_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB40_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB40_7
.LBB40_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB40_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB40_12
.LBB40_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB40_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB40_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB40_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end40:
	.size	_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc, .Lfunc_end40-_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc: // @_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB41_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB41_6
// %bb.2:
	add	w9, w20, w20, lsl #1
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	lsl	w9, w9, #1
	and	w25, w9, #0xff
	b	.LBB41_4
.LBB41_3:                               //   in Loop: Header=BB41_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB41_8
.LBB41_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #128
	b.eq	.LBB41_3
// %bb.5:                               //   in Loop: Header=BB41_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB41_3
.LBB41_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB41_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB41_7
.LBB41_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB41_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB41_12
.LBB41_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB41_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB41_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB41_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end41:
	.size	_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc, .Lfunc_end41-_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc: // @_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB42_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB42_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7f
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB42_4
.LBB42_3:                               //   in Loop: Header=BB42_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB42_8
.LBB42_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB42_3
// %bb.5:                               //   in Loop: Header=BB42_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB42_3
.LBB42_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB42_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB42_7
.LBB42_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB42_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB42_12
.LBB42_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB42_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB42_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB42_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end42:
	.size	_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc, .Lfunc_end42-_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc: // @_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB43_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB43_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB43_4
.LBB43_3:                               //   in Loop: Header=BB43_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB43_8
.LBB43_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB43_3
// %bb.5:                               //   in Loop: Header=BB43_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB43_3
.LBB43_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB43_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB43_7
.LBB43_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB43_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB43_12
.LBB43_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB43_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB43_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB43_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end43:
	.size	_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc, .Lfunc_end43-_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc: // @_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB44_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB44_4
.LBB44_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB44_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB44_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB44_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end44:
	.size	_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc, .Lfunc_end44-_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc: // @_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB45_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB45_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB45_4
.LBB45_3:                               //   in Loop: Header=BB45_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB45_8
.LBB45_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB45_3
// %bb.5:                               //   in Loop: Header=BB45_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB45_3
.LBB45_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB45_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB45_7
.LBB45_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB45_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB45_12
.LBB45_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB45_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB45_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB45_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end45:
	.size	_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc, .Lfunc_end45-_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc: // @_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB46_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB46_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB46_4
.LBB46_3:                               //   in Loop: Header=BB46_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB46_8
.LBB46_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB46_3
// %bb.5:                               //   in Loop: Header=BB46_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB46_3
.LBB46_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB46_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB46_7
.LBB46_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB46_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB46_12
.LBB46_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB46_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB46_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB46_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end46:
	.size	_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc, .Lfunc_end46-_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc: // @_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB47_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB47_4
.LBB47_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB47_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB47_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB47_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end47:
	.size	_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc, .Lfunc_end47-_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc: // @_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB48_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB48_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xff
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB48_4
.LBB48_3:                               //   in Loop: Header=BB48_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB48_8
.LBB48_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB48_3
// %bb.5:                               //   in Loop: Header=BB48_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB48_3
.LBB48_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB48_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB48_7
.LBB48_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB48_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB48_12
.LBB48_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB48_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB48_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB48_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end48:
	.size	_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc, .Lfunc_end48-_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc: // @_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB49_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB49_4
.LBB49_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB49_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB49_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB49_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end49:
	.size	_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc, .Lfunc_end49-_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc: // @_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB50_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB50_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7f
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB50_4
.LBB50_3:                               //   in Loop: Header=BB50_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB50_8
.LBB50_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB50_3
// %bb.5:                               //   in Loop: Header=BB50_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB50_3
.LBB50_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB50_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB50_7
.LBB50_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB50_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB50_12
.LBB50_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB50_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB50_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB50_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end50:
	.size	_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc, .Lfunc_end50-_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc: // @_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB51_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB51_6
// %bb.2:
	lsl	w9, w20, #5
	mov	w24, wzr
	sub	w9, w9, w20
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	and	w25, w9, #0xff
	b	.LBB51_4
.LBB51_3:                               //   in Loop: Header=BB51_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB51_8
.LBB51_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #192
	b.eq	.LBB51_3
// %bb.5:                               //   in Loop: Header=BB51_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB51_3
.LBB51_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB51_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB51_7
.LBB51_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB51_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB51_12
.LBB51_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB51_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB51_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB51_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end51:
	.size	_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc, .Lfunc_end51-_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc // -- Begin function _Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc,@function
_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc: // @_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	str	x25, [sp, #16]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB52_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB52_6
// %bb.2:
	mov	w9, #29                         // =0x1d
	mov	w24, wzr
	mul	w9, w20, w9
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	and	w25, w9, #0xff
	b	.LBB52_4
.LBB52_3:                               //   in Loop: Header=BB52_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB52_8
.LBB52_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, #64
	b.eq	.LBB52_3
// %bb.5:                               //   in Loop: Header=BB52_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB52_3
.LBB52_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB52_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB52_7
.LBB52_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB52_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB52_12
.LBB52_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB52_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB52_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldr	x25, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB52_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end52:
	.size	_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc, .Lfunc_end52-_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh19custom_constant_addIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc // -- Begin function _Z13test_constantIh19custom_constant_addIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc,@function
_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc: // @_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB53_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB53_19
// %bb.2:
	movi	v8.8b, #10
	movi	v4.16b, #10
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB53_4
.LBB53_3:                               //   in Loop: Header=BB53_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB53_23
.LBB53_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB53_9 Depth 2
                                        //     Child Loop BB53_13 Depth 2
                                        //     Child Loop BB53_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB53_6
// %bb.5:                               //   in Loop: Header=BB53_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB53_15
.LBB53_6:                               //   in Loop: Header=BB53_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB53_8
// %bb.7:                               //   in Loop: Header=BB53_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB53_12
.LBB53_8:                               // %.preheader2
                                        //   in Loop: Header=BB53_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB53_9:                               //   Parent Loop BB53_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB53_9
// %bb.10:                              //   in Loop: Header=BB53_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB53_17
// %bb.11:                              //   in Loop: Header=BB53_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB53_15
.LBB53_12:                              //   in Loop: Header=BB53_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB53_13:                              //   Parent Loop BB53_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB53_13
// %bb.14:                              //   in Loop: Header=BB53_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB53_17
.LBB53_15:                              // %.preheader
                                        //   in Loop: Header=BB53_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB53_16:                              //   Parent Loop BB53_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB53_16
.LBB53_17:                              //   in Loop: Header=BB53_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB53_3
// %bb.18:                              //   in Loop: Header=BB53_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB53_3
.LBB53_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB53_21
.LBB53_20:                              //   in Loop: Header=BB53_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB53_23
.LBB53_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB53_20
// %bb.22:                              //   in Loop: Header=BB53_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB53_20
.LBB53_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB53_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB53_27
.LBB53_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB53_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB53_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB53_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end53:
	.size	_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc, .Lfunc_end53-_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc // -- Begin function _Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc,@function
_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc: // @_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB54_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB54_19
// %bb.2:
	movi	v8.8b, #10
	movi	v4.16b, #10
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB54_4
.LBB54_3:                               //   in Loop: Header=BB54_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB54_23
.LBB54_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB54_9 Depth 2
                                        //     Child Loop BB54_13 Depth 2
                                        //     Child Loop BB54_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB54_6
// %bb.5:                               //   in Loop: Header=BB54_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB54_15
.LBB54_6:                               //   in Loop: Header=BB54_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB54_8
// %bb.7:                               //   in Loop: Header=BB54_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB54_12
.LBB54_8:                               // %.preheader2
                                        //   in Loop: Header=BB54_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB54_9:                               //   Parent Loop BB54_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB54_9
// %bb.10:                              //   in Loop: Header=BB54_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB54_17
// %bb.11:                              //   in Loop: Header=BB54_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB54_15
.LBB54_12:                              //   in Loop: Header=BB54_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB54_13:                              //   Parent Loop BB54_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB54_13
// %bb.14:                              //   in Loop: Header=BB54_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB54_17
.LBB54_15:                              // %.preheader
                                        //   in Loop: Header=BB54_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB54_16:                              //   Parent Loop BB54_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB54_16
.LBB54_17:                              //   in Loop: Header=BB54_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB54_3
// %bb.18:                              //   in Loop: Header=BB54_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB54_3
.LBB54_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB54_21
.LBB54_20:                              //   in Loop: Header=BB54_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB54_23
.LBB54_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB54_20
// %bb.22:                              //   in Loop: Header=BB54_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB54_20
.LBB54_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB54_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB54_27
.LBB54_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB54_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB54_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB54_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end54:
	.size	_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc, .Lfunc_end54-_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh19custom_constant_subIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc // -- Begin function _Z13test_constantIh19custom_constant_subIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc,@function
_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc: // @_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB55_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB55_19
// %bb.2:
	movi	v8.8b, #246
	movi	v4.16b, #246
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB55_4
.LBB55_3:                               //   in Loop: Header=BB55_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB55_23
.LBB55_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB55_9 Depth 2
                                        //     Child Loop BB55_13 Depth 2
                                        //     Child Loop BB55_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB55_6
// %bb.5:                               //   in Loop: Header=BB55_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB55_15
.LBB55_6:                               //   in Loop: Header=BB55_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB55_8
// %bb.7:                               //   in Loop: Header=BB55_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB55_12
.LBB55_8:                               // %.preheader2
                                        //   in Loop: Header=BB55_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB55_9:                               //   Parent Loop BB55_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB55_9
// %bb.10:                              //   in Loop: Header=BB55_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB55_17
// %bb.11:                              //   in Loop: Header=BB55_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB55_15
.LBB55_12:                              //   in Loop: Header=BB55_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB55_13:                              //   Parent Loop BB55_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB55_13
// %bb.14:                              //   in Loop: Header=BB55_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB55_17
.LBB55_15:                              // %.preheader
                                        //   in Loop: Header=BB55_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB55_16:                              //   Parent Loop BB55_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB55_16
.LBB55_17:                              //   in Loop: Header=BB55_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB55_3
// %bb.18:                              //   in Loop: Header=BB55_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #246
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB55_3
.LBB55_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB55_21
.LBB55_20:                              //   in Loop: Header=BB55_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB55_23
.LBB55_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB55_20
// %bb.22:                              //   in Loop: Header=BB55_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB55_20
.LBB55_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB55_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB55_27
.LBB55_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB55_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB55_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB55_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end55:
	.size	_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc, .Lfunc_end55-_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc // -- Begin function _Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc,@function
_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc: // @_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB56_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB56_19
// %bb.2:
	movi	v8.8b, #246
	movi	v4.16b, #246
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB56_4
.LBB56_3:                               //   in Loop: Header=BB56_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB56_23
.LBB56_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB56_9 Depth 2
                                        //     Child Loop BB56_13 Depth 2
                                        //     Child Loop BB56_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB56_6
// %bb.5:                               //   in Loop: Header=BB56_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB56_15
.LBB56_6:                               //   in Loop: Header=BB56_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB56_8
// %bb.7:                               //   in Loop: Header=BB56_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB56_12
.LBB56_8:                               // %.preheader2
                                        //   in Loop: Header=BB56_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB56_9:                               //   Parent Loop BB56_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB56_9
// %bb.10:                              //   in Loop: Header=BB56_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB56_17
// %bb.11:                              //   in Loop: Header=BB56_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB56_15
.LBB56_12:                              //   in Loop: Header=BB56_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB56_13:                              //   Parent Loop BB56_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB56_13
// %bb.14:                              //   in Loop: Header=BB56_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB56_17
.LBB56_15:                              // %.preheader
                                        //   in Loop: Header=BB56_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB56_16:                              //   Parent Loop BB56_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB56_16
.LBB56_17:                              //   in Loop: Header=BB56_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB56_3
// %bb.18:                              //   in Loop: Header=BB56_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #246
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB56_3
.LBB56_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB56_21
.LBB56_20:                              //   in Loop: Header=BB56_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB56_23
.LBB56_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB56_20
// %bb.22:                              //   in Loop: Header=BB56_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB56_20
.LBB56_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB56_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB56_27
.LBB56_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB56_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB56_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB56_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end56:
	.size	_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc, .Lfunc_end56-_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc // -- Begin function _Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc,@function
_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc: // @_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB57_19
// %bb.1:
	cmp	w20, #1
	b.lt	.LBB57_19
// %bb.2:
	movi	v8.8b, #120
	movi	v4.16b, #120
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x23, x24
	mov	w19, #120                       // =0x78
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB57_4
.LBB57_3:                               //   in Loop: Header=BB57_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB57_19
.LBB57_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB57_9 Depth 2
                                        //     Child Loop BB57_13 Depth 2
                                        //     Child Loop BB57_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB57_6
// %bb.5:                               //   in Loop: Header=BB57_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB57_15
.LBB57_6:                               //   in Loop: Header=BB57_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB57_8
// %bb.7:                               //   in Loop: Header=BB57_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB57_12
.LBB57_8:                               // %.preheader2
                                        //   in Loop: Header=BB57_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB57_9:                               //   Parent Loop BB57_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	mla	v0.16b, v2.16b, v4.16b
	mla	v1.16b, v3.16b, v4.16b
	b.ne	.LBB57_9
// %bb.10:                              //   in Loop: Header=BB57_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB57_17
// %bb.11:                              //   in Loop: Header=BB57_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB57_15
.LBB57_12:                              //   in Loop: Header=BB57_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x23, x10
	add	x10, x21, x10
.LBB57_13:                              //   Parent Loop BB57_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	mla	v0.8b, v1.8b, v8.8b
	b.ne	.LBB57_13
// %bb.14:                              //   in Loop: Header=BB57_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB57_17
.LBB57_15:                              // %.preheader
                                        //   in Loop: Header=BB57_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB57_16:                              //   Parent Loop BB57_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB57_16
.LBB57_17:                              //   in Loop: Header=BB57_4 Depth=1
	tst	w9, #0xff
	b.eq	.LBB57_3
// %bb.18:                              //   in Loop: Header=BB57_4 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.16b, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB57_3
.LBB57_19:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB57_21
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB57_23
.LBB57_21:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB57_24
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
.LBB57_23:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB57_24:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end57:
	.size	_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc, .Lfunc_end57-_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc // -- Begin function _Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc,@function
_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc: // @_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB58_19
// %bb.1:
	cmp	w20, #1
	b.lt	.LBB58_19
// %bb.2:
	movi	v8.8b, #120
	movi	v4.16b, #120
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x23, x24
	mov	w19, #120                       // =0x78
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB58_4
.LBB58_3:                               //   in Loop: Header=BB58_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB58_19
.LBB58_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB58_9 Depth 2
                                        //     Child Loop BB58_13 Depth 2
                                        //     Child Loop BB58_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB58_6
// %bb.5:                               //   in Loop: Header=BB58_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB58_15
.LBB58_6:                               //   in Loop: Header=BB58_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB58_8
// %bb.7:                               //   in Loop: Header=BB58_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB58_12
.LBB58_8:                               // %.preheader2
                                        //   in Loop: Header=BB58_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB58_9:                               //   Parent Loop BB58_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	mla	v0.16b, v2.16b, v4.16b
	mla	v1.16b, v3.16b, v4.16b
	b.ne	.LBB58_9
// %bb.10:                              //   in Loop: Header=BB58_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB58_17
// %bb.11:                              //   in Loop: Header=BB58_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB58_15
.LBB58_12:                              //   in Loop: Header=BB58_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x23, x10
	add	x10, x21, x10
.LBB58_13:                              //   Parent Loop BB58_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	mla	v0.8b, v1.8b, v8.8b
	b.ne	.LBB58_13
// %bb.14:                              //   in Loop: Header=BB58_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB58_17
.LBB58_15:                              // %.preheader
                                        //   in Loop: Header=BB58_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB58_16:                              //   Parent Loop BB58_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB58_16
.LBB58_17:                              //   in Loop: Header=BB58_4 Depth=1
	tst	w9, #0xff
	b.eq	.LBB58_3
// %bb.18:                              //   in Loop: Header=BB58_4 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.16b, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB58_3
.LBB58_19:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB58_21
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB58_23
.LBB58_21:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB58_24
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
.LBB58_23:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB58_24:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end58:
	.size	_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc, .Lfunc_end58-_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc // -- Begin function _Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc,@function
_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc: // @_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB59_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB59_19
// %bb.2:
	movi	v8.8b, #120
	movi	v4.16b, #120
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB59_4
.LBB59_3:                               //   in Loop: Header=BB59_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB59_23
.LBB59_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB59_9 Depth 2
                                        //     Child Loop BB59_13 Depth 2
                                        //     Child Loop BB59_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB59_6
// %bb.5:                               //   in Loop: Header=BB59_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB59_15
.LBB59_6:                               //   in Loop: Header=BB59_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB59_8
// %bb.7:                               //   in Loop: Header=BB59_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB59_12
.LBB59_8:                               // %.preheader2
                                        //   in Loop: Header=BB59_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB59_9:                               //   Parent Loop BB59_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB59_9
// %bb.10:                              //   in Loop: Header=BB59_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB59_17
// %bb.11:                              //   in Loop: Header=BB59_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB59_15
.LBB59_12:                              //   in Loop: Header=BB59_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB59_13:                              //   Parent Loop BB59_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB59_13
// %bb.14:                              //   in Loop: Header=BB59_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB59_17
.LBB59_15:                              // %.preheader
                                        //   in Loop: Header=BB59_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB59_16:                              //   Parent Loop BB59_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	add	w9, w9, #120
	b.ne	.LBB59_16
.LBB59_17:                              //   in Loop: Header=BB59_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	ubfiz	w10, w10, #6, #2
	cmp	w10, w9, uxtb
	b.eq	.LBB59_3
// %bb.18:                              //   in Loop: Header=BB59_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB59_3
.LBB59_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB59_21
.LBB59_20:                              //   in Loop: Header=BB59_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB59_23
.LBB59_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w9, #0x3
	b.eq	.LBB59_20
// %bb.22:                              //   in Loop: Header=BB59_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB59_20
.LBB59_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB59_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB59_27
.LBB59_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB59_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB59_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB59_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end59:
	.size	_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc, .Lfunc_end59-_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc // -- Begin function _Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc,@function
_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc: // @_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB60_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB60_19
// %bb.2:
	movi	v8.8b, #205
	movi	v6.16b, #205
	mov	w27, w20
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	mov	w24, #205                       // =0xcd
	adrp	x23, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB60_4
.LBB60_3:                               //   in Loop: Header=BB60_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB60_23
.LBB60_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB60_9 Depth 2
                                        //     Child Loop BB60_13 Depth 2
                                        //     Child Loop BB60_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB60_6
// %bb.5:                               //   in Loop: Header=BB60_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB60_15
.LBB60_6:                               //   in Loop: Header=BB60_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB60_8
// %bb.7:                               //   in Loop: Header=BB60_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB60_12
.LBB60_8:                               // %.preheader2
                                        //   in Loop: Header=BB60_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB60_9:                               //   Parent Loop BB60_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	umull2	v4.8h, v2.16b, v6.16b
	umull	v2.8h, v2.8b, v6.8b
	umull2	v5.8h, v3.16b, v6.16b
	umull	v3.8h, v3.8b, v6.8b
	uzp2	v2.16b, v2.16b, v4.16b
	uzp2	v3.16b, v3.16b, v5.16b
	usra	v0.16b, v2.16b, #2
	usra	v1.16b, v3.16b, #2
	b.ne	.LBB60_9
// %bb.10:                              //   in Loop: Header=BB60_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB60_17
// %bb.11:                              //   in Loop: Header=BB60_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB60_15
.LBB60_12:                              //   in Loop: Header=BB60_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB60_13:                              //   Parent Loop BB60_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	umull	v1.8h, v1.8b, v8.8b
	shrn	v1.8b, v1.8h, #8
	usra	v0.8b, v1.8b, #2
	b.ne	.LBB60_13
// %bb.14:                              //   in Loop: Header=BB60_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB60_17
.LBB60_15:                              // %.preheader
                                        //   in Loop: Header=BB60_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB60_16:                              //   Parent Loop BB60_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	mul	w12, w12, w24
	add	w9, w9, w12, lsr #10
	b.ne	.LBB60_16
.LBB60_17:                              //   in Loop: Header=BB60_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w24
	lsr	w10, w10, #4
	and	w10, w10, #0xc0
	cmp	w10, w9, uxtb
	b.eq	.LBB60_3
// %bb.18:                              //   in Loop: Header=BB60_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v6.16b, #205
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB60_3
.LBB60_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #205                       // =0xcd
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB60_21
.LBB60_20:                              //   in Loop: Header=BB60_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB60_23
.LBB60_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	ubfx	w9, w9, #10, #2
	cbz	w9, .LBB60_20
// %bb.22:                              //   in Loop: Header=BB60_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB60_20
.LBB60_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB60_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB60_27
.LBB60_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB60_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB60_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB60_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end60:
	.size	_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc, .Lfunc_end60-_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc // -- Begin function _Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc,@function
_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc: // @_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB61_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB61_19
// %bb.2:
	movi	v8.8b, #137
	movi	v6.16b, #137
	mov	w27, w20
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	mov	w24, #137                       // =0x89
	adrp	x23, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB61_4
.LBB61_3:                               //   in Loop: Header=BB61_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB61_23
.LBB61_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB61_9 Depth 2
                                        //     Child Loop BB61_13 Depth 2
                                        //     Child Loop BB61_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB61_6
// %bb.5:                               //   in Loop: Header=BB61_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB61_15
.LBB61_6:                               //   in Loop: Header=BB61_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB61_8
// %bb.7:                               //   in Loop: Header=BB61_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB61_12
.LBB61_8:                               // %.preheader2
                                        //   in Loop: Header=BB61_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB61_9:                               //   Parent Loop BB61_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	umull2	v4.8h, v2.16b, v6.16b
	umull	v2.8h, v2.8b, v6.8b
	umull2	v5.8h, v3.16b, v6.16b
	umull	v3.8h, v3.8b, v6.8b
	uzp2	v2.16b, v2.16b, v4.16b
	uzp2	v3.16b, v3.16b, v5.16b
	usra	v0.16b, v2.16b, #6
	usra	v1.16b, v3.16b, #6
	b.ne	.LBB61_9
// %bb.10:                              //   in Loop: Header=BB61_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB61_17
// %bb.11:                              //   in Loop: Header=BB61_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB61_15
.LBB61_12:                              //   in Loop: Header=BB61_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB61_13:                              //   Parent Loop BB61_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	umull	v1.8h, v1.8b, v8.8b
	shrn	v1.8b, v1.8h, #8
	usra	v0.8b, v1.8b, #6
	b.ne	.LBB61_13
// %bb.14:                              //   in Loop: Header=BB61_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB61_17
.LBB61_15:                              // %.preheader
                                        //   in Loop: Header=BB61_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB61_16:                              //   Parent Loop BB61_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	mul	w12, w12, w24
	add	w9, w9, w12, lsr #14
	b.ne	.LBB61_16
.LBB61_17:                              //   in Loop: Header=BB61_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w24
	lsr	w10, w10, #8
	and	w10, w10, #0xc0
	cmp	w10, w9, uxtb
	b.eq	.LBB61_3
// %bb.18:                              //   in Loop: Header=BB61_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v6.16b, #137
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB61_3
.LBB61_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB61_21
.LBB61_20:                              //   in Loop: Header=BB61_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB61_23
.LBB61_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmp	w9, #120
	b.lo	.LBB61_20
// %bb.22:                              //   in Loop: Header=BB61_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB61_20
.LBB61_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB61_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB61_27
.LBB61_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB61_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB61_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB61_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end61:
	.size	_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc, .Lfunc_end61-_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc // -- Begin function _Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc,@function
_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc: // @_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB62_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB62_19
// %bb.2:
	movi	v8.8b, #2
	movi	v4.16b, #2
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB62_4
.LBB62_3:                               //   in Loop: Header=BB62_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB62_23
.LBB62_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB62_9 Depth 2
                                        //     Child Loop BB62_13 Depth 2
                                        //     Child Loop BB62_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB62_6
// %bb.5:                               //   in Loop: Header=BB62_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB62_15
.LBB62_6:                               //   in Loop: Header=BB62_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB62_8
// %bb.7:                               //   in Loop: Header=BB62_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB62_12
.LBB62_8:                               // %.preheader2
                                        //   in Loop: Header=BB62_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB62_9:                               //   Parent Loop BB62_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v0.16b, v2.16b
	add	v1.16b, v1.16b, v3.16b
	add	v0.16b, v0.16b, v4.16b
	add	v1.16b, v1.16b, v4.16b
	b.ne	.LBB62_9
// %bb.10:                              //   in Loop: Header=BB62_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB62_17
// %bb.11:                              //   in Loop: Header=BB62_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB62_15
.LBB62_12:                              //   in Loop: Header=BB62_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB62_13:                              //   Parent Loop BB62_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v0.8b, v1.8b
	add	v0.8b, v0.8b, v8.8b
	b.ne	.LBB62_13
// %bb.14:                              //   in Loop: Header=BB62_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB62_17
.LBB62_15:                              // %.preheader
                                        //   in Loop: Header=BB62_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB62_16:                              //   Parent Loop BB62_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w9, w12
	add	w9, w9, #2
	b.ne	.LBB62_16
.LBB62_17:                              //   in Loop: Header=BB62_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB62_3
// %bb.18:                              //   in Loop: Header=BB62_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #2
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB62_3
.LBB62_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB62_21
.LBB62_20:                              //   in Loop: Header=BB62_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB62_23
.LBB62_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB62_20
// %bb.22:                              //   in Loop: Header=BB62_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB62_20
.LBB62_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB62_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB62_27
.LBB62_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB62_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB62_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB62_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end62:
	.size	_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc, .Lfunc_end62-_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc // -- Begin function _Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc,@function
_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc: // @_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB63_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB63_19
// %bb.2:
	mov	w27, w20
	add	x9, x21, #16
	mov	w26, wzr
	and	x24, x27, #0x7ffffff8
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	and	x19, x27, #0x7fffffe0
	and	x9, x27, #0x18
	neg	x22, x24
	adrp	x28, init_value
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB63_4
.LBB63_3:                               //   in Loop: Header=BB63_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB63_23
.LBB63_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB63_9 Depth 2
                                        //     Child Loop BB63_13 Depth 2
                                        //     Child Loop BB63_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB63_6
// %bb.5:                               //   in Loop: Header=BB63_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB63_15
.LBB63_6:                               //   in Loop: Header=BB63_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB63_8
// %bb.7:                               //   in Loop: Header=BB63_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB63_12
.LBB63_8:                               // %.preheader2
                                        //   in Loop: Header=BB63_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x19
.LBB63_9:                               //   Parent Loop BB63_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB63_9
// %bb.10:                              //   in Loop: Header=BB63_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x19, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB63_17
// %bb.11:                              //   in Loop: Header=BB63_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x19
	mov	x10, x19
	cbz	x12, .LBB63_15
.LBB63_12:                              //   in Loop: Header=BB63_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB63_13:                              //   Parent Loop BB63_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB63_13
// %bb.14:                              //   in Loop: Header=BB63_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB63_17
.LBB63_15:                              // %.preheader
                                        //   in Loop: Header=BB63_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB63_16:                              //   Parent Loop BB63_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	add	w9, w12, w9
	b.ne	.LBB63_16
.LBB63_17:                              //   in Loop: Header=BB63_4 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	ubfiz	w10, w10, #6, #2
	cmp	w10, w9, uxtb
	b.eq	.LBB63_3
// %bb.18:                              //   in Loop: Header=BB63_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB63_3
.LBB63_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB63_21
.LBB63_20:                              //   in Loop: Header=BB63_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB63_23
.LBB63_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w9, #0x3
	b.eq	.LBB63_20
// %bb.22:                              //   in Loop: Header=BB63_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB63_20
.LBB63_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB63_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB63_27
.LBB63_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB63_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB63_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB63_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end63:
	.size	_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc, .Lfunc_end63-_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh19custom_constant_andIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc // -- Begin function _Z13test_constantIh19custom_constant_andIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc,@function
_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc: // @_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB64_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB64_19
// %bb.2:
	movi	v8.8b, #10
	movi	v4.16b, #10
	mov	w27, w20
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	mov	w24, #10                        // =0xa
	adrp	x23, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB64_4
.LBB64_3:                               //   in Loop: Header=BB64_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB64_23
.LBB64_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB64_9 Depth 2
                                        //     Child Loop BB64_13 Depth 2
                                        //     Child Loop BB64_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB64_6
// %bb.5:                               //   in Loop: Header=BB64_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB64_15
.LBB64_6:                               //   in Loop: Header=BB64_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB64_8
// %bb.7:                               //   in Loop: Header=BB64_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB64_12
.LBB64_8:                               // %.preheader2
                                        //   in Loop: Header=BB64_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB64_9:                               //   Parent Loop BB64_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB64_9
// %bb.10:                              //   in Loop: Header=BB64_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB64_17
// %bb.11:                              //   in Loop: Header=BB64_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB64_15
.LBB64_12:                              //   in Loop: Header=BB64_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB64_13:                              //   Parent Loop BB64_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	and	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB64_13
// %bb.14:                              //   in Loop: Header=BB64_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB64_17
.LBB64_15:                              // %.preheader
                                        //   in Loop: Header=BB64_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB64_16:                              //   Parent Loop BB64_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	and	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB64_16
.LBB64_17:                              //   in Loop: Header=BB64_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	lsl	w10, w10, #6
	and	w10, w10, #0x80
	cmp	w10, w9, uxtb
	b.eq	.LBB64_3
// %bb.18:                              //   in Loop: Header=BB64_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.16b, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB64_3
.LBB64_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB64_21
.LBB64_20:                              //   in Loop: Header=BB64_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB64_23
.LBB64_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tbz	w9, #1, .LBB64_20
// %bb.22:                              //   in Loop: Header=BB64_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB64_20
.LBB64_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB64_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB64_27
.LBB64_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB64_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB64_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB64_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end64:
	.size	_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc, .Lfunc_end64-_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc // -- Begin function _Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc,@function
_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc: // @_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB65_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB65_19
// %bb.2:
	movi	v8.8b, #14
	movi	v4.16b, #14
	mov	w27, w20
	and	x24, x27, #0x7ffffff8
	and	x9, x27, #0x18
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x24
	adrp	x19, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB65_4
.LBB65_3:                               //   in Loop: Header=BB65_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB65_23
.LBB65_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB65_9 Depth 2
                                        //     Child Loop BB65_13 Depth 2
                                        //     Child Loop BB65_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB65_6
// %bb.5:                               //   in Loop: Header=BB65_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB65_15
.LBB65_6:                               //   in Loop: Header=BB65_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB65_8
// %bb.7:                               //   in Loop: Header=BB65_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB65_12
.LBB65_8:                               // %.preheader2
                                        //   in Loop: Header=BB65_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB65_9:                               //   Parent Loop BB65_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB65_9
// %bb.10:                              //   in Loop: Header=BB65_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB65_17
// %bb.11:                              //   in Loop: Header=BB65_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB65_15
.LBB65_12:                              //   in Loop: Header=BB65_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB65_13:                              //   Parent Loop BB65_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	and	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB65_13
// %bb.14:                              //   in Loop: Header=BB65_4 Depth=1
	addv	b0, v0.8b
	cmp	x24, x27
	mov	x11, x24
	fmov	w9, s0
	b.eq	.LBB65_17
.LBB65_15:                              // %.preheader
                                        //   in Loop: Header=BB65_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB65_16:                              //   Parent Loop BB65_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	and	w12, w12, #0xe
	add	w9, w12, w9
	b.ne	.LBB65_16
.LBB65_17:                              //   in Loop: Header=BB65_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	lsl	w10, w10, #6
	and	w10, w10, #0x80
	cmp	w10, w9, uxtb
	b.eq	.LBB65_3
// %bb.18:                              //   in Loop: Header=BB65_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #14
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB65_3
.LBB65_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB65_21
.LBB65_20:                              //   in Loop: Header=BB65_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB65_23
.LBB65_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tbz	w9, #1, .LBB65_20
// %bb.22:                              //   in Loop: Header=BB65_21 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB65_20
.LBB65_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB65_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB65_27
.LBB65_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB65_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB65_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB65_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end65:
	.size	_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc, .Lfunc_end65-_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh18custom_constant_orIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc // -- Begin function _Z13test_constantIh18custom_constant_orIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc,@function
_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc: // @_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB66_21
// %bb.1:
	cmp	w20, #0
	b.le	.LBB66_19
// %bb.2:
	mov	w27, w20
	movi	v8.8b, #10
	movi	v4.16b, #10
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7fffffe0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #10                        // =0xa
	adrp	x22, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB66_4
.LBB66_3:                               //   in Loop: Header=BB66_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB66_21
.LBB66_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB66_9 Depth 2
                                        //     Child Loop BB66_13 Depth 2
                                        //     Child Loop BB66_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB66_6
// %bb.5:                               //   in Loop: Header=BB66_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB66_15
.LBB66_6:                               //   in Loop: Header=BB66_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB66_8
// %bb.7:                               //   in Loop: Header=BB66_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB66_12
.LBB66_8:                               // %.preheader2
                                        //   in Loop: Header=BB66_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB66_9:                               //   Parent Loop BB66_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	orr	v2.16b, v2.16b, v4.16b
	orr	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB66_9
// %bb.10:                              //   in Loop: Header=BB66_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB66_17
// %bb.11:                              //   in Loop: Header=BB66_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB66_15
.LBB66_12:                              //   in Loop: Header=BB66_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	add	x9, x9, x10
	add	x10, x21, x10
.LBB66_13:                              //   Parent Loop BB66_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	orr	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB66_13
// %bb.14:                              //   in Loop: Header=BB66_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB66_17
.LBB66_15:                              // %.preheader
                                        //   in Loop: Header=BB66_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB66_16:                              //   Parent Loop BB66_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	orr	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB66_16
.LBB66_17:                              //   in Loop: Header=BB66_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	lsl	w10, w10, #6
	orr	w10, w10, #0x80
	and	w10, w10, #0xc0
	cmp	w10, w9, uxtb
	b.eq	.LBB66_3
// %bb.18:                              //   in Loop: Header=BB66_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB66_3
.LBB66_19:                              // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB66_20:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB66_20
.LBB66_21:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB66_23
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB66_25
.LBB66_23:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB66_26
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
.LBB66_25:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB66_26:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end66:
	.size	_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc, .Lfunc_end66-_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc // -- Begin function _Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc,@function
_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc: // @_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	stur	x2, [x29, #-8]                  // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB67_21
// %bb.1:
	cmp	w20, #0
	b.le	.LBB67_19
// %bb.2:
	movi	v8.8b, #63
	movi	v4.16b, #63
	mov	w27, w20
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	and	x9, x27, #0x18
	add	x24, x21, #16
	neg	x22, x19
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB67_4
.LBB67_3:                               //   in Loop: Header=BB67_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB67_21
.LBB67_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB67_9 Depth 2
                                        //     Child Loop BB67_13 Depth 2
                                        //     Child Loop BB67_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB67_6
// %bb.5:                               //   in Loop: Header=BB67_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB67_15
.LBB67_6:                               //   in Loop: Header=BB67_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB67_8
// %bb.7:                               //   in Loop: Header=BB67_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB67_12
.LBB67_8:                               // %.preheader2
                                        //   in Loop: Header=BB67_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB67_9:                               //   Parent Loop BB67_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	orr	v2.16b, v2.16b, v4.16b
	orr	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB67_9
// %bb.10:                              //   in Loop: Header=BB67_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB67_17
// %bb.11:                              //   in Loop: Header=BB67_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB67_15
.LBB67_12:                              //   in Loop: Header=BB67_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB67_13:                              //   Parent Loop BB67_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	orr	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB67_13
// %bb.14:                              //   in Loop: Header=BB67_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB67_17
.LBB67_15:                              // %.preheader
                                        //   in Loop: Header=BB67_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB67_16:                              //   Parent Loop BB67_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	orr	w12, w12, #0x3f
	add	w9, w12, w9
	b.ne	.LBB67_16
.LBB67_17:                              //   in Loop: Header=BB67_4 Depth=1
	and	w9, w9, #0xff
	cmp	w9, #192
	b.eq	.LBB67_3
// %bb.18:                              //   in Loop: Header=BB67_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.16b, #63
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB67_3
.LBB67_19:                              // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB67_20:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB67_20
.LBB67_21:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB67_23
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB67_25
.LBB67_23:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB67_26
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
.LBB67_25:
	sub	x9, x20, x19
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB67_26:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end67:
	.size	_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc, .Lfunc_end67-_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc // -- Begin function _Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc,@function
_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc: // @_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB68_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB68_19
// %bb.2:
	movi	v8.8b, #10
	movi	v4.16b, #10
	mov	w27, w20
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	mov	w24, #10                        // =0xa
	adrp	x23, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB68_4
.LBB68_3:                               //   in Loop: Header=BB68_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB68_23
.LBB68_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB68_9 Depth 2
                                        //     Child Loop BB68_13 Depth 2
                                        //     Child Loop BB68_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB68_6
// %bb.5:                               //   in Loop: Header=BB68_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB68_15
.LBB68_6:                               //   in Loop: Header=BB68_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB68_8
// %bb.7:                               //   in Loop: Header=BB68_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB68_12
.LBB68_8:                               // %.preheader2
                                        //   in Loop: Header=BB68_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB68_9:                               //   Parent Loop BB68_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB68_9
// %bb.10:                              //   in Loop: Header=BB68_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB68_17
// %bb.11:                              //   in Loop: Header=BB68_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB68_15
.LBB68_12:                              //   in Loop: Header=BB68_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB68_13:                              //   Parent Loop BB68_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	eor	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB68_13
// %bb.14:                              //   in Loop: Header=BB68_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB68_17
.LBB68_15:                              // %.preheader
                                        //   in Loop: Header=BB68_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB68_16:                              //   Parent Loop BB68_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	eor	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB68_16
.LBB68_17:                              //   in Loop: Header=BB68_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #128
	b.eq	.LBB68_3
// %bb.18:                              //   in Loop: Header=BB68_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.16b, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB68_3
.LBB68_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB68_21
.LBB68_20:                              //   in Loop: Header=BB68_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB68_23
.LBB68_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #2
	b.eq	.LBB68_20
// %bb.22:                              //   in Loop: Header=BB68_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB68_20
.LBB68_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB68_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB68_27
.LBB68_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB68_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB68_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB68_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end68:
	.size	_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc, .Lfunc_end68-_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc,"axG",@progbits,_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc,comdat
	.weak	_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc // -- Begin function _Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc,@function
_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc: // @_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB69_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB69_19
// %bb.2:
	movi	v8.8b, #49
	movi	v4.16b, #49
	mov	w27, w20
	and	x9, x27, #0x18
	and	x19, x27, #0x7ffffff8
	mov	w26, wzr
	and	x28, x27, #0x7fffffe0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	mov	w24, #49                        // =0x31
	adrp	x23, init_value
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB69_4
.LBB69_3:                               //   in Loop: Header=BB69_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB69_23
.LBB69_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB69_9 Depth 2
                                        //     Child Loop BB69_13 Depth 2
                                        //     Child Loop BB69_16 Depth 2
	cmp	w20, #7
	b.hi	.LBB69_6
// %bb.5:                               //   in Loop: Header=BB69_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB69_15
.LBB69_6:                               //   in Loop: Header=BB69_4 Depth=1
	cmp	w20, #32
	b.hs	.LBB69_8
// %bb.7:                               //   in Loop: Header=BB69_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB69_12
.LBB69_8:                               // %.preheader2
                                        //   in Loop: Header=BB69_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB69_9:                               //   Parent Loop BB69_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #32
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.16b, v2.16b, v0.16b
	add	v1.16b, v3.16b, v1.16b
	b.ne	.LBB69_9
// %bb.10:                              //   in Loop: Header=BB69_4 Depth=1
	add	v0.16b, v1.16b, v0.16b
	cmp	x28, x27
	addv	b0, v0.16b
	fmov	w9, s0
	b.eq	.LBB69_17
// %bb.11:                              //   in Loop: Header=BB69_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB69_15
.LBB69_12:                              //   in Loop: Header=BB69_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.b[0], w9
	add	x9, x22, x10
	add	x10, x21, x10
.LBB69_13:                              //   Parent Loop BB69_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x10], #8
	adds	x9, x9, #8
	eor	v1.8b, v1.8b, v8.8b
	add	v0.8b, v1.8b, v0.8b
	b.ne	.LBB69_13
// %bb.14:                              //   in Loop: Header=BB69_4 Depth=1
	addv	b0, v0.8b
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB69_17
.LBB69_15:                              // %.preheader
                                        //   in Loop: Header=BB69_4 Depth=1
	sub	x10, x27, x11
	add	x11, x21, x11
.LBB69_16:                              //   Parent Loop BB69_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrb	w12, [x11], #1
	subs	x10, x10, #1
	eor	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB69_16
.LBB69_17:                              //   in Loop: Header=BB69_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w9, w9, w10, lsl #6
	and	w9, w9, #0xff
	cmp	w9, #64
	b.eq	.LBB69_3
// %bb.18:                              //   in Loop: Header=BB69_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.16b, #49
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB69_3
.LBB69_19:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB69_21
.LBB69_20:                              //   in Loop: Header=BB69_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB69_23
.LBB69_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0x3
	cmp	w9, #1
	b.eq	.LBB69_20
// %bb.22:                              //   in Loop: Header=BB69_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB69_20
.LBB69_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB69_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB69_27
.LBB69_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB69_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB69_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB69_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end69:
	.size	_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc, .Lfunc_end69-_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs10custom_twoIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs10custom_twoIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs10custom_twoIsEEvPT_iPKc // -- Begin function _Z13test_constantIs10custom_twoIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs10custom_twoIsEEvPT_iPKc,@function
_Z13test_constantIs10custom_twoIsEEvPT_iPKc: // @_Z13test_constantIs10custom_twoIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB70_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB70_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7fff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB70_4
.LBB70_3:                               //   in Loop: Header=BB70_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB70_8
.LBB70_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB70_3
// %bb.5:                               //   in Loop: Header=BB70_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB70_3
.LBB70_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB70_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB70_7
.LBB70_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB70_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB70_12
.LBB70_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB70_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB70_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB70_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end70:
	.size	_Z13test_constantIs10custom_twoIsEEvPT_iPKc, .Lfunc_end70-_Z13test_constantIs10custom_twoIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc: // @_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB71_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB71_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB71_4
.LBB71_3:                               //   in Loop: Header=BB71_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB71_8
.LBB71_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB71_3
// %bb.5:                               //   in Loop: Header=BB71_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB71_3
.LBB71_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB71_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB71_7
.LBB71_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB71_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB71_12
.LBB71_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB71_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB71_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB71_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end71:
	.size	_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc, .Lfunc_end71-_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc: // @_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB72_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB72_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB72_4
.LBB72_3:                               //   in Loop: Header=BB72_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB72_8
.LBB72_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB72_3
// %bb.5:                               //   in Loop: Header=BB72_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB72_3
.LBB72_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB72_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB72_7
.LBB72_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB72_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB72_12
.LBB72_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB72_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB72_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB72_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end72:
	.size	_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc, .Lfunc_end72-_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc: // @_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB73_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB73_6
// %bb.2:
	add	w9, w20, w20, lsl #1
	mov	w24, wzr
	mov	w26, #48000                     // =0xbb80
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	lsl	w25, w9, #1
	b	.LBB73_4
.LBB73_3:                               //   in Loop: Header=BB73_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB73_8
.LBB73_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w26, w25, uxth
	b.eq	.LBB73_3
// %bb.5:                               //   in Loop: Header=BB73_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB73_3
.LBB73_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB73_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB73_7
.LBB73_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB73_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB73_12
.LBB73_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB73_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB73_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB73_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end73:
	.size	_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc, .Lfunc_end73-_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc: // @_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB74_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB74_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7fff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB74_4
.LBB74_3:                               //   in Loop: Header=BB74_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB74_8
.LBB74_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB74_3
// %bb.5:                               //   in Loop: Header=BB74_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB74_3
.LBB74_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB74_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB74_7
.LBB74_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB74_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB74_12
.LBB74_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB74_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB74_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB74_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end74:
	.size	_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc, .Lfunc_end74-_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc: // @_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB75_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB75_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB75_4
.LBB75_3:                               //   in Loop: Header=BB75_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB75_8
.LBB75_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB75_3
// %bb.5:                               //   in Loop: Header=BB75_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB75_3
.LBB75_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB75_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB75_7
.LBB75_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB75_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB75_12
.LBB75_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB75_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB75_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB75_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end75:
	.size	_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc, .Lfunc_end75-_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc: // @_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB76_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB76_4
.LBB76_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB76_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB76_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB76_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end76:
	.size	_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc, .Lfunc_end76-_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc: // @_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB77_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB77_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB77_4
.LBB77_3:                               //   in Loop: Header=BB77_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB77_8
.LBB77_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB77_3
// %bb.5:                               //   in Loop: Header=BB77_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB77_3
.LBB77_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB77_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB77_7
.LBB77_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB77_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB77_12
.LBB77_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB77_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB77_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB77_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end77:
	.size	_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc, .Lfunc_end77-_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc: // @_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB78_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB78_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB78_4
.LBB78_3:                               //   in Loop: Header=BB78_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB78_8
.LBB78_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB78_3
// %bb.5:                               //   in Loop: Header=BB78_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB78_3
.LBB78_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB78_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB78_7
.LBB78_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB78_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB78_12
.LBB78_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB78_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB78_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB78_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end78:
	.size	_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc, .Lfunc_end78-_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc: // @_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB79_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB79_4
.LBB79_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB79_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB79_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB79_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end79:
	.size	_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc, .Lfunc_end79-_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc: // @_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB80_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB80_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB80_4
.LBB80_3:                               //   in Loop: Header=BB80_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB80_8
.LBB80_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB80_3
// %bb.5:                               //   in Loop: Header=BB80_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB80_3
.LBB80_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB80_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB80_7
.LBB80_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB80_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB80_12
.LBB80_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB80_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB80_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB80_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end80:
	.size	_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc, .Lfunc_end80-_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc: // @_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB81_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB81_4
.LBB81_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB81_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB81_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB81_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end81:
	.size	_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc, .Lfunc_end81-_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc: // @_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB82_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB82_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7fff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB82_4
.LBB82_3:                               //   in Loop: Header=BB82_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB82_8
.LBB82_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB82_3
// %bb.5:                               //   in Loop: Header=BB82_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB82_3
.LBB82_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB82_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB82_7
.LBB82_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB82_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB82_12
.LBB82_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB82_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB82_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB82_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end82:
	.size	_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc, .Lfunc_end82-_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc: // @_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB83_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB83_6
// %bb.2:
	lsl	w9, w20, #5
	mov	w24, wzr
	mov	w26, #51392                     // =0xc8c0
	sub	w25, w9, w20
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB83_4
.LBB83_3:                               //   in Loop: Header=BB83_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB83_8
.LBB83_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w26, w25, uxth
	b.eq	.LBB83_3
// %bb.5:                               //   in Loop: Header=BB83_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB83_3
.LBB83_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB83_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB83_7
.LBB83_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB83_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB83_12
.LBB83_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB83_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB83_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB83_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end83:
	.size	_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc, .Lfunc_end83-_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc // -- Begin function _Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc,@function
_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc: // @_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB84_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB84_6
// %bb.2:
	mov	w9, #29                         // =0x1d
	mov	w24, wzr
	mov	w26, #35392                     // =0x8a40
	mul	w25, w20, w9
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB84_4
.LBB84_3:                               //   in Loop: Header=BB84_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB84_8
.LBB84_4:                               // =>This Inner Loop Header: Depth=1
	cmp	w26, w25, uxth
	b.eq	.LBB84_3
// %bb.5:                               //   in Loop: Header=BB84_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB84_3
.LBB84_6:                               // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB84_7:                               // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB84_7
.LBB84_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB84_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB84_12
.LBB84_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB84_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB84_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB84_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end84:
	.size	_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc, .Lfunc_end84-_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs19custom_constant_addIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc // -- Begin function _Z13test_constantIs19custom_constant_addIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc,@function
_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc: // @_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB85_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB85_19
// %bb.2:
	movi	v8.4h, #10
	movi	v4.8h, #10
	mov	w27, w20
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	and	x28, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	adrp	x24, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #14464                     // =0x3880
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB85_4
.LBB85_3:                               //   in Loop: Header=BB85_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB85_23
.LBB85_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB85_9 Depth 2
                                        //     Child Loop BB85_13 Depth 2
                                        //     Child Loop BB85_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB85_6
// %bb.5:                               //   in Loop: Header=BB85_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB85_15
.LBB85_6:                               //   in Loop: Header=BB85_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB85_8
// %bb.7:                               //   in Loop: Header=BB85_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB85_12
.LBB85_8:                               // %.preheader2
                                        //   in Loop: Header=BB85_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB85_9:                               //   Parent Loop BB85_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB85_9
// %bb.10:                              //   in Loop: Header=BB85_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB85_17
// %bb.11:                              //   in Loop: Header=BB85_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB85_15
.LBB85_12:                              //   in Loop: Header=BB85_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB85_13:                              //   Parent Loop BB85_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB85_13
// %bb.14:                              //   in Loop: Header=BB85_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB85_17
.LBB85_15:                              // %.preheader
                                        //   in Loop: Header=BB85_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB85_16:                              //   Parent Loop BB85_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB85_16
.LBB85_17:                              //   in Loop: Header=BB85_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB85_3
// %bb.18:                              //   in Loop: Header=BB85_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #10
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB85_3
.LBB85_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #51072                     // =0xc780
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB85_21
.LBB85_20:                              //   in Loop: Header=BB85_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB85_23
.LBB85_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB85_20
// %bb.22:                              //   in Loop: Header=BB85_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB85_20
.LBB85_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB85_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB85_27
.LBB85_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB85_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB85_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB85_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end85:
	.size	_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc, .Lfunc_end85-_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc // -- Begin function _Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc,@function
_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc: // @_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB86_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB86_19
// %bb.2:
	movi	v8.4h, #10
	movi	v4.8h, #10
	mov	w27, w20
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	and	x28, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	adrp	x24, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #14464                     // =0x3880
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB86_4
.LBB86_3:                               //   in Loop: Header=BB86_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB86_23
.LBB86_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB86_9 Depth 2
                                        //     Child Loop BB86_13 Depth 2
                                        //     Child Loop BB86_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB86_6
// %bb.5:                               //   in Loop: Header=BB86_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB86_15
.LBB86_6:                               //   in Loop: Header=BB86_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB86_8
// %bb.7:                               //   in Loop: Header=BB86_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB86_12
.LBB86_8:                               // %.preheader2
                                        //   in Loop: Header=BB86_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB86_9:                               //   Parent Loop BB86_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB86_9
// %bb.10:                              //   in Loop: Header=BB86_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB86_17
// %bb.11:                              //   in Loop: Header=BB86_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB86_15
.LBB86_12:                              //   in Loop: Header=BB86_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB86_13:                              //   Parent Loop BB86_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB86_13
// %bb.14:                              //   in Loop: Header=BB86_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB86_17
.LBB86_15:                              // %.preheader
                                        //   in Loop: Header=BB86_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB86_16:                              //   Parent Loop BB86_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB86_16
.LBB86_17:                              //   in Loop: Header=BB86_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB86_3
// %bb.18:                              //   in Loop: Header=BB86_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #10
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB86_3
.LBB86_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #51072                     // =0xc780
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB86_21
.LBB86_20:                              //   in Loop: Header=BB86_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB86_23
.LBB86_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB86_20
// %bb.22:                              //   in Loop: Header=BB86_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB86_20
.LBB86_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB86_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB86_27
.LBB86_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB86_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB86_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB86_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end86:
	.size	_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc, .Lfunc_end86-_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs19custom_constant_subIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc // -- Begin function _Z13test_constantIs19custom_constant_subIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc,@function
_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc: // @_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB87_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB87_19
// %bb.2:
	mov	w27, w20
	mvni	v8.4h, #9
	mvni	v4.8h, #9
	add	x9, x21, #16
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	and	x24, x27, #0x7ffffff0
	and	x9, x27, #0xc
	neg	x28, x19
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #-14464                    // =0xffffc780
	str	x9, [sp]                        // 8-byte Folded Spill
	b	.LBB87_4
.LBB87_3:                               //   in Loop: Header=BB87_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB87_23
.LBB87_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB87_9 Depth 2
                                        //     Child Loop BB87_13 Depth 2
                                        //     Child Loop BB87_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB87_6
// %bb.5:                               //   in Loop: Header=BB87_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB87_15
.LBB87_6:                               //   in Loop: Header=BB87_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB87_8
// %bb.7:                               //   in Loop: Header=BB87_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB87_12
.LBB87_8:                               // %.preheader2
                                        //   in Loop: Header=BB87_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x24
.LBB87_9:                               //   Parent Loop BB87_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB87_9
// %bb.10:                              //   in Loop: Header=BB87_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x24, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB87_17
// %bb.11:                              //   in Loop: Header=BB87_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x24
	mov	x10, x24
	cbz	x12, .LBB87_15
.LBB87_12:                              //   in Loop: Header=BB87_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x28, x10
.LBB87_13:                              //   Parent Loop BB87_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB87_13
// %bb.14:                              //   in Loop: Header=BB87_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB87_17
.LBB87_15:                              // %.preheader
                                        //   in Loop: Header=BB87_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB87_16:                              //   Parent Loop BB87_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB87_16
.LBB87_17:                              //   in Loop: Header=BB87_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB87_3
// %bb.18:                              //   in Loop: Header=BB87_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	mvni	v4.8h, #9
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB87_3
.LBB87_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #14464                     // =0x3880
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB87_21
.LBB87_20:                              //   in Loop: Header=BB87_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB87_23
.LBB87_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB87_20
// %bb.22:                              //   in Loop: Header=BB87_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB87_20
.LBB87_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB87_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB87_27
.LBB87_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB87_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB87_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB87_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end87:
	.size	_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc, .Lfunc_end87-_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc // -- Begin function _Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc,@function
_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc: // @_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB88_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB88_19
// %bb.2:
	mov	w27, w20
	mvni	v8.4h, #9
	mvni	v4.8h, #9
	add	x9, x21, #16
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	and	x24, x27, #0x7ffffff0
	and	x9, x27, #0xc
	neg	x28, x19
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #-14464                    // =0xffffc780
	str	x9, [sp]                        // 8-byte Folded Spill
	b	.LBB88_4
.LBB88_3:                               //   in Loop: Header=BB88_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB88_23
.LBB88_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB88_9 Depth 2
                                        //     Child Loop BB88_13 Depth 2
                                        //     Child Loop BB88_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB88_6
// %bb.5:                               //   in Loop: Header=BB88_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB88_15
.LBB88_6:                               //   in Loop: Header=BB88_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB88_8
// %bb.7:                               //   in Loop: Header=BB88_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB88_12
.LBB88_8:                               // %.preheader2
                                        //   in Loop: Header=BB88_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x24
.LBB88_9:                               //   Parent Loop BB88_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB88_9
// %bb.10:                              //   in Loop: Header=BB88_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x24, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB88_17
// %bb.11:                              //   in Loop: Header=BB88_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x24
	mov	x10, x24
	cbz	x12, .LBB88_15
.LBB88_12:                              //   in Loop: Header=BB88_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x28, x10
.LBB88_13:                              //   Parent Loop BB88_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB88_13
// %bb.14:                              //   in Loop: Header=BB88_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB88_17
.LBB88_15:                              // %.preheader
                                        //   in Loop: Header=BB88_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB88_16:                              //   Parent Loop BB88_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB88_16
.LBB88_17:                              //   in Loop: Header=BB88_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB88_3
// %bb.18:                              //   in Loop: Header=BB88_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	mvni	v4.8h, #9
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB88_3
.LBB88_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #14464                     // =0x3880
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB88_21
.LBB88_20:                              //   in Loop: Header=BB88_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB88_23
.LBB88_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB88_20
// %bb.22:                              //   in Loop: Header=BB88_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB88_20
.LBB88_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB88_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB88_27
.LBB88_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB88_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB88_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB88_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end88:
	.size	_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc, .Lfunc_end88-_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc // -- Begin function _Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc,@function
_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc: // @_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB89_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB89_19
// %bb.2:
	mov	w27, w20
	movi	v8.4h, #120
	movi	v4.8h, #120
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #120                       // =0x78
	adrp	x23, init_value
	mov	w22, #-23040                    // =0xffffa600
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB89_4
.LBB89_3:                               //   in Loop: Header=BB89_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB89_23
.LBB89_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB89_9 Depth 2
                                        //     Child Loop BB89_13 Depth 2
                                        //     Child Loop BB89_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB89_6
// %bb.5:                               //   in Loop: Header=BB89_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB89_15
.LBB89_6:                               //   in Loop: Header=BB89_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB89_8
// %bb.7:                               //   in Loop: Header=BB89_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB89_12
.LBB89_8:                               // %.preheader2
                                        //   in Loop: Header=BB89_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB89_9:                               //   Parent Loop BB89_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	mla	v0.8h, v2.8h, v4.8h
	mla	v1.8h, v3.8h, v4.8h
	b.ne	.LBB89_9
// %bb.10:                              //   in Loop: Header=BB89_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB89_17
// %bb.11:                              //   in Loop: Header=BB89_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB89_15
.LBB89_12:                              //   in Loop: Header=BB89_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB89_13:                              //   Parent Loop BB89_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	mla	v0.4h, v1.4h, v8.4h
	b.ne	.LBB89_13
// %bb.14:                              //   in Loop: Header=BB89_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB89_17
.LBB89_15:                              // %.preheader
                                        //   in Loop: Header=BB89_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB89_16:                              //   Parent Loop BB89_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB89_16
.LBB89_17:                              //   in Loop: Header=BB89_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w22
	and	w10, w10, #0xfe00
	cmp	w10, w9, uxth
	b.eq	.LBB89_3
// %bb.18:                              //   in Loop: Header=BB89_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB89_3
.LBB89_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #-23040                    // =0xffffa600
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB89_21
.LBB89_20:                              //   in Loop: Header=BB89_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB89_23
.LBB89_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	tst	w9, #0xfe00
	b.eq	.LBB89_20
// %bb.22:                              //   in Loop: Header=BB89_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB89_20
.LBB89_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB89_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB89_27
.LBB89_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB89_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB89_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB89_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end89:
	.size	_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc, .Lfunc_end89-_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc // -- Begin function _Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc,@function
_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc: // @_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB90_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB90_19
// %bb.2:
	mov	w27, w20
	movi	v8.4h, #120
	movi	v4.8h, #120
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #120                       // =0x78
	adrp	x23, init_value
	mov	w22, #-23040                    // =0xffffa600
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB90_4
.LBB90_3:                               //   in Loop: Header=BB90_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB90_23
.LBB90_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB90_9 Depth 2
                                        //     Child Loop BB90_13 Depth 2
                                        //     Child Loop BB90_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB90_6
// %bb.5:                               //   in Loop: Header=BB90_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB90_15
.LBB90_6:                               //   in Loop: Header=BB90_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB90_8
// %bb.7:                               //   in Loop: Header=BB90_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB90_12
.LBB90_8:                               // %.preheader2
                                        //   in Loop: Header=BB90_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB90_9:                               //   Parent Loop BB90_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	mla	v0.8h, v2.8h, v4.8h
	mla	v1.8h, v3.8h, v4.8h
	b.ne	.LBB90_9
// %bb.10:                              //   in Loop: Header=BB90_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB90_17
// %bb.11:                              //   in Loop: Header=BB90_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB90_15
.LBB90_12:                              //   in Loop: Header=BB90_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB90_13:                              //   Parent Loop BB90_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	mla	v0.4h, v1.4h, v8.4h
	b.ne	.LBB90_13
// %bb.14:                              //   in Loop: Header=BB90_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB90_17
.LBB90_15:                              // %.preheader
                                        //   in Loop: Header=BB90_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB90_16:                              //   Parent Loop BB90_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB90_16
.LBB90_17:                              //   in Loop: Header=BB90_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w22
	and	w10, w10, #0xfe00
	cmp	w10, w9, uxth
	b.eq	.LBB90_3
// %bb.18:                              //   in Loop: Header=BB90_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB90_3
.LBB90_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #-23040                    // =0xffffa600
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB90_21
.LBB90_20:                              //   in Loop: Header=BB90_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB90_23
.LBB90_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	tst	w9, #0xfe00
	b.eq	.LBB90_20
// %bb.22:                              //   in Loop: Header=BB90_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB90_20
.LBB90_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB90_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB90_27
.LBB90_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB90_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB90_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB90_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end90:
	.size	_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc, .Lfunc_end90-_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc // -- Begin function _Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc,@function
_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc: // @_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB91_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB91_19
// %bb.2:
	movi	v8.4h, #120
	movi	v4.8h, #120
	mov	w27, w20
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	and	x28, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	adrp	x24, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #-23040                    // =0xffffa600
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB91_4
.LBB91_3:                               //   in Loop: Header=BB91_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB91_23
.LBB91_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB91_9 Depth 2
                                        //     Child Loop BB91_13 Depth 2
                                        //     Child Loop BB91_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB91_6
// %bb.5:                               //   in Loop: Header=BB91_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB91_15
.LBB91_6:                               //   in Loop: Header=BB91_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB91_8
// %bb.7:                               //   in Loop: Header=BB91_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB91_12
.LBB91_8:                               // %.preheader2
                                        //   in Loop: Header=BB91_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB91_9:                               //   Parent Loop BB91_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB91_9
// %bb.10:                              //   in Loop: Header=BB91_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB91_17
// %bb.11:                              //   in Loop: Header=BB91_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB91_15
.LBB91_12:                              //   in Loop: Header=BB91_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB91_13:                              //   Parent Loop BB91_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB91_13
// %bb.14:                              //   in Loop: Header=BB91_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB91_17
.LBB91_15:                              // %.preheader
                                        //   in Loop: Header=BB91_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB91_16:                              //   Parent Loop BB91_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #120
	b.ne	.LBB91_16
.LBB91_17:                              //   in Loop: Header=BB91_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB91_3
// %bb.18:                              //   in Loop: Header=BB91_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #120
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB91_3
.LBB91_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #23040                     // =0x5a00
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB91_21
.LBB91_20:                              //   in Loop: Header=BB91_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB91_23
.LBB91_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB91_20
// %bb.22:                              //   in Loop: Header=BB91_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB91_20
.LBB91_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB91_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB91_27
.LBB91_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB91_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB91_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB91_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end91:
	.size	_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc, .Lfunc_end91-_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc // -- Begin function _Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc,@function
_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc: // @_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	str	d8, [sp, #48]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB92_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB92_19
// %bb.2:
	mov	w28, #26215                     // =0x6667
	mov	w27, w20
	mov	w26, wzr
	dup	v8.4h, w28
	and	x9, x27, #0xc
	dup	v6.8h, w28
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	and	x19, x27, #0x7ffffffc
	add	x9, x21, #16
	and	x24, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	adrp	x23, init_value
	mov	w22, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	str	q6, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB92_4
.LBB92_3:                               //   in Loop: Header=BB92_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB92_23
.LBB92_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB92_9 Depth 2
                                        //     Child Loop BB92_13 Depth 2
                                        //     Child Loop BB92_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB92_6
// %bb.5:                               //   in Loop: Header=BB92_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB92_15
.LBB92_6:                               //   in Loop: Header=BB92_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB92_8
// %bb.7:                               //   in Loop: Header=BB92_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB92_12
.LBB92_8:                               // %.preheader2
                                        //   in Loop: Header=BB92_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x24
.LBB92_9:                               //   Parent Loop BB92_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	smull2	v4.4s, v2.8h, v6.8h
	smull	v2.4s, v2.4h, v6.4h
	smull2	v5.4s, v3.8h, v6.8h
	smull	v3.4s, v3.4h, v6.4h
	uzp2	v2.8h, v2.8h, v4.8h
	uzp2	v3.8h, v3.8h, v5.8h
	sshr	v2.8h, v2.8h, #1
	sshr	v3.8h, v3.8h, #1
	usra	v2.8h, v2.8h, #15
	usra	v3.8h, v3.8h, #15
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB92_9
// %bb.10:                              //   in Loop: Header=BB92_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x24, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB92_17
// %bb.11:                              //   in Loop: Header=BB92_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x24
	mov	x10, x24
	cbz	x12, .LBB92_15
.LBB92_12:                              //   in Loop: Header=BB92_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB92_13:                              //   Parent Loop BB92_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	smull	v1.4s, v1.4h, v8.4h
	sshr	v1.4s, v1.4s, #17
	xtn	v1.4h, v1.4s
	usra	v1.4h, v1.4h, #15
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB92_13
// %bb.14:                              //   in Loop: Header=BB92_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB92_17
.LBB92_15:                              // %.preheader
                                        //   in Loop: Header=BB92_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB92_16:                              //   Parent Loop BB92_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsh	w12, [x10], #2
	subs	x11, x11, #1
	mul	w12, w12, w28
	asr	w13, w12, #17
	add	w12, w13, w12, lsr #31
	add	w9, w12, w9
	b.ne	.LBB92_16
.LBB92_17:                              //   in Loop: Header=BB92_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w28
	asr	w11, w10, #17
	add	w10, w11, w10, lsr #31
	mul	w10, w10, w22
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB92_3
// %bb.18:                              //   in Loop: Header=BB92_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q6, [sp, #32]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB92_3
.LBB92_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #26215                     // =0x6667
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB92_21
.LBB92_20:                              //   in Loop: Header=BB92_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB92_23
.LBB92_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	asr	w10, w9, #17
	add	w9, w10, w9, lsr #31
	mul	w9, w9, w23
	tst	w9, #0xffc0
	b.eq	.LBB92_20
// %bb.22:                              //   in Loop: Header=BB92_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB92_20
.LBB92_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB92_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB92_27
.LBB92_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB92_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB92_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldr	d8, [sp, #48]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB92_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end92:
	.size	_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc, .Lfunc_end92-_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc // -- Begin function _Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc,@function
_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc: // @_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	str	d8, [sp, #48]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB93_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB93_19
// %bb.2:
	mov	w9, #34953                      // =0x8889
	mov	w27, w20
	mov	w26, wzr
	dup	v8.4h, w9
	dup	v16.8h, w9
	and	x10, x27, #0xc
	and	x19, x27, #0x7ffffffc
	and	x28, x27, #0x7ffffff0
	str	x10, [sp, #8]                   // 8-byte Folded Spill
	add	x10, x21, #16
	neg	x9, x19
	mov	w24, #-30583                    // =0xffff8889
	adrp	x23, init_value
	mov	w22, #8000                      // =0x1f40
	str	x10, [sp, #24]                  // 8-byte Folded Spill
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	str	q16, [sp, #32]                  // 16-byte Folded Spill
	b	.LBB93_4
.LBB93_3:                               //   in Loop: Header=BB93_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB93_23
.LBB93_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB93_9 Depth 2
                                        //     Child Loop BB93_13 Depth 2
                                        //     Child Loop BB93_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB93_6
// %bb.5:                               //   in Loop: Header=BB93_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB93_15
.LBB93_6:                               //   in Loop: Header=BB93_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB93_8
// %bb.7:                               //   in Loop: Header=BB93_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB93_12
.LBB93_8:                               // %.preheader2
                                        //   in Loop: Header=BB93_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB93_9:                               //   Parent Loop BB93_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	smull2	v4.4s, v2.8h, v16.8h
	smull	v5.4s, v2.4h, v16.4h
	smull2	v6.4s, v3.8h, v16.8h
	smull	v7.4s, v3.4h, v16.4h
	uzp2	v4.8h, v5.8h, v4.8h
	uzp2	v5.8h, v7.8h, v6.8h
	add	v2.8h, v4.8h, v2.8h
	add	v3.8h, v5.8h, v3.8h
	sshr	v2.8h, v2.8h, #6
	sshr	v3.8h, v3.8h, #6
	usra	v2.8h, v2.8h, #15
	usra	v3.8h, v3.8h, #15
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB93_9
// %bb.10:                              //   in Loop: Header=BB93_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB93_17
// %bb.11:                              //   in Loop: Header=BB93_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB93_15
.LBB93_12:                              //   in Loop: Header=BB93_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB93_13:                              //   Parent Loop BB93_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	smull	v2.4s, v1.4h, v8.4h
	shrn	v2.4h, v2.4s, #16
	add	v1.4h, v2.4h, v1.4h
	sshr	v1.4h, v1.4h, #6
	usra	v1.4h, v1.4h, #15
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB93_13
// %bb.14:                              //   in Loop: Header=BB93_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB93_17
.LBB93_15:                              // %.preheader
                                        //   in Loop: Header=BB93_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB93_16:                              //   Parent Loop BB93_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsh	w12, [x10], #2
	subs	x11, x11, #1
	mul	w13, w12, w24
	add	w12, w12, w13, lsr #16
	sbfx	w13, w12, #6, #10
	and	w12, w12, #0x8000
	add	w12, w13, w12, lsr #15
	add	w9, w12, w9
	b.ne	.LBB93_16
.LBB93_17:                              //   in Loop: Header=BB93_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w11, w10, w24
	add	w10, w10, w11, lsr #16
	sxth	w11, w10
	and	w10, w10, #0x8000
	lsr	w11, w11, #6
	add	w10, w11, w10, lsr #15
	mul	w10, w10, w22
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB93_3
// %bb.18:                              //   in Loop: Header=BB93_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q16, [sp, #32]                  // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB93_3
.LBB93_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #-30583                    // =0xffff8889
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB93_21
.LBB93_20:                              //   in Loop: Header=BB93_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB93_23
.LBB93_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w10, w9, w22
	add	w9, w9, w10, lsr #16
	sxth	w10, w9
	and	w9, w9, #0x8000
	lsr	w10, w10, #6
	add	w9, w10, w9, lsr #15
	mul	w9, w9, w23
	tst	w9, #0xffc0
	b.eq	.LBB93_20
// %bb.22:                              //   in Loop: Header=BB93_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB93_20
.LBB93_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB93_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB93_27
.LBB93_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB93_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB93_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldr	d8, [sp, #48]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB93_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end93:
	.size	_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc, .Lfunc_end93-_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc // -- Begin function _Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc,@function
_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc: // @_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB94_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB94_19
// %bb.2:
	movi	v8.4h, #2
	movi	v4.8h, #2
	mov	w27, w20
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	and	x28, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	adrp	x24, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #16000                     // =0x3e80
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB94_4
.LBB94_3:                               //   in Loop: Header=BB94_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB94_23
.LBB94_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB94_9 Depth 2
                                        //     Child Loop BB94_13 Depth 2
                                        //     Child Loop BB94_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB94_6
// %bb.5:                               //   in Loop: Header=BB94_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB94_15
.LBB94_6:                               //   in Loop: Header=BB94_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB94_8
// %bb.7:                               //   in Loop: Header=BB94_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB94_12
.LBB94_8:                               // %.preheader2
                                        //   in Loop: Header=BB94_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB94_9:                               //   Parent Loop BB94_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB94_9
// %bb.10:                              //   in Loop: Header=BB94_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB94_17
// %bb.11:                              //   in Loop: Header=BB94_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB94_15
.LBB94_12:                              //   in Loop: Header=BB94_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB94_13:                              //   Parent Loop BB94_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB94_13
// %bb.14:                              //   in Loop: Header=BB94_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB94_17
.LBB94_15:                              // %.preheader
                                        //   in Loop: Header=BB94_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB94_16:                              //   Parent Loop BB94_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #2
	b.ne	.LBB94_16
.LBB94_17:                              //   in Loop: Header=BB94_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB94_3
// %bb.18:                              //   in Loop: Header=BB94_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #2
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB94_3
.LBB94_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #49536                     // =0xc180
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB94_21
.LBB94_20:                              //   in Loop: Header=BB94_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB94_23
.LBB94_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB94_20
// %bb.22:                              //   in Loop: Header=BB94_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB94_20
.LBB94_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB94_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB94_27
.LBB94_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB94_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB94_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB94_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end94:
	.size	_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc, .Lfunc_end94-_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc // -- Begin function _Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc,@function
_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc: // @_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB95_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB95_19
// %bb.2:
	mov	w27, w20
	add	x9, x21, #16
	mov	w26, wzr
	and	x19, x27, #0x7ffffffc
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	adrp	x24, init_value
	and	x28, x27, #0x7ffffff0
	and	x9, x27, #0xc
	neg	x22, x19
	mov	w23, #8000                      // =0x1f40
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB95_4
.LBB95_3:                               //   in Loop: Header=BB95_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB95_23
.LBB95_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB95_9 Depth 2
                                        //     Child Loop BB95_13 Depth 2
                                        //     Child Loop BB95_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB95_6
// %bb.5:                               //   in Loop: Header=BB95_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB95_15
.LBB95_6:                               //   in Loop: Header=BB95_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB95_8
// %bb.7:                               //   in Loop: Header=BB95_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB95_12
.LBB95_8:                               // %.preheader2
                                        //   in Loop: Header=BB95_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB95_9:                               //   Parent Loop BB95_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB95_9
// %bb.10:                              //   in Loop: Header=BB95_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB95_17
// %bb.11:                              //   in Loop: Header=BB95_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB95_15
.LBB95_12:                              //   in Loop: Header=BB95_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB95_13:                              //   Parent Loop BB95_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB95_13
// %bb.14:                              //   in Loop: Header=BB95_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB95_17
.LBB95_15:                              // %.preheader
                                        //   in Loop: Header=BB95_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB95_16:                              //   Parent Loop BB95_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w12, w9
	b.ne	.LBB95_16
.LBB95_17:                              //   in Loop: Header=BB95_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w23
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB95_3
// %bb.18:                              //   in Loop: Header=BB95_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB95_3
.LBB95_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB95_21
.LBB95_20:                              //   in Loop: Header=BB95_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB95_23
.LBB95_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	tst	w9, #0xffc0
	b.eq	.LBB95_20
// %bb.22:                              //   in Loop: Header=BB95_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB95_20
.LBB95_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB95_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB95_27
.LBB95_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB95_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB95_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB95_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end95:
	.size	_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc, .Lfunc_end95-_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs19custom_constant_andIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc // -- Begin function _Z13test_constantIs19custom_constant_andIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc,@function
_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc: // @_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB96_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB96_19
// %bb.2:
	mov	w27, w20
	movi	v8.4h, #10
	movi	v4.8h, #10
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #10                        // =0xa
	adrp	x23, init_value
	mov	w22, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB96_4
.LBB96_3:                               //   in Loop: Header=BB96_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB96_23
.LBB96_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB96_9 Depth 2
                                        //     Child Loop BB96_13 Depth 2
                                        //     Child Loop BB96_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB96_6
// %bb.5:                               //   in Loop: Header=BB96_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB96_15
.LBB96_6:                               //   in Loop: Header=BB96_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB96_8
// %bb.7:                               //   in Loop: Header=BB96_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB96_12
.LBB96_8:                               // %.preheader2
                                        //   in Loop: Header=BB96_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB96_9:                               //   Parent Loop BB96_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB96_9
// %bb.10:                              //   in Loop: Header=BB96_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB96_17
// %bb.11:                              //   in Loop: Header=BB96_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB96_15
.LBB96_12:                              //   in Loop: Header=BB96_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB96_13:                              //   Parent Loop BB96_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	and	v1.8b, v1.8b, v8.8b
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB96_13
// %bb.14:                              //   in Loop: Header=BB96_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB96_17
.LBB96_15:                              // %.preheader
                                        //   in Loop: Header=BB96_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB96_16:                              //   Parent Loop BB96_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	and	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB96_16
.LBB96_17:                              //   in Loop: Header=BB96_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	and	w10, w10, w24
	mul	w10, w10, w22
	and	w10, w10, #0xff80
	cmp	w10, w9, uxth
	b.eq	.LBB96_3
// %bb.18:                              //   in Loop: Header=BB96_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB96_3
.LBB96_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #10                        // =0xa
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB96_21
.LBB96_20:                              //   in Loop: Header=BB96_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB96_23
.LBB96_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, w22
	mul	w9, w9, w23
	tst	w9, #0xff80
	b.eq	.LBB96_20
// %bb.22:                              //   in Loop: Header=BB96_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB96_20
.LBB96_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB96_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB96_27
.LBB96_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB96_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB96_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB96_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end96:
	.size	_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc, .Lfunc_end96-_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc // -- Begin function _Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc,@function
_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc: // @_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB97_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB97_19
// %bb.2:
	movi	v8.4h, #14
	movi	v4.8h, #14
	mov	w27, w20
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	and	x28, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	adrp	x24, init_value
	mov	w23, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB97_4
.LBB97_3:                               //   in Loop: Header=BB97_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB97_23
.LBB97_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB97_9 Depth 2
                                        //     Child Loop BB97_13 Depth 2
                                        //     Child Loop BB97_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB97_6
// %bb.5:                               //   in Loop: Header=BB97_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB97_15
.LBB97_6:                               //   in Loop: Header=BB97_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB97_8
// %bb.7:                               //   in Loop: Header=BB97_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB97_12
.LBB97_8:                               // %.preheader2
                                        //   in Loop: Header=BB97_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB97_9:                               //   Parent Loop BB97_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB97_9
// %bb.10:                              //   in Loop: Header=BB97_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB97_17
// %bb.11:                              //   in Loop: Header=BB97_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB97_15
.LBB97_12:                              //   in Loop: Header=BB97_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB97_13:                              //   Parent Loop BB97_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	and	v1.8b, v1.8b, v8.8b
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB97_13
// %bb.14:                              //   in Loop: Header=BB97_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB97_17
.LBB97_15:                              // %.preheader
                                        //   in Loop: Header=BB97_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB97_16:                              //   Parent Loop BB97_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	and	w12, w12, #0xe
	add	w9, w12, w9
	b.ne	.LBB97_16
.LBB97_17:                              //   in Loop: Header=BB97_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	and	w10, w10, #0xe
	mul	w10, w10, w23
	and	w10, w10, #0xff80
	cmp	w10, w9, uxth
	b.eq	.LBB97_3
// %bb.18:                              //   in Loop: Header=BB97_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #14
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB97_3
.LBB97_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB97_21
.LBB97_20:                              //   in Loop: Header=BB97_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB97_23
.LBB97_21:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0xe
	mul	w9, w9, w22
	tst	w9, #0xff80
	b.eq	.LBB97_20
// %bb.22:                              //   in Loop: Header=BB97_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB97_20
.LBB97_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB97_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB97_27
.LBB97_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB97_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB97_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB97_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end97:
	.size	_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc, .Lfunc_end97-_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs18custom_constant_orIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc // -- Begin function _Z13test_constantIs18custom_constant_orIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc,@function
_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc: // @_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB98_21
// %bb.1:
	cmp	w20, #0
	b.le	.LBB98_19
// %bb.2:
	mov	w27, w20
	add	x9, x21, #16
	mov	w26, wzr
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	and	x28, x27, #0x7ffffffc
	and	x9, x27, #0xc
	mov	w24, #10                        // =0xa
	adrp	x19, init_value
	and	x22, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	neg	x9, x28
	mov	w23, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB98_4
.LBB98_3:                               //   in Loop: Header=BB98_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB98_21
.LBB98_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB98_9 Depth 2
                                        //     Child Loop BB98_13 Depth 2
                                        //     Child Loop BB98_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB98_6
// %bb.5:                               //   in Loop: Header=BB98_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB98_15
.LBB98_6:                               //   in Loop: Header=BB98_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB98_8
// %bb.7:                               //   in Loop: Header=BB98_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB98_12
.LBB98_8:                               // %.preheader2
                                        //   in Loop: Header=BB98_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	mov	x10, x22
.LBB98_9:                               //   Parent Loop BB98_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	orr	v2.8h, #10
	orr	v3.8h, #10
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB98_9
// %bb.10:                              //   in Loop: Header=BB98_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x22, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB98_17
// %bb.11:                              //   in Loop: Header=BB98_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x22
	mov	x10, x22
	cbz	x12, .LBB98_15
.LBB98_12:                              //   in Loop: Header=BB98_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB98_13:                              //   Parent Loop BB98_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	orr	v1.4h, #10
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB98_13
// %bb.14:                              //   in Loop: Header=BB98_4 Depth=1
	addv	h0, v0.4h
	cmp	x28, x27
	mov	x11, x28
	fmov	w9, s0
	b.eq	.LBB98_17
.LBB98_15:                              // %.preheader
                                        //   in Loop: Header=BB98_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB98_16:                              //   Parent Loop BB98_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	orr	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB98_16
.LBB98_17:                              //   in Loop: Header=BB98_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	orr	w10, w10, w24
	mul	w10, w10, w23
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB98_3
// %bb.18:                              //   in Loop: Header=BB98_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB98_3
.LBB98_19:                              // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB98_20:                              // =>This Inner Loop Header: Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB98_20
.LBB98_21:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB98_23
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB98_25
.LBB98_23:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB98_26
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
.LBB98_25:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB98_26:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end98:
	.size	_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc, .Lfunc_end98-_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc // -- Begin function _Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc,@function
_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc: // @_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB99_21
// %bb.1:
	cmp	w20, #0
	b.le	.LBB99_19
// %bb.2:
	mov	w27, w20
	add	x9, x21, #16
	mov	w26, wzr
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	and	x19, x27, #0x7ffffffc
	and	x9, x27, #0xc
	adrp	x24, init_value
	and	x22, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	neg	x9, x19
	mov	w28, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB99_4
.LBB99_3:                               //   in Loop: Header=BB99_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB99_21
.LBB99_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB99_9 Depth 2
                                        //     Child Loop BB99_13 Depth 2
                                        //     Child Loop BB99_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB99_6
// %bb.5:                               //   in Loop: Header=BB99_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB99_15
.LBB99_6:                               //   in Loop: Header=BB99_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB99_8
// %bb.7:                               //   in Loop: Header=BB99_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB99_12
.LBB99_8:                               // %.preheader2
                                        //   in Loop: Header=BB99_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	mov	x10, x22
.LBB99_9:                               //   Parent Loop BB99_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	orr	v2.8h, #63
	orr	v3.8h, #63
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB99_9
// %bb.10:                              //   in Loop: Header=BB99_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x22, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB99_17
// %bb.11:                              //   in Loop: Header=BB99_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x22
	mov	x10, x22
	cbz	x12, .LBB99_15
.LBB99_12:                              //   in Loop: Header=BB99_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB99_13:                              //   Parent Loop BB99_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	orr	v1.4h, #63
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB99_13
// %bb.14:                              //   in Loop: Header=BB99_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB99_17
.LBB99_15:                              // %.preheader
                                        //   in Loop: Header=BB99_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB99_16:                              //   Parent Loop BB99_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	orr	w12, w12, #0x3f
	add	w9, w12, w9
	b.ne	.LBB99_16
.LBB99_17:                              //   in Loop: Header=BB99_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	orr	w10, w10, #0x3f
	mul	w10, w10, w28
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB99_3
// %bb.18:                              //   in Loop: Header=BB99_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB99_3
.LBB99_19:                              // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB99_20:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB99_20
.LBB99_21:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB99_23
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB99_25
.LBB99_23:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB99_26
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
.LBB99_25:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB99_26:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end99:
	.size	_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc, .Lfunc_end99-_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc // -- Begin function _Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc,@function
_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc: // @_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB100_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB100_19
// %bb.2:
	mov	w27, w20
	movi	v8.4h, #10
	movi	v4.8h, #10
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #10                        // =0xa
	adrp	x23, init_value
	mov	w22, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB100_4
.LBB100_3:                              //   in Loop: Header=BB100_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB100_23
.LBB100_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB100_9 Depth 2
                                        //     Child Loop BB100_13 Depth 2
                                        //     Child Loop BB100_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB100_6
// %bb.5:                               //   in Loop: Header=BB100_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB100_15
.LBB100_6:                              //   in Loop: Header=BB100_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB100_8
// %bb.7:                               //   in Loop: Header=BB100_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB100_12
.LBB100_8:                              // %.preheader2
                                        //   in Loop: Header=BB100_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB100_9:                              //   Parent Loop BB100_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB100_9
// %bb.10:                              //   in Loop: Header=BB100_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB100_17
// %bb.11:                              //   in Loop: Header=BB100_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB100_15
.LBB100_12:                             //   in Loop: Header=BB100_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB100_13:                             //   Parent Loop BB100_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	eor	v1.8b, v1.8b, v8.8b
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB100_13
// %bb.14:                              //   in Loop: Header=BB100_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB100_17
.LBB100_15:                             // %.preheader
                                        //   in Loop: Header=BB100_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB100_16:                             //   Parent Loop BB100_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	eor	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB100_16
.LBB100_17:                             //   in Loop: Header=BB100_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w10, w10, w24
	mul	w10, w10, w22
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB100_3
// %bb.18:                              //   in Loop: Header=BB100_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB100_3
.LBB100_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #10                        // =0xa
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB100_21
.LBB100_20:                             //   in Loop: Header=BB100_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB100_23
.LBB100_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	eor	w9, w9, w22
	mul	w9, w9, w23
	tst	w9, #0xffc0
	b.eq	.LBB100_20
// %bb.22:                              //   in Loop: Header=BB100_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB100_20
.LBB100_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB100_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB100_27
.LBB100_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB100_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB100_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB100_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end100:
	.size	_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc, .Lfunc_end100-_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc,"axG",@progbits,_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc,comdat
	.weak	_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc // -- Begin function _Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc,@function
_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc: // @_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB101_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB101_19
// %bb.2:
	mov	w27, w20
	movi	v8.4h, #49
	movi	v4.8h, #49
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #49                        // =0x31
	adrp	x23, init_value
	mov	w22, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB101_4
.LBB101_3:                              //   in Loop: Header=BB101_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB101_23
.LBB101_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB101_9 Depth 2
                                        //     Child Loop BB101_13 Depth 2
                                        //     Child Loop BB101_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB101_6
// %bb.5:                               //   in Loop: Header=BB101_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB101_15
.LBB101_6:                              //   in Loop: Header=BB101_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB101_8
// %bb.7:                               //   in Loop: Header=BB101_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB101_12
.LBB101_8:                              // %.preheader2
                                        //   in Loop: Header=BB101_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB101_9:                              //   Parent Loop BB101_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB101_9
// %bb.10:                              //   in Loop: Header=BB101_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB101_17
// %bb.11:                              //   in Loop: Header=BB101_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB101_15
.LBB101_12:                             //   in Loop: Header=BB101_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB101_13:                             //   Parent Loop BB101_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	eor	v1.8b, v1.8b, v8.8b
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB101_13
// %bb.14:                              //   in Loop: Header=BB101_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB101_17
.LBB101_15:                             // %.preheader
                                        //   in Loop: Header=BB101_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB101_16:                             //   Parent Loop BB101_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	eor	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB101_16
.LBB101_17:                             //   in Loop: Header=BB101_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w10, w10, w24
	mul	w10, w10, w22
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB101_3
// %bb.18:                              //   in Loop: Header=BB101_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #49
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB101_3
.LBB101_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #49                        // =0x31
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB101_21
.LBB101_20:                             //   in Loop: Header=BB101_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB101_23
.LBB101_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	eor	w9, w9, w22
	mul	w9, w9, w23
	tst	w9, #0xffc0
	b.eq	.LBB101_20
// %bb.22:                              //   in Loop: Header=BB101_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB101_20
.LBB101_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB101_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB101_27
.LBB101_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB101_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB101_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB101_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end101:
	.size	_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc, .Lfunc_end101-_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt10custom_twoItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt10custom_twoItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt10custom_twoItEEvPT_iPKc // -- Begin function _Z13test_constantIt10custom_twoItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt10custom_twoItEEvPT_iPKc,@function
_Z13test_constantIt10custom_twoItEEvPT_iPKc: // @_Z13test_constantIt10custom_twoItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB102_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB102_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7fff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB102_4
.LBB102_3:                              //   in Loop: Header=BB102_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB102_8
.LBB102_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB102_3
// %bb.5:                               //   in Loop: Header=BB102_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB102_3
.LBB102_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB102_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB102_7
.LBB102_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB102_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB102_12
.LBB102_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB102_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB102_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB102_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end102:
	.size	_Z13test_constantIt10custom_twoItEEvPT_iPKc, .Lfunc_end102-_Z13test_constantIt10custom_twoItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt20custom_add_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt20custom_add_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc,@function
_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc: // @_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB103_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB103_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB103_4
.LBB103_3:                              //   in Loop: Header=BB103_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB103_8
.LBB103_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB103_3
// %bb.5:                               //   in Loop: Header=BB103_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB103_3
.LBB103_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB103_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB103_7
.LBB103_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB103_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB103_12
.LBB103_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB103_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB103_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB103_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end103:
	.size	_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc, .Lfunc_end103-_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc,@function
_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc: // @_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB104_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB104_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB104_4
.LBB104_3:                              //   in Loop: Header=BB104_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB104_8
.LBB104_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB104_3
// %bb.5:                               //   in Loop: Header=BB104_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB104_3
.LBB104_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB104_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB104_7
.LBB104_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB104_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB104_12
.LBB104_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB104_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB104_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB104_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end104:
	.size	_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc, .Lfunc_end104-_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc,@function
_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc: // @_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB105_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB105_6
// %bb.2:
	add	w9, w20, w20, lsl #1
	mov	w24, wzr
	mov	w26, #48000                     // =0xbb80
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	lsl	w25, w9, #1
	b	.LBB105_4
.LBB105_3:                              //   in Loop: Header=BB105_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB105_8
.LBB105_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w26, w25, uxth
	b.eq	.LBB105_3
// %bb.5:                               //   in Loop: Header=BB105_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB105_3
.LBB105_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB105_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB105_7
.LBB105_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB105_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB105_12
.LBB105_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB105_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB105_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB105_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end105:
	.size	_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc, .Lfunc_end105-_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc,@function
_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc: // @_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB106_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB106_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7fff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB106_4
.LBB106_3:                              //   in Loop: Header=BB106_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB106_8
.LBB106_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB106_3
// %bb.5:                               //   in Loop: Header=BB106_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB106_3
.LBB106_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB106_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB106_7
.LBB106_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB106_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB106_12
.LBB106_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB106_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB106_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB106_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end106:
	.size	_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc, .Lfunc_end106-_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc,@function
_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc: // @_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB107_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB107_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB107_4
.LBB107_3:                              //   in Loop: Header=BB107_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB107_8
.LBB107_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB107_3
// %bb.5:                               //   in Loop: Header=BB107_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB107_3
.LBB107_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB107_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB107_7
.LBB107_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB107_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB107_12
.LBB107_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB107_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB107_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB107_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end107:
	.size	_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc, .Lfunc_end107-_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc,@function
_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc: // @_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB108_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB108_4
.LBB108_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB108_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB108_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB108_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end108:
	.size	_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc, .Lfunc_end108-_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc,@function
_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc: // @_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB109_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB109_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB109_4
.LBB109_3:                              //   in Loop: Header=BB109_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB109_8
.LBB109_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB109_3
// %bb.5:                               //   in Loop: Header=BB109_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB109_3
.LBB109_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB109_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB109_7
.LBB109_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB109_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB109_12
.LBB109_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB109_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB109_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB109_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end109:
	.size	_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc, .Lfunc_end109-_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc,@function
_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc: // @_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB110_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB110_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB110_4
.LBB110_3:                              //   in Loop: Header=BB110_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB110_8
.LBB110_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB110_3
// %bb.5:                               //   in Loop: Header=BB110_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB110_3
.LBB110_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB110_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB110_7
.LBB110_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB110_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB110_12
.LBB110_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB110_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB110_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB110_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end110:
	.size	_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc, .Lfunc_end110-_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc,@function
_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc: // @_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB111_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB111_4
.LBB111_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB111_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB111_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB111_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end111:
	.size	_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc, .Lfunc_end111-_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc,@function
_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc: // @_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB112_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB112_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0xffff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB112_4
.LBB112_3:                              //   in Loop: Header=BB112_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB112_8
.LBB112_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB112_3
// %bb.5:                               //   in Loop: Header=BB112_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB112_3
.LBB112_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB112_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB112_7
.LBB112_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB112_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB112_12
.LBB112_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB112_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB112_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB112_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end112:
	.size	_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc, .Lfunc_end112-_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc,@function
_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc: // @_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB113_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB113_4
.LBB113_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB113_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB113_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB113_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end113:
	.size	_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc, .Lfunc_end113-_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt20custom_and_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt20custom_and_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc,@function
_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc: // @_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB114_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB114_6
// %bb.2:
	mov	w24, wzr
	and	w25, w20, #0x7fff
	mov	w26, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB114_4
.LBB114_3:                              //   in Loop: Header=BB114_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB114_8
.LBB114_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB114_3
// %bb.5:                               //   in Loop: Header=BB114_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB114_3
.LBB114_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB114_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB114_7
.LBB114_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB114_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB114_12
.LBB114_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB114_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB114_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB114_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end114:
	.size	_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc, .Lfunc_end114-_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt19custom_or_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt19custom_or_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc,@function
_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc: // @_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB115_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB115_6
// %bb.2:
	lsl	w9, w20, #5
	mov	w24, wzr
	mov	w26, #51392                     // =0xc8c0
	sub	w25, w9, w20
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB115_4
.LBB115_3:                              //   in Loop: Header=BB115_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB115_8
.LBB115_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w26, w25, uxth
	b.eq	.LBB115_3
// %bb.5:                               //   in Loop: Header=BB115_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB115_3
.LBB115_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB115_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB115_7
.LBB115_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB115_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB115_12
.LBB115_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB115_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB115_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB115_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end115:
	.size	_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc, .Lfunc_end115-_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc // -- Begin function _Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc,@function
_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc: // @_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB116_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB116_6
// %bb.2:
	mov	w9, #29                         // =0x1d
	mov	w24, wzr
	mov	w26, #35392                     // =0x8a40
	mul	w25, w20, w9
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB116_4
.LBB116_3:                              //   in Loop: Header=BB116_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB116_8
.LBB116_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w26, w25, uxth
	b.eq	.LBB116_3
// %bb.5:                               //   in Loop: Header=BB116_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB116_3
.LBB116_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB116_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB116_7
.LBB116_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB116_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB116_12
.LBB116_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB116_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB116_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB116_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end116:
	.size	_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc, .Lfunc_end116-_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt19custom_constant_addItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt19custom_constant_addItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt19custom_constant_addItEEvPT_iPKc // -- Begin function _Z13test_constantIt19custom_constant_addItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt19custom_constant_addItEEvPT_iPKc,@function
_Z13test_constantIt19custom_constant_addItEEvPT_iPKc: // @_Z13test_constantIt19custom_constant_addItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB117_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB117_19
// %bb.2:
	movi	v8.4h, #10
	movi	v4.8h, #10
	mov	w27, w20
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	and	x28, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	adrp	x24, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #14464                     // =0x3880
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB117_4
.LBB117_3:                              //   in Loop: Header=BB117_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB117_23
.LBB117_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB117_9 Depth 2
                                        //     Child Loop BB117_13 Depth 2
                                        //     Child Loop BB117_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB117_6
// %bb.5:                               //   in Loop: Header=BB117_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB117_15
.LBB117_6:                              //   in Loop: Header=BB117_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB117_8
// %bb.7:                               //   in Loop: Header=BB117_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB117_12
.LBB117_8:                              // %.preheader2
                                        //   in Loop: Header=BB117_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB117_9:                              //   Parent Loop BB117_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB117_9
// %bb.10:                              //   in Loop: Header=BB117_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB117_17
// %bb.11:                              //   in Loop: Header=BB117_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB117_15
.LBB117_12:                             //   in Loop: Header=BB117_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB117_13:                             //   Parent Loop BB117_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB117_13
// %bb.14:                              //   in Loop: Header=BB117_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB117_17
.LBB117_15:                             // %.preheader
                                        //   in Loop: Header=BB117_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB117_16:                             //   Parent Loop BB117_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB117_16
.LBB117_17:                             //   in Loop: Header=BB117_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB117_3
// %bb.18:                              //   in Loop: Header=BB117_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #10
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB117_3
.LBB117_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #51072                     // =0xc780
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB117_21
.LBB117_20:                             //   in Loop: Header=BB117_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB117_23
.LBB117_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB117_20
// %bb.22:                              //   in Loop: Header=BB117_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB117_20
.LBB117_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB117_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB117_27
.LBB117_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB117_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB117_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB117_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end117:
	.size	_Z13test_constantIt19custom_constant_addItEEvPT_iPKc, .Lfunc_end117-_Z13test_constantIt19custom_constant_addItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc // -- Begin function _Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc,@function
_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc: // @_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB118_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB118_19
// %bb.2:
	movi	v8.4h, #10
	movi	v4.8h, #10
	mov	w27, w20
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	and	x28, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	adrp	x24, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #14464                     // =0x3880
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB118_4
.LBB118_3:                              //   in Loop: Header=BB118_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB118_23
.LBB118_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB118_9 Depth 2
                                        //     Child Loop BB118_13 Depth 2
                                        //     Child Loop BB118_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB118_6
// %bb.5:                               //   in Loop: Header=BB118_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB118_15
.LBB118_6:                              //   in Loop: Header=BB118_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB118_8
// %bb.7:                               //   in Loop: Header=BB118_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB118_12
.LBB118_8:                              // %.preheader2
                                        //   in Loop: Header=BB118_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB118_9:                              //   Parent Loop BB118_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB118_9
// %bb.10:                              //   in Loop: Header=BB118_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB118_17
// %bb.11:                              //   in Loop: Header=BB118_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB118_15
.LBB118_12:                             //   in Loop: Header=BB118_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB118_13:                             //   Parent Loop BB118_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB118_13
// %bb.14:                              //   in Loop: Header=BB118_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB118_17
.LBB118_15:                             // %.preheader
                                        //   in Loop: Header=BB118_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB118_16:                             //   Parent Loop BB118_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB118_16
.LBB118_17:                             //   in Loop: Header=BB118_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB118_3
// %bb.18:                              //   in Loop: Header=BB118_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #10
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB118_3
.LBB118_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #51072                     // =0xc780
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB118_21
.LBB118_20:                             //   in Loop: Header=BB118_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB118_23
.LBB118_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB118_20
// %bb.22:                              //   in Loop: Header=BB118_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB118_20
.LBB118_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB118_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB118_27
.LBB118_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB118_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB118_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB118_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end118:
	.size	_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc, .Lfunc_end118-_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt19custom_constant_subItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt19custom_constant_subItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt19custom_constant_subItEEvPT_iPKc // -- Begin function _Z13test_constantIt19custom_constant_subItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt19custom_constant_subItEEvPT_iPKc,@function
_Z13test_constantIt19custom_constant_subItEEvPT_iPKc: // @_Z13test_constantIt19custom_constant_subItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB119_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB119_19
// %bb.2:
	mov	w27, w20
	mvni	v8.4h, #9
	mvni	v4.8h, #9
	add	x9, x21, #16
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	and	x24, x27, #0x7ffffff0
	and	x9, x27, #0xc
	neg	x28, x19
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #-14464                    // =0xffffc780
	str	x9, [sp]                        // 8-byte Folded Spill
	b	.LBB119_4
.LBB119_3:                              //   in Loop: Header=BB119_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB119_23
.LBB119_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB119_9 Depth 2
                                        //     Child Loop BB119_13 Depth 2
                                        //     Child Loop BB119_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB119_6
// %bb.5:                               //   in Loop: Header=BB119_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB119_15
.LBB119_6:                              //   in Loop: Header=BB119_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB119_8
// %bb.7:                               //   in Loop: Header=BB119_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB119_12
.LBB119_8:                              // %.preheader2
                                        //   in Loop: Header=BB119_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x24
.LBB119_9:                              //   Parent Loop BB119_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB119_9
// %bb.10:                              //   in Loop: Header=BB119_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x24, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB119_17
// %bb.11:                              //   in Loop: Header=BB119_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x24
	mov	x10, x24
	cbz	x12, .LBB119_15
.LBB119_12:                             //   in Loop: Header=BB119_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x28, x10
.LBB119_13:                             //   Parent Loop BB119_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB119_13
// %bb.14:                              //   in Loop: Header=BB119_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB119_17
.LBB119_15:                             // %.preheader
                                        //   in Loop: Header=BB119_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB119_16:                             //   Parent Loop BB119_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB119_16
.LBB119_17:                             //   in Loop: Header=BB119_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB119_3
// %bb.18:                              //   in Loop: Header=BB119_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	mvni	v4.8h, #9
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB119_3
.LBB119_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #14464                     // =0x3880
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB119_21
.LBB119_20:                             //   in Loop: Header=BB119_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB119_23
.LBB119_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB119_20
// %bb.22:                              //   in Loop: Header=BB119_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB119_20
.LBB119_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB119_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB119_27
.LBB119_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB119_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB119_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB119_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end119:
	.size	_Z13test_constantIt19custom_constant_subItEEvPT_iPKc, .Lfunc_end119-_Z13test_constantIt19custom_constant_subItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc // -- Begin function _Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc,@function
_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc: // @_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB120_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB120_19
// %bb.2:
	mov	w27, w20
	mvni	v8.4h, #9
	mvni	v4.8h, #9
	add	x9, x21, #16
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	and	x24, x27, #0x7ffffff0
	and	x9, x27, #0xc
	neg	x28, x19
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #-14464                    // =0xffffc780
	str	x9, [sp]                        // 8-byte Folded Spill
	b	.LBB120_4
.LBB120_3:                              //   in Loop: Header=BB120_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB120_23
.LBB120_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB120_9 Depth 2
                                        //     Child Loop BB120_13 Depth 2
                                        //     Child Loop BB120_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB120_6
// %bb.5:                               //   in Loop: Header=BB120_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB120_15
.LBB120_6:                              //   in Loop: Header=BB120_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB120_8
// %bb.7:                               //   in Loop: Header=BB120_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB120_12
.LBB120_8:                              // %.preheader2
                                        //   in Loop: Header=BB120_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x24
.LBB120_9:                              //   Parent Loop BB120_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB120_9
// %bb.10:                              //   in Loop: Header=BB120_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x24, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB120_17
// %bb.11:                              //   in Loop: Header=BB120_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x24
	mov	x10, x24
	cbz	x12, .LBB120_15
.LBB120_12:                             //   in Loop: Header=BB120_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x28, x10
.LBB120_13:                             //   Parent Loop BB120_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB120_13
// %bb.14:                              //   in Loop: Header=BB120_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB120_17
.LBB120_15:                             // %.preheader
                                        //   in Loop: Header=BB120_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB120_16:                             //   Parent Loop BB120_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB120_16
.LBB120_17:                             //   in Loop: Header=BB120_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB120_3
// %bb.18:                              //   in Loop: Header=BB120_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	mvni	v4.8h, #9
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB120_3
.LBB120_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #14464                     // =0x3880
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB120_21
.LBB120_20:                             //   in Loop: Header=BB120_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB120_23
.LBB120_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB120_20
// %bb.22:                              //   in Loop: Header=BB120_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB120_20
.LBB120_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB120_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB120_27
.LBB120_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB120_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB120_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB120_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end120:
	.size	_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc, .Lfunc_end120-_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc // -- Begin function _Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc,@function
_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc: // @_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB121_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB121_19
// %bb.2:
	mov	w27, w20
	movi	v8.4h, #120
	movi	v4.8h, #120
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #120                       // =0x78
	adrp	x23, init_value
	mov	w22, #-23040                    // =0xffffa600
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB121_4
.LBB121_3:                              //   in Loop: Header=BB121_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB121_23
.LBB121_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB121_9 Depth 2
                                        //     Child Loop BB121_13 Depth 2
                                        //     Child Loop BB121_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB121_6
// %bb.5:                               //   in Loop: Header=BB121_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB121_15
.LBB121_6:                              //   in Loop: Header=BB121_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB121_8
// %bb.7:                               //   in Loop: Header=BB121_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB121_12
.LBB121_8:                              // %.preheader2
                                        //   in Loop: Header=BB121_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB121_9:                              //   Parent Loop BB121_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	mla	v0.8h, v2.8h, v4.8h
	mla	v1.8h, v3.8h, v4.8h
	b.ne	.LBB121_9
// %bb.10:                              //   in Loop: Header=BB121_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB121_17
// %bb.11:                              //   in Loop: Header=BB121_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB121_15
.LBB121_12:                             //   in Loop: Header=BB121_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB121_13:                             //   Parent Loop BB121_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	mla	v0.4h, v1.4h, v8.4h
	b.ne	.LBB121_13
// %bb.14:                              //   in Loop: Header=BB121_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB121_17
.LBB121_15:                             // %.preheader
                                        //   in Loop: Header=BB121_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB121_16:                             //   Parent Loop BB121_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB121_16
.LBB121_17:                             //   in Loop: Header=BB121_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w22
	and	w10, w10, #0xfe00
	cmp	w10, w9, uxth
	b.eq	.LBB121_3
// %bb.18:                              //   in Loop: Header=BB121_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB121_3
.LBB121_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #-23040                    // =0xffffa600
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB121_21
.LBB121_20:                             //   in Loop: Header=BB121_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB121_23
.LBB121_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	tst	w9, #0xfe00
	b.eq	.LBB121_20
// %bb.22:                              //   in Loop: Header=BB121_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB121_20
.LBB121_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB121_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB121_27
.LBB121_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB121_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB121_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB121_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end121:
	.size	_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc, .Lfunc_end121-_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc // -- Begin function _Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc,@function
_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc: // @_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB122_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB122_19
// %bb.2:
	mov	w27, w20
	movi	v8.4h, #120
	movi	v4.8h, #120
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #120                       // =0x78
	adrp	x23, init_value
	mov	w22, #-23040                    // =0xffffa600
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB122_4
.LBB122_3:                              //   in Loop: Header=BB122_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB122_23
.LBB122_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB122_9 Depth 2
                                        //     Child Loop BB122_13 Depth 2
                                        //     Child Loop BB122_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB122_6
// %bb.5:                               //   in Loop: Header=BB122_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB122_15
.LBB122_6:                              //   in Loop: Header=BB122_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB122_8
// %bb.7:                               //   in Loop: Header=BB122_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB122_12
.LBB122_8:                              // %.preheader2
                                        //   in Loop: Header=BB122_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB122_9:                              //   Parent Loop BB122_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	mla	v0.8h, v2.8h, v4.8h
	mla	v1.8h, v3.8h, v4.8h
	b.ne	.LBB122_9
// %bb.10:                              //   in Loop: Header=BB122_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB122_17
// %bb.11:                              //   in Loop: Header=BB122_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB122_15
.LBB122_12:                             //   in Loop: Header=BB122_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB122_13:                             //   Parent Loop BB122_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	mla	v0.4h, v1.4h, v8.4h
	b.ne	.LBB122_13
// %bb.14:                              //   in Loop: Header=BB122_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB122_17
.LBB122_15:                             // %.preheader
                                        //   in Loop: Header=BB122_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB122_16:                             //   Parent Loop BB122_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB122_16
.LBB122_17:                             //   in Loop: Header=BB122_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w22
	and	w10, w10, #0xfe00
	cmp	w10, w9, uxth
	b.eq	.LBB122_3
// %bb.18:                              //   in Loop: Header=BB122_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB122_3
.LBB122_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #-23040                    // =0xffffa600
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB122_21
.LBB122_20:                             //   in Loop: Header=BB122_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB122_23
.LBB122_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	tst	w9, #0xfe00
	b.eq	.LBB122_20
// %bb.22:                              //   in Loop: Header=BB122_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB122_20
.LBB122_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB122_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB122_27
.LBB122_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB122_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB122_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB122_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end122:
	.size	_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc, .Lfunc_end122-_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc // -- Begin function _Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc,@function
_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc: // @_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB123_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB123_19
// %bb.2:
	movi	v8.4h, #120
	movi	v4.8h, #120
	mov	w27, w20
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	and	x28, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	adrp	x24, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #-23040                    // =0xffffa600
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB123_4
.LBB123_3:                              //   in Loop: Header=BB123_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB123_23
.LBB123_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB123_9 Depth 2
                                        //     Child Loop BB123_13 Depth 2
                                        //     Child Loop BB123_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB123_6
// %bb.5:                               //   in Loop: Header=BB123_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB123_15
.LBB123_6:                              //   in Loop: Header=BB123_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB123_8
// %bb.7:                               //   in Loop: Header=BB123_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB123_12
.LBB123_8:                              // %.preheader2
                                        //   in Loop: Header=BB123_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB123_9:                              //   Parent Loop BB123_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB123_9
// %bb.10:                              //   in Loop: Header=BB123_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB123_17
// %bb.11:                              //   in Loop: Header=BB123_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB123_15
.LBB123_12:                             //   in Loop: Header=BB123_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB123_13:                             //   Parent Loop BB123_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB123_13
// %bb.14:                              //   in Loop: Header=BB123_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB123_17
.LBB123_15:                             // %.preheader
                                        //   in Loop: Header=BB123_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB123_16:                             //   Parent Loop BB123_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #120
	b.ne	.LBB123_16
.LBB123_17:                             //   in Loop: Header=BB123_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB123_3
// %bb.18:                              //   in Loop: Header=BB123_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #120
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB123_3
.LBB123_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #23040                     // =0x5a00
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB123_21
.LBB123_20:                             //   in Loop: Header=BB123_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB123_23
.LBB123_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB123_20
// %bb.22:                              //   in Loop: Header=BB123_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB123_20
.LBB123_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB123_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB123_27
.LBB123_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB123_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB123_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB123_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end123:
	.size	_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc, .Lfunc_end123-_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt22custom_constant_divideItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc // -- Begin function _Z13test_constantIt22custom_constant_divideItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc,@function
_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc: // @_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	str	d8, [sp, #48]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB124_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB124_19
// %bb.2:
	mov	w28, #52429                     // =0xcccd
	mov	w27, w20
	mov	w26, wzr
	dup	v8.4h, w28
	and	x9, x27, #0xc
	dup	v6.8h, w28
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	and	x19, x27, #0x7ffffffc
	add	x9, x21, #16
	and	x24, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	adrp	x23, init_value
	mov	w22, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	str	q6, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB124_4
.LBB124_3:                              //   in Loop: Header=BB124_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB124_23
.LBB124_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB124_9 Depth 2
                                        //     Child Loop BB124_13 Depth 2
                                        //     Child Loop BB124_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB124_6
// %bb.5:                               //   in Loop: Header=BB124_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB124_15
.LBB124_6:                              //   in Loop: Header=BB124_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB124_8
// %bb.7:                               //   in Loop: Header=BB124_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB124_12
.LBB124_8:                              // %.preheader2
                                        //   in Loop: Header=BB124_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x24
.LBB124_9:                              //   Parent Loop BB124_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	umull2	v4.4s, v2.8h, v6.8h
	umull	v2.4s, v2.4h, v6.4h
	umull2	v5.4s, v3.8h, v6.8h
	umull	v3.4s, v3.4h, v6.4h
	uzp2	v2.8h, v2.8h, v4.8h
	uzp2	v3.8h, v3.8h, v5.8h
	usra	v0.8h, v2.8h, #2
	usra	v1.8h, v3.8h, #2
	b.ne	.LBB124_9
// %bb.10:                              //   in Loop: Header=BB124_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x24, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB124_17
// %bb.11:                              //   in Loop: Header=BB124_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x24
	mov	x10, x24
	cbz	x12, .LBB124_15
.LBB124_12:                             //   in Loop: Header=BB124_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB124_13:                             //   Parent Loop BB124_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	umull	v1.4s, v1.4h, v8.4h
	ushr	v1.4s, v1.4s, #18
	xtn	v1.4h, v1.4s
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB124_13
// %bb.14:                              //   in Loop: Header=BB124_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB124_17
.LBB124_15:                             // %.preheader
                                        //   in Loop: Header=BB124_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB124_16:                             //   Parent Loop BB124_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	mul	w12, w12, w28
	add	w9, w9, w12, lsr #18
	b.ne	.LBB124_16
.LBB124_17:                             //   in Loop: Header=BB124_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w28
	lsr	w10, w10, #18
	mul	w10, w10, w22
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB124_3
// %bb.18:                              //   in Loop: Header=BB124_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q6, [sp, #32]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB124_3
.LBB124_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #52429                     // =0xcccd
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB124_21
.LBB124_20:                             //   in Loop: Header=BB124_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB124_23
.LBB124_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	lsr	w9, w9, #18
	mul	w9, w9, w23
	tst	w9, #0xffc0
	b.eq	.LBB124_20
// %bb.22:                              //   in Loop: Header=BB124_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB124_20
.LBB124_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB124_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB124_27
.LBB124_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB124_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB124_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldr	d8, [sp, #48]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB124_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end124:
	.size	_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc, .Lfunc_end124-_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc // -- Begin function _Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc,@function
_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc: // @_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	str	d8, [sp, #48]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB125_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB125_19
// %bb.2:
	mov	w28, #34953                     // =0x8889
	mov	w27, w20
	mov	w26, wzr
	dup	v8.4h, w28
	and	x9, x27, #0xc
	dup	v6.8h, w28
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	and	x19, x27, #0x7ffffffc
	add	x9, x21, #16
	and	x24, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	adrp	x23, init_value
	mov	w22, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	str	q6, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB125_4
.LBB125_3:                              //   in Loop: Header=BB125_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB125_23
.LBB125_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB125_9 Depth 2
                                        //     Child Loop BB125_13 Depth 2
                                        //     Child Loop BB125_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB125_6
// %bb.5:                               //   in Loop: Header=BB125_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB125_15
.LBB125_6:                              //   in Loop: Header=BB125_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB125_8
// %bb.7:                               //   in Loop: Header=BB125_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB125_12
.LBB125_8:                              // %.preheader2
                                        //   in Loop: Header=BB125_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x24
.LBB125_9:                              //   Parent Loop BB125_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	umull2	v4.4s, v2.8h, v6.8h
	umull	v2.4s, v2.4h, v6.4h
	umull2	v5.4s, v3.8h, v6.8h
	umull	v3.4s, v3.4h, v6.4h
	uzp2	v2.8h, v2.8h, v4.8h
	uzp2	v3.8h, v3.8h, v5.8h
	usra	v0.8h, v2.8h, #6
	usra	v1.8h, v3.8h, #6
	b.ne	.LBB125_9
// %bb.10:                              //   in Loop: Header=BB125_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x24, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB125_17
// %bb.11:                              //   in Loop: Header=BB125_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x24
	mov	x10, x24
	cbz	x12, .LBB125_15
.LBB125_12:                             //   in Loop: Header=BB125_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB125_13:                             //   Parent Loop BB125_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	umull	v1.4s, v1.4h, v8.4h
	ushr	v1.4s, v1.4s, #22
	xtn	v1.4h, v1.4s
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB125_13
// %bb.14:                              //   in Loop: Header=BB125_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB125_17
.LBB125_15:                             // %.preheader
                                        //   in Loop: Header=BB125_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB125_16:                             //   Parent Loop BB125_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	mul	w12, w12, w28
	add	w9, w9, w12, lsr #22
	b.ne	.LBB125_16
.LBB125_17:                             //   in Loop: Header=BB125_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w28
	lsr	w10, w10, #22
	mul	w10, w10, w22
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB125_3
// %bb.18:                              //   in Loop: Header=BB125_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q6, [sp, #32]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB125_3
.LBB125_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #34953                     // =0x8889
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB125_21
.LBB125_20:                             //   in Loop: Header=BB125_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB125_23
.LBB125_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	lsr	w9, w9, #22
	mul	w9, w9, w23
	tst	w9, #0xffc0
	b.eq	.LBB125_20
// %bb.22:                              //   in Loop: Header=BB125_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB125_20
.LBB125_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB125_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB125_27
.LBB125_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB125_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB125_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldr	d8, [sp, #48]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB125_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end125:
	.size	_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc, .Lfunc_end125-_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc // -- Begin function _Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc,@function
_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc: // @_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB126_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB126_19
// %bb.2:
	movi	v8.4h, #2
	movi	v4.8h, #2
	mov	w27, w20
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	and	x28, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	adrp	x24, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w25, #16000                     // =0x3e80
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB126_4
.LBB126_3:                              //   in Loop: Header=BB126_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB126_23
.LBB126_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB126_9 Depth 2
                                        //     Child Loop BB126_13 Depth 2
                                        //     Child Loop BB126_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB126_6
// %bb.5:                               //   in Loop: Header=BB126_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB126_15
.LBB126_6:                              //   in Loop: Header=BB126_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB126_8
// %bb.7:                               //   in Loop: Header=BB126_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB126_12
.LBB126_8:                              // %.preheader2
                                        //   in Loop: Header=BB126_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB126_9:                              //   Parent Loop BB126_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v0.8h, v2.8h
	add	v1.8h, v1.8h, v3.8h
	add	v0.8h, v0.8h, v4.8h
	add	v1.8h, v1.8h, v4.8h
	b.ne	.LBB126_9
// %bb.10:                              //   in Loop: Header=BB126_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB126_17
// %bb.11:                              //   in Loop: Header=BB126_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB126_15
.LBB126_12:                             //   in Loop: Header=BB126_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB126_13:                             //   Parent Loop BB126_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v0.4h, v1.4h
	add	v0.4h, v0.4h, v8.4h
	b.ne	.LBB126_13
// %bb.14:                              //   in Loop: Header=BB126_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB126_17
.LBB126_15:                             // %.preheader
                                        //   in Loop: Header=BB126_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB126_16:                             //   Parent Loop BB126_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #2
	b.ne	.LBB126_16
.LBB126_17:                             //   in Loop: Header=BB126_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w23, w25
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB126_3
// %bb.18:                              //   in Loop: Header=BB126_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #2
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB126_3
.LBB126_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #49536                     // =0xc180
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB126_21
.LBB126_20:                             //   in Loop: Header=BB126_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB126_23
.LBB126_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	and	w9, w9, #0xffc0
	cmp	w9, w23
	b.eq	.LBB126_20
// %bb.22:                              //   in Loop: Header=BB126_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB126_20
.LBB126_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB126_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB126_27
.LBB126_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB126_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB126_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB126_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end126:
	.size	_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc, .Lfunc_end126-_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc // -- Begin function _Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc,@function
_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc: // @_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB127_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB127_19
// %bb.2:
	mov	w27, w20
	add	x9, x21, #16
	mov	w26, wzr
	and	x19, x27, #0x7ffffffc
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	adrp	x24, init_value
	and	x28, x27, #0x7ffffff0
	and	x9, x27, #0xc
	neg	x22, x19
	mov	w23, #8000                      // =0x1f40
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB127_4
.LBB127_3:                              //   in Loop: Header=BB127_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB127_23
.LBB127_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB127_9 Depth 2
                                        //     Child Loop BB127_13 Depth 2
                                        //     Child Loop BB127_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB127_6
// %bb.5:                               //   in Loop: Header=BB127_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB127_15
.LBB127_6:                              //   in Loop: Header=BB127_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB127_8
// %bb.7:                               //   in Loop: Header=BB127_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB127_12
.LBB127_8:                              // %.preheader2
                                        //   in Loop: Header=BB127_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB127_9:                              //   Parent Loop BB127_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB127_9
// %bb.10:                              //   in Loop: Header=BB127_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB127_17
// %bb.11:                              //   in Loop: Header=BB127_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB127_15
.LBB127_12:                             //   in Loop: Header=BB127_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB127_13:                             //   Parent Loop BB127_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB127_13
// %bb.14:                              //   in Loop: Header=BB127_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB127_17
.LBB127_15:                             // %.preheader
                                        //   in Loop: Header=BB127_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB127_16:                             //   Parent Loop BB127_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	add	w9, w12, w9
	b.ne	.LBB127_16
.LBB127_17:                             //   in Loop: Header=BB127_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w23
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB127_3
// %bb.18:                              //   in Loop: Header=BB127_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB127_3
.LBB127_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB127_21
.LBB127_20:                             //   in Loop: Header=BB127_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB127_23
.LBB127_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	tst	w9, #0xffc0
	b.eq	.LBB127_20
// %bb.22:                              //   in Loop: Header=BB127_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB127_20
.LBB127_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB127_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB127_27
.LBB127_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB127_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB127_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB127_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end127:
	.size	_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc, .Lfunc_end127-_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt19custom_constant_andItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt19custom_constant_andItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt19custom_constant_andItEEvPT_iPKc // -- Begin function _Z13test_constantIt19custom_constant_andItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt19custom_constant_andItEEvPT_iPKc,@function
_Z13test_constantIt19custom_constant_andItEEvPT_iPKc: // @_Z13test_constantIt19custom_constant_andItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB128_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB128_19
// %bb.2:
	mov	w27, w20
	movi	v8.4h, #10
	movi	v4.8h, #10
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #10                        // =0xa
	adrp	x23, init_value
	mov	w22, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB128_4
.LBB128_3:                              //   in Loop: Header=BB128_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB128_23
.LBB128_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB128_9 Depth 2
                                        //     Child Loop BB128_13 Depth 2
                                        //     Child Loop BB128_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB128_6
// %bb.5:                               //   in Loop: Header=BB128_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB128_15
.LBB128_6:                              //   in Loop: Header=BB128_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB128_8
// %bb.7:                               //   in Loop: Header=BB128_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB128_12
.LBB128_8:                              // %.preheader2
                                        //   in Loop: Header=BB128_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB128_9:                              //   Parent Loop BB128_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB128_9
// %bb.10:                              //   in Loop: Header=BB128_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB128_17
// %bb.11:                              //   in Loop: Header=BB128_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB128_15
.LBB128_12:                             //   in Loop: Header=BB128_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB128_13:                             //   Parent Loop BB128_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	and	v1.8b, v1.8b, v8.8b
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB128_13
// %bb.14:                              //   in Loop: Header=BB128_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB128_17
.LBB128_15:                             // %.preheader
                                        //   in Loop: Header=BB128_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB128_16:                             //   Parent Loop BB128_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	and	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB128_16
.LBB128_17:                             //   in Loop: Header=BB128_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	and	w10, w10, w24
	mul	w10, w10, w22
	and	w10, w10, #0xff80
	cmp	w10, w9, uxth
	b.eq	.LBB128_3
// %bb.18:                              //   in Loop: Header=BB128_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB128_3
.LBB128_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #10                        // =0xa
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB128_21
.LBB128_20:                             //   in Loop: Header=BB128_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB128_23
.LBB128_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, w22
	mul	w9, w9, w23
	tst	w9, #0xff80
	b.eq	.LBB128_20
// %bb.22:                              //   in Loop: Header=BB128_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB128_20
.LBB128_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB128_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB128_27
.LBB128_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB128_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB128_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB128_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end128:
	.size	_Z13test_constantIt19custom_constant_andItEEvPT_iPKc, .Lfunc_end128-_Z13test_constantIt19custom_constant_andItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc // -- Begin function _Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc,@function
_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc: // @_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	str	d8, [sp, #16]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB129_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB129_19
// %bb.2:
	movi	v8.4h, #14
	movi	v4.8h, #14
	mov	w27, w20
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	and	x28, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	add	x9, x21, #16
	neg	x22, x19
	adrp	x24, init_value
	mov	w23, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB129_4
.LBB129_3:                              //   in Loop: Header=BB129_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB129_23
.LBB129_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB129_9 Depth 2
                                        //     Child Loop BB129_13 Depth 2
                                        //     Child Loop BB129_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB129_6
// %bb.5:                               //   in Loop: Header=BB129_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB129_15
.LBB129_6:                              //   in Loop: Header=BB129_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB129_8
// %bb.7:                               //   in Loop: Header=BB129_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB129_12
.LBB129_8:                              // %.preheader2
                                        //   in Loop: Header=BB129_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	mov	x10, x28
.LBB129_9:                              //   Parent Loop BB129_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB129_9
// %bb.10:                              //   in Loop: Header=BB129_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB129_17
// %bb.11:                              //   in Loop: Header=BB129_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB129_15
.LBB129_12:                             //   in Loop: Header=BB129_4 Depth=1
	movi	v0.2d, #0000000000000000
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x22, x10
.LBB129_13:                             //   Parent Loop BB129_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	and	v1.8b, v1.8b, v8.8b
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB129_13
// %bb.14:                              //   in Loop: Header=BB129_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB129_17
.LBB129_15:                             // %.preheader
                                        //   in Loop: Header=BB129_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB129_16:                             //   Parent Loop BB129_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	and	w12, w12, #0xe
	add	w9, w12, w9
	b.ne	.LBB129_16
.LBB129_17:                             //   in Loop: Header=BB129_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	and	w10, w10, #0xe
	mul	w10, w10, w23
	and	w10, w10, #0xff80
	cmp	w10, w9, uxth
	b.eq	.LBB129_3
// %bb.18:                              //   in Loop: Header=BB129_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #14
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB129_3
.LBB129_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB129_21
.LBB129_20:                             //   in Loop: Header=BB129_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB129_23
.LBB129_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	and	w9, w9, #0xe
	mul	w9, w9, w22
	tst	w9, #0xff80
	b.eq	.LBB129_20
// %bb.22:                              //   in Loop: Header=BB129_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB129_20
.LBB129_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB129_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB129_27
.LBB129_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB129_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB129_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldr	d8, [sp, #16]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB129_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end129:
	.size	_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc, .Lfunc_end129-_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt18custom_constant_orItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt18custom_constant_orItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt18custom_constant_orItEEvPT_iPKc // -- Begin function _Z13test_constantIt18custom_constant_orItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt18custom_constant_orItEEvPT_iPKc,@function
_Z13test_constantIt18custom_constant_orItEEvPT_iPKc: // @_Z13test_constantIt18custom_constant_orItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB130_21
// %bb.1:
	cmp	w20, #0
	b.le	.LBB130_19
// %bb.2:
	mov	w27, w20
	add	x9, x21, #16
	mov	w26, wzr
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	and	x28, x27, #0x7ffffffc
	and	x9, x27, #0xc
	mov	w24, #10                        // =0xa
	adrp	x19, init_value
	and	x22, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	neg	x9, x28
	mov	w23, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB130_4
.LBB130_3:                              //   in Loop: Header=BB130_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB130_21
.LBB130_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB130_9 Depth 2
                                        //     Child Loop BB130_13 Depth 2
                                        //     Child Loop BB130_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB130_6
// %bb.5:                               //   in Loop: Header=BB130_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB130_15
.LBB130_6:                              //   in Loop: Header=BB130_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB130_8
// %bb.7:                               //   in Loop: Header=BB130_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB130_12
.LBB130_8:                              // %.preheader2
                                        //   in Loop: Header=BB130_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	mov	x10, x22
.LBB130_9:                              //   Parent Loop BB130_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	orr	v2.8h, #10
	orr	v3.8h, #10
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB130_9
// %bb.10:                              //   in Loop: Header=BB130_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x22, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB130_17
// %bb.11:                              //   in Loop: Header=BB130_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x22
	mov	x10, x22
	cbz	x12, .LBB130_15
.LBB130_12:                             //   in Loop: Header=BB130_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB130_13:                             //   Parent Loop BB130_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	orr	v1.4h, #10
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB130_13
// %bb.14:                              //   in Loop: Header=BB130_4 Depth=1
	addv	h0, v0.4h
	cmp	x28, x27
	mov	x11, x28
	fmov	w9, s0
	b.eq	.LBB130_17
.LBB130_15:                             // %.preheader
                                        //   in Loop: Header=BB130_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB130_16:                             //   Parent Loop BB130_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	orr	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB130_16
.LBB130_17:                             //   in Loop: Header=BB130_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	orr	w10, w10, w24
	mul	w10, w10, w23
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB130_3
// %bb.18:                              //   in Loop: Header=BB130_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB130_3
.LBB130_19:                             // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB130_20:                             // =>This Inner Loop Header: Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB130_20
.LBB130_21:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB130_23
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB130_25
.LBB130_23:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB130_26
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
.LBB130_25:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB130_26:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end130:
	.size	_Z13test_constantIt18custom_constant_orItEEvPT_iPKc, .Lfunc_end130-_Z13test_constantIt18custom_constant_orItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc // -- Begin function _Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc,@function
_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc: // @_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB131_21
// %bb.1:
	cmp	w20, #0
	b.le	.LBB131_19
// %bb.2:
	mov	w27, w20
	add	x9, x21, #16
	mov	w26, wzr
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	and	x19, x27, #0x7ffffffc
	and	x9, x27, #0xc
	adrp	x24, init_value
	and	x22, x27, #0x7ffffff0
	str	x9, [sp]                        // 8-byte Folded Spill
	neg	x9, x19
	mov	w28, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB131_4
.LBB131_3:                              //   in Loop: Header=BB131_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB131_21
.LBB131_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB131_9 Depth 2
                                        //     Child Loop BB131_13 Depth 2
                                        //     Child Loop BB131_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB131_6
// %bb.5:                               //   in Loop: Header=BB131_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB131_15
.LBB131_6:                              //   in Loop: Header=BB131_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB131_8
// %bb.7:                               //   in Loop: Header=BB131_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB131_12
.LBB131_8:                              // %.preheader2
                                        //   in Loop: Header=BB131_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	mov	x10, x22
.LBB131_9:                              //   Parent Loop BB131_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	orr	v2.8h, #63
	orr	v3.8h, #63
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB131_9
// %bb.10:                              //   in Loop: Header=BB131_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x22, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB131_17
// %bb.11:                              //   in Loop: Header=BB131_4 Depth=1
	ldr	x12, [sp]                       // 8-byte Folded Reload
	mov	x11, x22
	mov	x10, x22
	cbz	x12, .LBB131_15
.LBB131_12:                             //   in Loop: Header=BB131_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB131_13:                             //   Parent Loop BB131_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	orr	v1.4h, #63
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB131_13
// %bb.14:                              //   in Loop: Header=BB131_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB131_17
.LBB131_15:                             // %.preheader
                                        //   in Loop: Header=BB131_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB131_16:                             //   Parent Loop BB131_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	orr	w12, w12, #0x3f
	add	w9, w12, w9
	b.ne	.LBB131_16
.LBB131_17:                             //   in Loop: Header=BB131_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	orr	w10, w10, #0x3f
	mul	w10, w10, w28
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB131_3
// %bb.18:                              //   in Loop: Header=BB131_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB131_3
.LBB131_19:                             // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB131_20:                             // =>This Inner Loop Header: Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB131_20
.LBB131_21:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB131_23
// %bb.22:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB131_25
.LBB131_23:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB131_26
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
.LBB131_25:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB131_26:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end131:
	.size	_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc, .Lfunc_end131-_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt19custom_constant_xorItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc // -- Begin function _Z13test_constantIt19custom_constant_xorItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc,@function
_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc: // @_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB132_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB132_19
// %bb.2:
	mov	w27, w20
	movi	v8.4h, #10
	movi	v4.8h, #10
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #10                        // =0xa
	adrp	x23, init_value
	mov	w22, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB132_4
.LBB132_3:                              //   in Loop: Header=BB132_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB132_23
.LBB132_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB132_9 Depth 2
                                        //     Child Loop BB132_13 Depth 2
                                        //     Child Loop BB132_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB132_6
// %bb.5:                               //   in Loop: Header=BB132_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB132_15
.LBB132_6:                              //   in Loop: Header=BB132_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB132_8
// %bb.7:                               //   in Loop: Header=BB132_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB132_12
.LBB132_8:                              // %.preheader2
                                        //   in Loop: Header=BB132_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB132_9:                              //   Parent Loop BB132_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB132_9
// %bb.10:                              //   in Loop: Header=BB132_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB132_17
// %bb.11:                              //   in Loop: Header=BB132_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB132_15
.LBB132_12:                             //   in Loop: Header=BB132_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB132_13:                             //   Parent Loop BB132_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	eor	v1.8b, v1.8b, v8.8b
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB132_13
// %bb.14:                              //   in Loop: Header=BB132_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB132_17
.LBB132_15:                             // %.preheader
                                        //   in Loop: Header=BB132_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB132_16:                             //   Parent Loop BB132_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	eor	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB132_16
.LBB132_17:                             //   in Loop: Header=BB132_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w10, w10, w24
	mul	w10, w10, w22
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB132_3
// %bb.18:                              //   in Loop: Header=BB132_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB132_3
.LBB132_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #10                        // =0xa
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB132_21
.LBB132_20:                             //   in Loop: Header=BB132_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB132_23
.LBB132_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	eor	w9, w9, w22
	mul	w9, w9, w23
	tst	w9, #0xffc0
	b.eq	.LBB132_20
// %bb.22:                              //   in Loop: Header=BB132_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB132_20
.LBB132_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB132_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB132_27
.LBB132_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB132_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB132_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB132_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end132:
	.size	_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc, .Lfunc_end132-_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc,"axG",@progbits,_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc,comdat
	.weak	_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc // -- Begin function _Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc,@function
_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc: // @_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	str	d8, [sp, #32]                   // 8-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	.cfi_remember_state
	str	x2, [sp, #16]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB133_23
// %bb.1:
	cmp	w20, #0
	b.le	.LBB133_19
// %bb.2:
	mov	w27, w20
	movi	v8.4h, #49
	movi	v4.8h, #49
	and	x9, x27, #0xc
	and	x19, x27, #0x7ffffffc
	mov	w26, wzr
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	add	x9, x21, #16
	and	x28, x27, #0x7ffffff0
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	neg	x9, x19
	mov	w24, #49                        // =0x31
	adrp	x23, init_value
	mov	w22, #8000                      // =0x1f40
	stur	x9, [x29, #-8]                  // 8-byte Folded Spill
	b	.LBB133_4
.LBB133_3:                              //   in Loop: Header=BB133_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB133_23
.LBB133_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB133_9 Depth 2
                                        //     Child Loop BB133_13 Depth 2
                                        //     Child Loop BB133_16 Depth 2
	cmp	w20, #3
	b.hi	.LBB133_6
// %bb.5:                               //   in Loop: Header=BB133_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB133_15
.LBB133_6:                              //   in Loop: Header=BB133_4 Depth=1
	cmp	w20, #16
	b.hs	.LBB133_8
// %bb.7:                               //   in Loop: Header=BB133_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB133_12
.LBB133_8:                              // %.preheader2
                                        //   in Loop: Header=BB133_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB133_9:                              //   Parent Loop BB133_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #16
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.8h, v2.8h, v0.8h
	add	v1.8h, v3.8h, v1.8h
	b.ne	.LBB133_9
// %bb.10:                              //   in Loop: Header=BB133_4 Depth=1
	add	v0.8h, v1.8h, v0.8h
	cmp	x28, x27
	addv	h0, v0.8h
	fmov	w9, s0
	b.eq	.LBB133_17
// %bb.11:                              //   in Loop: Header=BB133_4 Depth=1
	ldr	x12, [sp, #8]                   // 8-byte Folded Reload
	mov	x11, x28
	mov	x10, x28
	cbz	x12, .LBB133_15
.LBB133_12:                             //   in Loop: Header=BB133_4 Depth=1
	movi	v0.2d, #0000000000000000
	ldur	x11, [x29, #-8]                 // 8-byte Folded Reload
	mov	v0.h[0], w9
	add	x9, x21, x10, lsl #1
	add	x10, x11, x10
.LBB133_13:                             //   Parent Loop BB133_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	adds	x10, x10, #4
	eor	v1.8b, v1.8b, v8.8b
	add	v0.4h, v1.4h, v0.4h
	b.ne	.LBB133_13
// %bb.14:                              //   in Loop: Header=BB133_4 Depth=1
	addv	h0, v0.4h
	cmp	x19, x27
	mov	x11, x19
	fmov	w9, s0
	b.eq	.LBB133_17
.LBB133_15:                             // %.preheader
                                        //   in Loop: Header=BB133_4 Depth=1
	add	x10, x21, x11, lsl #1
	sub	x11, x27, x11
.LBB133_16:                             //   Parent Loop BB133_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrh	w12, [x10], #2
	subs	x11, x11, #1
	eor	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB133_16
.LBB133_17:                             //   in Loop: Header=BB133_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w10, w10, w24
	mul	w10, w10, w22
	and	w10, w10, #0xffc0
	cmp	w10, w9, uxth
	b.eq	.LBB133_3
// %bb.18:                              //   in Loop: Header=BB133_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.8h, #49
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB133_3
.LBB133_19:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #49                        // =0x31
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB133_21
.LBB133_20:                             //   in Loop: Header=BB133_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB133_23
.LBB133_21:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	eor	w9, w9, w22
	mul	w9, w9, w23
	tst	w9, #0xffc0
	b.eq	.LBB133_20
// %bb.22:                              //   in Loop: Header=BB133_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB133_20
.LBB133_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB133_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB133_27
.LBB133_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB133_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB133_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldr	d8, [sp, #32]                   // 8-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB133_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end133:
	.size	_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc, .Lfunc_end133-_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi10custom_twoIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi10custom_twoIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi10custom_twoIiEEvPT_iPKc // -- Begin function _Z13test_constantIi10custom_twoIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi10custom_twoIiEEvPT_iPKc,@function
_Z13test_constantIi10custom_twoIiEEvPT_iPKc: // @_Z13test_constantIi10custom_twoIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB134_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB134_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB134_4
.LBB134_3:                              //   in Loop: Header=BB134_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB134_8
.LBB134_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB134_3
// %bb.5:                               //   in Loop: Header=BB134_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB134_3
.LBB134_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB134_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB134_7
.LBB134_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB134_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB134_12
.LBB134_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB134_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB134_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB134_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end134:
	.size	_Z13test_constantIi10custom_twoIiEEvPT_iPKc, .Lfunc_end134-_Z13test_constantIi10custom_twoIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc: // @_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB135_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB135_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB135_4
.LBB135_3:                              //   in Loop: Header=BB135_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB135_8
.LBB135_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB135_3
// %bb.5:                               //   in Loop: Header=BB135_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB135_3
.LBB135_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB135_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB135_7
.LBB135_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB135_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB135_12
.LBB135_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB135_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB135_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB135_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end135:
	.size	_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc, .Lfunc_end135-_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc: // @_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB136_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB136_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB136_4
.LBB136_3:                              //   in Loop: Header=BB136_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB136_8
.LBB136_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB136_3
// %bb.5:                               //   in Loop: Header=BB136_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB136_3
.LBB136_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB136_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB136_7
.LBB136_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB136_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB136_12
.LBB136_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB136_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB136_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB136_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end136:
	.size	_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc, .Lfunc_end136-_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc: // @_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB137_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB137_6
// %bb.2:
	add	w9, w20, w20, lsl #1
	mov	w24, wzr
	mov	w26, #48000                     // =0xbb80
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	lsl	w25, w9, #1
	b	.LBB137_4
.LBB137_3:                              //   in Loop: Header=BB137_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB137_8
.LBB137_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB137_3
// %bb.5:                               //   in Loop: Header=BB137_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB137_3
.LBB137_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB137_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB137_7
.LBB137_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB137_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB137_12
.LBB137_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB137_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB137_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB137_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end137:
	.size	_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc, .Lfunc_end137-_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc: // @_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB138_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB138_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB138_4
.LBB138_3:                              //   in Loop: Header=BB138_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB138_8
.LBB138_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB138_3
// %bb.5:                               //   in Loop: Header=BB138_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB138_3
.LBB138_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB138_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB138_7
.LBB138_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB138_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB138_12
.LBB138_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB138_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB138_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB138_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end138:
	.size	_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc, .Lfunc_end138-_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc: // @_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB139_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB139_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB139_4
.LBB139_3:                              //   in Loop: Header=BB139_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB139_8
.LBB139_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB139_3
// %bb.5:                               //   in Loop: Header=BB139_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB139_3
.LBB139_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB139_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB139_7
.LBB139_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB139_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB139_12
.LBB139_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB139_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB139_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB139_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end139:
	.size	_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc, .Lfunc_end139-_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc: // @_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB140_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB140_4
.LBB140_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB140_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB140_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB140_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end140:
	.size	_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc, .Lfunc_end140-_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc: // @_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB141_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB141_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB141_4
.LBB141_3:                              //   in Loop: Header=BB141_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB141_8
.LBB141_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB141_3
// %bb.5:                               //   in Loop: Header=BB141_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB141_3
.LBB141_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB141_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB141_7
.LBB141_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB141_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB141_12
.LBB141_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB141_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB141_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB141_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end141:
	.size	_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc, .Lfunc_end141-_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc: // @_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB142_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB142_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB142_4
.LBB142_3:                              //   in Loop: Header=BB142_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB142_8
.LBB142_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB142_3
// %bb.5:                               //   in Loop: Header=BB142_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB142_3
.LBB142_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB142_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB142_7
.LBB142_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB142_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB142_12
.LBB142_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB142_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB142_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB142_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end142:
	.size	_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc, .Lfunc_end142-_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc: // @_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB143_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB143_4
.LBB143_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB143_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB143_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB143_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end143:
	.size	_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc, .Lfunc_end143-_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc: // @_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB144_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB144_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB144_4
.LBB144_3:                              //   in Loop: Header=BB144_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB144_8
.LBB144_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB144_3
// %bb.5:                               //   in Loop: Header=BB144_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB144_3
.LBB144_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB144_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB144_7
.LBB144_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB144_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB144_12
.LBB144_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB144_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB144_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB144_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end144:
	.size	_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc, .Lfunc_end144-_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc: // @_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB145_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB145_4
.LBB145_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB145_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB145_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB145_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end145:
	.size	_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc, .Lfunc_end145-_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc: // @_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB146_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB146_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB146_4
.LBB146_3:                              //   in Loop: Header=BB146_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB146_8
.LBB146_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB146_3
// %bb.5:                               //   in Loop: Header=BB146_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB146_3
.LBB146_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB146_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB146_7
.LBB146_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB146_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB146_12
.LBB146_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB146_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB146_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB146_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end146:
	.size	_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc, .Lfunc_end146-_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc: // @_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB147_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB147_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB147_4
.LBB147_3:                              //   in Loop: Header=BB147_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB147_8
.LBB147_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB147_3
// %bb.5:                               //   in Loop: Header=BB147_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB147_3
.LBB147_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB147_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB147_7
.LBB147_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB147_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB147_12
.LBB147_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB147_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB147_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB147_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end147:
	.size	_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc, .Lfunc_end147-_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc // -- Begin function _Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc,@function
_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc: // @_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB148_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB148_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB148_4
.LBB148_3:                              //   in Loop: Header=BB148_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB148_8
.LBB148_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB148_3
// %bb.5:                               //   in Loop: Header=BB148_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB148_3
.LBB148_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB148_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB148_7
.LBB148_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB148_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB148_12
.LBB148_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB148_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB148_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB148_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end148:
	.size	_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc, .Lfunc_end148-_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi19custom_constant_addIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc // -- Begin function _Z13test_constantIi19custom_constant_addIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc,@function
_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc: // @_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB149_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB149_13
// %bb.2:
	movi	v4.4s, #10
	mov	w27, w20
	mov	w23, #14464                     // =0x3880
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	b	.LBB149_4
.LBB149_3:                              //   in Loop: Header=BB149_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB149_17
.LBB149_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB149_7 Depth 2
                                        //     Child Loop BB149_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB149_6
// %bb.5:                               //   in Loop: Header=BB149_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB149_9
.LBB149_6:                              // %.preheader2
                                        //   in Loop: Header=BB149_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB149_7:                              //   Parent Loop BB149_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB149_7
// %bb.8:                               //   in Loop: Header=BB149_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB149_11
.LBB149_9:                              // %.preheader
                                        //   in Loop: Header=BB149_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB149_10:                             //   Parent Loop BB149_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB149_10
.LBB149_11:                             //   in Loop: Header=BB149_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB149_3
// %bb.12:                              //   in Loop: Header=BB149_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB149_3
.LBB149_13:
	adrp	x21, init_value
	mov	w23, #51072                     // =0xc780
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #65534, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB149_15
.LBB149_14:                             //   in Loop: Header=BB149_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB149_17
.LBB149_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB149_14
// %bb.16:                              //   in Loop: Header=BB149_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB149_14
.LBB149_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB149_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB149_21
.LBB149_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB149_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB149_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB149_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end149:
	.size	_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc, .Lfunc_end149-_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc // -- Begin function _Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc,@function
_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc: // @_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB150_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB150_13
// %bb.2:
	movi	v4.4s, #10
	mov	w27, w20
	mov	w23, #14464                     // =0x3880
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	b	.LBB150_4
.LBB150_3:                              //   in Loop: Header=BB150_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB150_17
.LBB150_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB150_7 Depth 2
                                        //     Child Loop BB150_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB150_6
// %bb.5:                               //   in Loop: Header=BB150_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB150_9
.LBB150_6:                              // %.preheader2
                                        //   in Loop: Header=BB150_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB150_7:                              //   Parent Loop BB150_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB150_7
// %bb.8:                               //   in Loop: Header=BB150_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB150_11
.LBB150_9:                              // %.preheader
                                        //   in Loop: Header=BB150_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB150_10:                             //   Parent Loop BB150_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB150_10
.LBB150_11:                             //   in Loop: Header=BB150_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB150_3
// %bb.12:                              //   in Loop: Header=BB150_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB150_3
.LBB150_13:
	adrp	x21, init_value
	mov	w23, #51072                     // =0xc780
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #65534, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB150_15
.LBB150_14:                             //   in Loop: Header=BB150_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB150_17
.LBB150_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB150_14
// %bb.16:                              //   in Loop: Header=BB150_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB150_14
.LBB150_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB150_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB150_21
.LBB150_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB150_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB150_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB150_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end150:
	.size	_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc, .Lfunc_end150-_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi19custom_constant_subIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc // -- Begin function _Z13test_constantIi19custom_constant_subIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc,@function
_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc: // @_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB151_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB151_13
// %bb.2:
	mvni	v4.4s, #9
	mov	w27, w20
	mov	w23, #51072                     // =0xc780
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	movk	w23, #65534, lsl #16
	b	.LBB151_4
.LBB151_3:                              //   in Loop: Header=BB151_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB151_17
.LBB151_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB151_7 Depth 2
                                        //     Child Loop BB151_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB151_6
// %bb.5:                               //   in Loop: Header=BB151_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB151_9
.LBB151_6:                              // %.preheader2
                                        //   in Loop: Header=BB151_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB151_7:                              //   Parent Loop BB151_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB151_7
// %bb.8:                               //   in Loop: Header=BB151_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB151_11
.LBB151_9:                              // %.preheader
                                        //   in Loop: Header=BB151_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB151_10:                             //   Parent Loop BB151_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB151_10
.LBB151_11:                             //   in Loop: Header=BB151_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB151_3
// %bb.12:                              //   in Loop: Header=BB151_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	mvni	v4.4s, #9
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB151_3
.LBB151_13:
	adrp	x21, init_value
	mov	w23, #14464                     // =0x3880
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB151_15
.LBB151_14:                             //   in Loop: Header=BB151_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB151_17
.LBB151_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB151_14
// %bb.16:                              //   in Loop: Header=BB151_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB151_14
.LBB151_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB151_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB151_21
.LBB151_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB151_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB151_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB151_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end151:
	.size	_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc, .Lfunc_end151-_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc // -- Begin function _Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc,@function
_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc: // @_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB152_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB152_13
// %bb.2:
	mvni	v4.4s, #9
	mov	w27, w20
	mov	w23, #51072                     // =0xc780
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	movk	w23, #65534, lsl #16
	b	.LBB152_4
.LBB152_3:                              //   in Loop: Header=BB152_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB152_17
.LBB152_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB152_7 Depth 2
                                        //     Child Loop BB152_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB152_6
// %bb.5:                               //   in Loop: Header=BB152_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB152_9
.LBB152_6:                              // %.preheader2
                                        //   in Loop: Header=BB152_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB152_7:                              //   Parent Loop BB152_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB152_7
// %bb.8:                               //   in Loop: Header=BB152_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB152_11
.LBB152_9:                              // %.preheader
                                        //   in Loop: Header=BB152_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB152_10:                             //   Parent Loop BB152_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB152_10
.LBB152_11:                             //   in Loop: Header=BB152_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB152_3
// %bb.12:                              //   in Loop: Header=BB152_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	mvni	v4.4s, #9
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB152_3
.LBB152_13:
	adrp	x21, init_value
	mov	w23, #14464                     // =0x3880
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB152_15
.LBB152_14:                             //   in Loop: Header=BB152_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB152_17
.LBB152_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB152_14
// %bb.16:                              //   in Loop: Header=BB152_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB152_14
.LBB152_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB152_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB152_21
.LBB152_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB152_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB152_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB152_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end152:
	.size	_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc, .Lfunc_end152-_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc // -- Begin function _Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc,@function
_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc: // @_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB153_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB153_13
// %bb.2:
	movi	v4.4s, #120
	mov	w27, w20
	mov	w23, #42496                     // =0xa600
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	mov	w19, #120                       // =0x78
	adrp	x22, init_value
	movk	w23, #14, lsl #16
	b	.LBB153_4
.LBB153_3:                              //   in Loop: Header=BB153_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB153_17
.LBB153_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB153_7 Depth 2
                                        //     Child Loop BB153_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB153_6
// %bb.5:                               //   in Loop: Header=BB153_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB153_9
.LBB153_6:                              // %.preheader2
                                        //   in Loop: Header=BB153_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB153_7:                              //   Parent Loop BB153_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	b.ne	.LBB153_7
// %bb.8:                               //   in Loop: Header=BB153_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB153_11
.LBB153_9:                              // %.preheader
                                        //   in Loop: Header=BB153_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB153_10:                             //   Parent Loop BB153_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB153_10
.LBB153_11:                             //   in Loop: Header=BB153_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB153_3
// %bb.12:                              //   in Loop: Header=BB153_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB153_3
.LBB153_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB153_15
.LBB153_14:                             //   in Loop: Header=BB153_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB153_17
.LBB153_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cbz	w9, .LBB153_14
// %bb.16:                              //   in Loop: Header=BB153_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB153_14
.LBB153_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB153_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB153_21
.LBB153_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB153_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB153_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB153_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end153:
	.size	_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc, .Lfunc_end153-_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc // -- Begin function _Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc,@function
_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc: // @_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB154_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB154_13
// %bb.2:
	movi	v4.4s, #120
	mov	w27, w20
	mov	w23, #42496                     // =0xa600
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	mov	w19, #120                       // =0x78
	adrp	x22, init_value
	movk	w23, #14, lsl #16
	b	.LBB154_4
.LBB154_3:                              //   in Loop: Header=BB154_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB154_17
.LBB154_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB154_7 Depth 2
                                        //     Child Loop BB154_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB154_6
// %bb.5:                               //   in Loop: Header=BB154_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB154_9
.LBB154_6:                              // %.preheader2
                                        //   in Loop: Header=BB154_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB154_7:                              //   Parent Loop BB154_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	b.ne	.LBB154_7
// %bb.8:                               //   in Loop: Header=BB154_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB154_11
.LBB154_9:                              // %.preheader
                                        //   in Loop: Header=BB154_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB154_10:                             //   Parent Loop BB154_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB154_10
.LBB154_11:                             //   in Loop: Header=BB154_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB154_3
// %bb.12:                              //   in Loop: Header=BB154_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB154_3
.LBB154_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB154_15
.LBB154_14:                             //   in Loop: Header=BB154_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB154_17
.LBB154_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cbz	w9, .LBB154_14
// %bb.16:                              //   in Loop: Header=BB154_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB154_14
.LBB154_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB154_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB154_21
.LBB154_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB154_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB154_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB154_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end154:
	.size	_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc, .Lfunc_end154-_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc // -- Begin function _Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc,@function
_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc: // @_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB155_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB155_13
// %bb.2:
	movi	v4.4s, #120
	mov	w27, w20
	mov	w23, #42496                     // =0xa600
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	movk	w23, #14, lsl #16
	b	.LBB155_4
.LBB155_3:                              //   in Loop: Header=BB155_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB155_17
.LBB155_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB155_7 Depth 2
                                        //     Child Loop BB155_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB155_6
// %bb.5:                               //   in Loop: Header=BB155_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB155_9
.LBB155_6:                              // %.preheader2
                                        //   in Loop: Header=BB155_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB155_7:                              //   Parent Loop BB155_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB155_7
// %bb.8:                               //   in Loop: Header=BB155_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB155_11
.LBB155_9:                              // %.preheader
                                        //   in Loop: Header=BB155_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB155_10:                             //   Parent Loop BB155_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #120
	b.ne	.LBB155_10
.LBB155_11:                             //   in Loop: Header=BB155_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB155_3
// %bb.12:                              //   in Loop: Header=BB155_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB155_3
.LBB155_13:
	adrp	x21, init_value
	mov	w23, #23040                     // =0x5a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #65521, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB155_15
.LBB155_14:                             //   in Loop: Header=BB155_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB155_17
.LBB155_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB155_14
// %bb.16:                              //   in Loop: Header=BB155_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB155_14
.LBB155_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB155_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB155_21
.LBB155_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB155_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB155_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB155_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end155:
	.size	_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc, .Lfunc_end155-_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc // -- Begin function _Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc,@function
_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc: // @_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB156_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB156_13
// %bb.2:
	mov	w27, #26215                     // =0x6667
	mov	w28, w20
	mov	w26, wzr
	movk	w27, #26214, lsl #16
	and	x24, x28, #0x7ffffff8
	add	x19, x21, #16
	dup	v6.4s, w27
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	str	q6, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB156_4
.LBB156_3:                              //   in Loop: Header=BB156_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB156_17
.LBB156_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB156_7 Depth 2
                                        //     Child Loop BB156_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB156_6
// %bb.5:                               //   in Loop: Header=BB156_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB156_9
.LBB156_6:                              // %.preheader2
                                        //   in Loop: Header=BB156_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x19
	mov	x10, x24
.LBB156_7:                              //   Parent Loop BB156_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	smull2	v4.2d, v2.4s, v6.4s
	smull	v2.2d, v2.2s, v6.2s
	smull2	v5.2d, v3.4s, v6.4s
	smull	v3.2d, v3.2s, v6.2s
	uzp2	v2.4s, v2.4s, v4.4s
	uzp2	v3.4s, v3.4s, v5.4s
	sshr	v4.4s, v2.4s, #1
	sshr	v5.4s, v3.4s, #1
	usra	v4.4s, v2.4s, #31
	usra	v5.4s, v3.4s, #31
	add	v0.4s, v4.4s, v0.4s
	add	v1.4s, v5.4s, v1.4s
	b.ne	.LBB156_7
// %bb.8:                               //   in Loop: Header=BB156_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x24, x28
	mov	x11, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB156_11
.LBB156_9:                              // %.preheader
                                        //   in Loop: Header=BB156_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x28, x11
.LBB156_10:                             //   Parent Loop BB156_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsw	x12, [x10], #4
	subs	x11, x11, #1
	smull	x12, w12, w27
	asr	x12, x12, #33
	add	w12, w12, w12, lsr #31
	add	w9, w12, w9
	b.ne	.LBB156_10
.LBB156_11:                             //   in Loop: Header=BB156_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	smull	x10, w10, w27
	asr	x10, x10, #33
	add	w10, w10, w10, lsr #31
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB156_3
// %bb.12:                              //   in Loop: Header=BB156_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q6, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB156_3
.LBB156_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB156_15
.LBB156_14:                             //   in Loop: Header=BB156_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB156_17
.LBB156_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w9, #4
	cmp	w9, #9
	b.lo	.LBB156_14
// %bb.16:                              //   in Loop: Header=BB156_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB156_14
.LBB156_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB156_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB156_21
.LBB156_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB156_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB156_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB156_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end156:
	.size	_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc, .Lfunc_end156-_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc // -- Begin function _Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc,@function
_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc: // @_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB157_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB157_13
// %bb.2:
	mov	w28, #34953                     // =0x8889
	mov	w27, w20
	mov	x22, #-30583                    // =0xffffffffffff8889
	movk	w28, #34952, lsl #16
	mov	w26, wzr
	and	x24, x27, #0x7ffffff8
	dup	v16.4s, w28
	add	x19, x21, #16
	movk	x22, #34952, lsl #16
	adrp	x23, init_value
	mov	w25, #8000                      // =0x1f40
	str	q16, [sp, #16]                  // 16-byte Folded Spill
	b	.LBB157_4
.LBB157_3:                              //   in Loop: Header=BB157_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB157_17
.LBB157_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB157_7 Depth 2
                                        //     Child Loop BB157_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB157_6
// %bb.5:                               //   in Loop: Header=BB157_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB157_9
.LBB157_6:                              // %.preheader2
                                        //   in Loop: Header=BB157_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x19
	mov	x10, x24
.LBB157_7:                              //   Parent Loop BB157_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	smull2	v4.2d, v2.4s, v16.4s
	smull	v5.2d, v2.2s, v16.2s
	smull2	v6.2d, v3.4s, v16.4s
	smull	v7.2d, v3.2s, v16.2s
	uzp2	v4.4s, v5.4s, v4.4s
	uzp2	v5.4s, v7.4s, v6.4s
	add	v2.4s, v4.4s, v2.4s
	add	v3.4s, v5.4s, v3.4s
	sshr	v4.4s, v2.4s, #6
	sshr	v5.4s, v3.4s, #6
	usra	v4.4s, v2.4s, #31
	usra	v5.4s, v3.4s, #31
	add	v0.4s, v4.4s, v0.4s
	add	v1.4s, v5.4s, v1.4s
	b.ne	.LBB157_7
// %bb.8:                               //   in Loop: Header=BB157_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x24, x27
	mov	x11, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB157_11
.LBB157_9:                              // %.preheader
                                        //   in Loop: Header=BB157_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB157_10:                             //   Parent Loop BB157_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldrsw	x12, [x10], #4
	subs	x11, x11, #1
	smull	x13, w12, w22
	lsr	x13, x13, #32
	add	w12, w13, w12
	asr	w13, w12, #6
	add	w12, w13, w12, lsr #31
	add	w9, w12, w9
	b.ne	.LBB157_10
.LBB157_11:                             //   in Loop: Header=BB157_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzs	w10, d0
	smull	x11, w10, w28
	lsr	x11, x11, #32
	add	w10, w11, w10
	lsr	w11, w10, #6
	add	w10, w11, w10, lsr #31
	mul	w10, w10, w25
	cmp	w9, w10
	b.eq	.LBB157_3
// %bb.12:                              //   in Loop: Header=BB157_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q16, [sp, #16]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB157_3
.LBB157_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB157_15
.LBB157_14:                             //   in Loop: Header=BB157_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB157_17
.LBB157_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	add	w9, w9, #119
	cmp	w9, #239
	b.lo	.LBB157_14
// %bb.16:                              //   in Loop: Header=BB157_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB157_14
.LBB157_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB157_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB157_21
.LBB157_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB157_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB157_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB157_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end157:
	.size	_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc, .Lfunc_end157-_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc // -- Begin function _Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc,@function
_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc: // @_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB158_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB158_13
// %bb.2:
	movi	v4.4s, #2
	mov	w27, w20
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	mov	w23, #16000                     // =0x3e80
	b	.LBB158_4
.LBB158_3:                              //   in Loop: Header=BB158_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB158_17
.LBB158_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB158_7 Depth 2
                                        //     Child Loop BB158_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB158_6
// %bb.5:                               //   in Loop: Header=BB158_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB158_9
.LBB158_6:                              // %.preheader2
                                        //   in Loop: Header=BB158_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB158_7:                              //   Parent Loop BB158_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB158_7
// %bb.8:                               //   in Loop: Header=BB158_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB158_11
.LBB158_9:                              // %.preheader
                                        //   in Loop: Header=BB158_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB158_10:                             //   Parent Loop BB158_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #2
	b.ne	.LBB158_10
.LBB158_11:                             //   in Loop: Header=BB158_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB158_3
// %bb.12:                              //   in Loop: Header=BB158_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #2
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB158_3
.LBB158_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #-16000                    // =0xffffc180
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB158_15
.LBB158_14:                             //   in Loop: Header=BB158_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB158_17
.LBB158_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB158_14
// %bb.16:                              //   in Loop: Header=BB158_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB158_14
.LBB158_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB158_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB158_21
.LBB158_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB158_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB158_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB158_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end158:
	.size	_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc, .Lfunc_end158-_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc // -- Begin function _Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc,@function
_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc: // @_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB159_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB159_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	adrp	x24, init_value
	and	x19, x27, #0x7ffffff8
	mov	w22, #8000                      // =0x1f40
	b	.LBB159_4
.LBB159_3:                              //   in Loop: Header=BB159_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB159_17
.LBB159_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB159_7 Depth 2
                                        //     Child Loop BB159_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB159_6
// %bb.5:                               //   in Loop: Header=BB159_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB159_9
.LBB159_6:                              // %.preheader2
                                        //   in Loop: Header=BB159_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x19
.LBB159_7:                              //   Parent Loop BB159_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB159_7
// %bb.8:                               //   in Loop: Header=BB159_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x19, x27
	mov	x11, x19
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB159_11
.LBB159_9:                              // %.preheader
                                        //   in Loop: Header=BB159_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB159_10:                             //   Parent Loop BB159_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w12, w9
	b.ne	.LBB159_10
.LBB159_11:                             //   in Loop: Header=BB159_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	mul	w10, w10, w22
	cmp	w9, w10
	b.eq	.LBB159_3
// %bb.12:                              //   in Loop: Header=BB159_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB159_3
.LBB159_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB159_15
.LBB159_14:                             //   in Loop: Header=BB159_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB159_17
.LBB159_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cbz	w9, .LBB159_14
// %bb.16:                              //   in Loop: Header=BB159_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB159_14
.LBB159_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB159_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB159_21
.LBB159_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB159_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB159_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB159_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end159:
	.size	_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc, .Lfunc_end159-_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi19custom_constant_andIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc // -- Begin function _Z13test_constantIi19custom_constant_andIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc,@function
_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc: // @_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB160_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB160_13
// %bb.2:
	movi	v4.4s, #10
	mov	w27, w20
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	mov	w19, #10                        // =0xa
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	b	.LBB160_4
.LBB160_3:                              //   in Loop: Header=BB160_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB160_17
.LBB160_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB160_7 Depth 2
                                        //     Child Loop BB160_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB160_6
// %bb.5:                               //   in Loop: Header=BB160_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB160_9
.LBB160_6:                              // %.preheader2
                                        //   in Loop: Header=BB160_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB160_7:                              //   Parent Loop BB160_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB160_7
// %bb.8:                               //   in Loop: Header=BB160_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB160_11
.LBB160_9:                              // %.preheader
                                        //   in Loop: Header=BB160_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB160_10:                             //   Parent Loop BB160_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	and	w12, w12, w19
	add	w9, w12, w9
	b.ne	.LBB160_10
.LBB160_11:                             //   in Loop: Header=BB160_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	and	w10, w10, w19
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB160_3
// %bb.12:                              //   in Loop: Header=BB160_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB160_3
.LBB160_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #10                        // =0xa
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB160_15
.LBB160_14:                             //   in Loop: Header=BB160_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB160_17
.LBB160_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w9, w22
	b.eq	.LBB160_14
// %bb.16:                              //   in Loop: Header=BB160_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB160_14
.LBB160_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB160_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB160_21
.LBB160_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB160_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB160_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB160_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end160:
	.size	_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc, .Lfunc_end160-_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc // -- Begin function _Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc,@function
_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc: // @_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB161_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB161_13
// %bb.2:
	movi	v4.4s, #14
	mov	w27, w20
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	b	.LBB161_4
.LBB161_3:                              //   in Loop: Header=BB161_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB161_17
.LBB161_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB161_7 Depth 2
                                        //     Child Loop BB161_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB161_6
// %bb.5:                               //   in Loop: Header=BB161_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB161_9
.LBB161_6:                              // %.preheader2
                                        //   in Loop: Header=BB161_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB161_7:                              //   Parent Loop BB161_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB161_7
// %bb.8:                               //   in Loop: Header=BB161_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB161_11
.LBB161_9:                              // %.preheader
                                        //   in Loop: Header=BB161_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB161_10:                             //   Parent Loop BB161_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	and	w12, w12, #0xe
	add	w9, w12, w9
	b.ne	.LBB161_10
.LBB161_11:                             //   in Loop: Header=BB161_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	and	w10, w10, #0xe
	mul	w10, w10, w22
	cmp	w9, w10
	b.eq	.LBB161_3
// %bb.12:                              //   in Loop: Header=BB161_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.4s, #14
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB161_3
.LBB161_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB161_15
.LBB161_14:                             //   in Loop: Header=BB161_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB161_17
.LBB161_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	tst	w9, #0xe
	b.eq	.LBB161_14
// %bb.16:                              //   in Loop: Header=BB161_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB161_14
.LBB161_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB161_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB161_21
.LBB161_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB161_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB161_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB161_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end161:
	.size	_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc, .Lfunc_end161-_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi18custom_constant_orIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc // -- Begin function _Z13test_constantIi18custom_constant_orIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc,@function
_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc: // @_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB162_15
// %bb.1:
	cmp	w20, #0
	b.le	.LBB162_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	mov	w24, #10                        // =0xa
	adrp	x19, init_value
	and	x22, x27, #0x7ffffff8
	mov	w23, #8000                      // =0x1f40
	b	.LBB162_4
.LBB162_3:                              //   in Loop: Header=BB162_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB162_15
.LBB162_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB162_7 Depth 2
                                        //     Child Loop BB162_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB162_6
// %bb.5:                               //   in Loop: Header=BB162_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB162_9
.LBB162_6:                              // %.preheader2
                                        //   in Loop: Header=BB162_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB162_7:                              //   Parent Loop BB162_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	orr	v2.4s, #10
	orr	v3.4s, #10
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB162_7
// %bb.8:                               //   in Loop: Header=BB162_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x22, x27
	mov	x11, x22
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB162_11
.LBB162_9:                              // %.preheader
                                        //   in Loop: Header=BB162_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB162_10:                             //   Parent Loop BB162_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	orr	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB162_10
.LBB162_11:                             //   in Loop: Header=BB162_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	orr	w10, w10, w24
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB162_3
// %bb.12:                              //   in Loop: Header=BB162_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB162_3
.LBB162_13:                             // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB162_14:                             // =>This Inner Loop Header: Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB162_14
.LBB162_15:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB162_17
// %bb.16:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB162_19
.LBB162_17:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB162_20
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
.LBB162_19:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB162_20:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end162:
	.size	_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc, .Lfunc_end162-_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc // -- Begin function _Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc,@function
_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc: // @_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB163_15
// %bb.1:
	cmp	w20, #0
	b.le	.LBB163_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	adrp	x24, init_value
	and	x19, x27, #0x7ffffff8
	mov	w22, #8000                      // =0x1f40
	b	.LBB163_4
.LBB163_3:                              //   in Loop: Header=BB163_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB163_15
.LBB163_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB163_7 Depth 2
                                        //     Child Loop BB163_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB163_6
// %bb.5:                               //   in Loop: Header=BB163_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB163_9
.LBB163_6:                              // %.preheader2
                                        //   in Loop: Header=BB163_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x19
.LBB163_7:                              //   Parent Loop BB163_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	orr	v2.4s, #63
	orr	v3.4s, #63
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB163_7
// %bb.8:                               //   in Loop: Header=BB163_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x19, x27
	mov	x11, x19
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB163_11
.LBB163_9:                              // %.preheader
                                        //   in Loop: Header=BB163_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB163_10:                             //   Parent Loop BB163_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	orr	w12, w12, #0x3f
	add	w9, w12, w9
	b.ne	.LBB163_10
.LBB163_11:                             //   in Loop: Header=BB163_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	orr	w10, w10, #0x3f
	mul	w10, w10, w22
	cmp	w9, w10
	b.eq	.LBB163_3
// %bb.12:                              //   in Loop: Header=BB163_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB163_3
.LBB163_13:                             // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB163_14:                             // =>This Inner Loop Header: Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB163_14
.LBB163_15:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB163_17
// %bb.16:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB163_19
.LBB163_17:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB163_20
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
.LBB163_19:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB163_20:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end163:
	.size	_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc, .Lfunc_end163-_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc // -- Begin function _Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc,@function
_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc: // @_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB164_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB164_13
// %bb.2:
	movi	v4.4s, #10
	mov	w27, w20
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	mov	w19, #10                        // =0xa
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	b	.LBB164_4
.LBB164_3:                              //   in Loop: Header=BB164_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB164_17
.LBB164_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB164_7 Depth 2
                                        //     Child Loop BB164_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB164_6
// %bb.5:                               //   in Loop: Header=BB164_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB164_9
.LBB164_6:                              // %.preheader2
                                        //   in Loop: Header=BB164_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB164_7:                              //   Parent Loop BB164_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB164_7
// %bb.8:                               //   in Loop: Header=BB164_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB164_11
.LBB164_9:                              // %.preheader
                                        //   in Loop: Header=BB164_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB164_10:                             //   Parent Loop BB164_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	eor	w12, w12, w19
	add	w9, w12, w9
	b.ne	.LBB164_10
.LBB164_11:                             //   in Loop: Header=BB164_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w10, w10, w19
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB164_3
// %bb.12:                              //   in Loop: Header=BB164_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB164_3
.LBB164_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB164_15
.LBB164_14:                             //   in Loop: Header=BB164_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB164_17
.LBB164_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmp	w9, #10
	b.eq	.LBB164_14
// %bb.16:                              //   in Loop: Header=BB164_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB164_14
.LBB164_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB164_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB164_21
.LBB164_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB164_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB164_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB164_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end164:
	.size	_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc, .Lfunc_end164-_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc,"axG",@progbits,_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc,comdat
	.weak	_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc // -- Begin function _Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc,@function
_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc: // @_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB165_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB165_13
// %bb.2:
	movi	v4.4s, #49
	mov	w27, w20
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	mov	w19, #49                        // =0x31
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	b	.LBB165_4
.LBB165_3:                              //   in Loop: Header=BB165_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB165_17
.LBB165_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB165_7 Depth 2
                                        //     Child Loop BB165_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB165_6
// %bb.5:                               //   in Loop: Header=BB165_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB165_9
.LBB165_6:                              // %.preheader2
                                        //   in Loop: Header=BB165_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB165_7:                              //   Parent Loop BB165_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB165_7
// %bb.8:                               //   in Loop: Header=BB165_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB165_11
.LBB165_9:                              // %.preheader
                                        //   in Loop: Header=BB165_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB165_10:                             //   Parent Loop BB165_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	eor	w12, w12, w19
	add	w9, w12, w9
	b.ne	.LBB165_10
.LBB165_11:                             //   in Loop: Header=BB165_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	eor	w10, w10, w19
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB165_3
// %bb.12:                              //   in Loop: Header=BB165_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #49
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB165_3
.LBB165_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB165_15
.LBB165_14:                             //   in Loop: Header=BB165_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB165_17
.LBB165_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	cmp	w9, #49
	b.eq	.LBB165_14
// %bb.16:                              //   in Loop: Header=BB165_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB165_14
.LBB165_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB165_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB165_21
.LBB165_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB165_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB165_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB165_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end165:
	.size	_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc, .Lfunc_end165-_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj10custom_twoIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj10custom_twoIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj10custom_twoIjEEvPT_iPKc // -- Begin function _Z13test_constantIj10custom_twoIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj10custom_twoIjEEvPT_iPKc,@function
_Z13test_constantIj10custom_twoIjEEvPT_iPKc: // @_Z13test_constantIj10custom_twoIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB166_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB166_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB166_4
.LBB166_3:                              //   in Loop: Header=BB166_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB166_8
.LBB166_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB166_3
// %bb.5:                               //   in Loop: Header=BB166_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB166_3
.LBB166_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB166_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB166_7
.LBB166_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB166_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB166_12
.LBB166_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB166_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB166_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB166_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end166:
	.size	_Z13test_constantIj10custom_twoIjEEvPT_iPKc, .Lfunc_end166-_Z13test_constantIj10custom_twoIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc: // @_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB167_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB167_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB167_4
.LBB167_3:                              //   in Loop: Header=BB167_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB167_8
.LBB167_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB167_3
// %bb.5:                               //   in Loop: Header=BB167_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB167_3
.LBB167_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB167_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB167_7
.LBB167_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB167_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB167_12
.LBB167_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB167_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB167_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB167_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end167:
	.size	_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc, .Lfunc_end167-_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc: // @_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB168_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB168_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB168_4
.LBB168_3:                              //   in Loop: Header=BB168_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB168_8
.LBB168_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB168_3
// %bb.5:                               //   in Loop: Header=BB168_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB168_3
.LBB168_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB168_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB168_7
.LBB168_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB168_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB168_12
.LBB168_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB168_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB168_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB168_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end168:
	.size	_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc, .Lfunc_end168-_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc: // @_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x23, iterations
	adrp	x22, start_time
	adrp	x21, current_test
	ldr	w8, [x23, :lo12:iterations]
	str	x0, [x22, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB169_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB169_6
// %bb.2:
	add	w9, w20, w20, lsl #1
	mov	w24, wzr
	mov	w26, #48000                     // =0xbb80
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	lsl	w25, w9, #1
	b	.LBB169_4
.LBB169_3:                              //   in Loop: Header=BB169_4 Depth=1
	add	w24, w24, #1
	cmp	w24, w8
	b.ge	.LBB169_8
.LBB169_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w25, w26
	b.eq	.LBB169_3
// %bb.5:                               //   in Loop: Header=BB169_4 Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	b	.LBB169_3
.LBB169_6:                              // %.preheader
	mov	w24, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB169_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x21, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x23, :lo12:iterations]
	add	w24, w24, #1
	cmp	w24, w8
	b.lt	.LBB169_7
.LBB169_8:
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x22, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB169_10
// %bb.9:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB169_12
.LBB169_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB169_13
// %bb.11:
	ldr	w8, [x21, :lo12:current_test]
.LBB169_12:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB169_13:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end169:
	.size	_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc, .Lfunc_end169-_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc: // @_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB170_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB170_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB170_4
.LBB170_3:                              //   in Loop: Header=BB170_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB170_8
.LBB170_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB170_3
// %bb.5:                               //   in Loop: Header=BB170_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB170_3
.LBB170_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB170_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB170_7
.LBB170_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB170_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB170_12
.LBB170_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB170_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB170_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB170_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end170:
	.size	_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc, .Lfunc_end170-_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc: // @_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB171_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB171_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB171_4
.LBB171_3:                              //   in Loop: Header=BB171_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB171_8
.LBB171_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB171_3
// %bb.5:                               //   in Loop: Header=BB171_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB171_3
.LBB171_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB171_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB171_7
.LBB171_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB171_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB171_12
.LBB171_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB171_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB171_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB171_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end171:
	.size	_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc, .Lfunc_end171-_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc: // @_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB172_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB172_4
.LBB172_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB172_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB172_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB172_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end172:
	.size	_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc, .Lfunc_end172-_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc: // @_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB173_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB173_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB173_4
.LBB173_3:                              //   in Loop: Header=BB173_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB173_8
.LBB173_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB173_3
// %bb.5:                               //   in Loop: Header=BB173_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB173_3
.LBB173_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB173_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB173_7
.LBB173_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB173_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB173_12
.LBB173_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB173_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB173_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB173_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end173:
	.size	_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc, .Lfunc_end173-_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc: // @_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB174_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB174_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB174_4
.LBB174_3:                              //   in Loop: Header=BB174_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB174_8
.LBB174_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB174_3
// %bb.5:                               //   in Loop: Header=BB174_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB174_3
.LBB174_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB174_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB174_7
.LBB174_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB174_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB174_12
.LBB174_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB174_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB174_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB174_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end174:
	.size	_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc, .Lfunc_end174-_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc: // @_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB175_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB175_4
.LBB175_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB175_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB175_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB175_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end175:
	.size	_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc, .Lfunc_end175-_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc: // @_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB176_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB176_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB176_4
.LBB176_3:                              //   in Loop: Header=BB176_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB176_8
.LBB176_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB176_3
// %bb.5:                               //   in Loop: Header=BB176_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB176_3
.LBB176_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB176_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB176_7
.LBB176_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB176_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB176_12
.LBB176_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB176_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB176_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB176_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end176:
	.size	_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc, .Lfunc_end176-_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc: // @_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB177_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB177_4
.LBB177_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB177_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB177_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB177_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end177:
	.size	_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc, .Lfunc_end177-_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc: // @_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB178_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB178_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB178_4
.LBB178_3:                              //   in Loop: Header=BB178_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB178_8
.LBB178_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB178_3
// %bb.5:                               //   in Loop: Header=BB178_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB178_3
.LBB178_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB178_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB178_7
.LBB178_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB178_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB178_12
.LBB178_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB178_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB178_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB178_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end178:
	.size	_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc, .Lfunc_end178-_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc: // @_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB179_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB179_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB179_4
.LBB179_3:                              //   in Loop: Header=BB179_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB179_8
.LBB179_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB179_3
// %bb.5:                               //   in Loop: Header=BB179_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB179_3
.LBB179_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB179_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB179_7
.LBB179_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB179_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB179_12
.LBB179_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB179_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB179_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB179_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end179:
	.size	_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc, .Lfunc_end179-_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc // -- Begin function _Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc,@function
_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc: // @_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB180_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB180_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB180_4
.LBB180_3:                              //   in Loop: Header=BB180_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB180_8
.LBB180_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB180_3
// %bb.5:                               //   in Loop: Header=BB180_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB180_3
.LBB180_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB180_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB180_7
.LBB180_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB180_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB180_12
.LBB180_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB180_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB180_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB180_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end180:
	.size	_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc, .Lfunc_end180-_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj19custom_constant_addIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc // -- Begin function _Z13test_constantIj19custom_constant_addIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc,@function
_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc: // @_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB181_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB181_13
// %bb.2:
	movi	v4.4s, #10
	mov	w27, w20
	mov	w23, #14464                     // =0x3880
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	b	.LBB181_4
.LBB181_3:                              //   in Loop: Header=BB181_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB181_17
.LBB181_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB181_7 Depth 2
                                        //     Child Loop BB181_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB181_6
// %bb.5:                               //   in Loop: Header=BB181_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB181_9
.LBB181_6:                              // %.preheader2
                                        //   in Loop: Header=BB181_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB181_7:                              //   Parent Loop BB181_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB181_7
// %bb.8:                               //   in Loop: Header=BB181_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB181_11
.LBB181_9:                              // %.preheader
                                        //   in Loop: Header=BB181_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB181_10:                             //   Parent Loop BB181_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB181_10
.LBB181_11:                             //   in Loop: Header=BB181_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB181_3
// %bb.12:                              //   in Loop: Header=BB181_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB181_3
.LBB181_13:
	adrp	x21, init_value
	mov	w23, #51072                     // =0xc780
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #65534, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB181_15
.LBB181_14:                             //   in Loop: Header=BB181_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB181_17
.LBB181_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB181_14
// %bb.16:                              //   in Loop: Header=BB181_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB181_14
.LBB181_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB181_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB181_21
.LBB181_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB181_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB181_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB181_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end181:
	.size	_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc, .Lfunc_end181-_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc // -- Begin function _Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc,@function
_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc: // @_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB182_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB182_13
// %bb.2:
	movi	v4.4s, #10
	mov	w27, w20
	mov	w23, #14464                     // =0x3880
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	b	.LBB182_4
.LBB182_3:                              //   in Loop: Header=BB182_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB182_17
.LBB182_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB182_7 Depth 2
                                        //     Child Loop BB182_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB182_6
// %bb.5:                               //   in Loop: Header=BB182_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB182_9
.LBB182_6:                              // %.preheader2
                                        //   in Loop: Header=BB182_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB182_7:                              //   Parent Loop BB182_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB182_7
// %bb.8:                               //   in Loop: Header=BB182_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB182_11
.LBB182_9:                              // %.preheader
                                        //   in Loop: Header=BB182_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB182_10:                             //   Parent Loop BB182_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #10
	b.ne	.LBB182_10
.LBB182_11:                             //   in Loop: Header=BB182_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB182_3
// %bb.12:                              //   in Loop: Header=BB182_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB182_3
.LBB182_13:
	adrp	x21, init_value
	mov	w23, #51072                     // =0xc780
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #65534, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB182_15
.LBB182_14:                             //   in Loop: Header=BB182_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB182_17
.LBB182_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB182_14
// %bb.16:                              //   in Loop: Header=BB182_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB182_14
.LBB182_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB182_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB182_21
.LBB182_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB182_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB182_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB182_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end182:
	.size	_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc, .Lfunc_end182-_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj19custom_constant_subIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc // -- Begin function _Z13test_constantIj19custom_constant_subIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc,@function
_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc: // @_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB183_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB183_13
// %bb.2:
	mvni	v4.4s, #9
	mov	w27, w20
	mov	w23, #51072                     // =0xc780
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	movk	w23, #65534, lsl #16
	b	.LBB183_4
.LBB183_3:                              //   in Loop: Header=BB183_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB183_17
.LBB183_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB183_7 Depth 2
                                        //     Child Loop BB183_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB183_6
// %bb.5:                               //   in Loop: Header=BB183_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB183_9
.LBB183_6:                              // %.preheader2
                                        //   in Loop: Header=BB183_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB183_7:                              //   Parent Loop BB183_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB183_7
// %bb.8:                               //   in Loop: Header=BB183_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB183_11
.LBB183_9:                              // %.preheader
                                        //   in Loop: Header=BB183_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB183_10:                             //   Parent Loop BB183_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB183_10
.LBB183_11:                             //   in Loop: Header=BB183_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB183_3
// %bb.12:                              //   in Loop: Header=BB183_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	mvni	v4.4s, #9
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB183_3
.LBB183_13:
	adrp	x21, init_value
	mov	w23, #14464                     // =0x3880
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB183_15
.LBB183_14:                             //   in Loop: Header=BB183_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB183_17
.LBB183_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB183_14
// %bb.16:                              //   in Loop: Header=BB183_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB183_14
.LBB183_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB183_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB183_21
.LBB183_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB183_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB183_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB183_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end183:
	.size	_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc, .Lfunc_end183-_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc // -- Begin function _Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc,@function
_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc: // @_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB184_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB184_13
// %bb.2:
	mvni	v4.4s, #9
	mov	w27, w20
	mov	w23, #51072                     // =0xc780
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	movk	w23, #65534, lsl #16
	b	.LBB184_4
.LBB184_3:                              //   in Loop: Header=BB184_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB184_17
.LBB184_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB184_7 Depth 2
                                        //     Child Loop BB184_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB184_6
// %bb.5:                               //   in Loop: Header=BB184_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB184_9
.LBB184_6:                              // %.preheader2
                                        //   in Loop: Header=BB184_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB184_7:                              //   Parent Loop BB184_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB184_7
// %bb.8:                               //   in Loop: Header=BB184_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB184_11
.LBB184_9:                              // %.preheader
                                        //   in Loop: Header=BB184_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB184_10:                             //   Parent Loop BB184_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	sub	w9, w9, #10
	b.ne	.LBB184_10
.LBB184_11:                             //   in Loop: Header=BB184_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB184_3
// %bb.12:                              //   in Loop: Header=BB184_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	mvni	v4.4s, #9
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB184_3
.LBB184_13:
	adrp	x21, init_value
	mov	w23, #14464                     // =0x3880
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB184_15
.LBB184_14:                             //   in Loop: Header=BB184_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB184_17
.LBB184_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB184_14
// %bb.16:                              //   in Loop: Header=BB184_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB184_14
.LBB184_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB184_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB184_21
.LBB184_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB184_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB184_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB184_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end184:
	.size	_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc, .Lfunc_end184-_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc // -- Begin function _Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc,@function
_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc: // @_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB185_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB185_13
// %bb.2:
	movi	v4.4s, #120
	mov	w27, #42496                     // =0xa600
	mov	w28, w20
	mov	w26, wzr
	movk	w27, #14, lsl #16
	and	x24, x28, #0x7ffffff8
	add	x19, x21, #16
	mov	w22, #120                       // =0x78
	adrp	x23, init_value
	b	.LBB185_4
.LBB185_3:                              //   in Loop: Header=BB185_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB185_17
.LBB185_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB185_7 Depth 2
                                        //     Child Loop BB185_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB185_6
// %bb.5:                               //   in Loop: Header=BB185_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB185_9
.LBB185_6:                              // %.preheader2
                                        //   in Loop: Header=BB185_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x19
	mov	x10, x24
.LBB185_7:                              //   Parent Loop BB185_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	b.ne	.LBB185_7
// %bb.8:                               //   in Loop: Header=BB185_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x24, x28
	mov	x11, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB185_11
.LBB185_9:                              // %.preheader
                                        //   in Loop: Header=BB185_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x28, x11
.LBB185_10:                             //   Parent Loop BB185_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB185_10
.LBB185_11:                             //   in Loop: Header=BB185_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzu	w10, d0
	mul	w10, w10, w27
	cmp	w9, w10
	b.eq	.LBB185_3
// %bb.12:                              //   in Loop: Header=BB185_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB185_3
.LBB185_13:
	adrp	x21, init_value
	mov	w22, #42496                     // =0xa600
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #14, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB185_15
.LBB185_14:                             //   in Loop: Header=BB185_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB185_17
.LBB185_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	mul	w9, w9, w22
	cbz	w9, .LBB185_14
// %bb.16:                              //   in Loop: Header=BB185_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB185_14
.LBB185_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB185_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB185_21
.LBB185_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB185_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB185_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB185_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end185:
	.size	_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc, .Lfunc_end185-_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc // -- Begin function _Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc,@function
_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc: // @_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB186_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB186_13
// %bb.2:
	movi	v4.4s, #120
	mov	w27, #42496                     // =0xa600
	mov	w28, w20
	mov	w26, wzr
	movk	w27, #14, lsl #16
	and	x24, x28, #0x7ffffff8
	add	x19, x21, #16
	mov	w22, #120                       // =0x78
	adrp	x23, init_value
	b	.LBB186_4
.LBB186_3:                              //   in Loop: Header=BB186_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB186_17
.LBB186_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB186_7 Depth 2
                                        //     Child Loop BB186_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB186_6
// %bb.5:                               //   in Loop: Header=BB186_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB186_9
.LBB186_6:                              // %.preheader2
                                        //   in Loop: Header=BB186_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x19
	mov	x10, x24
.LBB186_7:                              //   Parent Loop BB186_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	b.ne	.LBB186_7
// %bb.8:                               //   in Loop: Header=BB186_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x24, x28
	mov	x11, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB186_11
.LBB186_9:                              // %.preheader
                                        //   in Loop: Header=BB186_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x28, x11
.LBB186_10:                             //   Parent Loop BB186_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB186_10
.LBB186_11:                             //   in Loop: Header=BB186_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzu	w10, d0
	mul	w10, w10, w27
	cmp	w9, w10
	b.eq	.LBB186_3
// %bb.12:                              //   in Loop: Header=BB186_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB186_3
.LBB186_13:
	adrp	x21, init_value
	mov	w22, #42496                     // =0xa600
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #14, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB186_15
.LBB186_14:                             //   in Loop: Header=BB186_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB186_17
.LBB186_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	mul	w9, w9, w22
	cbz	w9, .LBB186_14
// %bb.16:                              //   in Loop: Header=BB186_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB186_14
.LBB186_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB186_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB186_21
.LBB186_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB186_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB186_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB186_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end186:
	.size	_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc, .Lfunc_end186-_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc // -- Begin function _Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc,@function
_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc: // @_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB187_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB187_13
// %bb.2:
	movi	v4.4s, #120
	mov	w27, w20
	mov	w23, #42496                     // =0xa600
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	movk	w23, #14, lsl #16
	b	.LBB187_4
.LBB187_3:                              //   in Loop: Header=BB187_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB187_17
.LBB187_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB187_7 Depth 2
                                        //     Child Loop BB187_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB187_6
// %bb.5:                               //   in Loop: Header=BB187_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB187_9
.LBB187_6:                              // %.preheader2
                                        //   in Loop: Header=BB187_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB187_7:                              //   Parent Loop BB187_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB187_7
// %bb.8:                               //   in Loop: Header=BB187_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB187_11
.LBB187_9:                              // %.preheader
                                        //   in Loop: Header=BB187_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB187_10:                             //   Parent Loop BB187_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #120
	b.ne	.LBB187_10
.LBB187_11:                             //   in Loop: Header=BB187_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB187_3
// %bb.12:                              //   in Loop: Header=BB187_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #120
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB187_3
.LBB187_13:
	adrp	x21, init_value
	mov	w23, #23040                     // =0x5a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #65521, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB187_15
.LBB187_14:                             //   in Loop: Header=BB187_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB187_17
.LBB187_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB187_14
// %bb.16:                              //   in Loop: Header=BB187_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB187_14
.LBB187_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB187_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB187_21
.LBB187_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB187_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB187_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB187_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end187:
	.size	_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc, .Lfunc_end187-_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc // -- Begin function _Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc,@function
_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc: // @_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB188_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB188_13
// %bb.2:
	mov	w27, #52429                     // =0xcccd
	mov	w28, w20
	mov	w26, wzr
	movk	w27, #52428, lsl #16
	and	x24, x28, #0x7ffffff8
	add	x19, x21, #16
	dup	v6.4s, w27
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	str	q6, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB188_4
.LBB188_3:                              //   in Loop: Header=BB188_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB188_17
.LBB188_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB188_7 Depth 2
                                        //     Child Loop BB188_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB188_6
// %bb.5:                               //   in Loop: Header=BB188_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB188_9
.LBB188_6:                              // %.preheader2
                                        //   in Loop: Header=BB188_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x19
	mov	x10, x24
.LBB188_7:                              //   Parent Loop BB188_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	umull2	v4.2d, v2.4s, v6.4s
	umull	v2.2d, v2.2s, v6.2s
	umull2	v5.2d, v3.4s, v6.4s
	umull	v3.2d, v3.2s, v6.2s
	uzp2	v2.4s, v2.4s, v4.4s
	uzp2	v3.4s, v3.4s, v5.4s
	usra	v0.4s, v2.4s, #2
	usra	v1.4s, v3.4s, #2
	b.ne	.LBB188_7
// %bb.8:                               //   in Loop: Header=BB188_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x24, x28
	mov	x11, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB188_11
.LBB188_9:                              // %.preheader
                                        //   in Loop: Header=BB188_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x28, x11
.LBB188_10:                             //   Parent Loop BB188_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	umull	x12, w12, w27
	lsr	x12, x12, #34
	add	w9, w12, w9
	b.ne	.LBB188_10
.LBB188_11:                             //   in Loop: Header=BB188_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzu	w10, d0
	umull	x10, w10, w27
	lsr	x10, x10, #34
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB188_3
// %bb.12:                              //   in Loop: Header=BB188_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q6, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB188_3
.LBB188_13:
	adrp	x21, init_value
	mov	w22, #52429                     // =0xcccd
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #52428, lsl #16
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB188_15
.LBB188_14:                             //   in Loop: Header=BB188_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB188_17
.LBB188_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	umull	x9, w9, w22
	lsr	x9, x9, #34
	mul	w9, w9, w23
	cbz	w9, .LBB188_14
// %bb.16:                              //   in Loop: Header=BB188_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB188_14
.LBB188_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB188_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB188_21
.LBB188_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB188_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB188_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB188_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end188:
	.size	_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc, .Lfunc_end188-_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc // -- Begin function _Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc,@function
_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc: // @_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB189_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB189_13
// %bb.2:
	mov	w27, #34953                     // =0x8889
	mov	w28, w20
	mov	w26, wzr
	movk	w27, #34952, lsl #16
	and	x24, x28, #0x7ffffff8
	add	x19, x21, #16
	dup	v6.4s, w27
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	str	q6, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB189_4
.LBB189_3:                              //   in Loop: Header=BB189_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB189_17
.LBB189_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB189_7 Depth 2
                                        //     Child Loop BB189_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB189_6
// %bb.5:                               //   in Loop: Header=BB189_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB189_9
.LBB189_6:                              // %.preheader2
                                        //   in Loop: Header=BB189_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x19
	mov	x10, x24
.LBB189_7:                              //   Parent Loop BB189_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	umull2	v4.2d, v2.4s, v6.4s
	umull	v2.2d, v2.2s, v6.2s
	umull2	v5.2d, v3.4s, v6.4s
	umull	v3.2d, v3.2s, v6.2s
	uzp2	v2.4s, v2.4s, v4.4s
	uzp2	v3.4s, v3.4s, v5.4s
	usra	v0.4s, v2.4s, #6
	usra	v1.4s, v3.4s, #6
	b.ne	.LBB189_7
// %bb.8:                               //   in Loop: Header=BB189_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x24, x28
	mov	x11, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB189_11
.LBB189_9:                              // %.preheader
                                        //   in Loop: Header=BB189_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x28, x11
.LBB189_10:                             //   Parent Loop BB189_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	umull	x12, w12, w27
	lsr	x12, x12, #38
	add	w9, w12, w9
	b.ne	.LBB189_10
.LBB189_11:                             //   in Loop: Header=BB189_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzu	w10, d0
	umull	x10, w10, w27
	lsr	x10, x10, #38
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB189_3
// %bb.12:                              //   in Loop: Header=BB189_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q6, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB189_3
.LBB189_13:
	adrp	x21, init_value
	mov	w22, #34953                     // =0x8889
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #34952, lsl #16
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB189_15
.LBB189_14:                             //   in Loop: Header=BB189_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB189_17
.LBB189_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	umull	x9, w9, w22
	lsr	x9, x9, #38
	mul	w9, w9, w23
	cbz	w9, .LBB189_14
// %bb.16:                              //   in Loop: Header=BB189_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB189_14
.LBB189_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB189_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB189_21
.LBB189_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB189_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB189_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB189_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end189:
	.size	_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc, .Lfunc_end189-_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc // -- Begin function _Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc,@function
_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc: // @_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB190_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB190_13
// %bb.2:
	movi	v4.4s, #2
	mov	w27, w20
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	mov	w23, #16000                     // =0x3e80
	b	.LBB190_4
.LBB190_3:                              //   in Loop: Header=BB190_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB190_17
.LBB190_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB190_7 Depth 2
                                        //     Child Loop BB190_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB190_6
// %bb.5:                               //   in Loop: Header=BB190_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB190_9
.LBB190_6:                              // %.preheader2
                                        //   in Loop: Header=BB190_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB190_7:                              //   Parent Loop BB190_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v4.4s
	add	v1.4s, v1.4s, v4.4s
	b.ne	.LBB190_7
// %bb.8:                               //   in Loop: Header=BB190_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB190_11
.LBB190_9:                              // %.preheader
                                        //   in Loop: Header=BB190_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB190_10:                             //   Parent Loop BB190_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w9, w12
	add	w9, w9, #2
	b.ne	.LBB190_10
.LBB190_11:                             //   in Loop: Header=BB190_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	w10, d0
	madd	w10, w10, w22, w23
	cmp	w9, w10
	b.eq	.LBB190_3
// %bb.12:                              //   in Loop: Header=BB190_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #2
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB190_3
.LBB190_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #-16000                    // =0xffffc180
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB190_15
.LBB190_14:                             //   in Loop: Header=BB190_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB190_17
.LBB190_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB190_14
// %bb.16:                              //   in Loop: Header=BB190_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB190_14
.LBB190_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB190_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB190_21
.LBB190_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB190_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB190_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB190_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end190:
	.size	_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc, .Lfunc_end190-_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc // -- Begin function _Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc,@function
_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc: // @_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB191_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB191_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	adrp	x24, init_value
	and	x19, x27, #0x7ffffff8
	mov	w22, #8000                      // =0x1f40
	b	.LBB191_4
.LBB191_3:                              //   in Loop: Header=BB191_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB191_17
.LBB191_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB191_7 Depth 2
                                        //     Child Loop BB191_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB191_6
// %bb.5:                               //   in Loop: Header=BB191_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB191_9
.LBB191_6:                              // %.preheader2
                                        //   in Loop: Header=BB191_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x19
.LBB191_7:                              //   Parent Loop BB191_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB191_7
// %bb.8:                               //   in Loop: Header=BB191_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x19, x27
	mov	x11, x19
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB191_11
.LBB191_9:                              // %.preheader
                                        //   in Loop: Header=BB191_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB191_10:                             //   Parent Loop BB191_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	add	w9, w12, w9
	b.ne	.LBB191_10
.LBB191_11:                             //   in Loop: Header=BB191_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzu	w10, d0
	mul	w10, w10, w22
	cmp	w9, w10
	b.eq	.LBB191_3
// %bb.12:                              //   in Loop: Header=BB191_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB191_3
.LBB191_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB191_15
.LBB191_14:                             //   in Loop: Header=BB191_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB191_17
.LBB191_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	mul	w9, w9, w22
	cbz	w9, .LBB191_14
// %bb.16:                              //   in Loop: Header=BB191_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB191_14
.LBB191_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB191_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB191_21
.LBB191_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB191_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB191_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB191_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end191:
	.size	_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc, .Lfunc_end191-_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj19custom_constant_andIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc // -- Begin function _Z13test_constantIj19custom_constant_andIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc,@function
_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc: // @_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB192_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB192_13
// %bb.2:
	movi	v4.4s, #10
	mov	w27, w20
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	mov	w19, #10                        // =0xa
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	b	.LBB192_4
.LBB192_3:                              //   in Loop: Header=BB192_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB192_17
.LBB192_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB192_7 Depth 2
                                        //     Child Loop BB192_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB192_6
// %bb.5:                               //   in Loop: Header=BB192_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB192_9
.LBB192_6:                              // %.preheader2
                                        //   in Loop: Header=BB192_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB192_7:                              //   Parent Loop BB192_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB192_7
// %bb.8:                               //   in Loop: Header=BB192_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB192_11
.LBB192_9:                              // %.preheader
                                        //   in Loop: Header=BB192_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB192_10:                             //   Parent Loop BB192_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	and	w12, w12, w19
	add	w9, w12, w9
	b.ne	.LBB192_10
.LBB192_11:                             //   in Loop: Header=BB192_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzu	w10, d0
	and	w10, w10, w19
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB192_3
// %bb.12:                              //   in Loop: Header=BB192_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB192_3
.LBB192_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #10                        // =0xa
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB192_15
.LBB192_14:                             //   in Loop: Header=BB192_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB192_17
.LBB192_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	tst	w9, w22
	b.eq	.LBB192_14
// %bb.16:                              //   in Loop: Header=BB192_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB192_14
.LBB192_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB192_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB192_21
.LBB192_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB192_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB192_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB192_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end192:
	.size	_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc, .Lfunc_end192-_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc // -- Begin function _Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc,@function
_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc: // @_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB193_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB193_13
// %bb.2:
	movi	v4.4s, #14
	mov	w27, w20
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	b	.LBB193_4
.LBB193_3:                              //   in Loop: Header=BB193_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB193_17
.LBB193_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB193_7 Depth 2
                                        //     Child Loop BB193_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB193_6
// %bb.5:                               //   in Loop: Header=BB193_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB193_9
.LBB193_6:                              // %.preheader2
                                        //   in Loop: Header=BB193_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB193_7:                              //   Parent Loop BB193_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB193_7
// %bb.8:                               //   in Loop: Header=BB193_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB193_11
.LBB193_9:                              // %.preheader
                                        //   in Loop: Header=BB193_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB193_10:                             //   Parent Loop BB193_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	and	w12, w12, #0xe
	add	w9, w12, w9
	b.ne	.LBB193_10
.LBB193_11:                             //   in Loop: Header=BB193_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	w10, d0
	and	w10, w10, #0xe
	mul	w10, w10, w22
	cmp	w9, w10
	b.eq	.LBB193_3
// %bb.12:                              //   in Loop: Header=BB193_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	movi	v4.4s, #14
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB193_3
.LBB193_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB193_15
.LBB193_14:                             //   in Loop: Header=BB193_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB193_17
.LBB193_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	tst	w9, #0xe
	b.eq	.LBB193_14
// %bb.16:                              //   in Loop: Header=BB193_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB193_14
.LBB193_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB193_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB193_21
.LBB193_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB193_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB193_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB193_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end193:
	.size	_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc, .Lfunc_end193-_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj18custom_constant_orIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc // -- Begin function _Z13test_constantIj18custom_constant_orIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc,@function
_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc: // @_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB194_15
// %bb.1:
	cmp	w20, #0
	b.le	.LBB194_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	mov	w24, #10                        // =0xa
	adrp	x19, init_value
	and	x22, x27, #0x7ffffff8
	mov	w23, #8000                      // =0x1f40
	b	.LBB194_4
.LBB194_3:                              //   in Loop: Header=BB194_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB194_15
.LBB194_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB194_7 Depth 2
                                        //     Child Loop BB194_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB194_6
// %bb.5:                               //   in Loop: Header=BB194_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB194_9
.LBB194_6:                              // %.preheader2
                                        //   in Loop: Header=BB194_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB194_7:                              //   Parent Loop BB194_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	orr	v2.4s, #10
	orr	v3.4s, #10
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB194_7
// %bb.8:                               //   in Loop: Header=BB194_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x22, x27
	mov	x11, x22
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB194_11
.LBB194_9:                              // %.preheader
                                        //   in Loop: Header=BB194_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB194_10:                             //   Parent Loop BB194_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	orr	w12, w12, w24
	add	w9, w12, w9
	b.ne	.LBB194_10
.LBB194_11:                             //   in Loop: Header=BB194_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	w10, d0
	orr	w10, w10, w24
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB194_3
// %bb.12:                              //   in Loop: Header=BB194_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB194_3
.LBB194_13:                             // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB194_14:                             // =>This Inner Loop Header: Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB194_14
.LBB194_15:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB194_17
// %bb.16:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB194_19
.LBB194_17:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB194_20
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
.LBB194_19:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB194_20:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end194:
	.size	_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc, .Lfunc_end194-_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc // -- Begin function _Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc,@function
_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc: // @_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB195_15
// %bb.1:
	cmp	w20, #0
	b.le	.LBB195_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	adrp	x24, init_value
	and	x19, x27, #0x7ffffff8
	mov	w22, #8000                      // =0x1f40
	b	.LBB195_4
.LBB195_3:                              //   in Loop: Header=BB195_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB195_15
.LBB195_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB195_7 Depth 2
                                        //     Child Loop BB195_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB195_6
// %bb.5:                               //   in Loop: Header=BB195_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB195_9
.LBB195_6:                              // %.preheader2
                                        //   in Loop: Header=BB195_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x19
.LBB195_7:                              //   Parent Loop BB195_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	orr	v2.4s, #63
	orr	v3.4s, #63
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB195_7
// %bb.8:                               //   in Loop: Header=BB195_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x19, x27
	mov	x11, x19
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB195_11
.LBB195_9:                              // %.preheader
                                        //   in Loop: Header=BB195_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB195_10:                             //   Parent Loop BB195_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	orr	w12, w12, #0x3f
	add	w9, w12, w9
	b.ne	.LBB195_10
.LBB195_11:                             //   in Loop: Header=BB195_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzu	w10, d0
	orr	w10, w10, #0x3f
	mul	w10, w10, w22
	cmp	w9, w10
	b.eq	.LBB195_3
// %bb.12:                              //   in Loop: Header=BB195_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB195_3
.LBB195_13:                             // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB195_14:                             // =>This Inner Loop Header: Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB195_14
.LBB195_15:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB195_17
// %bb.16:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB195_19
.LBB195_17:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB195_20
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
.LBB195_19:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB195_20:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end195:
	.size	_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc, .Lfunc_end195-_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc // -- Begin function _Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc,@function
_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc: // @_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB196_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB196_13
// %bb.2:
	movi	v4.4s, #10
	mov	w27, w20
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	mov	w19, #10                        // =0xa
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	b	.LBB196_4
.LBB196_3:                              //   in Loop: Header=BB196_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB196_17
.LBB196_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB196_7 Depth 2
                                        //     Child Loop BB196_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB196_6
// %bb.5:                               //   in Loop: Header=BB196_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB196_9
.LBB196_6:                              // %.preheader2
                                        //   in Loop: Header=BB196_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB196_7:                              //   Parent Loop BB196_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB196_7
// %bb.8:                               //   in Loop: Header=BB196_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB196_11
.LBB196_9:                              // %.preheader
                                        //   in Loop: Header=BB196_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB196_10:                             //   Parent Loop BB196_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	eor	w12, w12, w19
	add	w9, w12, w9
	b.ne	.LBB196_10
.LBB196_11:                             //   in Loop: Header=BB196_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzu	w10, d0
	eor	w10, w10, w19
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB196_3
// %bb.12:                              //   in Loop: Header=BB196_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #10
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB196_3
.LBB196_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #10                        // =0xa
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB196_15
.LBB196_14:                             //   in Loop: Header=BB196_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB196_17
.LBB196_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	eor	w9, w9, w22
	mul	w9, w9, w23
	cbz	w9, .LBB196_14
// %bb.16:                              //   in Loop: Header=BB196_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB196_14
.LBB196_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB196_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB196_21
.LBB196_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB196_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB196_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB196_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end196:
	.size	_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc, .Lfunc_end196-_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc,"axG",@progbits,_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc,comdat
	.weak	_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc // -- Begin function _Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc,@function
_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc: // @_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB197_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB197_13
// %bb.2:
	movi	v4.4s, #49
	mov	w27, w20
	mov	w26, wzr
	and	x28, x27, #0x7ffffff8
	add	x24, x21, #16
	mov	w19, #49                        // =0x31
	adrp	x22, init_value
	mov	w23, #8000                      // =0x1f40
	b	.LBB197_4
.LBB197_3:                              //   in Loop: Header=BB197_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB197_17
.LBB197_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB197_7 Depth 2
                                        //     Child Loop BB197_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB197_6
// %bb.5:                               //   in Loop: Header=BB197_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB197_9
.LBB197_6:                              // %.preheader2
                                        //   in Loop: Header=BB197_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB197_7:                              //   Parent Loop BB197_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	eor	v2.16b, v2.16b, v4.16b
	eor	v3.16b, v3.16b, v4.16b
	add	v0.4s, v2.4s, v0.4s
	add	v1.4s, v3.4s, v1.4s
	b.ne	.LBB197_7
// %bb.8:                               //   in Loop: Header=BB197_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x28, x27
	mov	x11, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB197_11
.LBB197_9:                              // %.preheader
                                        //   in Loop: Header=BB197_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x27, x11
.LBB197_10:                             //   Parent Loop BB197_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	eor	w12, w12, w19
	add	w9, w12, w9
	b.ne	.LBB197_10
.LBB197_11:                             //   in Loop: Header=BB197_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzu	w10, d0
	eor	w10, w10, w19
	mul	w10, w10, w23
	cmp	w9, w10
	b.eq	.LBB197_3
// %bb.12:                              //   in Loop: Header=BB197_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v4.4s, #49
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB197_3
.LBB197_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #49                        // =0x31
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB197_15
.LBB197_14:                             //   in Loop: Header=BB197_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB197_17
.LBB197_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	w9, d0
	eor	w9, w9, w22
	mul	w9, w9, w23
	cbz	w9, .LBB197_14
// %bb.16:                              //   in Loop: Header=BB197_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB197_14
.LBB197_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB197_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB197_21
.LBB197_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB197_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB197_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB197_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end197:
	.size	_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc, .Lfunc_end197-_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl10custom_twoIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl10custom_twoIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl10custom_twoIlEEvPT_iPKc // -- Begin function _Z13test_constantIl10custom_twoIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl10custom_twoIlEEvPT_iPKc,@function
_Z13test_constantIl10custom_twoIlEEvPT_iPKc: // @_Z13test_constantIl10custom_twoIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB198_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB198_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB198_4
.LBB198_3:                              //   in Loop: Header=BB198_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB198_8
.LBB198_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB198_3
// %bb.5:                               //   in Loop: Header=BB198_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB198_3
.LBB198_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB198_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB198_7
.LBB198_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB198_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB198_12
.LBB198_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB198_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB198_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB198_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end198:
	.size	_Z13test_constantIl10custom_twoIlEEvPT_iPKc, .Lfunc_end198-_Z13test_constantIl10custom_twoIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc: // @_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB199_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB199_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB199_4
.LBB199_3:                              //   in Loop: Header=BB199_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB199_8
.LBB199_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB199_3
// %bb.5:                               //   in Loop: Header=BB199_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB199_3
.LBB199_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB199_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB199_7
.LBB199_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB199_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB199_12
.LBB199_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB199_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB199_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB199_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end199:
	.size	_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc, .Lfunc_end199-_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc: // @_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB200_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB200_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB200_4
.LBB200_3:                              //   in Loop: Header=BB200_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB200_8
.LBB200_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB200_3
// %bb.5:                               //   in Loop: Header=BB200_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB200_3
.LBB200_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB200_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB200_7
.LBB200_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB200_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB200_12
.LBB200_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB200_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB200_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB200_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end200:
	.size	_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc, .Lfunc_end200-_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc: // @_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB201_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB201_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB201_4
.LBB201_3:                              //   in Loop: Header=BB201_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB201_8
.LBB201_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB201_3
// %bb.5:                               //   in Loop: Header=BB201_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB201_3
.LBB201_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB201_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB201_7
.LBB201_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB201_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB201_12
.LBB201_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB201_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB201_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB201_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end201:
	.size	_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc, .Lfunc_end201-_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc: // @_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB202_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB202_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB202_4
.LBB202_3:                              //   in Loop: Header=BB202_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB202_8
.LBB202_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB202_3
// %bb.5:                               //   in Loop: Header=BB202_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB202_3
.LBB202_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB202_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB202_7
.LBB202_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB202_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB202_12
.LBB202_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB202_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB202_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB202_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end202:
	.size	_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc, .Lfunc_end202-_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc: // @_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB203_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB203_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB203_4
.LBB203_3:                              //   in Loop: Header=BB203_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB203_8
.LBB203_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB203_3
// %bb.5:                               //   in Loop: Header=BB203_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB203_3
.LBB203_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB203_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB203_7
.LBB203_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB203_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB203_12
.LBB203_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB203_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB203_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB203_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end203:
	.size	_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc, .Lfunc_end203-_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc: // @_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB204_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB204_4
.LBB204_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB204_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB204_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB204_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end204:
	.size	_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc, .Lfunc_end204-_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc: // @_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB205_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB205_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB205_4
.LBB205_3:                              //   in Loop: Header=BB205_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB205_8
.LBB205_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB205_3
// %bb.5:                               //   in Loop: Header=BB205_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB205_3
.LBB205_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB205_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB205_7
.LBB205_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB205_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB205_12
.LBB205_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB205_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB205_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB205_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end205:
	.size	_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc, .Lfunc_end205-_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc: // @_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB206_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB206_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB206_4
.LBB206_3:                              //   in Loop: Header=BB206_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB206_8
.LBB206_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB206_3
// %bb.5:                               //   in Loop: Header=BB206_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB206_3
.LBB206_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB206_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB206_7
.LBB206_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB206_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB206_12
.LBB206_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB206_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB206_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB206_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end206:
	.size	_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc, .Lfunc_end206-_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc: // @_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB207_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB207_4
.LBB207_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB207_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB207_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB207_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end207:
	.size	_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc, .Lfunc_end207-_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc: // @_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB208_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB208_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB208_4
.LBB208_3:                              //   in Loop: Header=BB208_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB208_8
.LBB208_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB208_3
// %bb.5:                               //   in Loop: Header=BB208_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB208_3
.LBB208_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB208_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB208_7
.LBB208_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB208_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB208_12
.LBB208_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB208_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB208_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB208_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end208:
	.size	_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc, .Lfunc_end208-_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc: // @_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB209_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB209_4
.LBB209_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB209_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB209_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB209_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end209:
	.size	_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc, .Lfunc_end209-_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc: // @_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB210_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB210_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB210_4
.LBB210_3:                              //   in Loop: Header=BB210_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB210_8
.LBB210_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB210_3
// %bb.5:                               //   in Loop: Header=BB210_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB210_3
.LBB210_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB210_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB210_7
.LBB210_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB210_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB210_12
.LBB210_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB210_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB210_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB210_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end210:
	.size	_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc, .Lfunc_end210-_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc: // @_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB211_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB211_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB211_4
.LBB211_3:                              //   in Loop: Header=BB211_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB211_8
.LBB211_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB211_3
// %bb.5:                               //   in Loop: Header=BB211_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB211_3
.LBB211_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB211_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB211_7
.LBB211_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB211_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB211_12
.LBB211_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB211_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB211_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB211_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end211:
	.size	_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc, .Lfunc_end211-_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc // -- Begin function _Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc,@function
_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc: // @_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB212_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB212_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB212_4
.LBB212_3:                              //   in Loop: Header=BB212_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB212_8
.LBB212_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB212_3
// %bb.5:                               //   in Loop: Header=BB212_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB212_3
.LBB212_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB212_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB212_7
.LBB212_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB212_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB212_12
.LBB212_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB212_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB212_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB212_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end212:
	.size	_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc, .Lfunc_end212-_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl19custom_constant_addIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc // -- Begin function _Z13test_constantIl19custom_constant_addIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc,@function
_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc: // @_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB213_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB213_13
// %bb.2:
	mov	w9, #10                         // =0xa
	mov	w27, w20
	mov	w22, #14464                     // =0x3880
	dup	v4.2d, x9
	mov	w26, wzr
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	movk	w22, #1, lsl #16
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB213_4
.LBB213_3:                              //   in Loop: Header=BB213_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB213_17
.LBB213_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB213_7 Depth 2
                                        //     Child Loop BB213_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB213_6
// %bb.5:                               //   in Loop: Header=BB213_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB213_9
.LBB213_6:                              // %.preheader2
                                        //   in Loop: Header=BB213_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB213_7:                              //   Parent Loop BB213_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB213_7
// %bb.8:                               //   in Loop: Header=BB213_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB213_11
.LBB213_9:                              // %.preheader
                                        //   in Loop: Header=BB213_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB213_10:                             //   Parent Loop BB213_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	add	x9, x9, #10
	b.ne	.LBB213_10
.LBB213_11:                             //   in Loop: Header=BB213_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB213_3
// %bb.12:                              //   in Loop: Header=BB213_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB213_3
.LBB213_13:
	adrp	x21, init_value
	mov	x23, #-14464                    // =0xffffffffffffc780
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	x23, #65534, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB213_15
.LBB213_14:                             //   in Loop: Header=BB213_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB213_17
.LBB213_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB213_14
// %bb.16:                              //   in Loop: Header=BB213_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB213_14
.LBB213_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB213_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB213_21
.LBB213_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB213_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB213_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB213_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end213:
	.size	_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc, .Lfunc_end213-_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc // -- Begin function _Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc,@function
_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc: // @_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB214_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB214_13
// %bb.2:
	mov	w9, #10                         // =0xa
	mov	w27, w20
	mov	w22, #14464                     // =0x3880
	dup	v4.2d, x9
	mov	w26, wzr
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	movk	w22, #1, lsl #16
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB214_4
.LBB214_3:                              //   in Loop: Header=BB214_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB214_17
.LBB214_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB214_7 Depth 2
                                        //     Child Loop BB214_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB214_6
// %bb.5:                               //   in Loop: Header=BB214_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB214_9
.LBB214_6:                              // %.preheader2
                                        //   in Loop: Header=BB214_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB214_7:                              //   Parent Loop BB214_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB214_7
// %bb.8:                               //   in Loop: Header=BB214_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB214_11
.LBB214_9:                              // %.preheader
                                        //   in Loop: Header=BB214_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB214_10:                             //   Parent Loop BB214_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	add	x9, x9, #10
	b.ne	.LBB214_10
.LBB214_11:                             //   in Loop: Header=BB214_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB214_3
// %bb.12:                              //   in Loop: Header=BB214_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB214_3
.LBB214_13:
	adrp	x21, init_value
	mov	x23, #-14464                    // =0xffffffffffffc780
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	x23, #65534, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB214_15
.LBB214_14:                             //   in Loop: Header=BB214_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB214_17
.LBB214_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB214_14
// %bb.16:                              //   in Loop: Header=BB214_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB214_14
.LBB214_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB214_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB214_21
.LBB214_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB214_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB214_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB214_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end214:
	.size	_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc, .Lfunc_end214-_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl19custom_constant_subIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc // -- Begin function _Z13test_constantIl19custom_constant_subIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc,@function
_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc: // @_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB215_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB215_13
// %bb.2:
	mov	x9, #-10                        // =0xfffffffffffffff6
	mov	w27, w20
	mov	x22, #-14464                    // =0xffffffffffffc780
	dup	v4.2d, x9
	mov	w26, wzr
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	movk	x22, #65534, lsl #16
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB215_4
.LBB215_3:                              //   in Loop: Header=BB215_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB215_17
.LBB215_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB215_7 Depth 2
                                        //     Child Loop BB215_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB215_6
// %bb.5:                               //   in Loop: Header=BB215_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB215_9
.LBB215_6:                              // %.preheader2
                                        //   in Loop: Header=BB215_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB215_7:                              //   Parent Loop BB215_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB215_7
// %bb.8:                               //   in Loop: Header=BB215_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB215_11
.LBB215_9:                              // %.preheader
                                        //   in Loop: Header=BB215_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB215_10:                             //   Parent Loop BB215_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	sub	x9, x9, #10
	b.ne	.LBB215_10
.LBB215_11:                             //   in Loop: Header=BB215_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB215_3
// %bb.12:                              //   in Loop: Header=BB215_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB215_3
.LBB215_13:
	adrp	x21, init_value
	mov	w23, #14464                     // =0x3880
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB215_15
.LBB215_14:                             //   in Loop: Header=BB215_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB215_17
.LBB215_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB215_14
// %bb.16:                              //   in Loop: Header=BB215_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB215_14
.LBB215_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB215_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB215_21
.LBB215_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB215_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB215_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB215_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end215:
	.size	_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc, .Lfunc_end215-_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc // -- Begin function _Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc,@function
_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc: // @_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB216_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB216_13
// %bb.2:
	mov	x9, #-10                        // =0xfffffffffffffff6
	mov	w27, w20
	mov	x22, #-14464                    // =0xffffffffffffc780
	dup	v4.2d, x9
	mov	w26, wzr
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	movk	x22, #65534, lsl #16
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB216_4
.LBB216_3:                              //   in Loop: Header=BB216_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB216_17
.LBB216_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB216_7 Depth 2
                                        //     Child Loop BB216_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB216_6
// %bb.5:                               //   in Loop: Header=BB216_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB216_9
.LBB216_6:                              // %.preheader2
                                        //   in Loop: Header=BB216_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB216_7:                              //   Parent Loop BB216_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB216_7
// %bb.8:                               //   in Loop: Header=BB216_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB216_11
.LBB216_9:                              // %.preheader
                                        //   in Loop: Header=BB216_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB216_10:                             //   Parent Loop BB216_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	sub	x9, x9, #10
	b.ne	.LBB216_10
.LBB216_11:                             //   in Loop: Header=BB216_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB216_3
// %bb.12:                              //   in Loop: Header=BB216_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB216_3
.LBB216_13:
	adrp	x21, init_value
	mov	w23, #14464                     // =0x3880
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB216_15
.LBB216_14:                             //   in Loop: Header=BB216_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB216_17
.LBB216_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB216_14
// %bb.16:                              //   in Loop: Header=BB216_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB216_14
.LBB216_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB216_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB216_21
.LBB216_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB216_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB216_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB216_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end216:
	.size	_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc, .Lfunc_end216-_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc // -- Begin function _Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc,@function
_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc: // @_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB217_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB217_13
// %bb.2:
	mov	w27, w20
	mov	w23, #42496                     // =0xa600
	mov	w26, wzr
	add	x28, x21, #8
	mov	w24, #120                       // =0x78
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffe
	movk	w23, #14, lsl #16
	b	.LBB217_4
.LBB217_3:                              //   in Loop: Header=BB217_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB217_17
.LBB217_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB217_7 Depth 2
                                        //     Child Loop BB217_10 Depth 2
	cmp	w20, #1
	b.ne	.LBB217_6
// %bb.5:                               //   in Loop: Header=BB217_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB217_9
.LBB217_6:                              // %.preheader2
                                        //   in Loop: Header=BB217_4 Depth=1
	mov	x9, xzr
	mov	x10, xzr
	mov	x11, x28
	mov	x12, x22
.LBB217_7:                              //   Parent Loop BB217_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x13, x14, [x11, #-8]
	subs	x12, x12, #2
	add	x11, x11, #16
	madd	x9, x13, x24, x9
	madd	x10, x14, x24, x10
	b.ne	.LBB217_7
// %bb.8:                               //   in Loop: Header=BB217_4 Depth=1
	cmp	x22, x27
	add	x9, x10, x9
	mov	x11, x22
	b.eq	.LBB217_11
.LBB217_9:                              // %.preheader
                                        //   in Loop: Header=BB217_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB217_10:                             //   Parent Loop BB217_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	madd	x9, x12, x24, x9
	b.ne	.LBB217_10
.LBB217_11:                             //   in Loop: Header=BB217_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB217_3
// %bb.12:                              //   in Loop: Header=BB217_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB217_3
.LBB217_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB217_15
.LBB217_14:                             //   in Loop: Header=BB217_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB217_17
.LBB217_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cbz	x9, .LBB217_14
// %bb.16:                              //   in Loop: Header=BB217_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB217_14
.LBB217_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB217_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB217_21
.LBB217_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB217_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB217_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB217_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end217:
	.size	_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc, .Lfunc_end217-_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc // -- Begin function _Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc,@function
_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc: // @_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB218_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB218_13
// %bb.2:
	mov	w27, w20
	mov	w23, #42496                     // =0xa600
	mov	w26, wzr
	add	x28, x21, #8
	mov	w24, #120                       // =0x78
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffe
	movk	w23, #14, lsl #16
	b	.LBB218_4
.LBB218_3:                              //   in Loop: Header=BB218_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB218_17
.LBB218_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB218_7 Depth 2
                                        //     Child Loop BB218_10 Depth 2
	cmp	w20, #1
	b.ne	.LBB218_6
// %bb.5:                               //   in Loop: Header=BB218_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB218_9
.LBB218_6:                              // %.preheader2
                                        //   in Loop: Header=BB218_4 Depth=1
	mov	x9, xzr
	mov	x10, xzr
	mov	x11, x28
	mov	x12, x22
.LBB218_7:                              //   Parent Loop BB218_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x13, x14, [x11, #-8]
	subs	x12, x12, #2
	add	x11, x11, #16
	madd	x9, x13, x24, x9
	madd	x10, x14, x24, x10
	b.ne	.LBB218_7
// %bb.8:                               //   in Loop: Header=BB218_4 Depth=1
	cmp	x22, x27
	add	x9, x10, x9
	mov	x11, x22
	b.eq	.LBB218_11
.LBB218_9:                              // %.preheader
                                        //   in Loop: Header=BB218_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB218_10:                             //   Parent Loop BB218_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	madd	x9, x12, x24, x9
	b.ne	.LBB218_10
.LBB218_11:                             //   in Loop: Header=BB218_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB218_3
// %bb.12:                              //   in Loop: Header=BB218_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB218_3
.LBB218_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB218_15
.LBB218_14:                             //   in Loop: Header=BB218_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB218_17
.LBB218_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cbz	x9, .LBB218_14
// %bb.16:                              //   in Loop: Header=BB218_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB218_14
.LBB218_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB218_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB218_21
.LBB218_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB218_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB218_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB218_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end218:
	.size	_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc, .Lfunc_end218-_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc // -- Begin function _Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc,@function
_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc: // @_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB219_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB219_13
// %bb.2:
	mov	w9, #120                        // =0x78
	mov	w27, w20
	mov	w22, #42496                     // =0xa600
	dup	v4.2d, x9
	mov	w26, wzr
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	movk	w22, #14, lsl #16
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB219_4
.LBB219_3:                              //   in Loop: Header=BB219_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB219_17
.LBB219_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB219_7 Depth 2
                                        //     Child Loop BB219_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB219_6
// %bb.5:                               //   in Loop: Header=BB219_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB219_9
.LBB219_6:                              // %.preheader2
                                        //   in Loop: Header=BB219_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB219_7:                              //   Parent Loop BB219_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB219_7
// %bb.8:                               //   in Loop: Header=BB219_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB219_11
.LBB219_9:                              // %.preheader
                                        //   in Loop: Header=BB219_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB219_10:                             //   Parent Loop BB219_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	add	x9, x9, #120
	b.ne	.LBB219_10
.LBB219_11:                             //   in Loop: Header=BB219_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB219_3
// %bb.12:                              //   in Loop: Header=BB219_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB219_3
.LBB219_13:
	adrp	x21, init_value
	mov	x23, #-42496                    // =0xffffffffffff5a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	x23, #65521, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB219_15
.LBB219_14:                             //   in Loop: Header=BB219_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB219_17
.LBB219_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB219_14
// %bb.16:                              //   in Loop: Header=BB219_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB219_14
.LBB219_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB219_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB219_21
.LBB219_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB219_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB219_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB219_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end219:
	.size	_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc, .Lfunc_end219-_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc // -- Begin function _Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc,@function
_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc: // @_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB220_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB220_13
// %bb.2:
	mov	w27, w20
	mov	x24, #7378697629483820646       // =0x6666666666666666
	mov	w26, wzr
	add	x28, x21, #16
	movk	x24, #26215
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffc
	mov	w23, #8000                      // =0x1f40
	b	.LBB220_4
.LBB220_3:                              //   in Loop: Header=BB220_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB220_17
.LBB220_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB220_7 Depth 2
                                        //     Child Loop BB220_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB220_6
// %bb.5:                               //   in Loop: Header=BB220_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB220_9
.LBB220_6:                              // %.preheader2
                                        //   in Loop: Header=BB220_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB220_7:                              //   Parent Loop BB220_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fmov	x11, d2
	fmov	x13, d3
	mov	x12, v2.d[1]
	mov	x14, v3.d[1]
	smulh	x11, x11, x24
	smulh	x13, x13, x24
	smulh	x12, x12, x24
	asr	x15, x11, #1
	smulh	x14, x14, x24
	asr	x16, x13, #1
	add	x11, x15, x11, lsr #63
	add	x13, x16, x13, lsr #63
	asr	x17, x12, #1
	fmov	d2, x11
	asr	x18, x14, #1
	fmov	d3, x13
	add	x12, x17, x12, lsr #63
	add	x14, x18, x14, lsr #63
	mov	v2.d[1], x12
	mov	v3.d[1], x14
	add	v0.2d, v2.2d, v0.2d
	add	v1.2d, v3.2d, v1.2d
	b.ne	.LBB220_7
// %bb.8:                               //   in Loop: Header=BB220_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x22, x27
	mov	x11, x22
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB220_11
.LBB220_9:                              // %.preheader
                                        //   in Loop: Header=BB220_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB220_10:                             //   Parent Loop BB220_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	smulh	x12, x12, x24
	asr	x13, x12, #1
	add	x12, x13, x12, lsr #63
	add	x9, x12, x9
	b.ne	.LBB220_10
.LBB220_11:                             //   in Loop: Header=BB220_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	smulh	x10, x10, x24
	lsr	x11, x10, #1
	add	x10, x11, x10, lsr #63
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB220_3
// %bb.12:                              //   in Loop: Header=BB220_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB220_3
.LBB220_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB220_15
.LBB220_14:                             //   in Loop: Header=BB220_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB220_17
.LBB220_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	add	x9, x9, #4
	cmp	x9, #9
	b.lo	.LBB220_14
// %bb.16:                              //   in Loop: Header=BB220_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB220_14
.LBB220_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB220_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB220_21
.LBB220_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB220_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB220_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB220_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end220:
	.size	_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc, .Lfunc_end220-_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc // -- Begin function _Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc,@function
_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc: // @_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB221_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB221_13
// %bb.2:
	mov	w27, w20
	mov	x24, #-8608480567731124088      // =0x8888888888888888
	mov	w26, wzr
	add	x28, x21, #16
	movk	x24, #34953
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffc
	mov	w23, #8000                      // =0x1f40
	b	.LBB221_4
.LBB221_3:                              //   in Loop: Header=BB221_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB221_17
.LBB221_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB221_7 Depth 2
                                        //     Child Loop BB221_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB221_6
// %bb.5:                               //   in Loop: Header=BB221_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB221_9
.LBB221_6:                              // %.preheader2
                                        //   in Loop: Header=BB221_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB221_7:                              //   Parent Loop BB221_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fmov	x11, d2
	fmov	x14, d3
	mov	x12, v2.d[1]
	mov	x15, v3.d[1]
	smulh	x13, x11, x24
	smulh	x16, x14, x24
	smulh	x17, x12, x24
	add	x11, x13, x11
	smulh	x18, x15, x24
	add	x13, x16, x14
	asr	x14, x11, #6
	asr	x16, x13, #6
	add	x12, x17, x12
	add	x11, x14, x11, lsr #63
	add	x13, x16, x13, lsr #63
	asr	x17, x12, #6
	add	x15, x18, x15
	fmov	d2, x11
	asr	x18, x15, #6
	fmov	d3, x13
	add	x12, x17, x12, lsr #63
	add	x14, x18, x15, lsr #63
	mov	v2.d[1], x12
	mov	v3.d[1], x14
	add	v0.2d, v2.2d, v0.2d
	add	v1.2d, v3.2d, v1.2d
	b.ne	.LBB221_7
// %bb.8:                               //   in Loop: Header=BB221_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x22, x27
	mov	x11, x22
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB221_11
.LBB221_9:                              // %.preheader
                                        //   in Loop: Header=BB221_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB221_10:                             //   Parent Loop BB221_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	smulh	x13, x12, x24
	add	x12, x13, x12
	asr	x13, x12, #6
	add	x12, x13, x12, lsr #63
	add	x9, x12, x9
	b.ne	.LBB221_10
.LBB221_11:                             //   in Loop: Header=BB221_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	smulh	x11, x10, x24
	add	x10, x11, x10
	lsr	x11, x10, #6
	add	x10, x11, x10, lsr #63
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB221_3
// %bb.12:                              //   in Loop: Header=BB221_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB221_3
.LBB221_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB221_15
.LBB221_14:                             //   in Loop: Header=BB221_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB221_17
.LBB221_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	add	x9, x9, #119
	cmp	x9, #239
	b.lo	.LBB221_14
// %bb.16:                              //   in Loop: Header=BB221_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB221_14
.LBB221_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB221_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB221_21
.LBB221_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB221_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB221_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB221_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end221:
	.size	_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc, .Lfunc_end221-_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc // -- Begin function _Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc,@function
_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc: // @_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB222_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB222_13
// %bb.2:
	mov	w9, #2                          // =0x2
	mov	w27, w20
	mov	w26, wzr
	dup	v4.2d, x9
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w22, #16000                     // =0x3e80
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB222_4
.LBB222_3:                              //   in Loop: Header=BB222_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB222_17
.LBB222_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB222_7 Depth 2
                                        //     Child Loop BB222_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB222_6
// %bb.5:                               //   in Loop: Header=BB222_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB222_9
.LBB222_6:                              // %.preheader2
                                        //   in Loop: Header=BB222_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB222_7:                              //   Parent Loop BB222_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB222_7
// %bb.8:                               //   in Loop: Header=BB222_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB222_11
.LBB222_9:                              // %.preheader
                                        //   in Loop: Header=BB222_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB222_10:                             //   Parent Loop BB222_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	add	x9, x9, #2
	b.ne	.LBB222_10
.LBB222_11:                             //   in Loop: Header=BB222_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB222_3
// %bb.12:                              //   in Loop: Header=BB222_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB222_3
.LBB222_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	x23, #-16000                    // =0xffffffffffffc180
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB222_15
.LBB222_14:                             //   in Loop: Header=BB222_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB222_17
.LBB222_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB222_14
// %bb.16:                              //   in Loop: Header=BB222_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB222_14
.LBB222_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB222_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB222_21
.LBB222_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB222_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB222_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB222_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end222:
	.size	_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc, .Lfunc_end222-_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc // -- Begin function _Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc,@function
_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc: // @_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB223_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB223_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	adrp	x24, init_value
	and	x19, x27, #0x7ffffffc
	mov	w22, #8000                      // =0x1f40
	b	.LBB223_4
.LBB223_3:                              //   in Loop: Header=BB223_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB223_17
.LBB223_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB223_7 Depth 2
                                        //     Child Loop BB223_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB223_6
// %bb.5:                               //   in Loop: Header=BB223_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB223_9
.LBB223_6:                              // %.preheader2
                                        //   in Loop: Header=BB223_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x19
.LBB223_7:                              //   Parent Loop BB223_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v2.2d, v0.2d
	add	v1.2d, v3.2d, v1.2d
	b.ne	.LBB223_7
// %bb.8:                               //   in Loop: Header=BB223_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x19, x27
	mov	x11, x19
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB223_11
.LBB223_9:                              // %.preheader
                                        //   in Loop: Header=BB223_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB223_10:                             //   Parent Loop BB223_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x12, x9
	b.ne	.LBB223_10
.LBB223_11:                             //   in Loop: Header=BB223_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	x10, d0
	mul	x10, x10, x22
	cmp	x9, x10
	b.eq	.LBB223_3
// %bb.12:                              //   in Loop: Header=BB223_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB223_3
.LBB223_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB223_15
.LBB223_14:                             //   in Loop: Header=BB223_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB223_17
.LBB223_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cbz	x9, .LBB223_14
// %bb.16:                              //   in Loop: Header=BB223_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB223_14
.LBB223_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB223_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB223_21
.LBB223_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB223_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB223_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB223_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end223:
	.size	_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc, .Lfunc_end223-_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl19custom_constant_andIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc // -- Begin function _Z13test_constantIl19custom_constant_andIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc,@function
_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc: // @_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB224_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB224_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	mov	w24, #10                        // =0xa
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffc
	mov	w23, #8000                      // =0x1f40
	b	.LBB224_4
.LBB224_3:                              //   in Loop: Header=BB224_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB224_17
.LBB224_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB224_7 Depth 2
                                        //     Child Loop BB224_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB224_6
// %bb.5:                               //   in Loop: Header=BB224_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB224_9
.LBB224_6:                              // %.preheader2
                                        //   in Loop: Header=BB224_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB224_7:                              //   Parent Loop BB224_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	dup	v2.2d, x24
	ldp	q3, q4, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	and	v3.16b, v3.16b, v2.16b
	and	v2.16b, v4.16b, v2.16b
	add	v0.2d, v3.2d, v0.2d
	add	v1.2d, v2.2d, v1.2d
	b.ne	.LBB224_7
// %bb.8:                               //   in Loop: Header=BB224_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x22, x27
	mov	x11, x22
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB224_11
.LBB224_9:                              // %.preheader
                                        //   in Loop: Header=BB224_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB224_10:                             //   Parent Loop BB224_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	and	x12, x12, x24
	add	x9, x12, x9
	b.ne	.LBB224_10
.LBB224_11:                             //   in Loop: Header=BB224_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	and	x10, x10, x24
	umull	x10, w10, w23
	cmp	x9, x10
	b.eq	.LBB224_3
// %bb.12:                              //   in Loop: Header=BB224_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB224_3
.LBB224_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #10                        // =0xa
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB224_15
.LBB224_14:                             //   in Loop: Header=BB224_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB224_17
.LBB224_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	tst	x9, x22
	b.eq	.LBB224_14
// %bb.16:                              //   in Loop: Header=BB224_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB224_14
.LBB224_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB224_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB224_21
.LBB224_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB224_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB224_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB224_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end224:
	.size	_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc, .Lfunc_end224-_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc // -- Begin function _Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc,@function
_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc: // @_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB225_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB225_13
// %bb.2:
	mov	w9, #14                         // =0xe
	mov	w27, w20
	mov	w26, wzr
	dup	v4.2d, x9
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB225_4
.LBB225_3:                              //   in Loop: Header=BB225_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB225_17
.LBB225_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB225_7 Depth 2
                                        //     Child Loop BB225_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB225_6
// %bb.5:                               //   in Loop: Header=BB225_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB225_9
.LBB225_6:                              // %.preheader2
                                        //   in Loop: Header=BB225_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB225_7:                              //   Parent Loop BB225_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.2d, v2.2d, v0.2d
	add	v1.2d, v3.2d, v1.2d
	b.ne	.LBB225_7
// %bb.8:                               //   in Loop: Header=BB225_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB225_11
.LBB225_9:                              // %.preheader
                                        //   in Loop: Header=BB225_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB225_10:                             //   Parent Loop BB225_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	and	x12, x12, #0xe
	add	x9, x12, x9
	b.ne	.LBB225_10
.LBB225_11:                             //   in Loop: Header=BB225_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	and	x10, x10, #0xe
	umull	x10, w10, w22
	cmp	x9, x10
	b.eq	.LBB225_3
// %bb.12:                              //   in Loop: Header=BB225_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB225_3
.LBB225_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB225_15
.LBB225_14:                             //   in Loop: Header=BB225_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB225_17
.LBB225_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	tst	x9, #0xe
	b.eq	.LBB225_14
// %bb.16:                              //   in Loop: Header=BB225_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB225_14
.LBB225_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB225_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB225_21
.LBB225_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB225_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB225_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB225_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end225:
	.size	_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc, .Lfunc_end225-_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl18custom_constant_orIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc // -- Begin function _Z13test_constantIl18custom_constant_orIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc,@function
_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc: // @_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB226_15
// %bb.1:
	cmp	w20, #0
	b.le	.LBB226_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	mov	w24, #10                        // =0xa
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffc
	mov	w23, #8000                      // =0x1f40
	b	.LBB226_4
.LBB226_3:                              //   in Loop: Header=BB226_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB226_15
.LBB226_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB226_7 Depth 2
                                        //     Child Loop BB226_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB226_6
// %bb.5:                               //   in Loop: Header=BB226_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB226_9
.LBB226_6:                              // %.preheader2
                                        //   in Loop: Header=BB226_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB226_7:                              //   Parent Loop BB226_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	dup	v2.2d, x24
	ldp	q3, q4, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	orr	v3.16b, v3.16b, v2.16b
	orr	v2.16b, v4.16b, v2.16b
	add	v0.2d, v3.2d, v0.2d
	add	v1.2d, v2.2d, v1.2d
	b.ne	.LBB226_7
// %bb.8:                               //   in Loop: Header=BB226_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x22, x27
	mov	x11, x22
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB226_11
.LBB226_9:                              // %.preheader
                                        //   in Loop: Header=BB226_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB226_10:                             //   Parent Loop BB226_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	orr	x12, x12, x24
	add	x9, x12, x9
	b.ne	.LBB226_10
.LBB226_11:                             //   in Loop: Header=BB226_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	orr	x10, x10, x24
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB226_3
// %bb.12:                              //   in Loop: Header=BB226_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB226_3
.LBB226_13:                             // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB226_14:                             // =>This Inner Loop Header: Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB226_14
.LBB226_15:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB226_17
// %bb.16:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB226_19
.LBB226_17:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB226_20
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
.LBB226_19:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB226_20:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end226:
	.size	_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc, .Lfunc_end226-_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc // -- Begin function _Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc,@function
_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc: // @_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB227_15
// %bb.1:
	cmp	w20, #0
	b.le	.LBB227_13
// %bb.2:
	mov	w9, #63                         // =0x3f
	mov	w27, w20
	mov	w26, wzr
	dup	v4.2d, x9
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB227_4
.LBB227_3:                              //   in Loop: Header=BB227_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB227_15
.LBB227_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB227_7 Depth 2
                                        //     Child Loop BB227_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB227_6
// %bb.5:                               //   in Loop: Header=BB227_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB227_9
.LBB227_6:                              // %.preheader2
                                        //   in Loop: Header=BB227_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB227_7:                              //   Parent Loop BB227_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	orr	v2.16b, v2.16b, v4.16b
	orr	v3.16b, v3.16b, v4.16b
	add	v0.2d, v2.2d, v0.2d
	add	v1.2d, v3.2d, v1.2d
	b.ne	.LBB227_7
// %bb.8:                               //   in Loop: Header=BB227_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB227_11
.LBB227_9:                              // %.preheader
                                        //   in Loop: Header=BB227_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB227_10:                             //   Parent Loop BB227_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	orr	x12, x12, #0x3f
	add	x9, x12, x9
	b.ne	.LBB227_10
.LBB227_11:                             //   in Loop: Header=BB227_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	orr	x10, x10, #0x3f
	mul	x10, x10, x22
	cmp	x9, x10
	b.eq	.LBB227_3
// %bb.12:                              //   in Loop: Header=BB227_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB227_3
.LBB227_13:                             // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB227_14:                             // =>This Inner Loop Header: Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB227_14
.LBB227_15:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB227_17
// %bb.16:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB227_19
.LBB227_17:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB227_20
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
.LBB227_19:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB227_20:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end227:
	.size	_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc, .Lfunc_end227-_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc // -- Begin function _Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc,@function
_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc: // @_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB228_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB228_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	mov	w24, #10                        // =0xa
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffc
	mov	w23, #8000                      // =0x1f40
	b	.LBB228_4
.LBB228_3:                              //   in Loop: Header=BB228_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB228_17
.LBB228_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB228_7 Depth 2
                                        //     Child Loop BB228_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB228_6
// %bb.5:                               //   in Loop: Header=BB228_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB228_9
.LBB228_6:                              // %.preheader2
                                        //   in Loop: Header=BB228_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB228_7:                              //   Parent Loop BB228_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	dup	v2.2d, x24
	ldp	q3, q4, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	eor	v3.16b, v3.16b, v2.16b
	eor	v2.16b, v4.16b, v2.16b
	add	v0.2d, v3.2d, v0.2d
	add	v1.2d, v2.2d, v1.2d
	b.ne	.LBB228_7
// %bb.8:                               //   in Loop: Header=BB228_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x22, x27
	mov	x11, x22
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB228_11
.LBB228_9:                              // %.preheader
                                        //   in Loop: Header=BB228_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB228_10:                             //   Parent Loop BB228_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	eor	x12, x12, x24
	add	x9, x12, x9
	b.ne	.LBB228_10
.LBB228_11:                             //   in Loop: Header=BB228_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	eor	x10, x10, x24
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB228_3
// %bb.12:                              //   in Loop: Header=BB228_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB228_3
.LBB228_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB228_15
.LBB228_14:                             //   in Loop: Header=BB228_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB228_17
.LBB228_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cmp	x9, #10
	b.eq	.LBB228_14
// %bb.16:                              //   in Loop: Header=BB228_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB228_14
.LBB228_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB228_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB228_21
.LBB228_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB228_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB228_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB228_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end228:
	.size	_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc, .Lfunc_end228-_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc,"axG",@progbits,_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc,comdat
	.weak	_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc // -- Begin function _Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc,@function
_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc: // @_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB229_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB229_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	mov	w24, #49                        // =0x31
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffc
	mov	w23, #8000                      // =0x1f40
	b	.LBB229_4
.LBB229_3:                              //   in Loop: Header=BB229_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB229_17
.LBB229_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB229_7 Depth 2
                                        //     Child Loop BB229_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB229_6
// %bb.5:                               //   in Loop: Header=BB229_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB229_9
.LBB229_6:                              // %.preheader2
                                        //   in Loop: Header=BB229_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB229_7:                              //   Parent Loop BB229_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	dup	v2.2d, x24
	ldp	q3, q4, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	eor	v3.16b, v3.16b, v2.16b
	eor	v2.16b, v4.16b, v2.16b
	add	v0.2d, v3.2d, v0.2d
	add	v1.2d, v2.2d, v1.2d
	b.ne	.LBB229_7
// %bb.8:                               //   in Loop: Header=BB229_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x22, x27
	mov	x11, x22
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB229_11
.LBB229_9:                              // %.preheader
                                        //   in Loop: Header=BB229_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB229_10:                             //   Parent Loop BB229_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	eor	x12, x12, x24
	add	x9, x12, x9
	b.ne	.LBB229_10
.LBB229_11:                             //   in Loop: Header=BB229_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	x10, d0
	eor	x10, x10, x24
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB229_3
// %bb.12:                              //   in Loop: Header=BB229_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB229_3
.LBB229_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB229_15
.LBB229_14:                             //   in Loop: Header=BB229_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB229_17
.LBB229_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	x9, d0
	cmp	x9, #49
	b.eq	.LBB229_14
// %bb.16:                              //   in Loop: Header=BB229_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB229_14
.LBB229_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB229_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB229_21
.LBB229_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB229_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB229_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB229_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end229:
	.size	_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc, .Lfunc_end229-_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm10custom_twoImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm10custom_twoImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm10custom_twoImEEvPT_iPKc // -- Begin function _Z13test_constantIm10custom_twoImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm10custom_twoImEEvPT_iPKc,@function
_Z13test_constantIm10custom_twoImEEvPT_iPKc: // @_Z13test_constantIm10custom_twoImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB230_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB230_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB230_4
.LBB230_3:                              //   in Loop: Header=BB230_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB230_8
.LBB230_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB230_3
// %bb.5:                               //   in Loop: Header=BB230_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB230_3
.LBB230_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB230_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB230_7
.LBB230_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB230_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB230_12
.LBB230_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB230_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB230_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB230_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end230:
	.size	_Z13test_constantIm10custom_twoImEEvPT_iPKc, .Lfunc_end230-_Z13test_constantIm10custom_twoImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm20custom_add_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm20custom_add_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc,@function
_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc: // @_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB231_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB231_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB231_4
.LBB231_3:                              //   in Loop: Header=BB231_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB231_8
.LBB231_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB231_3
// %bb.5:                               //   in Loop: Header=BB231_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB231_3
.LBB231_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB231_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB231_7
.LBB231_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB231_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB231_12
.LBB231_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB231_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB231_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB231_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end231:
	.size	_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc, .Lfunc_end231-_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc,@function
_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc: // @_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB232_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB232_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB232_4
.LBB232_3:                              //   in Loop: Header=BB232_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB232_8
.LBB232_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB232_3
// %bb.5:                               //   in Loop: Header=BB232_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB232_3
.LBB232_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB232_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB232_7
.LBB232_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB232_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB232_12
.LBB232_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB232_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB232_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB232_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end232:
	.size	_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc, .Lfunc_end232-_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc,@function
_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc: // @_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB233_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB233_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB233_4
.LBB233_3:                              //   in Loop: Header=BB233_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB233_8
.LBB233_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB233_3
// %bb.5:                               //   in Loop: Header=BB233_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB233_3
.LBB233_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB233_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB233_7
.LBB233_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB233_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB233_12
.LBB233_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB233_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB233_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB233_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end233:
	.size	_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc, .Lfunc_end233-_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc,@function
_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc: // @_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB234_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB234_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB234_4
.LBB234_3:                              //   in Loop: Header=BB234_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB234_8
.LBB234_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB234_3
// %bb.5:                               //   in Loop: Header=BB234_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB234_3
.LBB234_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB234_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB234_7
.LBB234_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB234_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB234_12
.LBB234_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB234_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB234_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB234_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end234:
	.size	_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc, .Lfunc_end234-_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc,@function
_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc: // @_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB235_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB235_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB235_4
.LBB235_3:                              //   in Loop: Header=BB235_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB235_8
.LBB235_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB235_3
// %bb.5:                               //   in Loop: Header=BB235_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB235_3
.LBB235_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB235_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB235_7
.LBB235_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB235_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB235_12
.LBB235_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB235_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB235_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB235_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end235:
	.size	_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc, .Lfunc_end235-_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc,@function
_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc: // @_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB236_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB236_4
.LBB236_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB236_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB236_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB236_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end236:
	.size	_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc, .Lfunc_end236-_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc,@function
_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc: // @_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB237_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB237_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB237_4
.LBB237_3:                              //   in Loop: Header=BB237_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB237_8
.LBB237_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB237_3
// %bb.5:                               //   in Loop: Header=BB237_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB237_3
.LBB237_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB237_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB237_7
.LBB237_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB237_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB237_12
.LBB237_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB237_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB237_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB237_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end237:
	.size	_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc, .Lfunc_end237-_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc,@function
_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc: // @_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB238_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB238_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB238_4
.LBB238_3:                              //   in Loop: Header=BB238_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB238_8
.LBB238_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB238_3
// %bb.5:                               //   in Loop: Header=BB238_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB238_3
.LBB238_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB238_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB238_7
.LBB238_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB238_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB238_12
.LBB238_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB238_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB238_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB238_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end238:
	.size	_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc, .Lfunc_end238-_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc,@function
_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc: // @_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB239_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB239_4
.LBB239_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB239_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB239_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB239_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end239:
	.size	_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc, .Lfunc_end239-_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc,@function
_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc: // @_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB240_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB240_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB240_4
.LBB240_3:                              //   in Loop: Header=BB240_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB240_8
.LBB240_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB240_3
// %bb.5:                               //   in Loop: Header=BB240_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB240_3
.LBB240_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB240_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB240_7
.LBB240_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB240_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB240_12
.LBB240_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB240_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB240_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB240_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end240:
	.size	_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc, .Lfunc_end240-_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc,@function
_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc: // @_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x24, x23, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	.cfi_remember_state
	mov	x19, x2
	bl	clock
	adrp	x21, start_time
	str	x0, [x21, :lo12:start_time]
	bl	clock
	adrp	x24, results
	adrp	x23, allocated_results
	mov	x20, x0
	ldr	x0, [x24, :lo12:results]
	ldr	x22, [x21, :lo12:start_time]
	ldr	w9, [x23, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x21, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB241_2
// %bb.1:
	ldr	w8, [x21, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB241_4
.LBB241_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x23, :lo12:allocated_results]
	bl	realloc
	str	x0, [x24, :lo12:results]
	cbz	x0, .LBB241_5
// %bb.3:
	ldr	w8, [x21, :lo12:current_test]
.LBB241_4:
	sub	x9, x20, x22
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x21, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB241_5:
	.cfi_restore_state
	ldr	w1, [x23, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end241:
	.size	_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc, .Lfunc_end241-_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm20custom_and_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm20custom_and_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc,@function
_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc: // @_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB242_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB242_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB242_4
.LBB242_3:                              //   in Loop: Header=BB242_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB242_8
.LBB242_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB242_3
// %bb.5:                               //   in Loop: Header=BB242_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB242_3
.LBB242_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB242_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB242_7
.LBB242_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB242_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB242_12
.LBB242_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB242_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB242_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB242_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end242:
	.size	_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc, .Lfunc_end242-_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm19custom_or_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm19custom_or_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc,@function
_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc: // @_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB243_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB243_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB243_4
.LBB243_3:                              //   in Loop: Header=BB243_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB243_8
.LBB243_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB243_3
// %bb.5:                               //   in Loop: Header=BB243_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB243_3
.LBB243_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB243_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB243_7
.LBB243_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB243_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB243_12
.LBB243_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB243_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB243_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB243_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end243:
	.size	_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc, .Lfunc_end243-_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc // -- Begin function _Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc,@function
_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc: // @_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-80]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 80
	stp	x26, x25, [sp, #16]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #32]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #48]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #64]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB244_8
// %bb.1:
	cmp	w20, #0
	b.le	.LBB244_6
// %bb.2:
	mov	w25, wzr
	mov	w26, #8000                      // =0x1f40
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB244_4
.LBB244_3:                              //   in Loop: Header=BB244_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB244_8
.LBB244_4:                              // =>This Inner Loop Header: Depth=1
	cmp	w20, w26
	b.eq	.LBB244_3
// %bb.5:                               //   in Loop: Header=BB244_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB244_3
.LBB244_6:                              // %.preheader
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB244_7:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB244_7
.LBB244_8:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB244_10
// %bb.9:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB244_12
.LBB244_10:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB244_13
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
.LBB244_12:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 80
	ldp	x20, x19, [sp, #64]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #48]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #32]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #80             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB244_13:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end244:
	.size	_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc, .Lfunc_end244-_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm19custom_constant_addImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm19custom_constant_addImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm19custom_constant_addImEEvPT_iPKc // -- Begin function _Z13test_constantIm19custom_constant_addImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm19custom_constant_addImEEvPT_iPKc,@function
_Z13test_constantIm19custom_constant_addImEEvPT_iPKc: // @_Z13test_constantIm19custom_constant_addImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB245_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB245_13
// %bb.2:
	mov	w9, #10                         // =0xa
	mov	w27, w20
	mov	w22, #14464                     // =0x3880
	dup	v4.2d, x9
	mov	w26, wzr
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	movk	w22, #1, lsl #16
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB245_4
.LBB245_3:                              //   in Loop: Header=BB245_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB245_17
.LBB245_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB245_7 Depth 2
                                        //     Child Loop BB245_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB245_6
// %bb.5:                               //   in Loop: Header=BB245_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB245_9
.LBB245_6:                              // %.preheader2
                                        //   in Loop: Header=BB245_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB245_7:                              //   Parent Loop BB245_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB245_7
// %bb.8:                               //   in Loop: Header=BB245_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB245_11
.LBB245_9:                              // %.preheader
                                        //   in Loop: Header=BB245_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB245_10:                             //   Parent Loop BB245_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	add	x9, x9, #10
	b.ne	.LBB245_10
.LBB245_11:                             //   in Loop: Header=BB245_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB245_3
// %bb.12:                              //   in Loop: Header=BB245_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB245_3
.LBB245_13:
	adrp	x21, init_value
	mov	x23, #-14464                    // =0xffffffffffffc780
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	x23, #65534, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB245_15
.LBB245_14:                             //   in Loop: Header=BB245_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB245_17
.LBB245_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB245_14
// %bb.16:                              //   in Loop: Header=BB245_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB245_14
.LBB245_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB245_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB245_21
.LBB245_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB245_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB245_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB245_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end245:
	.size	_Z13test_constantIm19custom_constant_addImEEvPT_iPKc, .Lfunc_end245-_Z13test_constantIm19custom_constant_addImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc // -- Begin function _Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc,@function
_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc: // @_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB246_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB246_13
// %bb.2:
	mov	w9, #10                         // =0xa
	mov	w27, w20
	mov	w22, #14464                     // =0x3880
	dup	v4.2d, x9
	mov	w26, wzr
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	movk	w22, #1, lsl #16
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB246_4
.LBB246_3:                              //   in Loop: Header=BB246_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB246_17
.LBB246_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB246_7 Depth 2
                                        //     Child Loop BB246_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB246_6
// %bb.5:                               //   in Loop: Header=BB246_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB246_9
.LBB246_6:                              // %.preheader2
                                        //   in Loop: Header=BB246_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB246_7:                              //   Parent Loop BB246_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB246_7
// %bb.8:                               //   in Loop: Header=BB246_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB246_11
.LBB246_9:                              // %.preheader
                                        //   in Loop: Header=BB246_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB246_10:                             //   Parent Loop BB246_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	add	x9, x9, #10
	b.ne	.LBB246_10
.LBB246_11:                             //   in Loop: Header=BB246_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB246_3
// %bb.12:                              //   in Loop: Header=BB246_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB246_3
.LBB246_13:
	adrp	x21, init_value
	mov	x23, #-14464                    // =0xffffffffffffc780
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	x23, #65534, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB246_15
.LBB246_14:                             //   in Loop: Header=BB246_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB246_17
.LBB246_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB246_14
// %bb.16:                              //   in Loop: Header=BB246_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB246_14
.LBB246_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB246_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB246_21
.LBB246_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB246_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB246_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB246_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end246:
	.size	_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc, .Lfunc_end246-_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm19custom_constant_subImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm19custom_constant_subImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm19custom_constant_subImEEvPT_iPKc // -- Begin function _Z13test_constantIm19custom_constant_subImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm19custom_constant_subImEEvPT_iPKc,@function
_Z13test_constantIm19custom_constant_subImEEvPT_iPKc: // @_Z13test_constantIm19custom_constant_subImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB247_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB247_13
// %bb.2:
	mov	x9, #-10                        // =0xfffffffffffffff6
	mov	w27, w20
	mov	x22, #-14464                    // =0xffffffffffffc780
	dup	v4.2d, x9
	mov	w26, wzr
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	movk	x22, #65534, lsl #16
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB247_4
.LBB247_3:                              //   in Loop: Header=BB247_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB247_17
.LBB247_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB247_7 Depth 2
                                        //     Child Loop BB247_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB247_6
// %bb.5:                               //   in Loop: Header=BB247_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB247_9
.LBB247_6:                              // %.preheader2
                                        //   in Loop: Header=BB247_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB247_7:                              //   Parent Loop BB247_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB247_7
// %bb.8:                               //   in Loop: Header=BB247_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB247_11
.LBB247_9:                              // %.preheader
                                        //   in Loop: Header=BB247_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB247_10:                             //   Parent Loop BB247_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	sub	x9, x9, #10
	b.ne	.LBB247_10
.LBB247_11:                             //   in Loop: Header=BB247_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB247_3
// %bb.12:                              //   in Loop: Header=BB247_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB247_3
.LBB247_13:
	adrp	x21, init_value
	mov	w23, #14464                     // =0x3880
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB247_15
.LBB247_14:                             //   in Loop: Header=BB247_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB247_17
.LBB247_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB247_14
// %bb.16:                              //   in Loop: Header=BB247_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB247_14
.LBB247_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB247_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB247_21
.LBB247_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB247_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB247_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB247_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end247:
	.size	_Z13test_constantIm19custom_constant_subImEEvPT_iPKc, .Lfunc_end247-_Z13test_constantIm19custom_constant_subImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc // -- Begin function _Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc,@function
_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc: // @_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB248_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB248_13
// %bb.2:
	mov	x9, #-10                        // =0xfffffffffffffff6
	mov	w27, w20
	mov	x22, #-14464                    // =0xffffffffffffc780
	dup	v4.2d, x9
	mov	w26, wzr
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	movk	x22, #65534, lsl #16
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB248_4
.LBB248_3:                              //   in Loop: Header=BB248_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB248_17
.LBB248_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB248_7 Depth 2
                                        //     Child Loop BB248_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB248_6
// %bb.5:                               //   in Loop: Header=BB248_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB248_9
.LBB248_6:                              // %.preheader2
                                        //   in Loop: Header=BB248_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB248_7:                              //   Parent Loop BB248_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB248_7
// %bb.8:                               //   in Loop: Header=BB248_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB248_11
.LBB248_9:                              // %.preheader
                                        //   in Loop: Header=BB248_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB248_10:                             //   Parent Loop BB248_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	sub	x9, x9, #10
	b.ne	.LBB248_10
.LBB248_11:                             //   in Loop: Header=BB248_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB248_3
// %bb.12:                              //   in Loop: Header=BB248_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB248_3
.LBB248_13:
	adrp	x21, init_value
	mov	w23, #14464                     // =0x3880
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	w23, #1, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB248_15
.LBB248_14:                             //   in Loop: Header=BB248_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB248_17
.LBB248_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB248_14
// %bb.16:                              //   in Loop: Header=BB248_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB248_14
.LBB248_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB248_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB248_21
.LBB248_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB248_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB248_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB248_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end248:
	.size	_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc, .Lfunc_end248-_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc // -- Begin function _Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc,@function
_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc: // @_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB249_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB249_13
// %bb.2:
	mov	w27, #42496                     // =0xa600
	mov	w28, w20
	mov	w26, wzr
	movk	w27, #14, lsl #16
	add	x24, x21, #8
	mov	w19, #120                       // =0x78
	and	x22, x28, #0x7ffffffe
	adrp	x23, init_value
	b	.LBB249_4
.LBB249_3:                              //   in Loop: Header=BB249_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB249_17
.LBB249_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB249_7 Depth 2
                                        //     Child Loop BB249_10 Depth 2
	cmp	w20, #1
	b.ne	.LBB249_6
// %bb.5:                               //   in Loop: Header=BB249_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB249_9
.LBB249_6:                              // %.preheader2
                                        //   in Loop: Header=BB249_4 Depth=1
	mov	x9, xzr
	mov	x10, xzr
	mov	x11, x24
	mov	x12, x22
.LBB249_7:                              //   Parent Loop BB249_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x13, x14, [x11, #-8]
	subs	x12, x12, #2
	add	x11, x11, #16
	madd	x9, x13, x19, x9
	madd	x10, x14, x19, x10
	b.ne	.LBB249_7
// %bb.8:                               //   in Loop: Header=BB249_4 Depth=1
	cmp	x22, x28
	add	x9, x10, x9
	mov	x11, x22
	b.eq	.LBB249_11
.LBB249_9:                              // %.preheader
                                        //   in Loop: Header=BB249_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x28, x11
.LBB249_10:                             //   Parent Loop BB249_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	madd	x9, x12, x19, x9
	b.ne	.LBB249_10
.LBB249_11:                             //   in Loop: Header=BB249_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzu	x10, d0
	mul	x10, x10, x27
	cmp	x9, x10
	b.eq	.LBB249_3
// %bb.12:                              //   in Loop: Header=BB249_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB249_3
.LBB249_13:
	adrp	x21, init_value
	mov	w22, #42496                     // =0xa600
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #14, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB249_15
.LBB249_14:                             //   in Loop: Header=BB249_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB249_17
.LBB249_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	mul	x9, x9, x22
	cbz	x9, .LBB249_14
// %bb.16:                              //   in Loop: Header=BB249_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB249_14
.LBB249_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB249_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB249_21
.LBB249_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB249_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB249_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB249_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end249:
	.size	_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc, .Lfunc_end249-_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc // -- Begin function _Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc,@function
_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc: // @_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB250_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB250_13
// %bb.2:
	mov	w27, #42496                     // =0xa600
	mov	w28, w20
	mov	w26, wzr
	movk	w27, #14, lsl #16
	add	x24, x21, #8
	mov	w19, #120                       // =0x78
	and	x22, x28, #0x7ffffffe
	adrp	x23, init_value
	b	.LBB250_4
.LBB250_3:                              //   in Loop: Header=BB250_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB250_17
.LBB250_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB250_7 Depth 2
                                        //     Child Loop BB250_10 Depth 2
	cmp	w20, #1
	b.ne	.LBB250_6
// %bb.5:                               //   in Loop: Header=BB250_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB250_9
.LBB250_6:                              // %.preheader2
                                        //   in Loop: Header=BB250_4 Depth=1
	mov	x9, xzr
	mov	x10, xzr
	mov	x11, x24
	mov	x12, x22
.LBB250_7:                              //   Parent Loop BB250_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x13, x14, [x11, #-8]
	subs	x12, x12, #2
	add	x11, x11, #16
	madd	x9, x13, x19, x9
	madd	x10, x14, x19, x10
	b.ne	.LBB250_7
// %bb.8:                               //   in Loop: Header=BB250_4 Depth=1
	cmp	x22, x28
	add	x9, x10, x9
	mov	x11, x22
	b.eq	.LBB250_11
.LBB250_9:                              // %.preheader
                                        //   in Loop: Header=BB250_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x28, x11
.LBB250_10:                             //   Parent Loop BB250_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	madd	x9, x12, x19, x9
	b.ne	.LBB250_10
.LBB250_11:                             //   in Loop: Header=BB250_4 Depth=1
	ldr	d0, [x23, :lo12:init_value]
	fcvtzu	x10, d0
	mul	x10, x10, x27
	cmp	x9, x10
	b.eq	.LBB250_3
// %bb.12:                              //   in Loop: Header=BB250_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB250_3
.LBB250_13:
	adrp	x21, init_value
	mov	w22, #42496                     // =0xa600
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #14, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB250_15
.LBB250_14:                             //   in Loop: Header=BB250_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB250_17
.LBB250_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	mul	x9, x9, x22
	cbz	x9, .LBB250_14
// %bb.16:                              //   in Loop: Header=BB250_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB250_14
.LBB250_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB250_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB250_21
.LBB250_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB250_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB250_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB250_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end250:
	.size	_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc, .Lfunc_end250-_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc // -- Begin function _Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc,@function
_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc: // @_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB251_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB251_13
// %bb.2:
	mov	w9, #120                        // =0x78
	mov	w27, w20
	mov	w22, #42496                     // =0xa600
	dup	v4.2d, x9
	mov	w26, wzr
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	movk	w22, #14, lsl #16
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB251_4
.LBB251_3:                              //   in Loop: Header=BB251_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB251_17
.LBB251_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB251_7 Depth 2
                                        //     Child Loop BB251_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB251_6
// %bb.5:                               //   in Loop: Header=BB251_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB251_9
.LBB251_6:                              // %.preheader2
                                        //   in Loop: Header=BB251_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB251_7:                              //   Parent Loop BB251_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB251_7
// %bb.8:                               //   in Loop: Header=BB251_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB251_11
.LBB251_9:                              // %.preheader
                                        //   in Loop: Header=BB251_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB251_10:                             //   Parent Loop BB251_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	add	x9, x9, #120
	b.ne	.LBB251_10
.LBB251_11:                             //   in Loop: Header=BB251_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB251_3
// %bb.12:                              //   in Loop: Header=BB251_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB251_3
.LBB251_13:
	adrp	x21, init_value
	mov	x23, #-42496                    // =0xffffffffffff5a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	mov	w22, #8000                      // =0x1f40
	movk	x23, #65521, lsl #16
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB251_15
.LBB251_14:                             //   in Loop: Header=BB251_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB251_17
.LBB251_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB251_14
// %bb.16:                              //   in Loop: Header=BB251_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB251_14
.LBB251_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB251_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB251_21
.LBB251_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB251_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB251_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB251_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end251:
	.size	_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc, .Lfunc_end251-_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm22custom_constant_divideImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc // -- Begin function _Z13test_constantIm22custom_constant_divideImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc,@function
_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc: // @_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB252_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB252_13
// %bb.2:
	mov	w27, w20
	mov	x24, #-3689348814741910324      // =0xcccccccccccccccc
	mov	w26, wzr
	add	x28, x21, #8
	movk	x24, #52429
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffe
	mov	w23, #8000                      // =0x1f40
	b	.LBB252_4
.LBB252_3:                              //   in Loop: Header=BB252_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB252_17
.LBB252_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB252_7 Depth 2
                                        //     Child Loop BB252_10 Depth 2
	cmp	w20, #1
	b.ne	.LBB252_6
// %bb.5:                               //   in Loop: Header=BB252_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB252_9
.LBB252_6:                              // %.preheader2
                                        //   in Loop: Header=BB252_4 Depth=1
	mov	x9, xzr
	mov	x10, xzr
	mov	x11, x28
	mov	x12, x22
.LBB252_7:                              //   Parent Loop BB252_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x13, x14, [x11, #-8]
	subs	x12, x12, #2
	add	x11, x11, #16
	umulh	x13, x13, x24
	umulh	x14, x14, x24
	add	x9, x9, x13, lsr #2
	add	x10, x10, x14, lsr #2
	b.ne	.LBB252_7
// %bb.8:                               //   in Loop: Header=BB252_4 Depth=1
	cmp	x22, x27
	add	x9, x10, x9
	mov	x11, x22
	b.eq	.LBB252_11
.LBB252_9:                              // %.preheader
                                        //   in Loop: Header=BB252_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB252_10:                             //   Parent Loop BB252_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	umulh	x12, x12, x24
	add	x9, x9, x12, lsr #2
	b.ne	.LBB252_10
.LBB252_11:                             //   in Loop: Header=BB252_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	umulh	x10, x10, x24
	lsr	x10, x10, #2
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB252_3
// %bb.12:                              //   in Loop: Header=BB252_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB252_3
.LBB252_13:
	adrp	x21, init_value
	mov	x22, #-3689348814741910324      // =0xcccccccccccccccc
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	x22, #52429
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB252_15
.LBB252_14:                             //   in Loop: Header=BB252_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB252_17
.LBB252_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	umulh	x9, x9, x22
	lsr	x9, x9, #2
	mul	x9, x9, x23
	cbz	x9, .LBB252_14
// %bb.16:                              //   in Loop: Header=BB252_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB252_14
.LBB252_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB252_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB252_21
.LBB252_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB252_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB252_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB252_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end252:
	.size	_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc, .Lfunc_end252-_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc // -- Begin function _Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc,@function
_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc: // @_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB253_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB253_13
// %bb.2:
	mov	w27, w20
	mov	x24, #-8608480567731124088      // =0x8888888888888888
	mov	w26, wzr
	add	x28, x21, #8
	movk	x24, #34953
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffe
	mov	w23, #8000                      // =0x1f40
	b	.LBB253_4
.LBB253_3:                              //   in Loop: Header=BB253_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB253_17
.LBB253_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB253_7 Depth 2
                                        //     Child Loop BB253_10 Depth 2
	cmp	w20, #1
	b.ne	.LBB253_6
// %bb.5:                               //   in Loop: Header=BB253_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB253_9
.LBB253_6:                              // %.preheader2
                                        //   in Loop: Header=BB253_4 Depth=1
	mov	x9, xzr
	mov	x10, xzr
	mov	x11, x28
	mov	x12, x22
.LBB253_7:                              //   Parent Loop BB253_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	x13, x14, [x11, #-8]
	subs	x12, x12, #2
	add	x11, x11, #16
	umulh	x13, x13, x24
	umulh	x14, x14, x24
	add	x9, x9, x13, lsr #6
	add	x10, x10, x14, lsr #6
	b.ne	.LBB253_7
// %bb.8:                               //   in Loop: Header=BB253_4 Depth=1
	cmp	x22, x27
	add	x9, x10, x9
	mov	x11, x22
	b.eq	.LBB253_11
.LBB253_9:                              // %.preheader
                                        //   in Loop: Header=BB253_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB253_10:                             //   Parent Loop BB253_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	umulh	x12, x12, x24
	add	x9, x9, x12, lsr #6
	b.ne	.LBB253_10
.LBB253_11:                             //   in Loop: Header=BB253_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	umulh	x10, x10, x24
	lsr	x10, x10, #6
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB253_3
// %bb.12:                              //   in Loop: Header=BB253_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB253_3
.LBB253_13:
	adrp	x21, init_value
	mov	x22, #-8608480567731124088      // =0x8888888888888888
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	x22, #34953
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB253_15
.LBB253_14:                             //   in Loop: Header=BB253_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB253_17
.LBB253_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	umulh	x9, x9, x22
	lsr	x9, x9, #6
	mul	x9, x9, x23
	cbz	x9, .LBB253_14
// %bb.16:                              //   in Loop: Header=BB253_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB253_14
.LBB253_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB253_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB253_21
.LBB253_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB253_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB253_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB253_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end253:
	.size	_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc, .Lfunc_end253-_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc // -- Begin function _Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc,@function
_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc: // @_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB254_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB254_13
// %bb.2:
	mov	w9, #2                          // =0x2
	mov	w27, w20
	mov	w26, wzr
	dup	v4.2d, x9
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w23, #8000                      // =0x1f40
	mov	w22, #16000                     // =0x3e80
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB254_4
.LBB254_3:                              //   in Loop: Header=BB254_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB254_17
.LBB254_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB254_7 Depth 2
                                        //     Child Loop BB254_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB254_6
// %bb.5:                               //   in Loop: Header=BB254_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB254_9
.LBB254_6:                              // %.preheader2
                                        //   in Loop: Header=BB254_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB254_7:                              //   Parent Loop BB254_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v0.2d, v2.2d
	add	v1.2d, v1.2d, v3.2d
	add	v0.2d, v0.2d, v4.2d
	add	v1.2d, v1.2d, v4.2d
	b.ne	.LBB254_7
// %bb.8:                               //   in Loop: Header=BB254_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB254_11
.LBB254_9:                              // %.preheader
                                        //   in Loop: Header=BB254_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB254_10:                             //   Parent Loop BB254_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x9, x12
	add	x9, x9, #2
	b.ne	.LBB254_10
.LBB254_11:                             //   in Loop: Header=BB254_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	madd	x10, x10, x23, x22
	cmp	x9, x10
	b.eq	.LBB254_3
// %bb.12:                              //   in Loop: Header=BB254_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB254_3
.LBB254_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	mov	x23, #-16000                    // =0xffffffffffffc180
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB254_15
.LBB254_14:                             //   in Loop: Header=BB254_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB254_17
.LBB254_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	mul	x9, x9, x22
	cmp	x9, x23
	b.eq	.LBB254_14
// %bb.16:                              //   in Loop: Header=BB254_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB254_14
.LBB254_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB254_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB254_21
.LBB254_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB254_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB254_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB254_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end254:
	.size	_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc, .Lfunc_end254-_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc // -- Begin function _Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc,@function
_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc: // @_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB255_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB255_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	adrp	x24, init_value
	and	x19, x27, #0x7ffffffc
	mov	w22, #8000                      // =0x1f40
	b	.LBB255_4
.LBB255_3:                              //   in Loop: Header=BB255_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB255_17
.LBB255_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB255_7 Depth 2
                                        //     Child Loop BB255_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB255_6
// %bb.5:                               //   in Loop: Header=BB255_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB255_9
.LBB255_6:                              // %.preheader2
                                        //   in Loop: Header=BB255_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x19
.LBB255_7:                              //   Parent Loop BB255_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	add	v0.2d, v2.2d, v0.2d
	add	v1.2d, v3.2d, v1.2d
	b.ne	.LBB255_7
// %bb.8:                               //   in Loop: Header=BB255_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x19, x27
	mov	x11, x19
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB255_11
.LBB255_9:                              // %.preheader
                                        //   in Loop: Header=BB255_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB255_10:                             //   Parent Loop BB255_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	add	x9, x12, x9
	b.ne	.LBB255_10
.LBB255_11:                             //   in Loop: Header=BB255_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzu	x10, d0
	mul	x10, x10, x22
	cmp	x9, x10
	b.eq	.LBB255_3
// %bb.12:                              //   in Loop: Header=BB255_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB255_3
.LBB255_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #8000                      // =0x1f40
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB255_15
.LBB255_14:                             //   in Loop: Header=BB255_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB255_17
.LBB255_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	mul	x9, x9, x22
	cbz	x9, .LBB255_14
// %bb.16:                              //   in Loop: Header=BB255_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB255_14
.LBB255_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB255_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB255_21
.LBB255_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB255_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB255_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB255_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end255:
	.size	_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc, .Lfunc_end255-_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm19custom_constant_andImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm19custom_constant_andImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm19custom_constant_andImEEvPT_iPKc // -- Begin function _Z13test_constantIm19custom_constant_andImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm19custom_constant_andImEEvPT_iPKc,@function
_Z13test_constantIm19custom_constant_andImEEvPT_iPKc: // @_Z13test_constantIm19custom_constant_andImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB256_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB256_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	mov	w24, #10                        // =0xa
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffc
	mov	w23, #8000                      // =0x1f40
	b	.LBB256_4
.LBB256_3:                              //   in Loop: Header=BB256_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB256_17
.LBB256_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB256_7 Depth 2
                                        //     Child Loop BB256_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB256_6
// %bb.5:                               //   in Loop: Header=BB256_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB256_9
.LBB256_6:                              // %.preheader2
                                        //   in Loop: Header=BB256_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB256_7:                              //   Parent Loop BB256_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	dup	v2.2d, x24
	ldp	q3, q4, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	and	v3.16b, v3.16b, v2.16b
	and	v2.16b, v4.16b, v2.16b
	add	v0.2d, v3.2d, v0.2d
	add	v1.2d, v2.2d, v1.2d
	b.ne	.LBB256_7
// %bb.8:                               //   in Loop: Header=BB256_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x22, x27
	mov	x11, x22
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB256_11
.LBB256_9:                              // %.preheader
                                        //   in Loop: Header=BB256_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB256_10:                             //   Parent Loop BB256_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	and	x12, x12, x24
	add	x9, x12, x9
	b.ne	.LBB256_10
.LBB256_11:                             //   in Loop: Header=BB256_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	and	x10, x10, x24
	umull	x10, w10, w23
	cmp	x9, x10
	b.eq	.LBB256_3
// %bb.12:                              //   in Loop: Header=BB256_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB256_3
.LBB256_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #10                        // =0xa
	ldr	d0, [x21, :lo12:init_value]
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB256_15
.LBB256_14:                             //   in Loop: Header=BB256_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB256_17
.LBB256_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	tst	x9, x22
	b.eq	.LBB256_14
// %bb.16:                              //   in Loop: Header=BB256_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB256_14
.LBB256_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB256_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB256_21
.LBB256_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB256_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB256_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB256_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end256:
	.size	_Z13test_constantIm19custom_constant_andImEEvPT_iPKc, .Lfunc_end256-_Z13test_constantIm19custom_constant_andImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc // -- Begin function _Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc,@function
_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc: // @_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB257_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB257_13
// %bb.2:
	mov	w9, #14                         // =0xe
	mov	w27, w20
	mov	w26, wzr
	dup	v4.2d, x9
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB257_4
.LBB257_3:                              //   in Loop: Header=BB257_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB257_17
.LBB257_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB257_7 Depth 2
                                        //     Child Loop BB257_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB257_6
// %bb.5:                               //   in Loop: Header=BB257_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB257_9
.LBB257_6:                              // %.preheader2
                                        //   in Loop: Header=BB257_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB257_7:                              //   Parent Loop BB257_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	and	v2.16b, v2.16b, v4.16b
	and	v3.16b, v3.16b, v4.16b
	add	v0.2d, v2.2d, v0.2d
	add	v1.2d, v3.2d, v1.2d
	b.ne	.LBB257_7
// %bb.8:                               //   in Loop: Header=BB257_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB257_11
.LBB257_9:                              // %.preheader
                                        //   in Loop: Header=BB257_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB257_10:                             //   Parent Loop BB257_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	and	x12, x12, #0xe
	add	x9, x12, x9
	b.ne	.LBB257_10
.LBB257_11:                             //   in Loop: Header=BB257_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	and	x10, x10, #0xe
	umull	x10, w10, w22
	cmp	x9, x10
	b.eq	.LBB257_3
// %bb.12:                              //   in Loop: Header=BB257_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB257_3
.LBB257_13:
	adrp	x21, init_value
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	ldr	d0, [x21, :lo12:init_value]
	b	.LBB257_15
.LBB257_14:                             //   in Loop: Header=BB257_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB257_17
.LBB257_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	tst	x9, #0xe
	b.eq	.LBB257_14
// %bb.16:                              //   in Loop: Header=BB257_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB257_14
.LBB257_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB257_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB257_21
.LBB257_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB257_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB257_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB257_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end257:
	.size	_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc, .Lfunc_end257-_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm18custom_constant_orImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm18custom_constant_orImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm18custom_constant_orImEEvPT_iPKc // -- Begin function _Z13test_constantIm18custom_constant_orImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm18custom_constant_orImEEvPT_iPKc,@function
_Z13test_constantIm18custom_constant_orImEEvPT_iPKc: // @_Z13test_constantIm18custom_constant_orImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB258_15
// %bb.1:
	cmp	w20, #0
	b.le	.LBB258_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	mov	w24, #10                        // =0xa
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffc
	mov	w23, #8000                      // =0x1f40
	b	.LBB258_4
.LBB258_3:                              //   in Loop: Header=BB258_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB258_15
.LBB258_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB258_7 Depth 2
                                        //     Child Loop BB258_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB258_6
// %bb.5:                               //   in Loop: Header=BB258_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB258_9
.LBB258_6:                              // %.preheader2
                                        //   in Loop: Header=BB258_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB258_7:                              //   Parent Loop BB258_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	dup	v2.2d, x24
	ldp	q3, q4, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	orr	v3.16b, v3.16b, v2.16b
	orr	v2.16b, v4.16b, v2.16b
	add	v0.2d, v3.2d, v0.2d
	add	v1.2d, v2.2d, v1.2d
	b.ne	.LBB258_7
// %bb.8:                               //   in Loop: Header=BB258_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x22, x27
	mov	x11, x22
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB258_11
.LBB258_9:                              // %.preheader
                                        //   in Loop: Header=BB258_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB258_10:                             //   Parent Loop BB258_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	orr	x12, x12, x24
	add	x9, x12, x9
	b.ne	.LBB258_10
.LBB258_11:                             //   in Loop: Header=BB258_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	orr	x10, x10, x24
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB258_3
// %bb.12:                              //   in Loop: Header=BB258_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB258_3
.LBB258_13:                             // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB258_14:                             // =>This Inner Loop Header: Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB258_14
.LBB258_15:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB258_17
// %bb.16:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB258_19
.LBB258_17:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB258_20
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
.LBB258_19:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB258_20:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end258:
	.size	_Z13test_constantIm18custom_constant_orImEEvPT_iPKc, .Lfunc_end258-_Z13test_constantIm18custom_constant_orImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc // -- Begin function _Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc,@function
_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc: // @_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB259_15
// %bb.1:
	cmp	w20, #0
	b.le	.LBB259_13
// %bb.2:
	mov	w9, #63                         // =0x3f
	mov	w27, w20
	mov	w26, wzr
	dup	v4.2d, x9
	and	x28, x27, #0x7ffffffc
	add	x24, x21, #16
	adrp	x19, init_value
	mov	w22, #8000                      // =0x1f40
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB259_4
.LBB259_3:                              //   in Loop: Header=BB259_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB259_15
.LBB259_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB259_7 Depth 2
                                        //     Child Loop BB259_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB259_6
// %bb.5:                               //   in Loop: Header=BB259_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB259_9
.LBB259_6:                              // %.preheader2
                                        //   in Loop: Header=BB259_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	x10, x28
.LBB259_7:                              //   Parent Loop BB259_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	orr	v2.16b, v2.16b, v4.16b
	orr	v3.16b, v3.16b, v4.16b
	add	v0.2d, v2.2d, v0.2d
	add	v1.2d, v3.2d, v1.2d
	b.ne	.LBB259_7
// %bb.8:                               //   in Loop: Header=BB259_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x28, x27
	mov	x11, x28
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB259_11
.LBB259_9:                              // %.preheader
                                        //   in Loop: Header=BB259_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB259_10:                             //   Parent Loop BB259_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	orr	x12, x12, #0x3f
	add	x9, x12, x9
	b.ne	.LBB259_10
.LBB259_11:                             //   in Loop: Header=BB259_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	orr	x10, x10, #0x3f
	mul	x10, x10, x22
	cmp	x9, x10
	b.eq	.LBB259_3
// %bb.12:                              //   in Loop: Header=BB259_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB259_3
.LBB259_13:                             // %.preheader4
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB259_14:                             // =>This Inner Loop Header: Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	add	w19, w19, #1
	cmp	w19, w8
	b.lt	.LBB259_14
.LBB259_15:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB259_17
// %bb.16:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB259_19
.LBB259_17:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB259_20
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
.LBB259_19:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB259_20:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end259:
	.size	_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc, .Lfunc_end259-_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm19custom_constant_xorImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc // -- Begin function _Z13test_constantIm19custom_constant_xorImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc,@function
_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc: // @_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB260_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB260_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	mov	w24, #10                        // =0xa
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffc
	mov	w23, #8000                      // =0x1f40
	b	.LBB260_4
.LBB260_3:                              //   in Loop: Header=BB260_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB260_17
.LBB260_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB260_7 Depth 2
                                        //     Child Loop BB260_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB260_6
// %bb.5:                               //   in Loop: Header=BB260_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB260_9
.LBB260_6:                              // %.preheader2
                                        //   in Loop: Header=BB260_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB260_7:                              //   Parent Loop BB260_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	dup	v2.2d, x24
	ldp	q3, q4, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	eor	v3.16b, v3.16b, v2.16b
	eor	v2.16b, v4.16b, v2.16b
	add	v0.2d, v3.2d, v0.2d
	add	v1.2d, v2.2d, v1.2d
	b.ne	.LBB260_7
// %bb.8:                               //   in Loop: Header=BB260_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x22, x27
	mov	x11, x22
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB260_11
.LBB260_9:                              // %.preheader
                                        //   in Loop: Header=BB260_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB260_10:                             //   Parent Loop BB260_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	eor	x12, x12, x24
	add	x9, x12, x9
	b.ne	.LBB260_10
.LBB260_11:                             //   in Loop: Header=BB260_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	eor	x10, x10, x24
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB260_3
// %bb.12:                              //   in Loop: Header=BB260_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB260_3
.LBB260_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #10                        // =0xa
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB260_15
.LBB260_14:                             //   in Loop: Header=BB260_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB260_17
.LBB260_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	eor	x9, x9, x22
	mul	x9, x9, x23
	cbz	x9, .LBB260_14
// %bb.16:                              //   in Loop: Header=BB260_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB260_14
.LBB260_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB260_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB260_21
.LBB260_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB260_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB260_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB260_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end260:
	.size	_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc, .Lfunc_end260-_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc,"axG",@progbits,_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc,comdat
	.weak	_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc // -- Begin function _Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc,@function
_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc: // @_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #112
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB261_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB261_13
// %bb.2:
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	mov	w24, #49                        // =0x31
	adrp	x19, init_value
	and	x22, x27, #0x7ffffffc
	mov	w23, #8000                      // =0x1f40
	b	.LBB261_4
.LBB261_3:                              //   in Loop: Header=BB261_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB261_17
.LBB261_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB261_7 Depth 2
                                        //     Child Loop BB261_10 Depth 2
	cmp	w20, #4
	b.hs	.LBB261_6
// %bb.5:                               //   in Loop: Header=BB261_4 Depth=1
	mov	x11, xzr
	mov	x9, xzr
	b	.LBB261_9
.LBB261_6:                              // %.preheader2
                                        //   in Loop: Header=BB261_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x28
	mov	x10, x22
.LBB261_7:                              //   Parent Loop BB261_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	dup	v2.2d, x24
	ldp	q3, q4, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	eor	v3.16b, v3.16b, v2.16b
	eor	v2.16b, v4.16b, v2.16b
	add	v0.2d, v3.2d, v0.2d
	add	v1.2d, v2.2d, v1.2d
	b.ne	.LBB261_7
// %bb.8:                               //   in Loop: Header=BB261_4 Depth=1
	add	v0.2d, v1.2d, v0.2d
	cmp	x22, x27
	mov	x11, x22
	addp	d0, v0.2d
	fmov	x9, d0
	b.eq	.LBB261_11
.LBB261_9:                              // %.preheader
                                        //   in Loop: Header=BB261_4 Depth=1
	add	x10, x21, x11, lsl #3
	sub	x11, x27, x11
.LBB261_10:                             //   Parent Loop BB261_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	x12, [x10], #8
	subs	x11, x11, #1
	eor	x12, x12, x24
	add	x9, x12, x9
	b.ne	.LBB261_10
.LBB261_11:                             //   in Loop: Header=BB261_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzu	x10, d0
	eor	x10, x10, x24
	mul	x10, x10, x23
	cmp	x9, x10
	b.eq	.LBB261_3
// %bb.12:                              //   in Loop: Header=BB261_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.299
	add	x0, x0, :lo12:.L.str.299
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB261_3
.LBB261_13:
	adrp	x21, init_value
	mov	w19, wzr
	mov	w22, #49                        // =0x31
	ldr	d0, [x21, :lo12:init_value]
	mov	w23, #8000                      // =0x1f40
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB261_15
.LBB261_14:                             //   in Loop: Header=BB261_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB261_17
.LBB261_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzu	x9, d0
	eor	x9, x9, x22
	mul	x9, x9, x23
	cbz	x9, .LBB261_14
// %bb.16:                              //   in Loop: Header=BB261_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB261_14
.LBB261_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB261_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB261_21
.LBB261_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB261_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB261_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #112
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB261_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end261:
	.size	_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc, .Lfunc_end261-_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf10custom_twoIfEEvPT_iPKc
.LCPI262_0:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
.LCPI262_1:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
	.section	.text._Z13test_constantIf10custom_twoIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf10custom_twoIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf10custom_twoIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf10custom_twoIfEEvPT_iPKc,@function
_Z13test_constantIf10custom_twoIfEEvPT_iPKc: // @_Z13test_constantIf10custom_twoIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-112]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x25, [sp, #48]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_offset b8, -88
	.cfi_offset b9, -96
	.cfi_offset b10, -104
	.cfi_offset b11, -112
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB262_10
// %bb.1:
	cmp	w20, #0
	b.le	.LBB262_8
// %bb.2:                               // %.preheader
	mov	w11, #-965083136                // =0xc67a0000
	fmov	s8, #2.00000000
	adrp	x9, .LCPI262_0
	adrp	x10, .LCPI262_1
	fmov	s11, w11
	ldr	d9, [x9, :lo12:.LCPI262_0]
	ldr	d10, [x10, :lo12:.LCPI262_1]
	mov	w25, wzr
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB262_4
.LBB262_3:                              //   in Loop: Header=BB262_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB262_10
.LBB262_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB262_5 Depth 2
	movi	d0, #0000000000000000
	mov	w9, w20
.LBB262_5:                              //   Parent Loop BB262_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	fadd	s0, s0, s8
	subs	w9, w9, #1
	b.ne	.LBB262_5
// %bb.6:                               //   in Loop: Header=BB262_4 Depth=1
	fadd	s1, s0, s11
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d9
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	b.mi	.LBB262_3
// %bb.7:                               //   in Loop: Header=BB262_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB262_3
.LBB262_8:                              // %.preheader1
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB262_9:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB262_9
.LBB262_10:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB262_12
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB262_14
.LBB262_12:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB262_15
// %bb.13:
	ldr	w8, [x22, :lo12:current_test]
.LBB262_14:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x25, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #112            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB262_15:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end262:
	.size	_Z13test_constantIf10custom_twoIfEEvPT_iPKc, .Lfunc_end262-_Z13test_constantIf10custom_twoIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc
.LCPI263_0:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
.LCPI263_1:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
	.section	.text._Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc,@function
_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc: // @_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-112]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x25, [sp, #48]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_offset b8, -88
	.cfi_offset b9, -96
	.cfi_offset b10, -104
	.cfi_offset b11, -112
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB263_10
// %bb.1:
	cmp	w20, #0
	b.le	.LBB263_8
// %bb.2:                               // %.preheader
	mov	w11, #32768                     // =0x8000
	fmov	s8, #3.00000000
	adrp	x9, .LCPI263_0
	movk	w11, #50875, lsl #16
	adrp	x10, .LCPI263_1
	ldr	d9, [x9, :lo12:.LCPI263_0]
	fmov	s11, w11
	ldr	d10, [x10, :lo12:.LCPI263_1]
	mov	w25, wzr
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB263_4
.LBB263_3:                              //   in Loop: Header=BB263_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB263_10
.LBB263_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB263_5 Depth 2
	movi	d0, #0000000000000000
	mov	w9, w20
.LBB263_5:                              //   Parent Loop BB263_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	fadd	s0, s0, s8
	subs	w9, w9, #1
	b.ne	.LBB263_5
// %bb.6:                               //   in Loop: Header=BB263_4 Depth=1
	fadd	s1, s0, s11
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d9
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	b.mi	.LBB263_3
// %bb.7:                               //   in Loop: Header=BB263_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB263_3
.LBB263_8:                              // %.preheader1
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB263_9:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB263_9
.LBB263_10:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB263_12
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB263_14
.LBB263_12:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB263_15
// %bb.13:
	ldr	w8, [x22, :lo12:current_test]
.LBB263_14:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x25, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #112            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB263_15:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end263:
	.size	_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc, .Lfunc_end263-_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc
.LCPI264_0:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
.LCPI264_1:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
	.section	.text._Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc,@function
_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc: // @_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-112]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x25, [sp, #48]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_offset b8, -88
	.cfi_offset b9, -96
	.cfi_offset b10, -104
	.cfi_offset b11, -112
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB264_10
// %bb.1:
	cmp	w20, #0
	b.le	.LBB264_8
// %bb.2:                               // %.preheader
	mov	w11, #-973471744                // =0xc5fa0000
	fmov	s8, #1.00000000
	adrp	x9, .LCPI264_0
	adrp	x10, .LCPI264_1
	fmov	s11, w11
	ldr	d9, [x9, :lo12:.LCPI264_0]
	ldr	d10, [x10, :lo12:.LCPI264_1]
	mov	w25, wzr
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB264_4
.LBB264_3:                              //   in Loop: Header=BB264_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB264_10
.LBB264_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB264_5 Depth 2
	movi	d0, #0000000000000000
	mov	w9, w20
.LBB264_5:                              //   Parent Loop BB264_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	fadd	s0, s0, s8
	subs	w9, w9, #1
	b.ne	.LBB264_5
// %bb.6:                               //   in Loop: Header=BB264_4 Depth=1
	fadd	s1, s0, s11
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d9
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	b.mi	.LBB264_3
// %bb.7:                               //   in Loop: Header=BB264_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB264_3
.LBB264_8:                              // %.preheader1
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB264_9:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB264_9
.LBB264_10:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB264_12
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB264_14
.LBB264_12:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB264_15
// %bb.13:
	ldr	w8, [x22, :lo12:current_test]
.LBB264_14:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x25, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #112            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB264_15:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end264:
	.size	_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc, .Lfunc_end264-_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc
.LCPI265_0:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
.LCPI265_1:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
	.section	.text._Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc,@function
_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc: // @_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-112]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x25, [sp, #48]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_offset b8, -88
	.cfi_offset b9, -96
	.cfi_offset b10, -104
	.cfi_offset b11, -112
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB265_10
// %bb.1:
	cmp	w20, #0
	b.le	.LBB265_8
// %bb.2:                               // %.preheader
	mov	w11, #32768                     // =0x8000
	fmov	s8, #6.00000000
	adrp	x9, .LCPI265_0
	movk	w11, #51003, lsl #16
	adrp	x10, .LCPI265_1
	ldr	d9, [x9, :lo12:.LCPI265_0]
	fmov	s11, w11
	ldr	d10, [x10, :lo12:.LCPI265_1]
	mov	w25, wzr
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB265_4
.LBB265_3:                              //   in Loop: Header=BB265_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB265_10
.LBB265_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB265_5 Depth 2
	movi	d0, #0000000000000000
	mov	w9, w20
.LBB265_5:                              //   Parent Loop BB265_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	fadd	s0, s0, s8
	subs	w9, w9, #1
	b.ne	.LBB265_5
// %bb.6:                               //   in Loop: Header=BB265_4 Depth=1
	fadd	s1, s0, s11
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d9
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	b.mi	.LBB265_3
// %bb.7:                               //   in Loop: Header=BB265_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB265_3
.LBB265_8:                              // %.preheader1
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB265_9:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB265_9
.LBB265_10:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB265_12
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB265_14
.LBB265_12:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB265_15
// %bb.13:
	ldr	w8, [x22, :lo12:current_test]
.LBB265_14:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x25, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #112            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB265_15:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end265:
	.size	_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc, .Lfunc_end265-_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc
.LCPI266_0:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
.LCPI266_1:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
	.section	.text._Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc,@function
_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc: // @_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-112]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x25, [sp, #48]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_offset b8, -88
	.cfi_offset b9, -96
	.cfi_offset b10, -104
	.cfi_offset b11, -112
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB266_10
// %bb.1:
	cmp	w20, #0
	b.le	.LBB266_8
// %bb.2:                               // %.preheader
	mov	w11, #-965083136                // =0xc67a0000
	fmov	s8, #2.00000000
	adrp	x9, .LCPI266_0
	adrp	x10, .LCPI266_1
	fmov	s11, w11
	ldr	d9, [x9, :lo12:.LCPI266_0]
	ldr	d10, [x10, :lo12:.LCPI266_1]
	mov	w25, wzr
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB266_4
.LBB266_3:                              //   in Loop: Header=BB266_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB266_10
.LBB266_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB266_5 Depth 2
	movi	d0, #0000000000000000
	mov	w9, w20
.LBB266_5:                              //   Parent Loop BB266_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	fadd	s0, s0, s8
	subs	w9, w9, #1
	b.ne	.LBB266_5
// %bb.6:                               //   in Loop: Header=BB266_4 Depth=1
	fadd	s1, s0, s11
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d9
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	b.mi	.LBB266_3
// %bb.7:                               //   in Loop: Header=BB266_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB266_3
.LBB266_8:                              // %.preheader1
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB266_9:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB266_9
.LBB266_10:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB266_12
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB266_14
.LBB266_12:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB266_15
// %bb.13:
	ldr	w8, [x22, :lo12:current_test]
.LBB266_14:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x25, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #112            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB266_15:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end266:
	.size	_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc, .Lfunc_end266-_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf19custom_constant_addIfEEvPT_iPKc
.LCPI267_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI267_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z13test_constantIf19custom_constant_addIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc,@function
_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc: // @_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB267_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB267_13
// %bb.2:
	fmov	v5.4s, #10.00000000
	mov	w11, #-973471744                // =0xc5fa0000
	fmov	s8, #10.00000000
	adrp	x9, .LCPI267_1
	adrp	x10, .LCPI267_0
	fmov	s11, w11
	mov	w27, w20
	ldr	d9, [x9, :lo12:.LCPI267_1]
	ldr	d10, [x10, :lo12:.LCPI267_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffff8
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q5, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB267_4
.LBB267_3:                              //   in Loop: Header=BB267_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB267_17
.LBB267_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB267_7 Depth 2
                                        //     Child Loop BB267_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #8
	b.hs	.LBB267_6
// %bb.5:                               //   in Loop: Header=BB267_4 Depth=1
	mov	x10, xzr
	b	.LBB267_9
.LBB267_6:                              // %.preheader2
                                        //   in Loop: Header=BB267_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB267_7:                              //   Parent Loop BB267_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	fadd	v1.4s, v1.4s, v5.4s
	fadd	v2.4s, v2.4s, v5.4s
	mov	s3, v1.s[1]
	fadd	s0, s0, s1
	mov	s4, v1.s[2]
	mov	s1, v1.s[3]
	fadd	s0, s0, s3
	mov	s3, v2.s[2]
	fadd	s0, s0, s4
	fadd	s0, s0, s1
	mov	s1, v2.s[1]
	fadd	s0, s0, s2
	fadd	s0, s0, s1
	mov	s1, v2.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s1
	b.ne	.LBB267_7
// %bb.8:                               //   in Loop: Header=BB267_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB267_11
.LBB267_9:                              // %.preheader
                                        //   in Loop: Header=BB267_4 Depth=1
	add	x9, x21, x10, lsl #2
	sub	x10, x27, x10
.LBB267_10:                             //   Parent Loop BB267_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x10, x10, #1
	fadd	s1, s1, s8
	fadd	s0, s0, s1
	b.ne	.LBB267_10
.LBB267_11:                             //   in Loop: Header=BB267_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fcvt	s1, d1
	fadd	s1, s1, s8
	fmul	s1, s1, s11
	fadd	s1, s0, s1
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d9
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	b.mi	.LBB267_3
// %bb.12:                              //   in Loop: Header=BB267_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldr	q5, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB267_3
.LBB267_13:
	movi	d8, #0000000000000000
	mov	w10, #-973471744                // =0xc5fa0000
	adrp	x21, init_value
	fmov	s9, #10.00000000
	adrp	x9, .LCPI267_0
	fmov	s11, w10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x9, :lo12:.LCPI267_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB267_15
.LBB267_14:                             //   in Loop: Header=BB267_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB267_17
.LBB267_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s1, d0
	fadd	s1, s1, s9
	fmul	s1, s1, s11
	fadd	s1, s1, s8
	fabs	s1, s1
	fcvt	d1, s1
	fcmp	d1, d10
	b.mi	.LBB267_14
// %bb.16:                              //   in Loop: Header=BB267_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB267_14
.LBB267_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB267_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB267_21
.LBB267_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB267_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB267_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB267_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end267:
	.size	_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc, .Lfunc_end267-_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc
.LCPI268_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI268_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc,@function
_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc: // @_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	str	d14, [sp, #48]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #64]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #80]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #96]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #56]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB268_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB268_13
// %bb.2:
	adrp	x9, .LCPI268_1
	fmov	v5.4s, #1.00000000
	movi	v6.4s, #64, lsl #24
	ldr	d12, [x9, :lo12:.LCPI268_1]
	adrp	x9, .LCPI268_0
	fmov	v7.4s, #3.00000000
	fmov	v16.4s, #4.00000000
	ldr	d13, [x9, :lo12:.LCPI268_0]
	mov	w9, #-973471744                 // =0xc5fa0000
	fmov	s8, #1.00000000
	fmov	s9, #2.00000000
	fmov	s10, #3.00000000
	fmov	s11, #4.00000000
	fmov	s14, w9
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffff8
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stp	q7, q5, [sp, #16]               // 32-byte Folded Spill
	str	q16, [sp]                       // 16-byte Folded Spill
	b	.LBB268_4
.LBB268_3:                              //   in Loop: Header=BB268_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB268_17
.LBB268_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB268_7 Depth 2
                                        //     Child Loop BB268_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #8
	b.hs	.LBB268_6
// %bb.5:                               //   in Loop: Header=BB268_4 Depth=1
	mov	x10, xzr
	b	.LBB268_9
.LBB268_6:                              // %.preheader2
                                        //   in Loop: Header=BB268_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB268_7:                              //   Parent Loop BB268_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	fadd	v1.4s, v1.4s, v5.4s
	fadd	v2.4s, v2.4s, v5.4s
	fadd	v1.4s, v1.4s, v6.4s
	fadd	v2.4s, v2.4s, v6.4s
	fadd	v1.4s, v1.4s, v7.4s
	fadd	v2.4s, v2.4s, v7.4s
	fadd	v1.4s, v1.4s, v16.4s
	fadd	v2.4s, v2.4s, v16.4s
	mov	s3, v1.s[1]
	fadd	s0, s0, s1
	mov	s4, v1.s[2]
	mov	s1, v1.s[3]
	fadd	s0, s0, s3
	mov	s3, v2.s[2]
	fadd	s0, s0, s4
	fadd	s0, s0, s1
	mov	s1, v2.s[1]
	fadd	s0, s0, s2
	fadd	s0, s0, s1
	mov	s1, v2.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s1
	b.ne	.LBB268_7
// %bb.8:                               //   in Loop: Header=BB268_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB268_11
.LBB268_9:                              // %.preheader
                                        //   in Loop: Header=BB268_4 Depth=1
	add	x9, x21, x10, lsl #2
	sub	x10, x27, x10
.LBB268_10:                             //   Parent Loop BB268_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x10, x10, #1
	fadd	s1, s1, s8
	fadd	s1, s1, s9
	fadd	s1, s1, s10
	fadd	s1, s1, s11
	fadd	s0, s0, s1
	b.ne	.LBB268_10
.LBB268_11:                             //   in Loop: Header=BB268_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fcvt	s1, d1
	fadd	s1, s1, s8
	fadd	s1, s1, s9
	fadd	s1, s1, s10
	fadd	s1, s1, s11
	fmul	s1, s1, s14
	fadd	s1, s0, s1
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d12
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d13
	b.mi	.LBB268_3
// %bb.12:                              //   in Loop: Header=BB268_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	movi	v6.4s, #64, lsl #24
	ldp	q16, q7, [sp]                   // 32-byte Folded Reload
	ldr	q5, [sp, #32]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB268_3
.LBB268_13:
	movi	d10, #0000000000000000
	mov	w10, #-973471744                // =0xc5fa0000
	adrp	x21, init_value
	fmov	s8, #1.00000000
	fmov	s9, #2.00000000
	fmov	s11, #3.00000000
	fmov	s12, #4.00000000
	adrp	x9, .LCPI268_0
	fmov	s14, w10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d13, [x9, :lo12:.LCPI268_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB268_15
.LBB268_14:                             //   in Loop: Header=BB268_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB268_17
.LBB268_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s1, d0
	fadd	s1, s1, s8
	fadd	s1, s1, s9
	fadd	s1, s1, s11
	fadd	s1, s1, s12
	fmul	s1, s1, s14
	fadd	s1, s1, s10
	fabs	s1, s1
	fcvt	d1, s1
	fcmp	d1, d13
	b.mi	.LBB268_14
// %bb.16:                              //   in Loop: Header=BB268_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB268_14
.LBB268_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB268_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB268_21
.LBB268_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB268_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB268_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldr	d14, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #96]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #80]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB268_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end268:
	.size	_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc, .Lfunc_end268-_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf19custom_constant_subIfEEvPT_iPKc
.LCPI269_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI269_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z13test_constantIf19custom_constant_subIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc,@function
_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc: // @_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB269_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB269_13
// %bb.2:
	fmov	v5.4s, #-10.00000000
	mov	w11, #-973471744                // =0xc5fa0000
	fmov	s8, #-10.00000000
	adrp	x9, .LCPI269_1
	adrp	x10, .LCPI269_0
	fmov	s11, w11
	mov	w27, w20
	ldr	d9, [x9, :lo12:.LCPI269_1]
	ldr	d10, [x10, :lo12:.LCPI269_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffff8
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q5, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB269_4
.LBB269_3:                              //   in Loop: Header=BB269_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB269_17
.LBB269_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB269_7 Depth 2
                                        //     Child Loop BB269_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #8
	b.hs	.LBB269_6
// %bb.5:                               //   in Loop: Header=BB269_4 Depth=1
	mov	x10, xzr
	b	.LBB269_9
.LBB269_6:                              // %.preheader2
                                        //   in Loop: Header=BB269_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB269_7:                              //   Parent Loop BB269_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	fadd	v1.4s, v1.4s, v5.4s
	fadd	v2.4s, v2.4s, v5.4s
	mov	s3, v1.s[1]
	fadd	s0, s0, s1
	mov	s4, v1.s[2]
	mov	s1, v1.s[3]
	fadd	s0, s0, s3
	mov	s3, v2.s[2]
	fadd	s0, s0, s4
	fadd	s0, s0, s1
	mov	s1, v2.s[1]
	fadd	s0, s0, s2
	fadd	s0, s0, s1
	mov	s1, v2.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s1
	b.ne	.LBB269_7
// %bb.8:                               //   in Loop: Header=BB269_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB269_11
.LBB269_9:                              // %.preheader
                                        //   in Loop: Header=BB269_4 Depth=1
	add	x9, x21, x10, lsl #2
	sub	x10, x27, x10
.LBB269_10:                             //   Parent Loop BB269_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x10, x10, #1
	fadd	s1, s1, s8
	fadd	s0, s0, s1
	b.ne	.LBB269_10
.LBB269_11:                             //   in Loop: Header=BB269_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fcvt	s1, d1
	fadd	s1, s1, s8
	fmul	s1, s1, s11
	fadd	s1, s0, s1
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d9
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	b.mi	.LBB269_3
// %bb.12:                              //   in Loop: Header=BB269_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldr	q5, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB269_3
.LBB269_13:
	movi	d8, #0000000000000000
	mov	w10, #-973471744                // =0xc5fa0000
	adrp	x21, init_value
	fmov	s9, #-10.00000000
	adrp	x9, .LCPI269_0
	fmov	s11, w10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x9, :lo12:.LCPI269_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB269_15
.LBB269_14:                             //   in Loop: Header=BB269_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB269_17
.LBB269_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s1, d0
	fadd	s1, s1, s9
	fmul	s1, s1, s11
	fadd	s1, s1, s8
	fabs	s1, s1
	fcvt	d1, s1
	fcmp	d1, d10
	b.mi	.LBB269_14
// %bb.16:                              //   in Loop: Header=BB269_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB269_14
.LBB269_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB269_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB269_21
.LBB269_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB269_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB269_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB269_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end269:
	.size	_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc, .Lfunc_end269-_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc
.LCPI270_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI270_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc,@function
_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc: // @_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	str	d14, [sp, #48]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #64]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #80]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #96]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #56]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB270_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB270_13
// %bb.2:
	adrp	x9, .LCPI270_1
	fmov	v5.4s, #-1.00000000
	movi	v6.4s, #192, lsl #24
	ldr	d12, [x9, :lo12:.LCPI270_1]
	adrp	x9, .LCPI270_0
	fmov	v7.4s, #-3.00000000
	fmov	v16.4s, #-4.00000000
	ldr	d13, [x9, :lo12:.LCPI270_0]
	mov	w9, #-973471744                 // =0xc5fa0000
	fmov	s8, #-1.00000000
	fmov	s9, #-2.00000000
	fmov	s10, #-3.00000000
	fmov	s11, #-4.00000000
	fmov	s14, w9
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffff8
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stp	q7, q5, [sp, #16]               // 32-byte Folded Spill
	str	q16, [sp]                       // 16-byte Folded Spill
	b	.LBB270_4
.LBB270_3:                              //   in Loop: Header=BB270_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB270_17
.LBB270_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB270_7 Depth 2
                                        //     Child Loop BB270_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #8
	b.hs	.LBB270_6
// %bb.5:                               //   in Loop: Header=BB270_4 Depth=1
	mov	x10, xzr
	b	.LBB270_9
.LBB270_6:                              // %.preheader2
                                        //   in Loop: Header=BB270_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB270_7:                              //   Parent Loop BB270_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	fadd	v1.4s, v1.4s, v5.4s
	fadd	v2.4s, v2.4s, v5.4s
	fadd	v1.4s, v1.4s, v6.4s
	fadd	v2.4s, v2.4s, v6.4s
	fadd	v1.4s, v1.4s, v7.4s
	fadd	v2.4s, v2.4s, v7.4s
	fadd	v1.4s, v1.4s, v16.4s
	fadd	v2.4s, v2.4s, v16.4s
	mov	s3, v1.s[1]
	fadd	s0, s0, s1
	mov	s4, v1.s[2]
	mov	s1, v1.s[3]
	fadd	s0, s0, s3
	mov	s3, v2.s[2]
	fadd	s0, s0, s4
	fadd	s0, s0, s1
	mov	s1, v2.s[1]
	fadd	s0, s0, s2
	fadd	s0, s0, s1
	mov	s1, v2.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s1
	b.ne	.LBB270_7
// %bb.8:                               //   in Loop: Header=BB270_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB270_11
.LBB270_9:                              // %.preheader
                                        //   in Loop: Header=BB270_4 Depth=1
	add	x9, x21, x10, lsl #2
	sub	x10, x27, x10
.LBB270_10:                             //   Parent Loop BB270_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x10, x10, #1
	fadd	s1, s1, s8
	fadd	s1, s1, s9
	fadd	s1, s1, s10
	fadd	s1, s1, s11
	fadd	s0, s0, s1
	b.ne	.LBB270_10
.LBB270_11:                             //   in Loop: Header=BB270_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fcvt	s1, d1
	fadd	s1, s1, s8
	fadd	s1, s1, s9
	fadd	s1, s1, s10
	fadd	s1, s1, s11
	fmul	s1, s1, s14
	fadd	s1, s0, s1
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d12
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d13
	b.mi	.LBB270_3
// %bb.12:                              //   in Loop: Header=BB270_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	movi	v6.4s, #192, lsl #24
	ldp	q16, q7, [sp]                   // 32-byte Folded Reload
	ldr	q5, [sp, #32]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB270_3
.LBB270_13:
	movi	d10, #0000000000000000
	mov	w10, #-973471744                // =0xc5fa0000
	adrp	x21, init_value
	fmov	s8, #-1.00000000
	fmov	s9, #-2.00000000
	fmov	s11, #-3.00000000
	fmov	s12, #-4.00000000
	adrp	x9, .LCPI270_0
	fmov	s14, w10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d13, [x9, :lo12:.LCPI270_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB270_15
.LBB270_14:                             //   in Loop: Header=BB270_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB270_17
.LBB270_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s1, d0
	fadd	s1, s1, s8
	fadd	s1, s1, s9
	fadd	s1, s1, s11
	fadd	s1, s1, s12
	fmul	s1, s1, s14
	fadd	s1, s1, s10
	fabs	s1, s1
	fcvt	d1, s1
	fcmp	d1, d13
	b.mi	.LBB270_14
// %bb.16:                              //   in Loop: Header=BB270_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB270_14
.LBB270_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB270_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB270_21
.LBB270_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB270_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB270_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldr	d14, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #96]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #80]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB270_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end270:
	.size	_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc, .Lfunc_end270-_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc
.LCPI271_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI271_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc,@function
_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc: // @_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	str	d12, [sp, #16]                  // 8-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -144
	.cfi_remember_state
	str	x2, [sp, #24]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB271_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB271_13
// %bb.2:
	mov	w9, #1123024896                 // =0x42f00000
	adrp	x10, .LCPI271_1
	mov	w27, w20
	dup	v5.4s, w9
	fmov	s8, w9
	mov	w9, #-1024458752                // =0xc2f00000
	fmov	s9, w9
	adrp	x9, .LCPI271_0
	ldr	d10, [x10, :lo12:.LCPI271_1]
	ldr	d11, [x9, :lo12:.LCPI271_0]
	mov	w9, #1174011904                 // =0x45fa0000
	mov	w26, wzr
	fmov	s12, w9
	add	x28, x21, #16
	and	x24, x27, #0x7ffffff8
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q5, [sp]                        // 16-byte Folded Spill
	b	.LBB271_4
.LBB271_3:                              //   in Loop: Header=BB271_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB271_17
.LBB271_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB271_7 Depth 2
                                        //     Child Loop BB271_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #8
	b.hs	.LBB271_6
// %bb.5:                               //   in Loop: Header=BB271_4 Depth=1
	mov	x10, xzr
	b	.LBB271_9
.LBB271_6:                              // %.preheader2
                                        //   in Loop: Header=BB271_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB271_7:                              //   Parent Loop BB271_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	fmul	v1.4s, v1.4s, v5.4s
	fmul	v2.4s, v2.4s, v5.4s
	mov	s3, v1.s[1]
	fadd	s0, s0, s1
	mov	s4, v1.s[2]
	mov	s1, v1.s[3]
	fadd	s0, s0, s3
	mov	s3, v2.s[2]
	fadd	s0, s0, s4
	fadd	s0, s0, s1
	mov	s1, v2.s[1]
	fadd	s0, s0, s2
	fadd	s0, s0, s1
	mov	s1, v2.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s1
	b.ne	.LBB271_7
// %bb.8:                               //   in Loop: Header=BB271_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB271_11
.LBB271_9:                              // %.preheader
                                        //   in Loop: Header=BB271_4 Depth=1
	add	x9, x21, x10, lsl #2
	sub	x10, x27, x10
.LBB271_10:                             //   Parent Loop BB271_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x10, x10, #1
	fmul	s1, s1, s8
	fadd	s0, s0, s1
	b.ne	.LBB271_10
.LBB271_11:                             //   in Loop: Header=BB271_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fcvt	s1, d1
	fmul	s1, s1, s9
	fmul	s1, s1, s12
	fadd	s1, s0, s1
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d11
	b.mi	.LBB271_3
// %bb.12:                              //   in Loop: Header=BB271_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldr	q5, [sp]                        // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB271_3
.LBB271_13:
	mov	w9, #-1024458752                // =0xc2f00000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	fmov	s9, w9
	mov	w9, #1174011904                 // =0x45fa0000
	adrp	x10, .LCPI271_0
	fmov	s11, w9
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x10, :lo12:.LCPI271_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB271_15
.LBB271_14:                             //   in Loop: Header=BB271_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB271_17
.LBB271_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s1, d0
	fmul	s1, s1, s9
	fmul	s1, s1, s11
	fadd	s1, s1, s8
	fabs	s1, s1
	fcvt	d1, s1
	fcmp	d1, d10
	b.mi	.LBB271_14
// %bb.16:                              //   in Loop: Header=BB271_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB271_14
.LBB271_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB271_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB271_21
.LBB271_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB271_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB271_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldr	d12, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	ret
.LBB271_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end271:
	.size	_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc, .Lfunc_end271-_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc
.LCPI272_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI272_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc,@function
_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc: // @_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	str	d14, [sp, #48]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #64]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #80]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #96]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #56]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB272_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB272_13
// %bb.2:
	adrp	x9, .LCPI272_1
	fmov	v5.4s, #3.00000000
	fmov	v6.4s, #4.00000000
	ldr	d12, [x9, :lo12:.LCPI272_1]
	adrp	x9, .LCPI272_0
	fmov	v7.4s, #5.00000000
	ldr	d13, [x9, :lo12:.LCPI272_0]
	mov	w9, #1174011904                 // =0x45fa0000
	fmov	s8, #3.00000000
	fmov	s9, #4.00000000
	fmov	s10, #5.00000000
	fmov	s11, #-3.00000000
	fmov	s14, w9
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffff8
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stp	q6, q5, [sp, #16]               // 32-byte Folded Spill
	str	q7, [sp]                        // 16-byte Folded Spill
	b	.LBB272_4
.LBB272_3:                              //   in Loop: Header=BB272_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB272_17
.LBB272_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB272_7 Depth 2
                                        //     Child Loop BB272_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #8
	b.hs	.LBB272_6
// %bb.5:                               //   in Loop: Header=BB272_4 Depth=1
	mov	x10, xzr
	b	.LBB272_9
.LBB272_6:                              // %.preheader2
                                        //   in Loop: Header=BB272_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB272_7:                              //   Parent Loop BB272_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	fadd	v1.4s, v1.4s, v1.4s
	fadd	v2.4s, v2.4s, v2.4s
	fmul	v1.4s, v1.4s, v5.4s
	fmul	v2.4s, v2.4s, v5.4s
	fmul	v1.4s, v1.4s, v6.4s
	fmul	v2.4s, v2.4s, v6.4s
	fmul	v1.4s, v1.4s, v7.4s
	fmul	v2.4s, v2.4s, v7.4s
	mov	s3, v1.s[1]
	fadd	s0, s0, s1
	mov	s4, v1.s[2]
	mov	s1, v1.s[3]
	fadd	s0, s0, s3
	mov	s3, v2.s[2]
	fadd	s0, s0, s4
	fadd	s0, s0, s1
	mov	s1, v2.s[1]
	fadd	s0, s0, s2
	fadd	s0, s0, s1
	mov	s1, v2.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s1
	b.ne	.LBB272_7
// %bb.8:                               //   in Loop: Header=BB272_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB272_11
.LBB272_9:                              // %.preheader
                                        //   in Loop: Header=BB272_4 Depth=1
	add	x9, x21, x10, lsl #2
	sub	x10, x27, x10
.LBB272_10:                             //   Parent Loop BB272_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x10, x10, #1
	fadd	s1, s1, s1
	fmul	s1, s1, s8
	fmul	s1, s1, s9
	fmul	s1, s1, s10
	fadd	s0, s0, s1
	b.ne	.LBB272_10
.LBB272_11:                             //   in Loop: Header=BB272_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fcvt	s1, d1
	fadd	s1, s1, s1
	fmul	s1, s1, s11
	fmul	s1, s1, s9
	fmul	s1, s1, s10
	fmul	s1, s1, s14
	fadd	s1, s0, s1
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d12
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d13
	b.mi	.LBB272_3
// %bb.12:                              //   in Loop: Header=BB272_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldp	q7, q6, [sp]                    // 32-byte Folded Reload
	ldr	q5, [sp, #32]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB272_3
.LBB272_13:
	movi	d9, #0000000000000000
	mov	w10, #1174011904                // =0x45fa0000
	adrp	x21, init_value
	fmov	s8, #-3.00000000
	fmov	s10, #4.00000000
	fmov	s11, #5.00000000
	adrp	x9, .LCPI272_0
	fmov	s13, w10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d12, [x9, :lo12:.LCPI272_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB272_15
.LBB272_14:                             //   in Loop: Header=BB272_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB272_17
.LBB272_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s1, d0
	fadd	s1, s1, s1
	fmul	s1, s1, s8
	fmul	s1, s1, s10
	fmul	s1, s1, s11
	fmul	s1, s1, s13
	fadd	s1, s1, s9
	fabs	s1, s1
	fcvt	d1, s1
	fcmp	d1, d12
	b.mi	.LBB272_14
// %bb.16:                              //   in Loop: Header=BB272_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB272_14
.LBB272_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB272_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB272_21
.LBB272_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB272_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB272_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldr	d14, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #96]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #80]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB272_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end272:
	.size	_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc, .Lfunc_end272-_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc
.LCPI273_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI273_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc,@function
_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc: // @_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB273_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB273_13
// %bb.2:
	mov	w9, #1123024896                 // =0x42f00000
	mov	w11, #-973471744                // =0xc5fa0000
	adrp	x10, .LCPI273_0
	dup	v5.4s, w9
	fmov	s8, w9
	adrp	x9, .LCPI273_1
	fmov	s11, w11
	mov	w27, w20
	ldr	d9, [x9, :lo12:.LCPI273_1]
	ldr	d10, [x10, :lo12:.LCPI273_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffff8
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q5, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB273_4
.LBB273_3:                              //   in Loop: Header=BB273_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB273_17
.LBB273_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB273_7 Depth 2
                                        //     Child Loop BB273_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #8
	b.hs	.LBB273_6
// %bb.5:                               //   in Loop: Header=BB273_4 Depth=1
	mov	x10, xzr
	b	.LBB273_9
.LBB273_6:                              // %.preheader2
                                        //   in Loop: Header=BB273_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB273_7:                              //   Parent Loop BB273_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	fadd	v1.4s, v1.4s, v5.4s
	fadd	v2.4s, v2.4s, v5.4s
	mov	s3, v1.s[1]
	fadd	s0, s0, s1
	mov	s4, v1.s[2]
	mov	s1, v1.s[3]
	fadd	s0, s0, s3
	mov	s3, v2.s[2]
	fadd	s0, s0, s4
	fadd	s0, s0, s1
	mov	s1, v2.s[1]
	fadd	s0, s0, s2
	fadd	s0, s0, s1
	mov	s1, v2.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s1
	b.ne	.LBB273_7
// %bb.8:                               //   in Loop: Header=BB273_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB273_11
.LBB273_9:                              // %.preheader
                                        //   in Loop: Header=BB273_4 Depth=1
	add	x9, x21, x10, lsl #2
	sub	x10, x27, x10
.LBB273_10:                             //   Parent Loop BB273_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x10, x10, #1
	fadd	s1, s1, s8
	fadd	s0, s0, s1
	b.ne	.LBB273_10
.LBB273_11:                             //   in Loop: Header=BB273_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fcvt	s1, d1
	fadd	s1, s1, s8
	fmul	s1, s1, s11
	fadd	s1, s0, s1
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d9
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	b.mi	.LBB273_3
// %bb.12:                              //   in Loop: Header=BB273_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldr	q5, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB273_3
.LBB273_13:
	mov	w9, #1123024896                 // =0x42f00000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	fmov	s9, w9
	mov	w9, #-973471744                 // =0xc5fa0000
	adrp	x10, .LCPI273_0
	fmov	s11, w9
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x10, :lo12:.LCPI273_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB273_15
.LBB273_14:                             //   in Loop: Header=BB273_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB273_17
.LBB273_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s1, d0
	fadd	s1, s1, s9
	fmul	s1, s1, s11
	fadd	s1, s1, s8
	fabs	s1, s1
	fcvt	d1, s1
	fcmp	d1, d10
	b.mi	.LBB273_14
// %bb.16:                              //   in Loop: Header=BB273_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB273_14
.LBB273_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB273_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB273_21
.LBB273_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB273_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB273_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB273_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end273:
	.size	_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc, .Lfunc_end273-_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc
.LCPI274_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI274_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc,@function
_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc: // @_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	str	d12, [sp, #16]                  // 8-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -144
	.cfi_remember_state
	str	x2, [sp, #24]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB274_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB274_13
// %bb.2:
	fmov	v5.4s, #5.00000000
	mov	w11, #1174011904                // =0x45fa0000
	fmov	s8, #5.00000000
	fmov	s9, #-5.00000000
	adrp	x9, .LCPI274_1
	adrp	x10, .LCPI274_0
	fmov	s12, w11
	mov	w27, w20
	ldr	d10, [x9, :lo12:.LCPI274_1]
	ldr	d11, [x10, :lo12:.LCPI274_0]
	mov	w26, wzr
	add	x28, x21, #16
	adrp	x24, init_value
	and	x19, x27, #0x7ffffff8
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q5, [sp]                        // 16-byte Folded Spill
	b	.LBB274_4
.LBB274_3:                              //   in Loop: Header=BB274_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB274_17
.LBB274_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB274_7 Depth 2
                                        //     Child Loop BB274_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #8
	b.hs	.LBB274_6
// %bb.5:                               //   in Loop: Header=BB274_4 Depth=1
	mov	x10, xzr
	b	.LBB274_9
.LBB274_6:                              // %.preheader2
                                        //   in Loop: Header=BB274_4 Depth=1
	mov	x9, x28
	mov	x10, x19
.LBB274_7:                              //   Parent Loop BB274_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	fdiv	v1.4s, v1.4s, v5.4s
	fdiv	v2.4s, v2.4s, v5.4s
	mov	s3, v1.s[1]
	fadd	s0, s0, s1
	mov	s4, v1.s[2]
	mov	s1, v1.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s4
	mov	s3, v2.s[2]
	fadd	s0, s0, s1
	mov	s1, v2.s[1]
	fadd	s0, s0, s2
	fadd	s0, s0, s1
	mov	s1, v2.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s1
	b.ne	.LBB274_7
// %bb.8:                               //   in Loop: Header=BB274_4 Depth=1
	cmp	x19, x27
	mov	x10, x19
	b.eq	.LBB274_11
.LBB274_9:                              // %.preheader
                                        //   in Loop: Header=BB274_4 Depth=1
	add	x9, x21, x10, lsl #2
	sub	x10, x27, x10
.LBB274_10:                             //   Parent Loop BB274_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x10, x10, #1
	fdiv	s1, s1, s8
	fadd	s0, s0, s1
	b.ne	.LBB274_10
.LBB274_11:                             //   in Loop: Header=BB274_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fcvt	s1, d1
	fdiv	s1, s1, s9
	fmul	s1, s1, s12
	fadd	s1, s0, s1
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d11
	b.mi	.LBB274_3
// %bb.12:                              //   in Loop: Header=BB274_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldr	q5, [sp]                        // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB274_3
.LBB274_13:
	movi	d8, #0000000000000000
	mov	w10, #1174011904                // =0x45fa0000
	adrp	x21, init_value
	fmov	s9, #-5.00000000
	adrp	x9, .LCPI274_0
	fmov	s11, w10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x9, :lo12:.LCPI274_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB274_15
.LBB274_14:                             //   in Loop: Header=BB274_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB274_17
.LBB274_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s1, d0
	fdiv	s1, s1, s9
	fmul	s1, s1, s11
	fadd	s1, s1, s8
	fabs	s1, s1
	fcvt	d1, s1
	fcmp	d1, d10
	b.mi	.LBB274_14
// %bb.16:                              //   in Loop: Header=BB274_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB274_14
.LBB274_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB274_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB274_21
.LBB274_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB274_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB274_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldr	d12, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	ret
.LBB274_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end274:
	.size	_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc, .Lfunc_end274-_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc
.LCPI275_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI275_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc,@function
_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc: // @_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d15, d14, [sp, #64]             // 16-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -152
	.cfi_offset b15, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB275_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB275_13
// %bb.2:
	adrp	x9, .LCPI275_1
	movi	v5.4s, #63, lsl #24
	fmov	v6.4s, #3.00000000
	ldr	d13, [x9, :lo12:.LCPI275_1]
	adrp	x9, .LCPI275_0
	fmov	v7.4s, #0.25000000
	fmov	v16.4s, #5.00000000
	ldr	d14, [x9, :lo12:.LCPI275_0]
	mov	w9, #1174011904                 // =0x45fa0000
	fmov	s8, #0.50000000
	fmov	s9, #3.00000000
	fmov	s10, #0.25000000
	fmov	s11, #5.00000000
	fmov	s12, #-0.50000000
	fmov	s15, w9
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffff8
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stp	q7, q6, [sp, #32]               // 32-byte Folded Spill
	str	q16, [sp, #16]                  // 16-byte Folded Spill
	b	.LBB275_4
.LBB275_3:                              //   in Loop: Header=BB275_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB275_17
.LBB275_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB275_7 Depth 2
                                        //     Child Loop BB275_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #8
	b.hs	.LBB275_6
// %bb.5:                               //   in Loop: Header=BB275_4 Depth=1
	mov	x10, xzr
	b	.LBB275_9
.LBB275_6:                              // %.preheader2
                                        //   in Loop: Header=BB275_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB275_7:                              //   Parent Loop BB275_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	fmul	v1.4s, v1.4s, v5.4s
	fmul	v2.4s, v2.4s, v5.4s
	fdiv	v1.4s, v1.4s, v6.4s
	fdiv	v2.4s, v2.4s, v6.4s
	fmul	v1.4s, v1.4s, v7.4s
	fdiv	v1.4s, v1.4s, v16.4s
	fmul	v2.4s, v2.4s, v7.4s
	fdiv	v2.4s, v2.4s, v16.4s
	mov	s3, v1.s[1]
	fadd	s0, s0, s1
	mov	s4, v1.s[2]
	mov	s1, v1.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s4
	mov	s3, v2.s[2]
	fadd	s0, s0, s1
	mov	s1, v2.s[1]
	fadd	s0, s0, s2
	fadd	s0, s0, s1
	mov	s1, v2.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s1
	b.ne	.LBB275_7
// %bb.8:                               //   in Loop: Header=BB275_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB275_11
.LBB275_9:                              // %.preheader
                                        //   in Loop: Header=BB275_4 Depth=1
	add	x9, x21, x10, lsl #2
	sub	x10, x27, x10
.LBB275_10:                             //   Parent Loop BB275_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x10, x10, #1
	fmul	s1, s1, s8
	fdiv	s1, s1, s9
	fmul	s1, s1, s10
	fdiv	s1, s1, s11
	fadd	s0, s0, s1
	b.ne	.LBB275_10
.LBB275_11:                             //   in Loop: Header=BB275_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fcvt	s1, d1
	fmul	s1, s1, s12
	fdiv	s1, s1, s9
	fmul	s1, s1, s10
	fdiv	s1, s1, s11
	fmul	s1, s1, s15
	fadd	s1, s0, s1
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d13
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d14
	b.mi	.LBB275_3
// %bb.12:                              //   in Loop: Header=BB275_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	movi	v5.4s, #63, lsl #24
	ldp	q16, q7, [sp, #16]              // 32-byte Folded Reload
	ldr	q6, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB275_3
.LBB275_13:
	movi	d10, #0000000000000000
	mov	w10, #1174011904                // =0x45fa0000
	adrp	x21, init_value
	fmov	s8, #-0.50000000
	fmov	s9, #3.00000000
	fmov	s11, #0.25000000
	fmov	s12, #5.00000000
	adrp	x9, .LCPI275_0
	fmov	s14, w10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d13, [x9, :lo12:.LCPI275_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB275_15
.LBB275_14:                             //   in Loop: Header=BB275_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB275_17
.LBB275_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s1, d0
	fmul	s1, s1, s8
	fdiv	s1, s1, s9
	fmul	s1, s1, s11
	fdiv	s1, s1, s12
	fmul	s1, s1, s14
	fadd	s1, s1, s10
	fabs	s1, s1
	fcvt	d1, s1
	fcmp	d1, d13
	b.mi	.LBB275_14
// %bb.16:                              //   in Loop: Header=BB275_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB275_14
.LBB275_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB275_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB275_21
.LBB275_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB275_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB275_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	ldp	d15, d14, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	.cfi_restore b15
	ret
.LBB275_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end275:
	.size	_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc, .Lfunc_end275-_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc
.LCPI276_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI276_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc,@function
_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc: // @_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	d11, d10, [sp, #16]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #32]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB276_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB276_13
// %bb.2:
	movi	v5.4s, #64, lsl #24
	mov	w11, #-973471744                // =0xc5fa0000
	fmov	s8, #2.00000000
	adrp	x9, .LCPI276_1
	adrp	x10, .LCPI276_0
	fmov	s11, w11
	mov	w27, w20
	ldr	d9, [x9, :lo12:.LCPI276_1]
	ldr	d10, [x10, :lo12:.LCPI276_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffff8
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	b	.LBB276_4
.LBB276_3:                              //   in Loop: Header=BB276_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB276_17
.LBB276_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB276_7 Depth 2
                                        //     Child Loop BB276_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #8
	b.hs	.LBB276_6
// %bb.5:                               //   in Loop: Header=BB276_4 Depth=1
	mov	x10, xzr
	b	.LBB276_9
.LBB276_6:                              // %.preheader2
                                        //   in Loop: Header=BB276_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB276_7:                              //   Parent Loop BB276_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	fadd	v1.4s, v1.4s, v5.4s
	fadd	v2.4s, v2.4s, v5.4s
	mov	s3, v1.s[1]
	fadd	s0, s0, s1
	mov	s4, v1.s[2]
	mov	s1, v1.s[3]
	fadd	s0, s0, s3
	mov	s3, v2.s[2]
	fadd	s0, s0, s4
	fadd	s0, s0, s1
	mov	s1, v2.s[1]
	fadd	s0, s0, s2
	fadd	s0, s0, s1
	mov	s1, v2.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s1
	b.ne	.LBB276_7
// %bb.8:                               //   in Loop: Header=BB276_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB276_11
.LBB276_9:                              // %.preheader
                                        //   in Loop: Header=BB276_4 Depth=1
	add	x9, x21, x10, lsl #2
	sub	x10, x27, x10
.LBB276_10:                             //   Parent Loop BB276_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x10, x10, #1
	fadd	s1, s1, s8
	fadd	s0, s0, s1
	b.ne	.LBB276_10
.LBB276_11:                             //   in Loop: Header=BB276_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fcvt	s1, d1
	fadd	s1, s1, s8
	fmul	s1, s1, s11
	fadd	s1, s0, s1
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d9
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	b.mi	.LBB276_3
// %bb.12:                              //   in Loop: Header=BB276_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	movi	v5.4s, #64, lsl #24
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB276_3
.LBB276_13:
	movi	d8, #0000000000000000
	mov	w10, #-973471744                // =0xc5fa0000
	adrp	x21, init_value
	fmov	s9, #2.00000000
	adrp	x9, .LCPI276_0
	fmov	s11, w10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x9, :lo12:.LCPI276_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB276_15
.LBB276_14:                             //   in Loop: Header=BB276_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB276_17
.LBB276_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s1, d0
	fadd	s1, s1, s9
	fmul	s1, s1, s11
	fadd	s1, s1, s8
	fabs	s1, s1
	fcvt	d1, s1
	fcmp	d1, d10
	b.mi	.LBB276_14
// %bb.16:                              //   in Loop: Header=BB276_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB276_14
.LBB276_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB276_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB276_21
.LBB276_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB276_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB276_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #32]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #16]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB276_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end276:
	.size	_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc, .Lfunc_end276-_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc
.LCPI277_0:
	.xword	0x3f50624dd2f1a9fc              // double 0.001
.LCPI277_1:
	.xword	0x3f1a36e2eb1c432d              // double 1.0E-4
	.section	.text._Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc,"axG",@progbits,_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc,comdat
	.weak	_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc,@function
_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc: // @_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	str	d12, [sp, #16]                  // 8-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -144
	.cfi_remember_state
	str	x2, [sp, #24]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB277_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB277_13
// %bb.2:
	mov	w9, #39322                      // =0x999a
	movi	v5.4s, #64, lsl #24
	fmov	s8, #2.00000000
	movk	w9, #49177, lsl #16
	adrp	x10, .LCPI277_1
	mov	w27, w20
	dup	v6.4s, w9
	fmov	s9, w9
	adrp	x9, .LCPI277_0
	ldr	d11, [x9, :lo12:.LCPI277_0]
	mov	w9, #-973471744                 // =0xc5fa0000
	ldr	d10, [x10, :lo12:.LCPI277_1]
	fmov	s12, w9
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffff8
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q6, [sp]                        // 16-byte Folded Spill
	b	.LBB277_4
.LBB277_3:                              //   in Loop: Header=BB277_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB277_17
.LBB277_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB277_7 Depth 2
                                        //     Child Loop BB277_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #8
	b.hs	.LBB277_6
// %bb.5:                               //   in Loop: Header=BB277_4 Depth=1
	mov	x10, xzr
	b	.LBB277_9
.LBB277_6:                              // %.preheader2
                                        //   in Loop: Header=BB277_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB277_7:                              //   Parent Loop BB277_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	fadd	v1.4s, v1.4s, v5.4s
	fadd	v2.4s, v2.4s, v5.4s
	fadd	v1.4s, v1.4s, v6.4s
	fadd	v2.4s, v2.4s, v6.4s
	mov	s3, v1.s[1]
	fadd	s0, s0, s1
	mov	s4, v1.s[2]
	mov	s1, v1.s[3]
	fadd	s0, s0, s3
	mov	s3, v2.s[2]
	fadd	s0, s0, s4
	fadd	s0, s0, s1
	mov	s1, v2.s[1]
	fadd	s0, s0, s2
	fadd	s0, s0, s1
	mov	s1, v2.s[3]
	fadd	s0, s0, s3
	fadd	s0, s0, s1
	b.ne	.LBB277_7
// %bb.8:                               //   in Loop: Header=BB277_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB277_11
.LBB277_9:                              // %.preheader
                                        //   in Loop: Header=BB277_4 Depth=1
	add	x9, x21, x10, lsl #2
	sub	x10, x27, x10
.LBB277_10:                             //   Parent Loop BB277_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	s1, [x9], #4
	subs	x10, x10, #1
	fadd	s1, s1, s8
	fadd	s1, s1, s9
	fadd	s0, s0, s1
	b.ne	.LBB277_10
.LBB277_11:                             //   in Loop: Header=BB277_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fcvt	s1, d1
	fadd	s1, s1, s8
	fadd	s1, s1, s9
	fmul	s1, s1, s12
	fadd	s1, s0, s1
	fdiv	s2, s1, s0
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d10
	fcsel	s0, s2, s1, gt
	fabs	s0, s0
	fcvt	d0, s0
	fcmp	d0, d11
	b.mi	.LBB277_3
// %bb.12:                              //   in Loop: Header=BB277_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	movi	v5.4s, #64, lsl #24
	ldr	q6, [sp]                        // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB277_3
.LBB277_13:
	mov	w9, #39322                      // =0x999a
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	w9, #49177, lsl #16
	fmov	s9, #2.00000000
	adrp	x10, .LCPI277_0
	fmov	s10, w9
	mov	w9, #-973471744                 // =0xc5fa0000
	ldr	d0, [x21, :lo12:init_value]
	fmov	s12, w9
	ldr	d11, [x10, :lo12:.LCPI277_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB277_15
.LBB277_14:                             //   in Loop: Header=BB277_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB277_17
.LBB277_15:                             // =>This Inner Loop Header: Depth=1
	fcvt	s1, d0
	fadd	s1, s1, s9
	fadd	s1, s1, s10
	fmul	s1, s1, s12
	fadd	s1, s1, s8
	fabs	s1, s1
	fcvt	d1, s1
	fcmp	d1, d11
	b.mi	.LBB277_14
// %bb.16:                              //   in Loop: Header=BB277_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB277_14
.LBB277_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB277_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB277_21
.LBB277_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB277_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB277_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldr	d12, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	ret
.LBB277_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end277:
	.size	_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc, .Lfunc_end277-_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId10custom_twoIdEEvPT_iPKc
.LCPI278_0:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
.LCPI278_1:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
	.section	.text._Z13test_constantId10custom_twoIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId10custom_twoIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId10custom_twoIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId10custom_twoIdEEvPT_iPKc,@function
_Z13test_constantId10custom_twoIdEEvPT_iPKc: // @_Z13test_constantId10custom_twoIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-112]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x25, [sp, #48]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_offset b8, -88
	.cfi_offset b9, -96
	.cfi_offset b10, -104
	.cfi_offset b11, -112
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB278_10
// %bb.1:
	cmp	w20, #0
	b.le	.LBB278_8
// %bb.2:                               // %.preheader
	mov	x11, #70368744177664            // =0x400000000000
	fmov	d8, #2.00000000
	adrp	x9, .LCPI278_0
	movk	x11, #49359, lsl #48
	adrp	x10, .LCPI278_1
	ldr	d9, [x9, :lo12:.LCPI278_0]
	fmov	d11, x11
	ldr	d10, [x10, :lo12:.LCPI278_1]
	mov	w25, wzr
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB278_4
.LBB278_3:                              //   in Loop: Header=BB278_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB278_10
.LBB278_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB278_5 Depth 2
	movi	d0, #0000000000000000
	mov	w9, w20
.LBB278_5:                              //   Parent Loop BB278_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	fadd	d0, d0, d8
	subs	w9, w9, #1
	b.ne	.LBB278_5
// %bb.6:                               //   in Loop: Header=BB278_4 Depth=1
	fadd	d1, d0, d11
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d9
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d10
	b.mi	.LBB278_3
// %bb.7:                               //   in Loop: Header=BB278_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB278_3
.LBB278_8:                              // %.preheader1
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB278_9:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB278_9
.LBB278_10:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB278_12
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB278_14
.LBB278_12:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB278_15
// %bb.13:
	ldr	w8, [x22, :lo12:current_test]
.LBB278_14:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x25, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #112            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB278_15:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end278:
	.size	_Z13test_constantId10custom_twoIdEEvPT_iPKc, .Lfunc_end278-_Z13test_constantId10custom_twoIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId20custom_add_constantsIdEEvPT_iPKc
.LCPI279_0:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
.LCPI279_1:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
	.section	.text._Z13test_constantId20custom_add_constantsIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc,@function
_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc: // @_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-112]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x25, [sp, #48]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_offset b8, -88
	.cfi_offset b9, -96
	.cfi_offset b10, -104
	.cfi_offset b11, -112
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB279_10
// %bb.1:
	cmp	w20, #0
	b.le	.LBB279_8
// %bb.2:                               // %.preheader
	mov	x11, #123145302310912           // =0x700000000000
	fmov	d8, #3.00000000
	adrp	x9, .LCPI279_0
	movk	x11, #49367, lsl #48
	adrp	x10, .LCPI279_1
	ldr	d9, [x9, :lo12:.LCPI279_0]
	fmov	d11, x11
	ldr	d10, [x10, :lo12:.LCPI279_1]
	mov	w25, wzr
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB279_4
.LBB279_3:                              //   in Loop: Header=BB279_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB279_10
.LBB279_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB279_5 Depth 2
	movi	d0, #0000000000000000
	mov	w9, w20
.LBB279_5:                              //   Parent Loop BB279_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	fadd	d0, d0, d8
	subs	w9, w9, #1
	b.ne	.LBB279_5
// %bb.6:                               //   in Loop: Header=BB279_4 Depth=1
	fadd	d1, d0, d11
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d9
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d10
	b.mi	.LBB279_3
// %bb.7:                               //   in Loop: Header=BB279_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB279_3
.LBB279_8:                              // %.preheader1
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB279_9:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB279_9
.LBB279_10:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB279_12
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB279_14
.LBB279_12:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB279_15
// %bb.13:
	ldr	w8, [x22, :lo12:current_test]
.LBB279_14:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x25, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #112            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB279_15:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end279:
	.size	_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc, .Lfunc_end279-_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc
.LCPI280_0:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
.LCPI280_1:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
	.section	.text._Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc,@function
_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc: // @_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-112]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x25, [sp, #48]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_offset b8, -88
	.cfi_offset b9, -96
	.cfi_offset b10, -104
	.cfi_offset b11, -112
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB280_10
// %bb.1:
	cmp	w20, #0
	b.le	.LBB280_8
// %bb.2:                               // %.preheader
	mov	x11, #70368744177664            // =0x400000000000
	fmov	d8, #1.00000000
	adrp	x9, .LCPI280_0
	movk	x11, #49343, lsl #48
	adrp	x10, .LCPI280_1
	ldr	d9, [x9, :lo12:.LCPI280_0]
	fmov	d11, x11
	ldr	d10, [x10, :lo12:.LCPI280_1]
	mov	w25, wzr
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB280_4
.LBB280_3:                              //   in Loop: Header=BB280_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB280_10
.LBB280_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB280_5 Depth 2
	movi	d0, #0000000000000000
	mov	w9, w20
.LBB280_5:                              //   Parent Loop BB280_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	fadd	d0, d0, d8
	subs	w9, w9, #1
	b.ne	.LBB280_5
// %bb.6:                               //   in Loop: Header=BB280_4 Depth=1
	fadd	d1, d0, d11
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d9
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d10
	b.mi	.LBB280_3
// %bb.7:                               //   in Loop: Header=BB280_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB280_3
.LBB280_8:                              // %.preheader1
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB280_9:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB280_9
.LBB280_10:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB280_12
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB280_14
.LBB280_12:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB280_15
// %bb.13:
	ldr	w8, [x22, :lo12:current_test]
.LBB280_14:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x25, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #112            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB280_15:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end280:
	.size	_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc, .Lfunc_end280-_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc
.LCPI281_0:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
.LCPI281_1:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
	.section	.text._Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc,@function
_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc: // @_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-112]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x25, [sp, #48]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_offset b8, -88
	.cfi_offset b9, -96
	.cfi_offset b10, -104
	.cfi_offset b11, -112
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB281_10
// %bb.1:
	cmp	w20, #0
	b.le	.LBB281_8
// %bb.2:                               // %.preheader
	mov	x11, #123145302310912           // =0x700000000000
	fmov	d8, #6.00000000
	adrp	x9, .LCPI281_0
	movk	x11, #49383, lsl #48
	adrp	x10, .LCPI281_1
	ldr	d9, [x9, :lo12:.LCPI281_0]
	fmov	d11, x11
	ldr	d10, [x10, :lo12:.LCPI281_1]
	mov	w25, wzr
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB281_4
.LBB281_3:                              //   in Loop: Header=BB281_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB281_10
.LBB281_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB281_5 Depth 2
	movi	d0, #0000000000000000
	mov	w9, w20
.LBB281_5:                              //   Parent Loop BB281_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	fadd	d0, d0, d8
	subs	w9, w9, #1
	b.ne	.LBB281_5
// %bb.6:                               //   in Loop: Header=BB281_4 Depth=1
	fadd	d1, d0, d11
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d9
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d10
	b.mi	.LBB281_3
// %bb.7:                               //   in Loop: Header=BB281_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB281_3
.LBB281_8:                              // %.preheader1
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB281_9:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB281_9
.LBB281_10:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB281_12
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB281_14
.LBB281_12:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB281_15
// %bb.13:
	ldr	w8, [x22, :lo12:current_test]
.LBB281_14:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x25, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #112            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB281_15:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end281:
	.size	_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc, .Lfunc_end281-_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc
.LCPI282_0:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
.LCPI282_1:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
	.section	.text._Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc,@function
_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc: // @_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	stp	d11, d10, [sp, #-112]!          // 16-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	str	x25, [sp, #48]                  // 8-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 80
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -64
	.cfi_offset w30, -72
	.cfi_offset w29, -80
	.cfi_offset b8, -88
	.cfi_offset b9, -96
	.cfi_offset b10, -104
	.cfi_offset b11, -112
	.cfi_remember_state
	mov	x19, x2
	mov	w20, w1
	bl	clock
	adrp	x24, iterations
	adrp	x23, start_time
	adrp	x22, current_test
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x23, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB282_10
// %bb.1:
	cmp	w20, #0
	b.le	.LBB282_8
// %bb.2:                               // %.preheader
	mov	x11, #70368744177664            // =0x400000000000
	fmov	d8, #2.00000000
	adrp	x9, .LCPI282_0
	movk	x11, #49359, lsl #48
	adrp	x10, .LCPI282_1
	ldr	d9, [x9, :lo12:.LCPI282_0]
	fmov	d11, x11
	ldr	d10, [x10, :lo12:.LCPI282_1]
	mov	w25, wzr
	adrp	x21, .L.str.299
	add	x21, x21, :lo12:.L.str.299
	b	.LBB282_4
.LBB282_3:                              //   in Loop: Header=BB282_4 Depth=1
	add	w25, w25, #1
	cmp	w25, w8
	b.ge	.LBB282_10
.LBB282_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB282_5 Depth 2
	movi	d0, #0000000000000000
	mov	w9, w20
.LBB282_5:                              //   Parent Loop BB282_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	fadd	d0, d0, d8
	subs	w9, w9, #1
	b.ne	.LBB282_5
// %bb.6:                               //   in Loop: Header=BB282_4 Depth=1
	fadd	d1, d0, d11
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d9
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d10
	b.mi	.LBB282_3
// %bb.7:                               //   in Loop: Header=BB282_4 Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x21
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB282_3
.LBB282_8:                              // %.preheader1
	mov	w21, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
.LBB282_9:                              // =>This Inner Loop Header: Depth=1
	ldr	w1, [x22, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	add	w21, w21, #1
	cmp	w21, w8
	b.lt	.LBB282_9
.LBB282_10:
	bl	clock
	adrp	x25, results
	adrp	x24, allocated_results
	mov	x20, x0
	ldr	x0, [x25, :lo12:results]
	ldr	x21, [x23, :lo12:start_time]
	ldr	w9, [x24, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB282_12
// %bb.11:
	ldr	w8, [x22, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB282_14
.LBB282_12:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x24, :lo12:allocated_results]
	bl	realloc
	str	x0, [x25, :lo12:results]
	cbz	x0, .LBB282_15
// %bb.13:
	ldr	w8, [x22, :lo12:current_test]
.LBB282_14:
	sub	x9, x20, x21
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x19, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x22, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldr	x25, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	ldp	d11, d10, [sp], #112            // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB282_15:
	.cfi_restore_state
	ldr	w1, [x24, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end282:
	.size	_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc, .Lfunc_end282-_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId19custom_constant_addIdEEvPT_iPKc
.LCPI283_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI283_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z13test_constantId19custom_constant_addIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId19custom_constant_addIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId19custom_constant_addIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId19custom_constant_addIdEEvPT_iPKc,@function
_Z13test_constantId19custom_constant_addIdEEvPT_iPKc: // @_Z13test_constantId19custom_constant_addIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB283_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB283_13
// %bb.2:
	mov	x11, #70368744177664            // =0x400000000000
	fmov	v4.2d, #10.00000000
	fmov	d8, #10.00000000
	movk	x11, #49343, lsl #48
	adrp	x9, .LCPI283_1
	adrp	x10, .LCPI283_0
	fmov	d11, x11
	mov	w27, w20
	ldr	d9, [x9, :lo12:.LCPI283_1]
	ldr	d10, [x10, :lo12:.LCPI283_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB283_4
.LBB283_3:                              //   in Loop: Header=BB283_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB283_17
.LBB283_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB283_7 Depth 2
                                        //     Child Loop BB283_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB283_6
// %bb.5:                               //   in Loop: Header=BB283_4 Depth=1
	mov	x10, xzr
	b	.LBB283_9
.LBB283_6:                              // %.preheader2
                                        //   in Loop: Header=BB283_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB283_7:                              //   Parent Loop BB283_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v4.2d
	mov	d3, v1.d[1]
	fadd	d0, d0, d1
	fadd	v1.2d, v2.2d, v4.2d
	fadd	d0, d0, d3
	mov	d2, v1.d[1]
	fadd	d0, d0, d1
	fadd	d0, d0, d2
	b.ne	.LBB283_7
// %bb.8:                               //   in Loop: Header=BB283_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB283_11
.LBB283_9:                              // %.preheader
                                        //   in Loop: Header=BB283_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB283_10:                             //   Parent Loop BB283_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fadd	d0, d0, d1
	b.ne	.LBB283_10
.LBB283_11:                             //   in Loop: Header=BB283_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d8
	fmul	d1, d1, d11
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d9
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d10
	b.mi	.LBB283_3
// %bb.12:                              //   in Loop: Header=BB283_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB283_3
.LBB283_13:
	mov	x10, #70368744177664            // =0x400000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x10, #49343, lsl #48
	fmov	d9, #10.00000000
	adrp	x9, .LCPI283_0
	fmov	d11, x10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x9, :lo12:.LCPI283_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB283_15
.LBB283_14:                             //   in Loop: Header=BB283_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB283_17
.LBB283_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmul	d1, d1, d11
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d10
	b.mi	.LBB283_14
// %bb.16:                              //   in Loop: Header=BB283_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB283_14
.LBB283_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB283_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB283_21
.LBB283_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB283_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB283_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB283_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end283:
	.size	_Z13test_constantId19custom_constant_addIdEEvPT_iPKc, .Lfunc_end283-_Z13test_constantId19custom_constant_addIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc
.LCPI284_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI284_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc,@function
_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc: // @_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	stur	x2, [x29, #-56]                 // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB284_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB284_13
// %bb.2:
	adrp	x9, .LCPI284_1
	fmov	v4.2d, #1.00000000
	fmov	v5.2d, #2.00000000
	ldr	d12, [x9, :lo12:.LCPI284_1]
	adrp	x9, .LCPI284_0
	fmov	v6.2d, #3.00000000
	ldr	d13, [x9, :lo12:.LCPI284_0]
	mov	x9, #70368744177664             // =0x400000000000
	fmov	v7.2d, #4.00000000
	movk	x9, #49343, lsl #48
	fmov	d8, #1.00000000
	fmov	d9, #2.00000000
	fmov	d10, #3.00000000
	fmov	d11, #4.00000000
	fmov	d14, x9
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stp	q7, q6, [sp]                    // 32-byte Folded Spill
	stp	q5, q4, [sp, #32]               // 32-byte Folded Spill
	b	.LBB284_4
.LBB284_3:                              //   in Loop: Header=BB284_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB284_17
.LBB284_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB284_7 Depth 2
                                        //     Child Loop BB284_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB284_6
// %bb.5:                               //   in Loop: Header=BB284_4 Depth=1
	mov	x10, xzr
	b	.LBB284_9
.LBB284_6:                              // %.preheader2
                                        //   in Loop: Header=BB284_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB284_7:                              //   Parent Loop BB284_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v4.2d
	fadd	v2.2d, v2.2d, v4.2d
	fadd	v1.2d, v1.2d, v5.2d
	fadd	v2.2d, v2.2d, v5.2d
	fadd	v1.2d, v1.2d, v6.2d
	fadd	v2.2d, v2.2d, v6.2d
	fadd	v1.2d, v1.2d, v7.2d
	mov	d3, v1.d[1]
	fadd	d0, d0, d1
	fadd	v1.2d, v2.2d, v7.2d
	fadd	d0, d0, d3
	mov	d2, v1.d[1]
	fadd	d0, d0, d1
	fadd	d0, d0, d2
	b.ne	.LBB284_7
// %bb.8:                               //   in Loop: Header=BB284_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB284_11
.LBB284_9:                              // %.preheader
                                        //   in Loop: Header=BB284_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB284_10:                             //   Parent Loop BB284_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fadd	d1, d1, d9
	fadd	d1, d1, d10
	fadd	d1, d1, d11
	fadd	d0, d0, d1
	b.ne	.LBB284_10
.LBB284_11:                             //   in Loop: Header=BB284_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d8
	fadd	d1, d1, d9
	fadd	d1, d1, d10
	fadd	d1, d1, d11
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB284_3
// %bb.12:                              //   in Loop: Header=BB284_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldp	q7, q6, [sp]                    // 32-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	ldp	q5, q4, [sp, #32]               // 32-byte Folded Reload
	b	.LBB284_3
.LBB284_13:
	mov	x10, #70368744177664            // =0x400000000000
	movi	d10, #0000000000000000
	adrp	x21, init_value
	movk	x10, #49343, lsl #48
	fmov	d8, #1.00000000
	fmov	d9, #2.00000000
	fmov	d11, #3.00000000
	fmov	d12, #4.00000000
	adrp	x9, .LCPI284_0
	fmov	d14, x10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d13, [x9, :lo12:.LCPI284_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB284_15
.LBB284_14:                             //   in Loop: Header=BB284_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB284_17
.LBB284_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d8
	fadd	d1, d1, d9
	fadd	d1, d1, d11
	fadd	d1, d1, d12
	fmul	d1, d1, d14
	fadd	d1, d1, d10
	fabs	d1, d1
	fcmp	d1, d13
	b.mi	.LBB284_14
// %bb.16:                              //   in Loop: Header=BB284_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB284_14
.LBB284_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB284_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB284_21
.LBB284_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB284_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB284_21:
	sub	x9, x20, x19
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB284_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end284:
	.size	_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc, .Lfunc_end284-_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId19custom_constant_subIdEEvPT_iPKc
.LCPI285_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI285_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z13test_constantId19custom_constant_subIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId19custom_constant_subIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId19custom_constant_subIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId19custom_constant_subIdEEvPT_iPKc,@function
_Z13test_constantId19custom_constant_subIdEEvPT_iPKc: // @_Z13test_constantId19custom_constant_subIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB285_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB285_13
// %bb.2:
	mov	x11, #70368744177664            // =0x400000000000
	fmov	v4.2d, #-10.00000000
	fmov	d8, #-10.00000000
	movk	x11, #49343, lsl #48
	adrp	x9, .LCPI285_1
	adrp	x10, .LCPI285_0
	fmov	d11, x11
	mov	w27, w20
	ldr	d9, [x9, :lo12:.LCPI285_1]
	ldr	d10, [x10, :lo12:.LCPI285_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB285_4
.LBB285_3:                              //   in Loop: Header=BB285_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB285_17
.LBB285_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB285_7 Depth 2
                                        //     Child Loop BB285_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB285_6
// %bb.5:                               //   in Loop: Header=BB285_4 Depth=1
	mov	x10, xzr
	b	.LBB285_9
.LBB285_6:                              // %.preheader2
                                        //   in Loop: Header=BB285_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB285_7:                              //   Parent Loop BB285_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v4.2d
	mov	d3, v1.d[1]
	fadd	d0, d0, d1
	fadd	v1.2d, v2.2d, v4.2d
	fadd	d0, d0, d3
	mov	d2, v1.d[1]
	fadd	d0, d0, d1
	fadd	d0, d0, d2
	b.ne	.LBB285_7
// %bb.8:                               //   in Loop: Header=BB285_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB285_11
.LBB285_9:                              // %.preheader
                                        //   in Loop: Header=BB285_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB285_10:                             //   Parent Loop BB285_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fadd	d0, d0, d1
	b.ne	.LBB285_10
.LBB285_11:                             //   in Loop: Header=BB285_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d8
	fmul	d1, d1, d11
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d9
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d10
	b.mi	.LBB285_3
// %bb.12:                              //   in Loop: Header=BB285_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB285_3
.LBB285_13:
	mov	x10, #70368744177664            // =0x400000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x10, #49343, lsl #48
	fmov	d9, #-10.00000000
	adrp	x9, .LCPI285_0
	fmov	d11, x10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x9, :lo12:.LCPI285_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB285_15
.LBB285_14:                             //   in Loop: Header=BB285_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB285_17
.LBB285_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmul	d1, d1, d11
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d10
	b.mi	.LBB285_14
// %bb.16:                              //   in Loop: Header=BB285_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB285_14
.LBB285_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB285_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB285_21
.LBB285_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB285_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB285_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB285_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end285:
	.size	_Z13test_constantId19custom_constant_subIdEEvPT_iPKc, .Lfunc_end285-_Z13test_constantId19custom_constant_subIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc
.LCPI286_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI286_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc,@function
_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc: // @_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	stur	x2, [x29, #-56]                 // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB286_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB286_13
// %bb.2:
	adrp	x9, .LCPI286_1
	fmov	v4.2d, #-1.00000000
	fmov	v5.2d, #-2.00000000
	ldr	d12, [x9, :lo12:.LCPI286_1]
	adrp	x9, .LCPI286_0
	fmov	v6.2d, #-3.00000000
	ldr	d13, [x9, :lo12:.LCPI286_0]
	mov	x9, #70368744177664             // =0x400000000000
	fmov	v7.2d, #-4.00000000
	movk	x9, #49343, lsl #48
	fmov	d8, #-1.00000000
	fmov	d9, #-2.00000000
	fmov	d10, #-3.00000000
	fmov	d11, #-4.00000000
	fmov	d14, x9
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stp	q7, q6, [sp]                    // 32-byte Folded Spill
	stp	q5, q4, [sp, #32]               // 32-byte Folded Spill
	b	.LBB286_4
.LBB286_3:                              //   in Loop: Header=BB286_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB286_17
.LBB286_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB286_7 Depth 2
                                        //     Child Loop BB286_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB286_6
// %bb.5:                               //   in Loop: Header=BB286_4 Depth=1
	mov	x10, xzr
	b	.LBB286_9
.LBB286_6:                              // %.preheader2
                                        //   in Loop: Header=BB286_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB286_7:                              //   Parent Loop BB286_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v4.2d
	fadd	v2.2d, v2.2d, v4.2d
	fadd	v1.2d, v1.2d, v5.2d
	fadd	v2.2d, v2.2d, v5.2d
	fadd	v1.2d, v1.2d, v6.2d
	fadd	v2.2d, v2.2d, v6.2d
	fadd	v1.2d, v1.2d, v7.2d
	mov	d3, v1.d[1]
	fadd	d0, d0, d1
	fadd	v1.2d, v2.2d, v7.2d
	fadd	d0, d0, d3
	mov	d2, v1.d[1]
	fadd	d0, d0, d1
	fadd	d0, d0, d2
	b.ne	.LBB286_7
// %bb.8:                               //   in Loop: Header=BB286_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB286_11
.LBB286_9:                              // %.preheader
                                        //   in Loop: Header=BB286_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB286_10:                             //   Parent Loop BB286_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fadd	d1, d1, d9
	fadd	d1, d1, d10
	fadd	d1, d1, d11
	fadd	d0, d0, d1
	b.ne	.LBB286_10
.LBB286_11:                             //   in Loop: Header=BB286_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d8
	fadd	d1, d1, d9
	fadd	d1, d1, d10
	fadd	d1, d1, d11
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB286_3
// %bb.12:                              //   in Loop: Header=BB286_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldp	q7, q6, [sp]                    // 32-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	ldp	q5, q4, [sp, #32]               // 32-byte Folded Reload
	b	.LBB286_3
.LBB286_13:
	mov	x10, #70368744177664            // =0x400000000000
	movi	d10, #0000000000000000
	adrp	x21, init_value
	movk	x10, #49343, lsl #48
	fmov	d8, #-1.00000000
	fmov	d9, #-2.00000000
	fmov	d11, #-3.00000000
	fmov	d12, #-4.00000000
	adrp	x9, .LCPI286_0
	fmov	d14, x10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d13, [x9, :lo12:.LCPI286_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB286_15
.LBB286_14:                             //   in Loop: Header=BB286_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB286_17
.LBB286_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d8
	fadd	d1, d1, d9
	fadd	d1, d1, d11
	fadd	d1, d1, d12
	fmul	d1, d1, d14
	fadd	d1, d1, d10
	fabs	d1, d1
	fcmp	d1, d13
	b.mi	.LBB286_14
// %bb.16:                              //   in Loop: Header=BB286_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB286_14
.LBB286_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB286_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB286_21
.LBB286_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB286_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB286_21:
	sub	x9, x20, x19
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB286_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end286:
	.size	_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc, .Lfunc_end286-_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc
.LCPI287_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI287_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc,@function
_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc: // @_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	str	d12, [sp, #16]                  // 8-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -144
	.cfi_remember_state
	str	x2, [sp, #24]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB287_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB287_13
// %bb.2:
	mov	x9, #4638144666238189568        // =0x405e000000000000
	adrp	x10, .LCPI287_1
	mov	w27, w20
	dup	v4.2d, x9
	fmov	d8, x9
	mov	x9, #-4585227370616586240       // =0xc05e000000000000
	fmov	d9, x9
	adrp	x9, .LCPI287_0
	ldr	d10, [x10, :lo12:.LCPI287_1]
	ldr	d11, [x9, :lo12:.LCPI287_0]
	mov	x9, #70368744177664             // =0x400000000000
	mov	w26, wzr
	movk	x9, #16575, lsl #48
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	fmov	d12, x9
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q4, [sp]                        // 16-byte Folded Spill
	b	.LBB287_4
.LBB287_3:                              //   in Loop: Header=BB287_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB287_17
.LBB287_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB287_7 Depth 2
                                        //     Child Loop BB287_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB287_6
// %bb.5:                               //   in Loop: Header=BB287_4 Depth=1
	mov	x10, xzr
	b	.LBB287_9
.LBB287_6:                              // %.preheader2
                                        //   in Loop: Header=BB287_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB287_7:                              //   Parent Loop BB287_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fmul	v1.2d, v1.2d, v4.2d
	mov	d3, v1.d[1]
	fadd	d0, d0, d1
	fmul	v1.2d, v2.2d, v4.2d
	fadd	d0, d0, d3
	mov	d2, v1.d[1]
	fadd	d0, d0, d1
	fadd	d0, d0, d2
	b.ne	.LBB287_7
// %bb.8:                               //   in Loop: Header=BB287_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB287_11
.LBB287_9:                              // %.preheader
                                        //   in Loop: Header=BB287_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB287_10:                             //   Parent Loop BB287_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fmul	d1, d1, d8
	fadd	d0, d0, d1
	b.ne	.LBB287_10
.LBB287_11:                             //   in Loop: Header=BB287_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fmul	d1, d1, d9
	fmul	d1, d1, d12
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d10
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d11
	b.mi	.LBB287_3
// %bb.12:                              //   in Loop: Header=BB287_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldr	q4, [sp]                        // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB287_3
.LBB287_13:
	mov	x9, #-4585227370616586240       // =0xc05e000000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	fmov	d9, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x10, .LCPI287_0
	movk	x9, #16575, lsl #48
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x10, :lo12:.LCPI287_0]
	fmov	d11, x9
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB287_15
.LBB287_14:                             //   in Loop: Header=BB287_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB287_17
.LBB287_15:                             // =>This Inner Loop Header: Depth=1
	fmul	d1, d0, d9
	fmul	d1, d1, d11
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d10
	b.mi	.LBB287_14
// %bb.16:                              //   in Loop: Header=BB287_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB287_14
.LBB287_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB287_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB287_21
.LBB287_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB287_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB287_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldr	d12, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	ret
.LBB287_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end287:
	.size	_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc, .Lfunc_end287-_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc
.LCPI288_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI288_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc,@function
_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc: // @_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	str	d14, [sp, #48]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #64]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #80]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #96]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #56]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB288_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB288_13
// %bb.2:
	adrp	x9, .LCPI288_1
	fmov	v4.2d, #3.00000000
	fmov	v5.2d, #4.00000000
	ldr	d12, [x9, :lo12:.LCPI288_1]
	adrp	x9, .LCPI288_0
	fmov	v6.2d, #5.00000000
	ldr	d13, [x9, :lo12:.LCPI288_0]
	mov	x9, #70368744177664             // =0x400000000000
	fmov	d8, #3.00000000
	movk	x9, #16575, lsl #48
	fmov	d9, #4.00000000
	fmov	d10, #5.00000000
	fmov	d11, #-3.00000000
	fmov	d14, x9
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stp	q5, q4, [sp, #16]               // 32-byte Folded Spill
	str	q6, [sp]                        // 16-byte Folded Spill
	b	.LBB288_4
.LBB288_3:                              //   in Loop: Header=BB288_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB288_17
.LBB288_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB288_7 Depth 2
                                        //     Child Loop BB288_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB288_6
// %bb.5:                               //   in Loop: Header=BB288_4 Depth=1
	mov	x10, xzr
	b	.LBB288_9
.LBB288_6:                              // %.preheader2
                                        //   in Loop: Header=BB288_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB288_7:                              //   Parent Loop BB288_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v1.2d
	fadd	v2.2d, v2.2d, v2.2d
	fmul	v1.2d, v1.2d, v4.2d
	fmul	v2.2d, v2.2d, v4.2d
	fmul	v1.2d, v1.2d, v5.2d
	fmul	v2.2d, v2.2d, v5.2d
	fmul	v1.2d, v1.2d, v6.2d
	mov	d3, v1.d[1]
	fadd	d0, d0, d1
	fmul	v1.2d, v2.2d, v6.2d
	fadd	d0, d0, d3
	mov	d2, v1.d[1]
	fadd	d0, d0, d1
	fadd	d0, d0, d2
	b.ne	.LBB288_7
// %bb.8:                               //   in Loop: Header=BB288_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB288_11
.LBB288_9:                              // %.preheader
                                        //   in Loop: Header=BB288_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB288_10:                             //   Parent Loop BB288_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d1
	fmul	d1, d1, d8
	fmul	d1, d1, d9
	fmul	d1, d1, d10
	fadd	d0, d0, d1
	b.ne	.LBB288_10
.LBB288_11:                             //   in Loop: Header=BB288_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d1
	fmul	d1, d1, d11
	fmul	d1, d1, d9
	fmul	d1, d1, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB288_3
// %bb.12:                              //   in Loop: Header=BB288_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldp	q6, q5, [sp]                    // 32-byte Folded Reload
	ldr	q4, [sp, #32]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB288_3
.LBB288_13:
	mov	x10, #70368744177664            // =0x400000000000
	movi	d9, #0000000000000000
	adrp	x21, init_value
	movk	x10, #16575, lsl #48
	fmov	d8, #-3.00000000
	fmov	d10, #4.00000000
	fmov	d11, #5.00000000
	adrp	x9, .LCPI288_0
	fmov	d13, x10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d12, [x9, :lo12:.LCPI288_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB288_15
.LBB288_14:                             //   in Loop: Header=BB288_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB288_17
.LBB288_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d0
	fmul	d1, d1, d8
	fmul	d1, d1, d10
	fmul	d1, d1, d11
	fmul	d1, d1, d13
	fadd	d1, d1, d9
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB288_14
// %bb.16:                              //   in Loop: Header=BB288_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB288_14
.LBB288_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB288_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB288_21
.LBB288_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB288_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB288_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldr	d14, [sp, #48]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #96]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #80]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB288_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end288:
	.size	_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc, .Lfunc_end288-_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc
.LCPI289_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI289_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc,@function
_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc: // @_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB289_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB289_13
// %bb.2:
	mov	x11, #70368744177664            // =0x400000000000
	mov	x9, #4638144666238189568        // =0x405e000000000000
	adrp	x10, .LCPI289_0
	movk	x11, #49343, lsl #48
	dup	v4.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI289_1
	fmov	d11, x11
	mov	w27, w20
	ldr	d9, [x9, :lo12:.LCPI289_1]
	ldr	d10, [x10, :lo12:.LCPI289_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB289_4
.LBB289_3:                              //   in Loop: Header=BB289_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB289_17
.LBB289_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB289_7 Depth 2
                                        //     Child Loop BB289_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB289_6
// %bb.5:                               //   in Loop: Header=BB289_4 Depth=1
	mov	x10, xzr
	b	.LBB289_9
.LBB289_6:                              // %.preheader2
                                        //   in Loop: Header=BB289_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB289_7:                              //   Parent Loop BB289_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v4.2d
	mov	d3, v1.d[1]
	fadd	d0, d0, d1
	fadd	v1.2d, v2.2d, v4.2d
	fadd	d0, d0, d3
	mov	d2, v1.d[1]
	fadd	d0, d0, d1
	fadd	d0, d0, d2
	b.ne	.LBB289_7
// %bb.8:                               //   in Loop: Header=BB289_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB289_11
.LBB289_9:                              // %.preheader
                                        //   in Loop: Header=BB289_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB289_10:                             //   Parent Loop BB289_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fadd	d0, d0, d1
	b.ne	.LBB289_10
.LBB289_11:                             //   in Loop: Header=BB289_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d8
	fmul	d1, d1, d11
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d9
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d10
	b.mi	.LBB289_3
// %bb.12:                              //   in Loop: Header=BB289_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB289_3
.LBB289_13:
	mov	x9, #4638144666238189568        // =0x405e000000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	fmov	d9, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x10, .LCPI289_0
	movk	x9, #49343, lsl #48
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x10, :lo12:.LCPI289_0]
	fmov	d11, x9
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB289_15
.LBB289_14:                             //   in Loop: Header=BB289_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB289_17
.LBB289_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmul	d1, d1, d11
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d10
	b.mi	.LBB289_14
// %bb.16:                              //   in Loop: Header=BB289_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB289_14
.LBB289_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB289_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB289_21
.LBB289_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB289_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB289_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB289_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end289:
	.size	_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc, .Lfunc_end289-_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId22custom_constant_divideIdEEvPT_iPKc
.LCPI290_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI290_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z13test_constantId22custom_constant_divideIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc,@function
_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc: // @_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	str	d12, [sp, #16]                  // 8-byte Folded Spill
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -144
	.cfi_remember_state
	str	x2, [sp, #24]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB290_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB290_13
// %bb.2:
	mov	x11, #70368744177664            // =0x400000000000
	fmov	v4.2d, #5.00000000
	fmov	d8, #5.00000000
	movk	x11, #16575, lsl #48
	fmov	d9, #-5.00000000
	adrp	x9, .LCPI290_1
	adrp	x10, .LCPI290_0
	fmov	d12, x11
	mov	w27, w20
	ldr	d10, [x9, :lo12:.LCPI290_1]
	ldr	d11, [x10, :lo12:.LCPI290_0]
	mov	w26, wzr
	add	x28, x21, #16
	adrp	x24, init_value
	and	x19, x27, #0x7ffffffc
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q4, [sp]                        // 16-byte Folded Spill
	b	.LBB290_4
.LBB290_3:                              //   in Loop: Header=BB290_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB290_17
.LBB290_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB290_7 Depth 2
                                        //     Child Loop BB290_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB290_6
// %bb.5:                               //   in Loop: Header=BB290_4 Depth=1
	mov	x10, xzr
	b	.LBB290_9
.LBB290_6:                              // %.preheader2
                                        //   in Loop: Header=BB290_4 Depth=1
	mov	x9, x28
	mov	x10, x19
.LBB290_7:                              //   Parent Loop BB290_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fdiv	v1.2d, v1.2d, v4.2d
	fdiv	v2.2d, v2.2d, v4.2d
	mov	d3, v1.d[1]
	fadd	d0, d0, d1
	fadd	d0, d0, d3
	mov	d1, v2.d[1]
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.ne	.LBB290_7
// %bb.8:                               //   in Loop: Header=BB290_4 Depth=1
	cmp	x19, x27
	mov	x10, x19
	b.eq	.LBB290_11
.LBB290_9:                              // %.preheader
                                        //   in Loop: Header=BB290_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB290_10:                             //   Parent Loop BB290_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fdiv	d1, d1, d8
	fadd	d0, d0, d1
	b.ne	.LBB290_10
.LBB290_11:                             //   in Loop: Header=BB290_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fdiv	d1, d1, d9
	fmul	d1, d1, d12
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d10
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d11
	b.mi	.LBB290_3
// %bb.12:                              //   in Loop: Header=BB290_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldr	q4, [sp]                        // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB290_3
.LBB290_13:
	mov	x10, #70368744177664            // =0x400000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x10, #16575, lsl #48
	fmov	d9, #-5.00000000
	adrp	x9, .LCPI290_0
	fmov	d11, x10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x9, :lo12:.LCPI290_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB290_15
.LBB290_14:                             //   in Loop: Header=BB290_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB290_17
.LBB290_15:                             // =>This Inner Loop Header: Depth=1
	fdiv	d1, d0, d9
	fmul	d1, d1, d11
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d10
	b.mi	.LBB290_14
// %bb.16:                              //   in Loop: Header=BB290_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB290_14
.LBB290_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB290_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB290_21
.LBB290_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB290_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB290_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldr	d12, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	ret
.LBB290_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end290:
	.size	_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc, .Lfunc_end290-_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc
.LCPI291_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI291_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc,@function
_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc: // @_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	stp	d15, d14, [sp, #80]             // 16-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -152
	.cfi_offset b15, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB291_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB291_13
// %bb.2:
	adrp	x9, .LCPI291_1
	fmov	v4.2d, #0.50000000
	fmov	v5.2d, #3.00000000
	ldr	d13, [x9, :lo12:.LCPI291_1]
	adrp	x9, .LCPI291_0
	fmov	v6.2d, #0.25000000
	ldr	d14, [x9, :lo12:.LCPI291_0]
	mov	x9, #70368744177664             // =0x400000000000
	fmov	v7.2d, #5.00000000
	movk	x9, #16575, lsl #48
	fmov	d8, #0.50000000
	fmov	d9, #3.00000000
	fmov	d10, #0.25000000
	fmov	d11, #5.00000000
	fmov	d12, #-0.50000000
	fmov	d15, x9
	mov	w27, w20
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stp	q7, q6, [sp, #16]               // 32-byte Folded Spill
	stp	q5, q4, [sp, #48]               // 32-byte Folded Spill
	b	.LBB291_4
.LBB291_3:                              //   in Loop: Header=BB291_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB291_17
.LBB291_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB291_7 Depth 2
                                        //     Child Loop BB291_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB291_6
// %bb.5:                               //   in Loop: Header=BB291_4 Depth=1
	mov	x10, xzr
	b	.LBB291_9
.LBB291_6:                              // %.preheader2
                                        //   in Loop: Header=BB291_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB291_7:                              //   Parent Loop BB291_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fmul	v1.2d, v1.2d, v4.2d
	fmul	v2.2d, v2.2d, v4.2d
	fdiv	v1.2d, v1.2d, v5.2d
	fdiv	v2.2d, v2.2d, v5.2d
	fmul	v1.2d, v1.2d, v6.2d
	fdiv	v1.2d, v1.2d, v7.2d
	fmul	v2.2d, v2.2d, v6.2d
	fdiv	v2.2d, v2.2d, v7.2d
	mov	d3, v1.d[1]
	fadd	d0, d0, d1
	fadd	d0, d0, d3
	mov	d1, v2.d[1]
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.ne	.LBB291_7
// %bb.8:                               //   in Loop: Header=BB291_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB291_11
.LBB291_9:                              // %.preheader
                                        //   in Loop: Header=BB291_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB291_10:                             //   Parent Loop BB291_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fmul	d1, d1, d8
	fdiv	d1, d1, d9
	fmul	d1, d1, d10
	fdiv	d1, d1, d11
	fadd	d0, d0, d1
	b.ne	.LBB291_10
.LBB291_11:                             //   in Loop: Header=BB291_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fmul	d1, d1, d12
	fdiv	d1, d1, d9
	fmul	d1, d1, d10
	fdiv	d1, d1, d11
	fmul	d1, d1, d15
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d13
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d14
	b.mi	.LBB291_3
// %bb.12:                              //   in Loop: Header=BB291_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	ldp	q5, q4, [sp, #48]               // 32-byte Folded Reload
	b	.LBB291_3
.LBB291_13:
	mov	x10, #70368744177664            // =0x400000000000
	movi	d10, #0000000000000000
	adrp	x21, init_value
	movk	x10, #16575, lsl #48
	fmov	d8, #-0.50000000
	fmov	d9, #3.00000000
	fmov	d11, #0.25000000
	fmov	d12, #5.00000000
	adrp	x9, .LCPI291_0
	fmov	d14, x10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d13, [x9, :lo12:.LCPI291_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB291_15
.LBB291_14:                             //   in Loop: Header=BB291_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB291_17
.LBB291_15:                             // =>This Inner Loop Header: Depth=1
	fmul	d1, d0, d8
	fdiv	d1, d1, d9
	fmul	d1, d1, d11
	fdiv	d1, d1, d12
	fmul	d1, d1, d14
	fadd	d1, d1, d10
	fabs	d1, d1
	fcmp	d1, d13
	b.mi	.LBB291_14
// %bb.16:                              //   in Loop: Header=BB291_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB291_14
.LBB291_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB291_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB291_21
.LBB291_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB291_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB291_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	ldp	d15, d14, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	.cfi_restore b15
	ret
.LBB291_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end291:
	.size	_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc, .Lfunc_end291-_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc
.LCPI292_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI292_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc,@function
_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc: // @_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	d11, d10, [sp, #32]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #48]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #64]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #80]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #96]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #112]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #128]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #144]            // 16-byte Folded Spill
	add	x29, sp, #64
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB292_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB292_13
// %bb.2:
	mov	x11, #70368744177664            // =0x400000000000
	fmov	v4.2d, #2.00000000
	fmov	d8, #2.00000000
	movk	x11, #49343, lsl #48
	adrp	x9, .LCPI292_1
	adrp	x10, .LCPI292_0
	fmov	d11, x11
	mov	w27, w20
	ldr	d9, [x9, :lo12:.LCPI292_1]
	ldr	d10, [x10, :lo12:.LCPI292_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	str	q4, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB292_4
.LBB292_3:                              //   in Loop: Header=BB292_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB292_17
.LBB292_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB292_7 Depth 2
                                        //     Child Loop BB292_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB292_6
// %bb.5:                               //   in Loop: Header=BB292_4 Depth=1
	mov	x10, xzr
	b	.LBB292_9
.LBB292_6:                              // %.preheader2
                                        //   in Loop: Header=BB292_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB292_7:                              //   Parent Loop BB292_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v4.2d
	mov	d3, v1.d[1]
	fadd	d0, d0, d1
	fadd	v1.2d, v2.2d, v4.2d
	fadd	d0, d0, d3
	mov	d2, v1.d[1]
	fadd	d0, d0, d1
	fadd	d0, d0, d2
	b.ne	.LBB292_7
// %bb.8:                               //   in Loop: Header=BB292_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB292_11
.LBB292_9:                              // %.preheader
                                        //   in Loop: Header=BB292_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB292_10:                             //   Parent Loop BB292_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fadd	d0, d0, d1
	b.ne	.LBB292_10
.LBB292_11:                             //   in Loop: Header=BB292_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d8
	fmul	d1, d1, d11
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d9
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d10
	b.mi	.LBB292_3
// %bb.12:                              //   in Loop: Header=BB292_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldr	q4, [sp, #16]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB292_3
.LBB292_13:
	mov	x10, #70368744177664            // =0x400000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x10, #49343, lsl #48
	fmov	d9, #2.00000000
	adrp	x9, .LCPI292_0
	fmov	d11, x10
	ldr	d0, [x21, :lo12:init_value]
	ldr	d10, [x9, :lo12:.LCPI292_0]
	mov	w19, wzr
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB292_15
.LBB292_14:                             //   in Loop: Header=BB292_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB292_17
.LBB292_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmul	d1, d1, d11
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d10
	b.mi	.LBB292_14
// %bb.16:                              //   in Loop: Header=BB292_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB292_14
.LBB292_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB292_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB292_21
.LBB292_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB292_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB292_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 160
	ldp	x20, x19, [sp, #144]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #128]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #112]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #96]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #80]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #64]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #48]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #32]             // 16-byte Folded Reload
	add	sp, sp, #160
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	ret
.LBB292_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end292:
	.size	_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc, .Lfunc_end292-_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc
.LCPI293_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI293_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc,"axG",@progbits,_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc,comdat
	.weak	_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc
	.p2align	2
	.type	_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc,@function
_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc: // @_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	str	d12, [sp, #32]                  // 8-byte Folded Spill
	stp	d11, d10, [sp, #48]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #64]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -144
	.cfi_remember_state
	str	x2, [sp, #40]                   // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB293_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB293_13
// %bb.2:
	mov	x9, #3689348814741910323        // =0x3333333333333333
	fmov	v4.2d, #2.00000000
	fmov	d8, #2.00000000
	movk	x9, #49155, lsl #48
	adrp	x10, .LCPI293_1
	mov	w27, w20
	dup	v5.2d, x9
	fmov	d9, x9
	adrp	x9, .LCPI293_0
	ldr	d11, [x9, :lo12:.LCPI293_0]
	mov	x9, #70368744177664             // =0x400000000000
	ldr	d10, [x10, :lo12:.LCPI293_1]
	movk	x9, #49343, lsl #48
	mov	w26, wzr
	add	x28, x21, #16
	fmov	d12, x9
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.299
	add	x22, x22, :lo12:.L.str.299
	stp	q5, q4, [sp]                    // 32-byte Folded Spill
	b	.LBB293_4
.LBB293_3:                              //   in Loop: Header=BB293_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB293_17
.LBB293_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB293_7 Depth 2
                                        //     Child Loop BB293_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB293_6
// %bb.5:                               //   in Loop: Header=BB293_4 Depth=1
	mov	x10, xzr
	b	.LBB293_9
.LBB293_6:                              // %.preheader2
                                        //   in Loop: Header=BB293_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB293_7:                              //   Parent Loop BB293_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v4.2d
	fadd	v2.2d, v2.2d, v4.2d
	fadd	v1.2d, v1.2d, v5.2d
	mov	d3, v1.d[1]
	fadd	d0, d0, d1
	fadd	v1.2d, v2.2d, v5.2d
	fadd	d0, d0, d3
	mov	d2, v1.d[1]
	fadd	d0, d0, d1
	fadd	d0, d0, d2
	b.ne	.LBB293_7
// %bb.8:                               //   in Loop: Header=BB293_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB293_11
.LBB293_9:                              // %.preheader
                                        //   in Loop: Header=BB293_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB293_10:                             //   Parent Loop BB293_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d1
	b.ne	.LBB293_10
.LBB293_11:                             //   in Loop: Header=BB293_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d8
	fadd	d1, d1, d9
	fmul	d1, d1, d12
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d10
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d11
	b.mi	.LBB293_3
// %bb.12:                              //   in Loop: Header=BB293_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldp	q5, q4, [sp]                    // 32-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB293_3
.LBB293_13:
	mov	x9, #3689348814741910323        // =0x3333333333333333
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #49155, lsl #48
	fmov	d9, #2.00000000
	adrp	x10, .LCPI293_0
	fmov	d10, x9
	mov	x9, #70368744177664             // =0x400000000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #49343, lsl #48
	ldr	d11, [x10, :lo12:.LCPI293_0]
	mov	w19, wzr
	fmov	d12, x9
	adrp	x20, .L.str.299
	add	x20, x20, :lo12:.L.str.299
	b	.LBB293_15
.LBB293_14:                             //   in Loop: Header=BB293_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB293_17
.LBB293_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fadd	d1, d1, d10
	fmul	d1, d1, d12
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d11
	b.mi	.LBB293_14
// %bb.16:                              //   in Loop: Header=BB293_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB293_14
.LBB293_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB293_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB293_21
.LBB293_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB293_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB293_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldr	d12, [sp, #32]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #64]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	ret
.LBB293_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end293:
	.size	_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc, .Lfunc_end293-_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc
	.cfi_endproc
                                        // -- End function
	.type	results,@object                 // @results
	.bss
	.globl	results
	.p2align	3, 0x0
results:
	.xword	0
	.size	results, 8

	.type	current_test,@object            // @current_test
	.globl	current_test
	.p2align	2, 0x0
current_test:
	.word	0                               // 0x0
	.size	current_test, 4

	.type	allocated_results,@object       // @allocated_results
	.globl	allocated_results
	.p2align	2, 0x0
allocated_results:
	.word	0                               // 0x0
	.size	allocated_results, 4

	.type	.L.str,@object                  // @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Could not allocate %d results\n"
	.size	.L.str, 31

	.type	.L.str.1,@object                // @.str.1
.L.str.1:
	.asciz	"\ntest %*s description   absolute   operations   ratio with\n"
	.size	.L.str.1, 60

	.type	.L.str.2,@object                // @.str.2
.L.str.2:
	.asciz	" "
	.size	.L.str.2, 2

	.type	.L.str.3,@object                // @.str.3
.L.str.3:
	.asciz	"number %*s time       per second   test0\n\n"
	.size	.L.str.3, 43

	.type	.L.str.4,@object                // @.str.4
.L.str.4:
	.asciz	"%2i %*s\"%s\"  %5.2f sec   %5.2f M     %.2f\n"
	.size	.L.str.4, 43

	.type	.L.str.5,@object                // @.str.5
.L.str.5:
	.zero	1
	.size	.L.str.5, 1

	.type	.L.str.6,@object                // @.str.6
.L.str.6:
	.asciz	"\nTotal absolute time for %s: %.2f sec\n"
	.size	.L.str.6, 39

	.type	.L.str.7,@object                // @.str.7
.L.str.7:
	.asciz	"\n%s Penalty: %.2f\n\n"
	.size	.L.str.7, 20

	.type	.L.str.8,@object                // @.str.8
.L.str.8:
	.asciz	"\ntest %*s description   absolute\n"
	.size	.L.str.8, 34

	.type	.L.str.9,@object                // @.str.9
.L.str.9:
	.asciz	"number %*s time\n\n"
	.size	.L.str.9, 18

	.type	.L.str.10,@object               // @.str.10
.L.str.10:
	.asciz	"%2i %*s\"%s\"  %5.2f sec\n"
	.size	.L.str.10, 24

	.type	start_time,@object              // @start_time
	.bss
	.globl	start_time
	.p2align	3, 0x0
start_time:
	.xword	0                               // 0x0
	.size	start_time, 8

	.type	end_time,@object                // @end_time
	.globl	end_time
	.p2align	3, 0x0
end_time:
	.xword	0                               // 0x0
	.size	end_time, 8

	.type	base_iterations,@object         // @base_iterations
	.data
	.globl	base_iterations
	.p2align	2, 0x0
base_iterations:
	.word	5000                            // 0x1388
	.size	base_iterations, 4

	.type	iterations,@object              // @iterations
	.globl	iterations
	.p2align	2, 0x0
iterations:
	.word	5000                            // 0x1388
	.size	iterations, 4

	.type	init_value,@object              // @init_value
	.globl	init_value
	.p2align	3, 0x0
init_value:
	.xword	0x3ff0000000000000              // double 1
	.size	init_value, 8

	.type	dataDouble,@object              // @dataDouble
	.bss
	.globl	dataDouble
	.p2align	3, 0x0
dataDouble:
	.zero	64000
	.size	dataDouble, 64000

	.type	dataFloat,@object               // @dataFloat
	.globl	dataFloat
	.p2align	2, 0x0
dataFloat:
	.zero	32000
	.size	dataFloat, 32000

	.type	data64unsigned,@object          // @data64unsigned
	.globl	data64unsigned
	.p2align	3, 0x0
data64unsigned:
	.zero	64000
	.size	data64unsigned, 64000

	.type	data64,@object                  // @data64
	.globl	data64
	.p2align	3, 0x0
data64:
	.zero	64000
	.size	data64, 64000

	.type	data32unsigned,@object          // @data32unsigned
	.globl	data32unsigned
	.p2align	2, 0x0
data32unsigned:
	.zero	32000
	.size	data32unsigned, 32000

	.type	data32,@object                  // @data32
	.globl	data32
	.p2align	2, 0x0
data32:
	.zero	32000
	.size	data32, 32000

	.type	data16unsigned,@object          // @data16unsigned
	.globl	data16unsigned
	.p2align	1, 0x0
data16unsigned:
	.zero	16000
	.size	data16unsigned, 16000

	.type	data16,@object                  // @data16
	.globl	data16
	.p2align	1, 0x0
data16:
	.zero	16000
	.size	data16, 16000

	.type	data8unsigned,@object           // @data8unsigned
	.globl	data8unsigned
data8unsigned:
	.zero	8000
	.size	data8unsigned, 8000

	.type	data8,@object                   // @data8
	.globl	data8
data8:
	.zero	8000
	.size	data8, 8000

	.type	.L.str.11,@object               // @.str.11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.11:
	.asciz	"int8_t constant"
	.size	.L.str.11, 16

	.type	.L.str.12,@object               // @.str.12
.L.str.12:
	.asciz	"int8_t add constants"
	.size	.L.str.12, 21

	.type	.L.str.13,@object               // @.str.13
.L.str.13:
	.asciz	"int8_t subtract constants"
	.size	.L.str.13, 26

	.type	.L.str.14,@object               // @.str.14
.L.str.14:
	.asciz	"int8_t multiply constants"
	.size	.L.str.14, 26

	.type	.L.str.15,@object               // @.str.15
.L.str.15:
	.asciz	"int8_t divide constants"
	.size	.L.str.15, 24

	.type	.L.str.16,@object               // @.str.16
.L.str.16:
	.asciz	"int8_t mod constants"
	.size	.L.str.16, 21

	.type	.L.str.17,@object               // @.str.17
.L.str.17:
	.asciz	"int8_t equal constants"
	.size	.L.str.17, 23

	.type	.L.str.18,@object               // @.str.18
.L.str.18:
	.asciz	"int8_t notequal constants"
	.size	.L.str.18, 26

	.type	.L.str.19,@object               // @.str.19
.L.str.19:
	.asciz	"int8_t greater than constants"
	.size	.L.str.19, 30

	.type	.L.str.20,@object               // @.str.20
.L.str.20:
	.asciz	"int8_t less than constants"
	.size	.L.str.20, 27

	.type	.L.str.21,@object               // @.str.21
.L.str.21:
	.asciz	"int8_t greater than equal constants"
	.size	.L.str.21, 36

	.type	.L.str.22,@object               // @.str.22
.L.str.22:
	.asciz	"int8_t less than equal constants"
	.size	.L.str.22, 33

	.type	.L.str.23,@object               // @.str.23
.L.str.23:
	.asciz	"int8_t and constants"
	.size	.L.str.23, 21

	.type	.L.str.24,@object               // @.str.24
.L.str.24:
	.asciz	"int8_t or constants"
	.size	.L.str.24, 20

	.type	.L.str.25,@object               // @.str.25
.L.str.25:
	.asciz	"int8_t xor constants"
	.size	.L.str.25, 21

	.type	.L.str.26,@object               // @.str.26
.L.str.26:
	.asciz	"int8_t constant add"
	.size	.L.str.26, 20

	.type	.L.str.27,@object               // @.str.27
.L.str.27:
	.asciz	"int8_t multiple constant adds"
	.size	.L.str.27, 30

	.type	.L.str.28,@object               // @.str.28
.L.str.28:
	.asciz	"int8_t constant subtract"
	.size	.L.str.28, 25

	.type	.L.str.29,@object               // @.str.29
.L.str.29:
	.asciz	"int8_t multiple constant subtracts"
	.size	.L.str.29, 35

	.type	.L.str.30,@object               // @.str.30
.L.str.30:
	.asciz	"int8_t constant multiply"
	.size	.L.str.30, 25

	.type	.L.str.31,@object               // @.str.31
.L.str.31:
	.asciz	"int8_t multiple constant multiplies"
	.size	.L.str.31, 36

	.type	.L.str.32,@object               // @.str.32
.L.str.32:
	.asciz	"int8_t multiple constant multiply2"
	.size	.L.str.32, 35

	.type	.L.str.33,@object               // @.str.33
.L.str.33:
	.asciz	"int8_t constant divide"
	.size	.L.str.33, 23

	.type	.L.str.34,@object               // @.str.34
.L.str.34:
	.asciz	"int8_t multiple constant divides"
	.size	.L.str.34, 33

	.type	.L.str.35,@object               // @.str.35
.L.str.35:
	.asciz	"int8_t multiple constant divide2"
	.size	.L.str.35, 33

	.type	.L.str.36,@object               // @.str.36
.L.str.36:
	.asciz	"int8_t multiple constant mixed"
	.size	.L.str.36, 31

	.type	.L.str.37,@object               // @.str.37
.L.str.37:
	.asciz	"int8_t constant and"
	.size	.L.str.37, 20

	.type	.L.str.38,@object               // @.str.38
.L.str.38:
	.asciz	"int8_t multiple constant and"
	.size	.L.str.38, 29

	.type	.L.str.39,@object               // @.str.39
.L.str.39:
	.asciz	"int8_t constant or"
	.size	.L.str.39, 19

	.type	.L.str.40,@object               // @.str.40
.L.str.40:
	.asciz	"int8_t multiple constant or"
	.size	.L.str.40, 28

	.type	.L.str.41,@object               // @.str.41
.L.str.41:
	.asciz	"int8_t constant xor"
	.size	.L.str.41, 20

	.type	.L.str.42,@object               // @.str.42
.L.str.42:
	.asciz	"int8_t multiple constant xor"
	.size	.L.str.42, 29

	.type	.L.str.43,@object               // @.str.43
.L.str.43:
	.asciz	"uint8_t constant"
	.size	.L.str.43, 17

	.type	.L.str.44,@object               // @.str.44
.L.str.44:
	.asciz	"uint8_t add constants"
	.size	.L.str.44, 22

	.type	.L.str.45,@object               // @.str.45
.L.str.45:
	.asciz	"uint8_t subtract constants"
	.size	.L.str.45, 27

	.type	.L.str.46,@object               // @.str.46
.L.str.46:
	.asciz	"uint8_t multiply constants"
	.size	.L.str.46, 27

	.type	.L.str.47,@object               // @.str.47
.L.str.47:
	.asciz	"uint8_t divide constants"
	.size	.L.str.47, 25

	.type	.L.str.48,@object               // @.str.48
.L.str.48:
	.asciz	"uint8_t mod constants"
	.size	.L.str.48, 22

	.type	.L.str.49,@object               // @.str.49
.L.str.49:
	.asciz	"uint8_t equal constants"
	.size	.L.str.49, 24

	.type	.L.str.50,@object               // @.str.50
.L.str.50:
	.asciz	"uint8_t notequal constants"
	.size	.L.str.50, 27

	.type	.L.str.51,@object               // @.str.51
.L.str.51:
	.asciz	"uint8_t greater than constants"
	.size	.L.str.51, 31

	.type	.L.str.52,@object               // @.str.52
.L.str.52:
	.asciz	"uint8_t less than constants"
	.size	.L.str.52, 28

	.type	.L.str.53,@object               // @.str.53
.L.str.53:
	.asciz	"uint8_t greater than equal constants"
	.size	.L.str.53, 37

	.type	.L.str.54,@object               // @.str.54
.L.str.54:
	.asciz	"uint8_t less than equal constants"
	.size	.L.str.54, 34

	.type	.L.str.55,@object               // @.str.55
.L.str.55:
	.asciz	"uint8_t and constants"
	.size	.L.str.55, 22

	.type	.L.str.56,@object               // @.str.56
.L.str.56:
	.asciz	"uint8_t or constants"
	.size	.L.str.56, 21

	.type	.L.str.57,@object               // @.str.57
.L.str.57:
	.asciz	"uint8_t xor constants"
	.size	.L.str.57, 22

	.type	.L.str.58,@object               // @.str.58
.L.str.58:
	.asciz	"uint8_t constant add"
	.size	.L.str.58, 21

	.type	.L.str.59,@object               // @.str.59
.L.str.59:
	.asciz	"uint8_t multiple constant adds"
	.size	.L.str.59, 31

	.type	.L.str.60,@object               // @.str.60
.L.str.60:
	.asciz	"uint8_t constant subtract"
	.size	.L.str.60, 26

	.type	.L.str.61,@object               // @.str.61
.L.str.61:
	.asciz	"uint8_t multiple constant subtracts"
	.size	.L.str.61, 36

	.type	.L.str.62,@object               // @.str.62
.L.str.62:
	.asciz	"uint8_t constant multiply"
	.size	.L.str.62, 26

	.type	.L.str.63,@object               // @.str.63
.L.str.63:
	.asciz	"uint8_t multiple constant multiplies"
	.size	.L.str.63, 37

	.type	.L.str.64,@object               // @.str.64
.L.str.64:
	.asciz	"uint8_t multiple constant multiply2"
	.size	.L.str.64, 36

	.type	.L.str.65,@object               // @.str.65
.L.str.65:
	.asciz	"uint8_t constant divide"
	.size	.L.str.65, 24

	.type	.L.str.66,@object               // @.str.66
.L.str.66:
	.asciz	"uint8_t multiple constant divides"
	.size	.L.str.66, 34

	.type	.L.str.67,@object               // @.str.67
.L.str.67:
	.asciz	"uint8_t multiple constant divide2"
	.size	.L.str.67, 34

	.type	.L.str.68,@object               // @.str.68
.L.str.68:
	.asciz	"uint8_t multiple constant mixed"
	.size	.L.str.68, 32

	.type	.L.str.69,@object               // @.str.69
.L.str.69:
	.asciz	"uint8_t constant and"
	.size	.L.str.69, 21

	.type	.L.str.70,@object               // @.str.70
.L.str.70:
	.asciz	"uint8_t multiple constant and"
	.size	.L.str.70, 30

	.type	.L.str.71,@object               // @.str.71
.L.str.71:
	.asciz	"uint8_t constant or"
	.size	.L.str.71, 20

	.type	.L.str.72,@object               // @.str.72
.L.str.72:
	.asciz	"uint8_t multiple constant or"
	.size	.L.str.72, 29

	.type	.L.str.73,@object               // @.str.73
.L.str.73:
	.asciz	"uint8_t constant xor"
	.size	.L.str.73, 21

	.type	.L.str.74,@object               // @.str.74
.L.str.74:
	.asciz	"uint8_t multiple constant xor"
	.size	.L.str.74, 30

	.type	.L.str.75,@object               // @.str.75
.L.str.75:
	.asciz	"int16_t constant"
	.size	.L.str.75, 17

	.type	.L.str.76,@object               // @.str.76
.L.str.76:
	.asciz	"int16_t add constants"
	.size	.L.str.76, 22

	.type	.L.str.77,@object               // @.str.77
.L.str.77:
	.asciz	"int16_t subtract constants"
	.size	.L.str.77, 27

	.type	.L.str.78,@object               // @.str.78
.L.str.78:
	.asciz	"int16_t multiply constants"
	.size	.L.str.78, 27

	.type	.L.str.79,@object               // @.str.79
.L.str.79:
	.asciz	"int16_t divide constants"
	.size	.L.str.79, 25

	.type	.L.str.80,@object               // @.str.80
.L.str.80:
	.asciz	"int16_t mod constants"
	.size	.L.str.80, 22

	.type	.L.str.81,@object               // @.str.81
.L.str.81:
	.asciz	"int16_t equal constants"
	.size	.L.str.81, 24

	.type	.L.str.82,@object               // @.str.82
.L.str.82:
	.asciz	"int16_t notequal constants"
	.size	.L.str.82, 27

	.type	.L.str.83,@object               // @.str.83
.L.str.83:
	.asciz	"int16_t greater than constants"
	.size	.L.str.83, 31

	.type	.L.str.84,@object               // @.str.84
.L.str.84:
	.asciz	"int16_t less than constants"
	.size	.L.str.84, 28

	.type	.L.str.85,@object               // @.str.85
.L.str.85:
	.asciz	"int16_t greater than equal constants"
	.size	.L.str.85, 37

	.type	.L.str.86,@object               // @.str.86
.L.str.86:
	.asciz	"int16_t less than equal constants"
	.size	.L.str.86, 34

	.type	.L.str.87,@object               // @.str.87
.L.str.87:
	.asciz	"int16_t and constants"
	.size	.L.str.87, 22

	.type	.L.str.88,@object               // @.str.88
.L.str.88:
	.asciz	"int16_t or constants"
	.size	.L.str.88, 21

	.type	.L.str.89,@object               // @.str.89
.L.str.89:
	.asciz	"int16_t xor constants"
	.size	.L.str.89, 22

	.type	.L.str.90,@object               // @.str.90
.L.str.90:
	.asciz	"int16_t constant add"
	.size	.L.str.90, 21

	.type	.L.str.91,@object               // @.str.91
.L.str.91:
	.asciz	"int16_t multiple constant adds"
	.size	.L.str.91, 31

	.type	.L.str.92,@object               // @.str.92
.L.str.92:
	.asciz	"int16_t constant subtract"
	.size	.L.str.92, 26

	.type	.L.str.93,@object               // @.str.93
.L.str.93:
	.asciz	"int16_t multiple constant subtracts"
	.size	.L.str.93, 36

	.type	.L.str.94,@object               // @.str.94
.L.str.94:
	.asciz	"int16_t constant multiply"
	.size	.L.str.94, 26

	.type	.L.str.95,@object               // @.str.95
.L.str.95:
	.asciz	"int16_t multiple constant multiplies"
	.size	.L.str.95, 37

	.type	.L.str.96,@object               // @.str.96
.L.str.96:
	.asciz	"int16_t multiple constant multiply2"
	.size	.L.str.96, 36

	.type	.L.str.97,@object               // @.str.97
.L.str.97:
	.asciz	"int16_t constant divide"
	.size	.L.str.97, 24

	.type	.L.str.98,@object               // @.str.98
.L.str.98:
	.asciz	"int16_t multiple constant divides"
	.size	.L.str.98, 34

	.type	.L.str.99,@object               // @.str.99
.L.str.99:
	.asciz	"int16_t multiple constant divide2"
	.size	.L.str.99, 34

	.type	.L.str.100,@object              // @.str.100
.L.str.100:
	.asciz	"int16_t multiple constant mixed"
	.size	.L.str.100, 32

	.type	.L.str.101,@object              // @.str.101
.L.str.101:
	.asciz	"int16_t constant and"
	.size	.L.str.101, 21

	.type	.L.str.102,@object              // @.str.102
.L.str.102:
	.asciz	"int16_t multiple constant and"
	.size	.L.str.102, 30

	.type	.L.str.103,@object              // @.str.103
.L.str.103:
	.asciz	"int16_t constant or"
	.size	.L.str.103, 20

	.type	.L.str.104,@object              // @.str.104
.L.str.104:
	.asciz	"int16_t multiple constant or"
	.size	.L.str.104, 29

	.type	.L.str.105,@object              // @.str.105
.L.str.105:
	.asciz	"int16_t constant xor"
	.size	.L.str.105, 21

	.type	.L.str.106,@object              // @.str.106
.L.str.106:
	.asciz	"int16_t multiple constant xor"
	.size	.L.str.106, 30

	.type	.L.str.107,@object              // @.str.107
.L.str.107:
	.asciz	"uint16_t constant"
	.size	.L.str.107, 18

	.type	.L.str.108,@object              // @.str.108
.L.str.108:
	.asciz	"uint16_t add constants"
	.size	.L.str.108, 23

	.type	.L.str.109,@object              // @.str.109
.L.str.109:
	.asciz	"uint16_t subtract constants"
	.size	.L.str.109, 28

	.type	.L.str.110,@object              // @.str.110
.L.str.110:
	.asciz	"uint16_t multiply constants"
	.size	.L.str.110, 28

	.type	.L.str.111,@object              // @.str.111
.L.str.111:
	.asciz	"uint16_t divide constants"
	.size	.L.str.111, 26

	.type	.L.str.112,@object              // @.str.112
.L.str.112:
	.asciz	"uint16_t mod constants"
	.size	.L.str.112, 23

	.type	.L.str.113,@object              // @.str.113
.L.str.113:
	.asciz	"uint16_t equal constants"
	.size	.L.str.113, 25

	.type	.L.str.114,@object              // @.str.114
.L.str.114:
	.asciz	"uint16_t notequal constants"
	.size	.L.str.114, 28

	.type	.L.str.115,@object              // @.str.115
.L.str.115:
	.asciz	"uint16_t greater than constants"
	.size	.L.str.115, 32

	.type	.L.str.116,@object              // @.str.116
.L.str.116:
	.asciz	"uint16_t less than constants"
	.size	.L.str.116, 29

	.type	.L.str.117,@object              // @.str.117
.L.str.117:
	.asciz	"uint16_t greater than equal constants"
	.size	.L.str.117, 38

	.type	.L.str.118,@object              // @.str.118
.L.str.118:
	.asciz	"uint16_t less than equal constants"
	.size	.L.str.118, 35

	.type	.L.str.119,@object              // @.str.119
.L.str.119:
	.asciz	"uint16_t and constants"
	.size	.L.str.119, 23

	.type	.L.str.120,@object              // @.str.120
.L.str.120:
	.asciz	"uint16_t or constants"
	.size	.L.str.120, 22

	.type	.L.str.121,@object              // @.str.121
.L.str.121:
	.asciz	"uint16_t xor constants"
	.size	.L.str.121, 23

	.type	.L.str.122,@object              // @.str.122
.L.str.122:
	.asciz	"uint16_t constant add"
	.size	.L.str.122, 22

	.type	.L.str.123,@object              // @.str.123
.L.str.123:
	.asciz	"uint16_t multiple constant adds"
	.size	.L.str.123, 32

	.type	.L.str.124,@object              // @.str.124
.L.str.124:
	.asciz	"uint16_t constant subtract"
	.size	.L.str.124, 27

	.type	.L.str.125,@object              // @.str.125
.L.str.125:
	.asciz	"uint16_t multiple constant subtracts"
	.size	.L.str.125, 37

	.type	.L.str.126,@object              // @.str.126
.L.str.126:
	.asciz	"uint16_t constant multiply"
	.size	.L.str.126, 27

	.type	.L.str.127,@object              // @.str.127
.L.str.127:
	.asciz	"uint16_t multiple constant multiplies"
	.size	.L.str.127, 38

	.type	.L.str.128,@object              // @.str.128
.L.str.128:
	.asciz	"uint16_t multiple constant multiply2"
	.size	.L.str.128, 37

	.type	.L.str.129,@object              // @.str.129
.L.str.129:
	.asciz	"uint16_t constant divide"
	.size	.L.str.129, 25

	.type	.L.str.130,@object              // @.str.130
.L.str.130:
	.asciz	"uint16_t multiple constant divides"
	.size	.L.str.130, 35

	.type	.L.str.131,@object              // @.str.131
.L.str.131:
	.asciz	"uint16_t multiple constant divide2"
	.size	.L.str.131, 35

	.type	.L.str.132,@object              // @.str.132
.L.str.132:
	.asciz	"uint16_t multiple constant mixed"
	.size	.L.str.132, 33

	.type	.L.str.133,@object              // @.str.133
.L.str.133:
	.asciz	"uint16_t constant and"
	.size	.L.str.133, 22

	.type	.L.str.134,@object              // @.str.134
.L.str.134:
	.asciz	"uint16_t multiple constant and"
	.size	.L.str.134, 31

	.type	.L.str.135,@object              // @.str.135
.L.str.135:
	.asciz	"uint16_t constant or"
	.size	.L.str.135, 21

	.type	.L.str.136,@object              // @.str.136
.L.str.136:
	.asciz	"uint16_t multiple constant or"
	.size	.L.str.136, 30

	.type	.L.str.137,@object              // @.str.137
.L.str.137:
	.asciz	"uint16_t constant xor"
	.size	.L.str.137, 22

	.type	.L.str.138,@object              // @.str.138
.L.str.138:
	.asciz	"uint16_t multiple constant xor"
	.size	.L.str.138, 31

	.type	.L.str.139,@object              // @.str.139
.L.str.139:
	.asciz	"int32_t constant"
	.size	.L.str.139, 17

	.type	.L.str.140,@object              // @.str.140
.L.str.140:
	.asciz	"int32_t add constants"
	.size	.L.str.140, 22

	.type	.L.str.141,@object              // @.str.141
.L.str.141:
	.asciz	"int32_t subtract constants"
	.size	.L.str.141, 27

	.type	.L.str.142,@object              // @.str.142
.L.str.142:
	.asciz	"int32_t multiply constants"
	.size	.L.str.142, 27

	.type	.L.str.143,@object              // @.str.143
.L.str.143:
	.asciz	"int32_t divide constants"
	.size	.L.str.143, 25

	.type	.L.str.144,@object              // @.str.144
.L.str.144:
	.asciz	"int32_t mod constants"
	.size	.L.str.144, 22

	.type	.L.str.145,@object              // @.str.145
.L.str.145:
	.asciz	"int32_t equal constants"
	.size	.L.str.145, 24

	.type	.L.str.146,@object              // @.str.146
.L.str.146:
	.asciz	"int32_t notequal constants"
	.size	.L.str.146, 27

	.type	.L.str.147,@object              // @.str.147
.L.str.147:
	.asciz	"int32_t greater than constants"
	.size	.L.str.147, 31

	.type	.L.str.148,@object              // @.str.148
.L.str.148:
	.asciz	"int32_t less than constants"
	.size	.L.str.148, 28

	.type	.L.str.149,@object              // @.str.149
.L.str.149:
	.asciz	"int32_t greater than equal constants"
	.size	.L.str.149, 37

	.type	.L.str.150,@object              // @.str.150
.L.str.150:
	.asciz	"int32_t less than equal constants"
	.size	.L.str.150, 34

	.type	.L.str.151,@object              // @.str.151
.L.str.151:
	.asciz	"int32_t and constants"
	.size	.L.str.151, 22

	.type	.L.str.152,@object              // @.str.152
.L.str.152:
	.asciz	"int32_t or constants"
	.size	.L.str.152, 21

	.type	.L.str.153,@object              // @.str.153
.L.str.153:
	.asciz	"int32_t xor constants"
	.size	.L.str.153, 22

	.type	.L.str.154,@object              // @.str.154
.L.str.154:
	.asciz	"int32_t constant add"
	.size	.L.str.154, 21

	.type	.L.str.155,@object              // @.str.155
.L.str.155:
	.asciz	"int32_t multiple constant adds"
	.size	.L.str.155, 31

	.type	.L.str.156,@object              // @.str.156
.L.str.156:
	.asciz	"int32_t constant subtract"
	.size	.L.str.156, 26

	.type	.L.str.157,@object              // @.str.157
.L.str.157:
	.asciz	"int32_t multiple constant subtracts"
	.size	.L.str.157, 36

	.type	.L.str.158,@object              // @.str.158
.L.str.158:
	.asciz	"int32_t constant multiply"
	.size	.L.str.158, 26

	.type	.L.str.159,@object              // @.str.159
.L.str.159:
	.asciz	"int32_t multiple constant multiplies"
	.size	.L.str.159, 37

	.type	.L.str.160,@object              // @.str.160
.L.str.160:
	.asciz	"int32_t multiple constant multiply2"
	.size	.L.str.160, 36

	.type	.L.str.161,@object              // @.str.161
.L.str.161:
	.asciz	"int32_t constant divide"
	.size	.L.str.161, 24

	.type	.L.str.162,@object              // @.str.162
.L.str.162:
	.asciz	"int32_t multiple constant divides"
	.size	.L.str.162, 34

	.type	.L.str.163,@object              // @.str.163
.L.str.163:
	.asciz	"int32_t multiple constant divide2"
	.size	.L.str.163, 34

	.type	.L.str.164,@object              // @.str.164
.L.str.164:
	.asciz	"int32_t multiple constant mixed"
	.size	.L.str.164, 32

	.type	.L.str.165,@object              // @.str.165
.L.str.165:
	.asciz	"int32_t constant and"
	.size	.L.str.165, 21

	.type	.L.str.166,@object              // @.str.166
.L.str.166:
	.asciz	"int32_t multiple constant and"
	.size	.L.str.166, 30

	.type	.L.str.167,@object              // @.str.167
.L.str.167:
	.asciz	"int32_t constant or"
	.size	.L.str.167, 20

	.type	.L.str.168,@object              // @.str.168
.L.str.168:
	.asciz	"int32_t multiple constant or"
	.size	.L.str.168, 29

	.type	.L.str.169,@object              // @.str.169
.L.str.169:
	.asciz	"int32_t constant xor"
	.size	.L.str.169, 21

	.type	.L.str.170,@object              // @.str.170
.L.str.170:
	.asciz	"int32_t multiple constant xor"
	.size	.L.str.170, 30

	.type	.L.str.171,@object              // @.str.171
.L.str.171:
	.asciz	"uint32_t constant"
	.size	.L.str.171, 18

	.type	.L.str.172,@object              // @.str.172
.L.str.172:
	.asciz	"uint32_t add constants"
	.size	.L.str.172, 23

	.type	.L.str.173,@object              // @.str.173
.L.str.173:
	.asciz	"uint32_t subtract constants"
	.size	.L.str.173, 28

	.type	.L.str.174,@object              // @.str.174
.L.str.174:
	.asciz	"uint32_t multiply constants"
	.size	.L.str.174, 28

	.type	.L.str.175,@object              // @.str.175
.L.str.175:
	.asciz	"uint32_t divide constants"
	.size	.L.str.175, 26

	.type	.L.str.176,@object              // @.str.176
.L.str.176:
	.asciz	"uint32_t mod constants"
	.size	.L.str.176, 23

	.type	.L.str.177,@object              // @.str.177
.L.str.177:
	.asciz	"uint32_t equal constants"
	.size	.L.str.177, 25

	.type	.L.str.178,@object              // @.str.178
.L.str.178:
	.asciz	"uint32_t notequal constants"
	.size	.L.str.178, 28

	.type	.L.str.179,@object              // @.str.179
.L.str.179:
	.asciz	"uint32_t greater than constants"
	.size	.L.str.179, 32

	.type	.L.str.180,@object              // @.str.180
.L.str.180:
	.asciz	"uint32_t less than constants"
	.size	.L.str.180, 29

	.type	.L.str.181,@object              // @.str.181
.L.str.181:
	.asciz	"uint32_t greater than equal constants"
	.size	.L.str.181, 38

	.type	.L.str.182,@object              // @.str.182
.L.str.182:
	.asciz	"uint32_t less than equal constants"
	.size	.L.str.182, 35

	.type	.L.str.183,@object              // @.str.183
.L.str.183:
	.asciz	"uint32_t and constants"
	.size	.L.str.183, 23

	.type	.L.str.184,@object              // @.str.184
.L.str.184:
	.asciz	"uint32_t or constants"
	.size	.L.str.184, 22

	.type	.L.str.185,@object              // @.str.185
.L.str.185:
	.asciz	"uint32_t xor constants"
	.size	.L.str.185, 23

	.type	.L.str.186,@object              // @.str.186
.L.str.186:
	.asciz	"uint32_t constant add"
	.size	.L.str.186, 22

	.type	.L.str.187,@object              // @.str.187
.L.str.187:
	.asciz	"uint32_t multiple constant adds"
	.size	.L.str.187, 32

	.type	.L.str.188,@object              // @.str.188
.L.str.188:
	.asciz	"uint32_t constant subtract"
	.size	.L.str.188, 27

	.type	.L.str.189,@object              // @.str.189
.L.str.189:
	.asciz	"uint32_t multiple constant subtracts"
	.size	.L.str.189, 37

	.type	.L.str.190,@object              // @.str.190
.L.str.190:
	.asciz	"uint32_t constant multiply"
	.size	.L.str.190, 27

	.type	.L.str.191,@object              // @.str.191
.L.str.191:
	.asciz	"uint32_t multiple constant multiplies"
	.size	.L.str.191, 38

	.type	.L.str.192,@object              // @.str.192
.L.str.192:
	.asciz	"uint32_t multiple constant multiply2"
	.size	.L.str.192, 37

	.type	.L.str.193,@object              // @.str.193
.L.str.193:
	.asciz	"uint32_t constant divide"
	.size	.L.str.193, 25

	.type	.L.str.194,@object              // @.str.194
.L.str.194:
	.asciz	"uint32_t multiple constant divides"
	.size	.L.str.194, 35

	.type	.L.str.195,@object              // @.str.195
.L.str.195:
	.asciz	"uint32_t multiple constant divide2"
	.size	.L.str.195, 35

	.type	.L.str.196,@object              // @.str.196
.L.str.196:
	.asciz	"uint32_t multiple constant mixed"
	.size	.L.str.196, 33

	.type	.L.str.197,@object              // @.str.197
.L.str.197:
	.asciz	"uint32_t constant and"
	.size	.L.str.197, 22

	.type	.L.str.198,@object              // @.str.198
.L.str.198:
	.asciz	"uint32_t multiple constant and"
	.size	.L.str.198, 31

	.type	.L.str.199,@object              // @.str.199
.L.str.199:
	.asciz	"uint32_t constant or"
	.size	.L.str.199, 21

	.type	.L.str.200,@object              // @.str.200
.L.str.200:
	.asciz	"uint32_t multiple constant or"
	.size	.L.str.200, 30

	.type	.L.str.201,@object              // @.str.201
.L.str.201:
	.asciz	"uint32_t constant xor"
	.size	.L.str.201, 22

	.type	.L.str.202,@object              // @.str.202
.L.str.202:
	.asciz	"uint32_t multiple constant xor"
	.size	.L.str.202, 31

	.type	.L.str.203,@object              // @.str.203
.L.str.203:
	.asciz	"int64_t constant"
	.size	.L.str.203, 17

	.type	.L.str.204,@object              // @.str.204
.L.str.204:
	.asciz	"int64_t add constants"
	.size	.L.str.204, 22

	.type	.L.str.205,@object              // @.str.205
.L.str.205:
	.asciz	"int64_t subtract constants"
	.size	.L.str.205, 27

	.type	.L.str.206,@object              // @.str.206
.L.str.206:
	.asciz	"int64_t multiply constants"
	.size	.L.str.206, 27

	.type	.L.str.207,@object              // @.str.207
.L.str.207:
	.asciz	"int64_t divide constants"
	.size	.L.str.207, 25

	.type	.L.str.208,@object              // @.str.208
.L.str.208:
	.asciz	"int64_t mod constants"
	.size	.L.str.208, 22

	.type	.L.str.209,@object              // @.str.209
.L.str.209:
	.asciz	"int64_t equal constants"
	.size	.L.str.209, 24

	.type	.L.str.210,@object              // @.str.210
.L.str.210:
	.asciz	"int64_t notequal constants"
	.size	.L.str.210, 27

	.type	.L.str.211,@object              // @.str.211
.L.str.211:
	.asciz	"int64_t greater than constants"
	.size	.L.str.211, 31

	.type	.L.str.212,@object              // @.str.212
.L.str.212:
	.asciz	"int64_t less than constants"
	.size	.L.str.212, 28

	.type	.L.str.213,@object              // @.str.213
.L.str.213:
	.asciz	"int64_t greater than equal constants"
	.size	.L.str.213, 37

	.type	.L.str.214,@object              // @.str.214
.L.str.214:
	.asciz	"int64_t less than equal constants"
	.size	.L.str.214, 34

	.type	.L.str.215,@object              // @.str.215
.L.str.215:
	.asciz	"int64_t and constants"
	.size	.L.str.215, 22

	.type	.L.str.216,@object              // @.str.216
.L.str.216:
	.asciz	"int64_t or constants"
	.size	.L.str.216, 21

	.type	.L.str.217,@object              // @.str.217
.L.str.217:
	.asciz	"int64_t xor constants"
	.size	.L.str.217, 22

	.type	.L.str.218,@object              // @.str.218
.L.str.218:
	.asciz	"int64_t constant add"
	.size	.L.str.218, 21

	.type	.L.str.219,@object              // @.str.219
.L.str.219:
	.asciz	"int64_t multiple constant adds"
	.size	.L.str.219, 31

	.type	.L.str.220,@object              // @.str.220
.L.str.220:
	.asciz	"int64_t constant subtract"
	.size	.L.str.220, 26

	.type	.L.str.221,@object              // @.str.221
.L.str.221:
	.asciz	"int64_t multiple constant subtracts"
	.size	.L.str.221, 36

	.type	.L.str.222,@object              // @.str.222
.L.str.222:
	.asciz	"int64_t constant multiply"
	.size	.L.str.222, 26

	.type	.L.str.223,@object              // @.str.223
.L.str.223:
	.asciz	"int64_t multiple constant multiplies"
	.size	.L.str.223, 37

	.type	.L.str.224,@object              // @.str.224
.L.str.224:
	.asciz	"int64_t multiple constant multiply2"
	.size	.L.str.224, 36

	.type	.L.str.225,@object              // @.str.225
.L.str.225:
	.asciz	"int64_t constant divide"
	.size	.L.str.225, 24

	.type	.L.str.226,@object              // @.str.226
.L.str.226:
	.asciz	"int64_t multiple constant divides"
	.size	.L.str.226, 34

	.type	.L.str.227,@object              // @.str.227
.L.str.227:
	.asciz	"int64_t multiple constant divide2"
	.size	.L.str.227, 34

	.type	.L.str.228,@object              // @.str.228
.L.str.228:
	.asciz	"int64_t multiple constant mixed"
	.size	.L.str.228, 32

	.type	.L.str.229,@object              // @.str.229
.L.str.229:
	.asciz	"int64_t constant and"
	.size	.L.str.229, 21

	.type	.L.str.230,@object              // @.str.230
.L.str.230:
	.asciz	"int64_t multiple constant and"
	.size	.L.str.230, 30

	.type	.L.str.231,@object              // @.str.231
.L.str.231:
	.asciz	"int64_t constant or"
	.size	.L.str.231, 20

	.type	.L.str.232,@object              // @.str.232
.L.str.232:
	.asciz	"int64_t multiple constant or"
	.size	.L.str.232, 29

	.type	.L.str.233,@object              // @.str.233
.L.str.233:
	.asciz	"int64_t constant xor"
	.size	.L.str.233, 21

	.type	.L.str.234,@object              // @.str.234
.L.str.234:
	.asciz	"int64_t multiple constant xor"
	.size	.L.str.234, 30

	.type	.L.str.235,@object              // @.str.235
.L.str.235:
	.asciz	"uint64_t constant"
	.size	.L.str.235, 18

	.type	.L.str.236,@object              // @.str.236
.L.str.236:
	.asciz	"uint64_t add constants"
	.size	.L.str.236, 23

	.type	.L.str.237,@object              // @.str.237
.L.str.237:
	.asciz	"uint64_t subtract constants"
	.size	.L.str.237, 28

	.type	.L.str.238,@object              // @.str.238
.L.str.238:
	.asciz	"uint64_t multiply constants"
	.size	.L.str.238, 28

	.type	.L.str.239,@object              // @.str.239
.L.str.239:
	.asciz	"uint64_t divide constants"
	.size	.L.str.239, 26

	.type	.L.str.240,@object              // @.str.240
.L.str.240:
	.asciz	"uint64_t mod constants"
	.size	.L.str.240, 23

	.type	.L.str.241,@object              // @.str.241
.L.str.241:
	.asciz	"uint64_t equal constants"
	.size	.L.str.241, 25

	.type	.L.str.242,@object              // @.str.242
.L.str.242:
	.asciz	"uint64_t notequal constants"
	.size	.L.str.242, 28

	.type	.L.str.243,@object              // @.str.243
.L.str.243:
	.asciz	"uint64_t greater than constants"
	.size	.L.str.243, 32

	.type	.L.str.244,@object              // @.str.244
.L.str.244:
	.asciz	"uint64_t less than constants"
	.size	.L.str.244, 29

	.type	.L.str.245,@object              // @.str.245
.L.str.245:
	.asciz	"uint64_t greater than equal constants"
	.size	.L.str.245, 38

	.type	.L.str.246,@object              // @.str.246
.L.str.246:
	.asciz	"uint64_t less than equal constants"
	.size	.L.str.246, 35

	.type	.L.str.247,@object              // @.str.247
.L.str.247:
	.asciz	"uint64_t and constants"
	.size	.L.str.247, 23

	.type	.L.str.248,@object              // @.str.248
.L.str.248:
	.asciz	"uint64_t or constants"
	.size	.L.str.248, 22

	.type	.L.str.249,@object              // @.str.249
.L.str.249:
	.asciz	"uint64_t xor constants"
	.size	.L.str.249, 23

	.type	.L.str.250,@object              // @.str.250
.L.str.250:
	.asciz	"uint64_t constant add"
	.size	.L.str.250, 22

	.type	.L.str.251,@object              // @.str.251
.L.str.251:
	.asciz	"uint64_t multiple constant adds"
	.size	.L.str.251, 32

	.type	.L.str.252,@object              // @.str.252
.L.str.252:
	.asciz	"uint64_t constant subtract"
	.size	.L.str.252, 27

	.type	.L.str.253,@object              // @.str.253
.L.str.253:
	.asciz	"uint64_t multiple constant subtracts"
	.size	.L.str.253, 37

	.type	.L.str.254,@object              // @.str.254
.L.str.254:
	.asciz	"uint64_t constant multiply"
	.size	.L.str.254, 27

	.type	.L.str.255,@object              // @.str.255
.L.str.255:
	.asciz	"uint64_t multiple constant multiplies"
	.size	.L.str.255, 38

	.type	.L.str.256,@object              // @.str.256
.L.str.256:
	.asciz	"uint64_t multiple constant multiply2"
	.size	.L.str.256, 37

	.type	.L.str.257,@object              // @.str.257
.L.str.257:
	.asciz	"uint64_t constant divide"
	.size	.L.str.257, 25

	.type	.L.str.258,@object              // @.str.258
.L.str.258:
	.asciz	"uint64_t multiple constant divides"
	.size	.L.str.258, 35

	.type	.L.str.259,@object              // @.str.259
.L.str.259:
	.asciz	"uint64_t multiple constant divide2"
	.size	.L.str.259, 35

	.type	.L.str.260,@object              // @.str.260
.L.str.260:
	.asciz	"uint64_t multiple constant mixed"
	.size	.L.str.260, 33

	.type	.L.str.261,@object              // @.str.261
.L.str.261:
	.asciz	"uint64_t constant and"
	.size	.L.str.261, 22

	.type	.L.str.262,@object              // @.str.262
.L.str.262:
	.asciz	"uint64_t multiple constant and"
	.size	.L.str.262, 31

	.type	.L.str.263,@object              // @.str.263
.L.str.263:
	.asciz	"uint64_t constant or"
	.size	.L.str.263, 21

	.type	.L.str.264,@object              // @.str.264
.L.str.264:
	.asciz	"uint64_t multiple constant or"
	.size	.L.str.264, 30

	.type	.L.str.265,@object              // @.str.265
.L.str.265:
	.asciz	"uint64_t constant xor"
	.size	.L.str.265, 22

	.type	.L.str.266,@object              // @.str.266
.L.str.266:
	.asciz	"uint64_t multiple constant xor"
	.size	.L.str.266, 31

	.type	.L.str.267,@object              // @.str.267
.L.str.267:
	.asciz	"float constant"
	.size	.L.str.267, 15

	.type	.L.str.268,@object              // @.str.268
.L.str.268:
	.asciz	"float add constants"
	.size	.L.str.268, 20

	.type	.L.str.269,@object              // @.str.269
.L.str.269:
	.asciz	"float subtract constants"
	.size	.L.str.269, 25

	.type	.L.str.270,@object              // @.str.270
.L.str.270:
	.asciz	"float multiply constants"
	.size	.L.str.270, 25

	.type	.L.str.271,@object              // @.str.271
.L.str.271:
	.asciz	"float divide constants"
	.size	.L.str.271, 23

	.type	.L.str.272,@object              // @.str.272
.L.str.272:
	.asciz	"float constant add"
	.size	.L.str.272, 19

	.type	.L.str.273,@object              // @.str.273
.L.str.273:
	.asciz	"float multiple constant adds"
	.size	.L.str.273, 29

	.type	.L.str.274,@object              // @.str.274
.L.str.274:
	.asciz	"float constant subtract"
	.size	.L.str.274, 24

	.type	.L.str.275,@object              // @.str.275
.L.str.275:
	.asciz	"float multiple constant subtracts"
	.size	.L.str.275, 34

	.type	.L.str.276,@object              // @.str.276
.L.str.276:
	.asciz	"float constant multiply"
	.size	.L.str.276, 24

	.type	.L.str.277,@object              // @.str.277
.L.str.277:
	.asciz	"float multiple constant multiplies"
	.size	.L.str.277, 35

	.type	.L.str.278,@object              // @.str.278
.L.str.278:
	.asciz	"float multiple constant multiply2"
	.size	.L.str.278, 34

	.type	.L.str.279,@object              // @.str.279
.L.str.279:
	.asciz	"float constant divide"
	.size	.L.str.279, 22

	.type	.L.str.280,@object              // @.str.280
.L.str.280:
	.asciz	"float multiple constant divides"
	.size	.L.str.280, 32

	.type	.L.str.281,@object              // @.str.281
.L.str.281:
	.asciz	"float multiple constant divide2"
	.size	.L.str.281, 32

	.type	.L.str.282,@object              // @.str.282
.L.str.282:
	.asciz	"float multiple constant mixed"
	.size	.L.str.282, 30

	.type	.L.str.283,@object              // @.str.283
.L.str.283:
	.asciz	"double constant"
	.size	.L.str.283, 16

	.type	.L.str.284,@object              // @.str.284
.L.str.284:
	.asciz	"double add constants"
	.size	.L.str.284, 21

	.type	.L.str.285,@object              // @.str.285
.L.str.285:
	.asciz	"double subtract constants"
	.size	.L.str.285, 26

	.type	.L.str.286,@object              // @.str.286
.L.str.286:
	.asciz	"double multiply constants"
	.size	.L.str.286, 26

	.type	.L.str.287,@object              // @.str.287
.L.str.287:
	.asciz	"double divide constants"
	.size	.L.str.287, 24

	.type	.L.str.288,@object              // @.str.288
.L.str.288:
	.asciz	"double constant add"
	.size	.L.str.288, 20

	.type	.L.str.289,@object              // @.str.289
.L.str.289:
	.asciz	"double multiple constant adds"
	.size	.L.str.289, 30

	.type	.L.str.290,@object              // @.str.290
.L.str.290:
	.asciz	"double constant subtract"
	.size	.L.str.290, 25

	.type	.L.str.291,@object              // @.str.291
.L.str.291:
	.asciz	"double multiple constant subtracts"
	.size	.L.str.291, 35

	.type	.L.str.292,@object              // @.str.292
.L.str.292:
	.asciz	"double constant multiply"
	.size	.L.str.292, 25

	.type	.L.str.293,@object              // @.str.293
.L.str.293:
	.asciz	"double multiple constant multiplies"
	.size	.L.str.293, 36

	.type	.L.str.294,@object              // @.str.294
.L.str.294:
	.asciz	"double multiple constant multiply2"
	.size	.L.str.294, 35

	.type	.L.str.295,@object              // @.str.295
.L.str.295:
	.asciz	"double constant divide"
	.size	.L.str.295, 23

	.type	.L.str.296,@object              // @.str.296
.L.str.296:
	.asciz	"double multiple constant divides"
	.size	.L.str.296, 33

	.type	.L.str.297,@object              // @.str.297
.L.str.297:
	.asciz	"double multiple constant divide2"
	.size	.L.str.297, 33

	.type	.L.str.298,@object              // @.str.298
.L.str.298:
	.asciz	"double multiple constant mixed"
	.size	.L.str.298, 31

	.type	.L.str.299,@object              // @.str.299
.L.str.299:
	.asciz	"test %i failed\n"
	.size	.L.str.299, 16

	.ident	"clang version 22.0.0git (https://github.com/steven-studio/llvm-project.git c2901ea177a93cdcea513ae5bdc6a189f274f4ca)"
	.section	".note.GNU-stack","",@progbits
