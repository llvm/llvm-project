	.file	"loop_unroll.cpp"
	.text
	.globl	_Z13record_resultdPKc           // -- Begin function _Z13record_resultdPKc
	.p2align	2
	.type	_Z13record_resultdPKc,@function
_Z13record_resultdPKc:                  // @_Z13record_resultdPKc
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-64]!                 // 8-byte Folded Spill
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 48
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w30, -40
	.cfi_offset w29, -48
	.cfi_offset b8, -64
	.cfi_remember_state
	fmov	d8, d0
	adrp	x22, results
	adrp	x21, allocated_results
	mov	x19, x0
	ldr	x0, [x22, :lo12:results]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x20, current_test
	cbz	x0, .LBB0_2
// %bb.1:
	ldr	w8, [x20, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB0_4
.LBB0_2:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB0_5
// %bb.3:
	ldr	w8, [x20, :lo12:current_test]
.LBB0_4:
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	d8, [x9]
	str	x19, [x9, #8]
	str	w8, [x20, :lo12:current_test]
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #64                   // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.LBB0_5:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end0:
	.size	_Z13record_resultdPKc, .Lfunc_end0-_Z13record_resultdPKc
	.cfi_endproc
                                        // -- End function
	.globl	_Z9summarizePKciiii             // -- Begin function _Z9summarizePKciiii
	.p2align	2
	.type	_Z9summarizePKciiii,@function
_Z9summarizePKciiii:                    // @_Z9summarizePKciiii
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	d9, d8, [sp, #16]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #32]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #48]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #64]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #80]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #96]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #112]            // 16-byte Folded Spill
	add	x29, sp, #32
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	adrp	x26, current_test
	mov	w20, w4
	mov	w22, w2
	ldr	w24, [x26, :lo12:current_test]
	mov	w23, w1
	mov	x19, x0
	adrp	x27, results
	cmp	w24, #1
	b.lt	.LBB1_3
// %bb.1:
	ldr	x8, [x27, :lo12:results]
	mov	w21, #12                        // =0xc
	add	x25, x8, #8
.LBB1_2:                                // =>This Inner Loop Header: Depth=1
	ldr	x0, [x25], #16
	bl	strlen
	cmp	w21, w0
	csel	w21, w21, w0, gt
	subs	x24, x24, #1
	b.ne	.LBB1_2
	b	.LBB1_4
.LBB1_3:
	mov	w21, #12                        // =0xc
.LBB1_4:
	adrp	x24, .L.str.2
	add	x24, x24, :lo12:.L.str.2
	sub	w1, w21, #12
	adrp	x0, .L.str.1
	add	x0, x0, :lo12:.L.str.1
	mov	x2, x24
	bl	printf
	adrp	x0, .L.str.3
	add	x0, x0, :lo12:.L.str.3
	mov	w1, w21
	mov	x2, x24
	bl	printf
	movi	d8, #0000000000000000
	ldr	w8, [x26, :lo12:current_test]
	cmp	w8, #1
	b.lt	.LBB1_15
// %bb.5:                               // %.preheader2
	scvtf	d0, w23
	scvtf	d1, w22
	mov	x8, #145685290680320            // =0x848000000000
	movk	x8, #16686, lsl #48
	mov	x28, xzr
	mov	x24, xzr
	adrp	x22, .L.str.4
	add	x22, x22, :lo12:.L.str.4
	adrp	x23, .L.str.5
	add	x23, x23, :lo12:.L.str.5
	str	w20, [sp, #4]                   // 4-byte Folded Spill
	fmul	d0, d0, d1
	fmov	d1, x8
	str	x19, [sp, #8]                   // 8-byte Folded Spill
	fdiv	d9, d0, d1
.LBB1_6:                                // =>This Inner Loop Header: Depth=1
	ldr	x20, [x27, :lo12:results]
	add	x19, x20, x28
	ldr	x25, [x19, #8]
	mov	x0, x25
	bl	strlen
	ldr	d0, [x19]
	ldr	d2, [x20]
	sub	w2, w21, w0
	mov	x0, x22
	mov	w1, w24
	mov	x3, x23
	fdiv	d1, d9, d0
	mov	x4, x25
	fdiv	d2, d0, d2
	bl	printf
	ldrsw	x8, [x26, :lo12:current_test]
	add	x24, x24, #1
	add	x28, x28, #16
	cmp	x24, x8
	b.lt	.LBB1_6
// %bb.7:
	ldr	x19, [sp, #8]                   // 8-byte Folded Reload
	ldr	w20, [sp, #4]                   // 4-byte Folded Reload
	cmp	w8, #1
	b.lt	.LBB1_15
// %bb.8:
	movi	d8, #0000000000000000
	ldr	x9, [x27, :lo12:results]
	cmp	w8, #1
	b.ne	.LBB1_10
// %bb.9:
	mov	x10, xzr
	b	.LBB1_13
.LBB1_10:
	and	x10, x8, #0x7ffffffe
	add	x11, x9, #16
	mov	x12, x10
.LBB1_11:                               // =>This Inner Loop Header: Depth=1
	ldur	d0, [x11, #-16]
	ldr	d1, [x11], #32
	subs	x12, x12, #2
	fadd	d0, d8, d0
	fadd	d8, d0, d1
	b.ne	.LBB1_11
// %bb.12:
	cmp	x10, x8
	b.eq	.LBB1_15
.LBB1_13:                               // %.preheader
	add	x9, x9, x10, lsl #4
	sub	x8, x8, x10
.LBB1_14:                               // =>This Inner Loop Header: Depth=1
	ldr	d0, [x9], #16
	subs	x8, x8, #1
	fadd	d8, d8, d0
	b.ne	.LBB1_14
.LBB1_15:
	fmov	d0, d8
	adrp	x0, .L.str.6
	add	x0, x0, :lo12:.L.str.6
	mov	x1, x19
	bl	printf
	cbz	w20, .LBB1_20
// %bb.16:
	ldr	w8, [x26, :lo12:current_test]
	cmp	w8, #2
	b.lt	.LBB1_20
// %bb.17:
	ldr	x20, [x27, :lo12:results]
	movi	d8, #0000000000000000
	mov	w21, #1                         // =0x1
	ldr	d9, [x20], #16
.LBB1_18:                               // =>This Inner Loop Header: Depth=1
	ldr	d0, [x20], #16
	fdiv	d0, d0, d9
	bl	log
	fadd	d8, d8, d0
	ldrsw	x8, [x26, :lo12:current_test]
	add	x21, x21, #1
	cmp	x21, x8
	b.lt	.LBB1_18
// %bb.19:
	sub	w8, w8, #1
	scvtf	d0, w8
	fdiv	d0, d8, d0
	bl	exp
	adrp	x0, .L.str.7
	add	x0, x0, :lo12:.L.str.7
	mov	x1, x19
	bl	printf
.LBB1_20:
	str	wzr, [x26, :lo12:current_test]
	.cfi_def_cfa wsp, 128
	ldp	x20, x19, [sp, #112]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #96]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #80]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #64]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #48]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #32]             // 16-byte Folded Reload
	ldp	d9, d8, [sp, #16]               // 16-byte Folded Reload
	add	sp, sp, #128
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	ret
.Lfunc_end1:
	.size	_Z9summarizePKciiii, .Lfunc_end1-_Z9summarizePKciiii
	.cfi_endproc
                                        // -- End function
	.globl	_Z17summarize_simplefP8_IO_FILEPKc // -- Begin function _Z17summarize_simplefP8_IO_FILEPKc
	.p2align	2
	.type	_Z17summarize_simplefP8_IO_FILEPKc,@function
_Z17summarize_simplefP8_IO_FILEPKc:     // @_Z17summarize_simplefP8_IO_FILEPKc
	.cfi_startproc
// %bb.0:
	str	d8, [sp, #-112]!                // 8-byte Folded Spill
	.cfi_def_cfa_offset 112
	stp	x29, x30, [sp, #16]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #32]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #48]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #64]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #80]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #96]             // 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -112
	adrp	x26, current_test
	mov	x19, x1
	mov	x20, x0
	ldr	w22, [x26, :lo12:current_test]
	adrp	x27, results
	cmp	w22, #1
	b.lt	.LBB2_3
// %bb.1:
	ldr	x8, [x27, :lo12:results]
	mov	w21, #12                        // =0xc
	add	x23, x8, #8
.LBB2_2:                                // =>This Inner Loop Header: Depth=1
	ldr	x0, [x23], #16
	bl	strlen
	cmp	w21, w0
	csel	w21, w21, w0, gt
	subs	x22, x22, #1
	b.ne	.LBB2_2
	b	.LBB2_4
.LBB2_3:
	mov	w21, #12                        // =0xc
.LBB2_4:
	adrp	x22, .L.str.2
	add	x22, x22, :lo12:.L.str.2
	sub	w2, w21, #12
	adrp	x1, .L.str.8
	add	x1, x1, :lo12:.L.str.8
	mov	x0, x20
	mov	x3, x22
	bl	fprintf
	adrp	x1, .L.str.9
	add	x1, x1, :lo12:.L.str.9
	mov	x0, x20
	mov	w2, w21
	mov	x3, x22
	bl	fprintf
	movi	d8, #0000000000000000
	ldr	w8, [x26, :lo12:current_test]
	cmp	w8, #1
	b.lt	.LBB2_15
// %bb.5:                               // %.preheader2
	mov	x28, xzr
	mov	x22, xzr
	adrp	x23, .L.str.10
	add	x23, x23, :lo12:.L.str.10
	adrp	x24, .L.str.5
	add	x24, x24, :lo12:.L.str.5
	str	x19, [sp, #8]                   // 8-byte Folded Spill
.LBB2_6:                                // =>This Inner Loop Header: Depth=1
	ldr	x8, [x27, :lo12:results]
	add	x19, x8, x28
	ldr	x25, [x19, #8]
	mov	x0, x25
	bl	strlen
	ldr	d0, [x19]
	sub	w3, w21, w0
	mov	x0, x20
	mov	x1, x23
	mov	w2, w22
	mov	x4, x24
	mov	x5, x25
	bl	fprintf
	ldrsw	x8, [x26, :lo12:current_test]
	add	x22, x22, #1
	add	x28, x28, #16
	cmp	x22, x8
	b.lt	.LBB2_6
// %bb.7:
	ldr	x19, [sp, #8]                   // 8-byte Folded Reload
	cmp	w8, #1
	b.lt	.LBB2_15
// %bb.8:
	movi	d8, #0000000000000000
	ldr	x9, [x27, :lo12:results]
	cmp	w8, #1
	b.ne	.LBB2_10
// %bb.9:
	mov	x10, xzr
	b	.LBB2_13
.LBB2_10:
	and	x10, x8, #0x7ffffffe
	add	x11, x9, #16
	mov	x12, x10
.LBB2_11:                               // =>This Inner Loop Header: Depth=1
	ldur	d0, [x11, #-16]
	ldr	d1, [x11], #32
	subs	x12, x12, #2
	fadd	d0, d8, d0
	fadd	d8, d0, d1
	b.ne	.LBB2_11
// %bb.12:
	cmp	x10, x8
	b.eq	.LBB2_15
.LBB2_13:                               // %.preheader
	add	x9, x9, x10, lsl #4
	sub	x8, x8, x10
.LBB2_14:                               // =>This Inner Loop Header: Depth=1
	ldr	d0, [x9], #16
	subs	x8, x8, #1
	fadd	d8, d8, d0
	b.ne	.LBB2_14
.LBB2_15:
	fmov	d0, d8
	adrp	x1, .L.str.6
	add	x1, x1, :lo12:.L.str.6
	mov	x0, x20
	mov	x2, x19
	bl	fprintf
	str	wzr, [x26, :lo12:current_test]
	.cfi_def_cfa wsp, 112
	ldp	x20, x19, [sp, #96]             // 16-byte Folded Reload
	ldp	x22, x21, [sp, #80]             // 16-byte Folded Reload
	ldp	x24, x23, [sp, #64]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #48]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #16]             // 16-byte Folded Reload
	ldr	d8, [sp], #112                  // 8-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	ret
.Lfunc_end2:
	.size	_Z17summarize_simplefP8_IO_FILEPKc, .Lfunc_end2-_Z17summarize_simplefP8_IO_FILEPKc
	.cfi_endproc
                                        // -- End function
	.globl	_Z11start_timerv                // -- Begin function _Z11start_timerv
	.p2align	2
	.type	_Z11start_timerv,@function
_Z11start_timerv:                       // @_Z11start_timerv
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	bl	clock
	adrp	x8, start_time
	str	x0, [x8, :lo12:start_time]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end3:
	.size	_Z11start_timerv, .Lfunc_end3-_Z11start_timerv
	.cfi_endproc
                                        // -- End function
	.globl	_Z5timerv                       // -- Begin function _Z5timerv
	.p2align	2
	.type	_Z5timerv,@function
_Z5timerv:                              // @_Z5timerv
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-16]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 16
	mov	x29, sp
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	bl	clock
	adrp	x8, start_time
	ldr	x8, [x8, :lo12:start_time]
	sub	x8, x0, x8
	scvtf	d0, x8
	mov	x8, #145685290680320            // =0x848000000000
	movk	x8, #16686, lsl #48
	fmov	d1, x8
	adrp	x8, end_time
	fdiv	d0, d0, d1
	str	x0, [x8, :lo12:end_time]
	.cfi_def_cfa wsp, 16
	ldp	x29, x30, [sp], #16             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end4:
	.size	_Z5timerv, .Lfunc_end4-_Z5timerv
	.cfi_endproc
                                        // -- End function
	.globl	main                            // -- Begin function main
	.p2align	2
	.type	main,@function
main:                                   // @main
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-64]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 64
	str	x23, [sp, #16]                  // 8-byte Folded Spill
	stp	x22, x21, [sp, #32]             // 16-byte Folded Spill
	stp	x20, x19, [sp, #48]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 64
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -48
	.cfi_offset w30, -56
	.cfi_offset w29, -64
	cmp	w0, #2
	adrp	x21, iterations
	adrp	x22, init_value
	b.lt	.LBB5_3
// %bb.1:
	mov	w20, w0
	ldr	x0, [x1, #8]
	mov	x19, x1
	mov	x1, xzr
	mov	w2, #10                         // =0xa
	bl	__isoc23_strtol
	cmp	w20, #2
	str	w0, [x21, :lo12:iterations]
	b.eq	.LBB5_3
// %bb.2:
	ldr	x0, [x19, #16]
	mov	x1, xzr
	bl	strtod
	str	d0, [x22, :lo12:init_value]
.LBB5_3:
	ldr	d0, [x22, :lo12:init_value]
	mov	w9, #8000                       // =0x1f40
	fcvtzs	w8, d0
	dup	v0.4s, w8
	adrp	x8, data32+16
	add	x8, x8, :lo12:data32+16
.LBB5_4:                                // =>This Inner Loop Header: Depth=1
	subs	x9, x9, #8
	stp	q0, q0, [x8, #-16]
	add	x8, x8, #32
	b.ne	.LBB5_4
// %bb.5:
	adrp	x20, data32
	add	x20, x20, :lo12:data32
	adrp	x1, .L.str.11
	add	x1, x1, :lo12:.L.str.11
	mov	x0, x20
	bl	_ZN14for_loop_testsILi28EiE7do_testEPKiPKc
	adrp	x19, temp_string+2800
	add	x19, x19, :lo12:temp_string+2800
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	mov	x2, x19
	mov	w23, #8000                      // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
	add	x2, x19, #100
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
	add	x2, x19, #200
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
	add	x2, x19, #300
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
	adrp	x1, .L.str.12
	add	x1, x1, :lo12:.L.str.12
	mov	x0, x20
	bl	_ZN16while_loop_testsILi28EiE7do_testEPKiPKc
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	mov	x2, x19
	bl	_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
	add	x2, x19, #100
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
	add	x2, x19, #200
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
	add	x2, x19, #300
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
	adrp	x1, .L.str.13
	add	x1, x1, :lo12:.L.str.13
	mov	x0, x20
	bl	_ZN13do_loop_testsILi28EiE7do_testEPKiPKc
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	mov	x2, x19
	bl	_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
	add	x2, x19, #100
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
	add	x2, x19, #200
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
	add	x2, x19, #300
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
	adrp	x1, .L.str.14
	add	x1, x1, :lo12:.L.str.14
	mov	x0, x20
	bl	_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	mov	x2, x19
	bl	_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
	add	x2, x19, #100
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
	add	x2, x19, #200
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
	add	x2, x19, #300
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
	ldr	w8, [x21, :lo12:iterations]
	ldr	d0, [x22, :lo12:init_value]
	add	w9, w8, #3
	cmp	w8, #0
	dup	v0.2d, v0.d[0]
	csel	w8, w9, w8, mi
	asr	w8, w8, #2
	str	w8, [x21, :lo12:iterations]
	adrp	x8, dataDouble+16
	add	x8, x8, :lo12:dataDouble+16
.LBB5_6:                                // =>This Inner Loop Header: Depth=1
	subs	x23, x23, #4
	stp	q0, q0, [x8, #-16]
	add	x8, x8, #32
	b.ne	.LBB5_6
// %bb.7:
	adrp	x20, dataDouble
	add	x20, x20, :lo12:dataDouble
	adrp	x1, .L.str.15
	add	x1, x1, :lo12:.L.str.15
	mov	x0, x20
	bl	_ZN14for_loop_testsILi28EdE7do_testEPKdPKc
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	mov	x2, x19
	bl	_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
	add	x2, x19, #100
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
	add	x2, x19, #200
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
	add	x2, x19, #300
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
	adrp	x1, .L.str.16
	add	x1, x1, :lo12:.L.str.16
	mov	x0, x20
	bl	_ZN16while_loop_testsILi28EdE7do_testEPKdPKc
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	mov	x2, x19
	bl	_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
	add	x2, x19, #100
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
	add	x2, x19, #200
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
	add	x2, x19, #300
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
	adrp	x1, .L.str.17
	add	x1, x1, :lo12:.L.str.17
	mov	x0, x20
	bl	_ZN13do_loop_testsILi28EdE7do_testEPKdPKc
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	mov	x2, x19
	bl	_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
	add	x2, x19, #100
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
	add	x2, x19, #200
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
	add	x2, x19, #300
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
	adrp	x1, .L.str.18
	add	x1, x1, :lo12:.L.str.18
	mov	x0, x20
	bl	_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	mov	x2, x19
	bl	_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
	add	x2, x19, #100
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
	add	x2, x19, #200
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
	add	x2, x19, #300
	mov	x0, x20
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
	mov	w0, wzr
	.cfi_def_cfa wsp, 64
	ldp	x20, x19, [sp, #48]             // 16-byte Folded Reload
	ldr	x23, [sp, #16]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #32]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #64             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w30
	.cfi_restore w29
	ret
.Lfunc_end5:
	.size	main, .Lfunc_end5-main
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB6_33
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #32
	movk	w13, #41666, lsl #16
	b.lt	.LBB6_15
// %bb.2:
	and	w8, w9, #0xffffffe0
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	sub	w9, w20, w8
	add	w23, w8, #32
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	sub	w9, w9, #33
	add	x8, x21, w23, uxtw #2
	stur	x9, [x29, #-16]                 // 8-byte Folded Spill
	add	x9, x9, #1
	dup	v16.4s, w19
	dup	v17.4s, w28
	mov	w12, #46592                     // =0xb600
	and	x24, x9, #0x1fffffff8
	mov	w26, #14080                     // =0x3700
	add	x8, x8, #16
	mov	w27, wzr
	movk	w12, #46159, lsl #16
	sub	w25, w20, #31
	movk	w26, #34001, lsl #16
	stp	x8, x9, [sp, #16]               // 16-byte Folded Spill
	add	x8, x24, x23
	adrp	x22, init_value
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	stur	q16, [x29, #-32]                // 16-byte Folded Spill
	str	q17, [sp, #32]                  // 16-byte Folded Spill
	b	.LBB6_4
.LBB6_3:                                //   in Loop: Header=BB6_4 Depth=1
	adrp	x8, iterations
	add	w27, w27, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w27, w8
	b.ge	.LBB6_33
.LBB6_4:                                // =>This Loop Header: Depth=1
                                        //     Child Loop BB6_5 Depth 2
                                        //     Child Loop BB6_9 Depth 2
                                        //     Child Loop BB6_12 Depth 2
	mov	x9, xzr
	mov	w8, wzr
	mov	x10, x21
.LBB6_5:                                //   Parent Loop BB6_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x10, #96]
	add	x9, x9, #32
	ldp	q2, q3, [x10, #32]
	cmp	x9, x25
	ldp	q4, q5, [x10, #64]
	ldp	q6, q7, [x10], #128
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v3.4s, v7.4s, v5.4s
	add	v2.4s, v6.4s, v4.4s
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w11, s0
	madd	w8, w11, w19, w8
	add	w8, w8, w26
	b.lo	.LBB6_5
// %bb.6:                               //   in Loop: Header=BB6_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB6_13
// %bb.7:                               //   in Loop: Header=BB6_4 Depth=1
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	cmp	w9, #6
	mov	x9, x23
	b.ls	.LBB6_11
// %bb.8:                               //   in Loop: Header=BB6_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	v0.s[0], w8
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
.LBB6_9:                                //   Parent Loop BB6_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x8, #-16]
	subs	x9, x9, #8
	add	x8, x8, #32
	mla	v0.4s, v2.4s, v16.4s
	mla	v1.4s, v3.4s, v16.4s
	add	v0.4s, v0.4s, v17.4s
	add	v1.4s, v1.4s, v17.4s
	b.ne	.LBB6_9
// %bb.10:                              //   in Loop: Header=BB6_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
	cmp	x8, x24
	addv	s0, v0.4s
	fmov	w8, s0
	b.eq	.LBB6_13
.LBB6_11:                               // %.preheader
                                        //   in Loop: Header=BB6_4 Depth=1
	add	x10, x21, x9, lsl #2
.LBB6_12:                               //   Parent Loop BB6_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w11, [x10], #4
	add	w8, w8, w28
	add	w9, w9, #1
	madd	w8, w11, w19, w8
	cmp	w20, w9
	b.gt	.LBB6_12
.LBB6_13:                               //   in Loop: Header=BB6_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w9, d0
	madd	w9, w9, w13, w12
	cmp	w8, w9
	b.eq	.LBB6_3
// %bb.14:                              //   in Loop: Header=BB6_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q17, [sp, #32]                  // 16-byte Folded Reload
	ldur	q16, [x29, #-32]                // 16-byte Folded Reload
	mov	w12, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	movk	w12, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB6_3
.LBB6_15:
	cmp	w20, #0
	b.le	.LBB6_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB6_18
.LBB6_17:                               //   in Loop: Header=BB6_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB6_33
.LBB6_18:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB6_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB6_20
// %bb.19:                              //   in Loop: Header=BB6_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB6_25
.LBB6_20:                               //   in Loop: Header=BB6_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB6_23
// %bb.21:                              //   in Loop: Header=BB6_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB6_24
// %bb.22:                              //   in Loop: Header=BB6_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB6_23:                               //   in Loop: Header=BB6_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB6_24:                               //   in Loop: Header=BB6_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB6_27
.LBB6_25:                               // %.preheader3
                                        //   in Loop: Header=BB6_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB6_26:                               //   Parent Loop BB6_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB6_26
.LBB6_27:                               //   in Loop: Header=BB6_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB6_17
// %bb.28:                              //   in Loop: Header=BB6_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB6_17
.LBB6_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB6_31
.LBB6_30:                               //   in Loop: Header=BB6_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB6_33
.LBB6_31:                               // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB6_30
// %bb.32:                              //   in Loop: Header=BB6_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB6_30
.LBB6_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB6_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB6_37
.LBB6_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB6_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB6_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB6_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end6:
	.size	_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end6-_Z27test_for_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB7_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #31
	movk	w15, #41666, lsl #16
	b.lt	.LBB7_15
// %bb.2:
	mov	w8, #4229                       // =0x1085
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w8, #2114, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x8, w9, w8
	dup	v6.4s, w19
	dup	v7.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w25, #44360                     // =0xad48
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #30
	add	x24, x21, #120
	lsr	x8, x8, #32
	movk	w25, #51370, lsl #16
	adrp	x26, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w8
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	add	w8, w8, w9, lsr #1
	lsr	w8, w8, #4
	lsl	w9, w8, #5
	sub	w8, w9, w8
	sub	w9, w20, w8
	add	w22, w8, #31
	sub	w9, w9, #32
	add	x8, x21, w22, uxtw #2
	stur	x9, [x29, #-16]                 // 8-byte Folded Spill
	add	x9, x9, #1
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	and	x9, x9, #0x1fffffff8
	add	x10, x8, #16
	add	x8, x9, x22
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	stp	x8, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB7_4
.LBB7_3:                                //   in Loop: Header=BB7_4 Depth=1
	adrp	x8, iterations
	add	w27, w27, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w27, w8
	b.ge	.LBB7_33
.LBB7_4:                                // =>This Loop Header: Depth=1
                                        //     Child Loop BB7_5 Depth 2
                                        //     Child Loop BB7_9 Depth 2
                                        //     Child Loop BB7_12 Depth 2
	mov	w8, wzr
	mov	x9, x24
	mov	w10, #28                        // =0x1c
.LBB7_5:                                //   Parent Loop BB7_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x9, #-40]
	ldur	q1, [x9, #-104]
	ldur	q2, [x9, #-56]
	ldur	q3, [x9, #-120]
	ldur	q4, [x9, #-24]
	ldur	q5, [x9, #-88]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x9, #-72]
	add	v4.4s, v5.4s, v4.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w11, w12, [x9, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w13, [x9], #124
	add	v2.4s, v2.4s, v4.4s
	add	w12, w12, w13
	add	v0.4s, v2.4s, v0.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w11, w14, w11
	add	w11, w11, w12
	madd	w8, w11, w19, w8
	add	x11, x10, #3
	add	x10, x10, #31
	cmp	x11, x23
	add	w8, w8, w25
	b.lo	.LBB7_5
// %bb.6:                               //   in Loop: Header=BB7_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB7_13
// %bb.7:                               //   in Loop: Header=BB7_4 Depth=1
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	cmp	w9, #6
	mov	x9, x22
	b.ls	.LBB7_11
// %bb.8:                               //   in Loop: Header=BB7_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	mov	v0.s[0], w8
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
.LBB7_9:                                //   Parent Loop BB7_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x8, #-16]
	subs	x9, x9, #8
	add	x8, x8, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB7_9
// %bb.10:                              //   in Loop: Header=BB7_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x8, x9, [sp, #32]               // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x8, x9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	fmov	w8, s0
	b.eq	.LBB7_13
.LBB7_11:                               // %.preheader
                                        //   in Loop: Header=BB7_4 Depth=1
	add	x10, x21, x9, lsl #2
.LBB7_12:                               //   Parent Loop BB7_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w11, [x10], #4
	add	w8, w8, w28
	add	w9, w9, #1
	madd	w8, w11, w19, w8
	cmp	w20, w9
	b.gt	.LBB7_12
.LBB7_13:                               //   in Loop: Header=BB7_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w9, d0
	madd	w9, w9, w15, w16
	cmp	w8, w9
	b.eq	.LBB7_3
// %bb.14:                              //   in Loop: Header=BB7_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB7_3
.LBB7_15:
	cmp	w20, #0
	b.le	.LBB7_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB7_18
.LBB7_17:                               //   in Loop: Header=BB7_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB7_33
.LBB7_18:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB7_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB7_20
// %bb.19:                              //   in Loop: Header=BB7_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB7_25
.LBB7_20:                               //   in Loop: Header=BB7_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB7_23
// %bb.21:                              //   in Loop: Header=BB7_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB7_24
// %bb.22:                              //   in Loop: Header=BB7_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB7_23:                               //   in Loop: Header=BB7_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB7_24:                               //   in Loop: Header=BB7_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB7_27
.LBB7_25:                               // %.preheader3
                                        //   in Loop: Header=BB7_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB7_26:                               //   Parent Loop BB7_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB7_26
.LBB7_27:                               //   in Loop: Header=BB7_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB7_17
// %bb.28:                              //   in Loop: Header=BB7_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB7_17
.LBB7_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB7_31
.LBB7_30:                               //   in Loop: Header=BB7_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB7_33
.LBB7_31:                               // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB7_30
// %bb.32:                              //   in Loop: Header=BB7_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB7_30
.LBB7_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB7_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB7_37
.LBB7_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB7_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB7_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB7_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end7:
	.size	_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end7-_Z27test_for_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB8_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #30
	movk	w15, #41666, lsl #16
	b.lt	.LBB8_15
// %bb.2:
	mov	w10, #34953                     // =0x8889
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #34952, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v6.4s, w19
	dup	v7.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w22, #9104                      // =0x2390
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #29
	add	x24, x21, #116
	lsr	x9, x9, #36
	movk	w22, #3204, lsl #16
	adrp	x26, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	lsl	w10, w9, #5
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	sub	w9, w10, w9, lsl #1
	sub	w10, w20, w9
	add	w25, w9, #30
	sub	w10, w10, #31
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB8_4
.LBB8_3:                                //   in Loop: Header=BB8_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB8_33
.LBB8_4:                                // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_5 Depth 2
                                        //     Child Loop BB8_9 Depth 2
                                        //     Child Loop BB8_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #28                        // =0x1c
.LBB8_5:                                //   Parent Loop BB8_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-100]
	ldur	q2, [x10, #-52]
	ldur	q3, [x10, #-116]
	ldur	q4, [x10, #-20]
	ldur	q5, [x10, #-84]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-68]
	add	v4.4s, v5.4s, v4.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #120
	add	v2.4s, v2.4s, v4.4s
	add	v0.4s, v2.4s, v0.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #30
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB8_5
// %bb.6:                               //   in Loop: Header=BB8_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB8_13
// %bb.7:                               //   in Loop: Header=BB8_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB8_11
// %bb.8:                               //   in Loop: Header=BB8_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB8_9:                                //   Parent Loop BB8_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB8_9
// %bb.10:                              //   in Loop: Header=BB8_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB8_13
.LBB8_11:                               // %.preheader
                                        //   in Loop: Header=BB8_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB8_12:                               //   Parent Loop BB8_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB8_12
.LBB8_13:                               //   in Loop: Header=BB8_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB8_3
// %bb.14:                              //   in Loop: Header=BB8_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB8_3
.LBB8_15:
	cmp	w20, #0
	b.le	.LBB8_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB8_18
.LBB8_17:                               //   in Loop: Header=BB8_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB8_33
.LBB8_18:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB8_20
// %bb.19:                              //   in Loop: Header=BB8_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB8_25
.LBB8_20:                               //   in Loop: Header=BB8_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB8_23
// %bb.21:                              //   in Loop: Header=BB8_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB8_24
// %bb.22:                              //   in Loop: Header=BB8_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB8_23:                               //   in Loop: Header=BB8_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB8_24:                               //   in Loop: Header=BB8_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB8_27
.LBB8_25:                               // %.preheader3
                                        //   in Loop: Header=BB8_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB8_26:                               //   Parent Loop BB8_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB8_26
.LBB8_27:                               //   in Loop: Header=BB8_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB8_17
// %bb.28:                              //   in Loop: Header=BB8_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB8_17
.LBB8_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB8_31
.LBB8_30:                               //   in Loop: Header=BB8_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB8_33
.LBB8_31:                               // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB8_30
// %bb.32:                              //   in Loop: Header=BB8_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB8_30
.LBB8_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB8_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB8_37
.LBB8_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB8_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB8_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB8_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end8:
	.size	_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end8-_Z27test_for_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN14for_loop_testsILi28EiE7do_testEPKiPKc,"axG",@progbits,_ZN14for_loop_testsILi28EiE7do_testEPKiPKc,comdat
	.weak	_ZN14for_loop_testsILi28EiE7do_testEPKiPKc // -- Begin function _ZN14for_loop_testsILi28EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN14for_loop_testsILi28EiE7do_testEPKiPKc,@function
_ZN14for_loop_testsILi28EiE7do_testEPKiPKc: // @_ZN14for_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN14for_loop_testsILi19EiE7do_testEPKiPKc
	adrp	x20, temp_string+1900
	add	x20, x20, :lo12:temp_string+1900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
.Lfunc_end9:
	.size	_ZN14for_loop_testsILi28EiE7do_testEPKiPKc, .Lfunc_end9-_ZN14for_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB10_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #29
	movk	w14, #41666, lsl #16
	b.lt	.LBB10_15
// %bb.2:
	mov	w10, #51977                     // =0xcb09
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #36157, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #29                        // =0x1d
	dup	v6.4s, w19
	dup	v7.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w22, #39384                     // =0x99d8
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w20, #28
	lsr	x9, x9, #36
	add	x24, x21, #112
	movk	w22, #20573, lsl #16
	adrp	x26, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w25, w9, #29
	sub	w10, w10, #30
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB10_4
.LBB10_3:                               //   in Loop: Header=BB10_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB10_33
.LBB10_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB10_5 Depth 2
                                        //     Child Loop BB10_9 Depth 2
                                        //     Child Loop BB10_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB10_5:                               //   Parent Loop BB10_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11, #64]
	ldr	q4, [x11, #96]
	ldp	q3, q2, [x11]
	ldr	q5, [x11, #32]
	ldr	w12, [x24, x10, lsl #2]
	add	x10, x10, #29
	add	v4.4s, v5.4s, v4.4s
	cmp	x10, x23
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldr	q2, [x11, #48]
	add	x11, x11, #116
	add	v1.4s, v1.4s, v4.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w22
	b.lo	.LBB10_5
// %bb.6:                               //   in Loop: Header=BB10_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB10_13
// %bb.7:                               //   in Loop: Header=BB10_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB10_11
// %bb.8:                               //   in Loop: Header=BB10_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB10_9:                               //   Parent Loop BB10_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB10_9
// %bb.10:                              //   in Loop: Header=BB10_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB10_13
.LBB10_11:                              // %.preheader
                                        //   in Loop: Header=BB10_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB10_12:                              //   Parent Loop BB10_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB10_12
.LBB10_13:                              //   in Loop: Header=BB10_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB10_3
// %bb.14:                              //   in Loop: Header=BB10_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB10_3
.LBB10_15:
	cmp	w20, #0
	b.le	.LBB10_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB10_18
.LBB10_17:                              //   in Loop: Header=BB10_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB10_33
.LBB10_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB10_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB10_20
// %bb.19:                              //   in Loop: Header=BB10_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB10_25
.LBB10_20:                              //   in Loop: Header=BB10_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB10_23
// %bb.21:                              //   in Loop: Header=BB10_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB10_24
// %bb.22:                              //   in Loop: Header=BB10_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB10_23:                              //   in Loop: Header=BB10_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB10_24:                              //   in Loop: Header=BB10_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB10_27
.LBB10_25:                              // %.preheader3
                                        //   in Loop: Header=BB10_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB10_26:                              //   Parent Loop BB10_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB10_26
.LBB10_27:                              //   in Loop: Header=BB10_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB10_17
// %bb.28:                              //   in Loop: Header=BB10_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB10_17
.LBB10_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB10_31
.LBB10_30:                              //   in Loop: Header=BB10_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB10_33
.LBB10_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB10_30
// %bb.32:                              //   in Loop: Header=BB10_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB10_30
.LBB10_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB10_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB10_37
.LBB10_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB10_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB10_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB10_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end10:
	.size	_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end10-_Z27test_for_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB11_33
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #28
	movk	w13, #41666, lsl #16
	b.lt	.LBB11_15
// %bb.2:
	lsr	w9, w9, #2
	mov	w10, #18725                     // =0x4925
	mov	w28, #35256                     // =0x89b8
	movk	w10, #9362, lsl #16
	mov	w19, #38821                     // =0x97a5
	movk	w28, #48166, lsl #16
	umull	x9, w9, w10
	movk	w19, #4117, lsl #16
	dup	v7.4s, w28
	dup	v6.4s, w19
	mov	w14, #46592                     // =0xb600
	mov	w26, #4128                      // =0x1020
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w22, w20, #27
	lsr	x9, x9, #32
	movk	w26, #37943, lsl #16
	adrp	x25, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	lsl	w10, w9, #5
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	sub	w9, w10, w9, lsl #2
	sub	w10, w20, w9
	add	w23, w9, #28
	sub	w10, w10, #29
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	and	x24, x10, #0x1fffffff8
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x9, x24, x23
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB11_4
.LBB11_3:                               //   in Loop: Header=BB11_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB11_33
.LBB11_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB11_5 Depth 2
                                        //     Child Loop BB11_9 Depth 2
                                        //     Child Loop BB11_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB11_5:                               //   Parent Loop BB11_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11, #64]
	add	x10, x10, #28
	ldp	q3, q2, [x11]
	cmp	x10, x22
	ldr	q4, [x11, #96]
	ldr	q5, [x11, #32]
	add	v4.4s, v5.4s, v4.4s
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldr	q2, [x11, #48]
	add	x11, x11, #112
	add	v1.4s, v1.4s, v4.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB11_5
// %bb.6:                               //   in Loop: Header=BB11_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB11_13
// %bb.7:                               //   in Loop: Header=BB11_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB11_11
// %bb.8:                               //   in Loop: Header=BB11_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x10, x24
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB11_9:                               //   Parent Loop BB11_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB11_9
// %bb.10:                              //   in Loop: Header=BB11_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB11_13
.LBB11_11:                              // %.preheader
                                        //   in Loop: Header=BB11_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB11_12:                              //   Parent Loop BB11_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB11_12
.LBB11_13:                              //   in Loop: Header=BB11_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB11_3
// %bb.14:                              //   in Loop: Header=BB11_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q7, [sp, #32]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB11_3
.LBB11_15:
	cmp	w20, #0
	b.le	.LBB11_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB11_18
.LBB11_17:                              //   in Loop: Header=BB11_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB11_33
.LBB11_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB11_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB11_20
// %bb.19:                              //   in Loop: Header=BB11_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB11_25
.LBB11_20:                              //   in Loop: Header=BB11_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB11_23
// %bb.21:                              //   in Loop: Header=BB11_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB11_24
// %bb.22:                              //   in Loop: Header=BB11_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB11_23:                              //   in Loop: Header=BB11_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB11_24:                              //   in Loop: Header=BB11_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB11_27
.LBB11_25:                              // %.preheader3
                                        //   in Loop: Header=BB11_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB11_26:                              //   Parent Loop BB11_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB11_26
.LBB11_27:                              //   in Loop: Header=BB11_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB11_17
// %bb.28:                              //   in Loop: Header=BB11_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB11_17
.LBB11_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB11_31
.LBB11_30:                              //   in Loop: Header=BB11_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB11_33
.LBB11_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB11_30
// %bb.32:                              //   in Loop: Header=BB11_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB11_30
.LBB11_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB11_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB11_37
.LBB11_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB11_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB11_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB11_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end11:
	.size	_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end11-_Z27test_for_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB12_33
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #27
	movk	w16, #41666, lsl #16
	b.lt	.LBB12_15
// %bb.2:
	mov	w10, #19419                     // =0x4bdb
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #12136, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w22, #34408                     // =0x8668
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w23, w20, #26
	add	x24, x21, #104
	lsr	x10, x10, #32
	movk	w22, #55312, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #27                        // =0x1b
	lsr	w9, w9, #4
	mul	w9, w9, w10
	sub	w10, w20, w9
	add	w25, w9, #27
	sub	w10, w10, #28
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB12_4
.LBB12_3:                               //   in Loop: Header=BB12_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB12_33
.LBB12_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB12_5 Depth 2
                                        //     Child Loop BB12_9 Depth 2
                                        //     Child Loop BB12_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #24                        // =0x18
.LBB12_5:                               //   Parent Loop BB12_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-40]
	ldur	q1, [x10, #-104]
	ldur	q2, [x10, #-24]
	ldur	q3, [x10, #-88]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-72]
	add	v2.4s, v3.4s, v2.4s
	ldur	q3, [x10, #-56]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w14, [x10], #108
	add	v2.4s, v2.4s, v3.4s
	add	w13, w13, w14
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #27
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB12_5
// %bb.6:                               //   in Loop: Header=BB12_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB12_13
// %bb.7:                               //   in Loop: Header=BB12_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB12_11
// %bb.8:                               //   in Loop: Header=BB12_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB12_9:                               //   Parent Loop BB12_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB12_9
// %bb.10:                              //   in Loop: Header=BB12_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB12_13
.LBB12_11:                              // %.preheader
                                        //   in Loop: Header=BB12_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB12_12:                              //   Parent Loop BB12_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB12_12
.LBB12_13:                              //   in Loop: Header=BB12_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB12_3
// %bb.14:                              //   in Loop: Header=BB12_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB12_3
.LBB12_15:
	cmp	w20, #0
	b.le	.LBB12_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB12_18
.LBB12_17:                              //   in Loop: Header=BB12_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB12_33
.LBB12_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB12_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB12_20
// %bb.19:                              //   in Loop: Header=BB12_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB12_25
.LBB12_20:                              //   in Loop: Header=BB12_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB12_23
// %bb.21:                              //   in Loop: Header=BB12_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB12_24
// %bb.22:                              //   in Loop: Header=BB12_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB12_23:                              //   in Loop: Header=BB12_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB12_24:                              //   in Loop: Header=BB12_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB12_27
.LBB12_25:                              // %.preheader3
                                        //   in Loop: Header=BB12_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB12_26:                              //   Parent Loop BB12_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB12_26
.LBB12_27:                              //   in Loop: Header=BB12_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB12_17
// %bb.28:                              //   in Loop: Header=BB12_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB12_17
.LBB12_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB12_31
.LBB12_30:                              //   in Loop: Header=BB12_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB12_33
.LBB12_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB12_30
// %bb.32:                              //   in Loop: Header=BB12_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB12_30
.LBB12_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB12_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB12_37
.LBB12_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB12_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB12_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB12_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end12:
	.size	_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end12-_Z27test_for_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB13_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #26
	movk	w15, #41666, lsl #16
	b.lt	.LBB13_15
// %bb.2:
	mov	w10, #60495                     // =0xec4f
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #20164, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #26                        // =0x1a
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w22, #64688                     // =0xfcb0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #25
	lsr	x9, x9, #35
	add	x24, x21, #100
	movk	w22, #7145, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w25, w9, #26
	sub	w10, w10, #27
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB13_4
.LBB13_3:                               //   in Loop: Header=BB13_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB13_33
.LBB13_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB13_5 Depth 2
                                        //     Child Loop BB13_9 Depth 2
                                        //     Child Loop BB13_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #24                        // =0x18
.LBB13_5:                               //   Parent Loop BB13_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-100]
	ldur	q2, [x10, #-20]
	ldur	q3, [x10, #-84]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-68]
	add	v2.4s, v3.4s, v2.4s
	ldur	q3, [x10, #-52]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #104
	add	v2.4s, v2.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #26
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB13_5
// %bb.6:                               //   in Loop: Header=BB13_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB13_13
// %bb.7:                               //   in Loop: Header=BB13_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB13_11
// %bb.8:                               //   in Loop: Header=BB13_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB13_9:                               //   Parent Loop BB13_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB13_9
// %bb.10:                              //   in Loop: Header=BB13_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB13_13
.LBB13_11:                              // %.preheader
                                        //   in Loop: Header=BB13_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB13_12:                              //   Parent Loop BB13_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB13_12
.LBB13_13:                              //   in Loop: Header=BB13_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB13_3
// %bb.14:                              //   in Loop: Header=BB13_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB13_3
.LBB13_15:
	cmp	w20, #0
	b.le	.LBB13_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB13_18
.LBB13_17:                              //   in Loop: Header=BB13_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB13_33
.LBB13_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB13_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB13_20
// %bb.19:                              //   in Loop: Header=BB13_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB13_25
.LBB13_20:                              //   in Loop: Header=BB13_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB13_23
// %bb.21:                              //   in Loop: Header=BB13_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB13_24
// %bb.22:                              //   in Loop: Header=BB13_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB13_23:                              //   in Loop: Header=BB13_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB13_24:                              //   in Loop: Header=BB13_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB13_27
.LBB13_25:                              // %.preheader3
                                        //   in Loop: Header=BB13_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB13_26:                              //   Parent Loop BB13_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB13_26
.LBB13_27:                              //   in Loop: Header=BB13_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB13_17
// %bb.28:                              //   in Loop: Header=BB13_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB13_17
.LBB13_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB13_31
.LBB13_30:                              //   in Loop: Header=BB13_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB13_33
.LBB13_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB13_30
// %bb.32:                              //   in Loop: Header=BB13_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB13_30
.LBB13_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB13_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB13_37
.LBB13_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB13_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB13_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB13_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end13:
	.size	_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end13-_Z27test_for_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB14_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #25
	movk	w14, #41666, lsl #16
	b.lt	.LBB14_15
// %bb.2:
	mov	w10, #34079                     // =0x851f
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #20971, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #25                        // =0x19
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w22, #29432                     // =0x72f8
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w20, #24
	lsr	x9, x9, #35
	add	x24, x21, #96
	movk	w22, #24515, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w25, w9, #25
	sub	w10, w10, #26
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB14_4
.LBB14_3:                               //   in Loop: Header=BB14_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB14_33
.LBB14_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB14_5 Depth 2
                                        //     Child Loop BB14_9 Depth 2
                                        //     Child Loop BB14_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB14_5:                               //   Parent Loop BB14_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #64]
	ldr	w12, [x24, x10, lsl #2]
	ldp	q2, q3, [x11]
	add	x10, x10, #25
	cmp	x10, x23
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldp	q2, q3, [x11, #32]
	add	x11, x11, #100
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w22
	b.lo	.LBB14_5
// %bb.6:                               //   in Loop: Header=BB14_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB14_13
// %bb.7:                               //   in Loop: Header=BB14_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB14_11
// %bb.8:                               //   in Loop: Header=BB14_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB14_9:                               //   Parent Loop BB14_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB14_9
// %bb.10:                              //   in Loop: Header=BB14_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB14_13
.LBB14_11:                              // %.preheader
                                        //   in Loop: Header=BB14_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB14_12:                              //   Parent Loop BB14_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB14_12
.LBB14_13:                              //   in Loop: Header=BB14_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB14_3
// %bb.14:                              //   in Loop: Header=BB14_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB14_3
.LBB14_15:
	cmp	w20, #0
	b.le	.LBB14_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB14_18
.LBB14_17:                              //   in Loop: Header=BB14_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB14_33
.LBB14_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB14_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB14_20
// %bb.19:                              //   in Loop: Header=BB14_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB14_25
.LBB14_20:                              //   in Loop: Header=BB14_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB14_23
// %bb.21:                              //   in Loop: Header=BB14_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB14_24
// %bb.22:                              //   in Loop: Header=BB14_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB14_23:                              //   in Loop: Header=BB14_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB14_24:                              //   in Loop: Header=BB14_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB14_27
.LBB14_25:                              // %.preheader3
                                        //   in Loop: Header=BB14_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB14_26:                              //   Parent Loop BB14_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB14_26
.LBB14_27:                              //   in Loop: Header=BB14_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB14_17
// %bb.28:                              //   in Loop: Header=BB14_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB14_17
.LBB14_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB14_31
.LBB14_30:                              //   in Loop: Header=BB14_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB14_33
.LBB14_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB14_30
// %bb.32:                              //   in Loop: Header=BB14_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB14_30
.LBB14_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB14_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB14_37
.LBB14_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB14_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB14_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB14_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end14:
	.size	_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end14-_Z27test_for_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB15_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #24
	movk	w13, #41666, lsl #16
	b.lt	.LBB15_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w14, #46592                     // =0xb600
	mov	w26, #59712                     // =0xe940
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w22, w20, #23
	movk	w26, #41884, lsl #16
	lsr	x9, x9, #36
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #32]                   // 16-byte Folded Spill
	add	w9, w9, w9, lsl #1
	lsl	w9, w9, #3
	sub	w10, w20, w9
	add	w23, w9, #24
	sub	w10, w10, #25
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	and	x24, x10, #0x1fffffff8
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x9, x24, x23
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB15_4
.LBB15_3:                               //   in Loop: Header=BB15_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB15_32
.LBB15_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB15_5 Depth 2
                                        //     Child Loop BB15_9 Depth 2
                                        //     Child Loop BB15_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB15_5:                               //   Parent Loop BB15_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #64]
	add	x10, x10, #24
	ldp	q2, q3, [x11]
	cmp	x10, x22
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldp	q2, q3, [x11, #32]
	add	x11, x11, #96
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB15_5
// %bb.6:                               //   in Loop: Header=BB15_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB15_13
// %bb.7:                               //   in Loop: Header=BB15_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB15_11
// %bb.8:                               //   in Loop: Header=BB15_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x10, x24
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB15_9:                               //   Parent Loop BB15_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB15_9
// %bb.10:                              //   in Loop: Header=BB15_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB15_13
.LBB15_11:                              // %.preheader
                                        //   in Loop: Header=BB15_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB15_12:                              //   Parent Loop BB15_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB15_12
.LBB15_13:                              //   in Loop: Header=BB15_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB15_3
// %bb.14:                              //   in Loop: Header=BB15_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #32]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB15_3
.LBB15_15:
	cmp	w20, #0
	b.le	.LBB15_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB15_18
.LBB15_17:                              //   in Loop: Header=BB15_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB15_32
.LBB15_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB15_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB15_20
// %bb.19:                              //   in Loop: Header=BB15_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB15_24
.LBB15_20:                              //   in Loop: Header=BB15_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB15_22
// %bb.21:                              //   in Loop: Header=BB15_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB15_23
.LBB15_22:                              //   in Loop: Header=BB15_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
.LBB15_23:                              //   in Loop: Header=BB15_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB15_26
.LBB15_24:                              // %.preheader3
                                        //   in Loop: Header=BB15_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB15_25:                              //   Parent Loop BB15_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB15_25
.LBB15_26:                              //   in Loop: Header=BB15_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB15_17
// %bb.27:                              //   in Loop: Header=BB15_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB15_17
.LBB15_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB15_30
.LBB15_29:                              //   in Loop: Header=BB15_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB15_32
.LBB15_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB15_29
// %bb.31:                              //   in Loop: Header=BB15_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB15_29
.LBB15_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB15_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB15_36
.LBB15_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB15_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB15_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB15_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end15:
	.size	_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end15-_Z27test_for_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB16_32
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #23
	movk	w16, #41666, lsl #16
	b.lt	.LBB16_15
// %bb.2:
	mov	w10, #17097                     // =0x42c9
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #45590, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #23                        // =0x17
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w25, #24456                     // =0x5f88
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w23, w20, #22
	lsr	x9, x9, #36
	add	x24, x21, #88
	movk	w25, #59254, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w22, w9, #23
	sub	w10, w10, #24
	add	x9, x21, w22, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x22
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB16_4
.LBB16_3:                               //   in Loop: Header=BB16_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB16_32
.LBB16_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB16_5 Depth 2
                                        //     Child Loop BB16_9 Depth 2
                                        //     Child Loop BB16_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #20                        // =0x14
.LBB16_5:                               //   Parent Loop BB16_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-88]
	ldur	q2, [x10, #-40]
	ldur	q3, [x10, #-72]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-56]
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w14, [x10], #92
	add	w13, w13, w14
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #23
	cmp	x12, x23
	add	w9, w9, w25
	b.lo	.LBB16_5
// %bb.6:                               //   in Loop: Header=BB16_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB16_13
// %bb.7:                               //   in Loop: Header=BB16_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x22
	b.ls	.LBB16_11
// %bb.8:                               //   in Loop: Header=BB16_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB16_9:                               //   Parent Loop BB16_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB16_9
// %bb.10:                              //   in Loop: Header=BB16_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB16_13
.LBB16_11:                              // %.preheader
                                        //   in Loop: Header=BB16_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB16_12:                              //   Parent Loop BB16_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB16_12
.LBB16_13:                              //   in Loop: Header=BB16_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB16_3
// %bb.14:                              //   in Loop: Header=BB16_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB16_3
.LBB16_15:
	cmp	w20, #0
	b.le	.LBB16_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB16_18
.LBB16_17:                              //   in Loop: Header=BB16_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB16_32
.LBB16_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB16_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB16_20
// %bb.19:                              //   in Loop: Header=BB16_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB16_24
.LBB16_20:                              //   in Loop: Header=BB16_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB16_22
// %bb.21:                              //   in Loop: Header=BB16_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB16_23
.LBB16_22:                              //   in Loop: Header=BB16_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB16_23:                              //   in Loop: Header=BB16_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB16_26
.LBB16_24:                              // %.preheader3
                                        //   in Loop: Header=BB16_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB16_25:                              //   Parent Loop BB16_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB16_25
.LBB16_26:                              //   in Loop: Header=BB16_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB16_17
// %bb.27:                              //   in Loop: Header=BB16_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB16_17
.LBB16_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB16_30
.LBB16_29:                              //   in Loop: Header=BB16_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB16_32
.LBB16_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB16_29
// %bb.31:                              //   in Loop: Header=BB16_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB16_29
.LBB16_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB16_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB16_36
.LBB16_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB16_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB16_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB16_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end16:
	.size	_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end16-_Z27test_for_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB17_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #22
	movk	w15, #41666, lsl #16
	b.lt	.LBB17_15
// %bb.2:
	mov	w10, #35747                     // =0x8ba3
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #47662, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #22                        // =0x16
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w22, #54736                     // =0xd5d0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #21
	lsr	x9, x9, #36
	add	x24, x21, #84
	movk	w22, #11087, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w25, w9, #22
	sub	w10, w10, #23
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB17_4
.LBB17_3:                               //   in Loop: Header=BB17_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB17_32
.LBB17_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB17_5 Depth 2
                                        //     Child Loop BB17_9 Depth 2
                                        //     Child Loop BB17_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #20                        // =0x14
.LBB17_5:                               //   Parent Loop BB17_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-84]
	ldur	q2, [x10, #-36]
	ldur	q3, [x10, #-68]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-52]
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #88
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #22
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB17_5
// %bb.6:                               //   in Loop: Header=BB17_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB17_13
// %bb.7:                               //   in Loop: Header=BB17_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB17_11
// %bb.8:                               //   in Loop: Header=BB17_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB17_9:                               //   Parent Loop BB17_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB17_9
// %bb.10:                              //   in Loop: Header=BB17_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB17_13
.LBB17_11:                              // %.preheader
                                        //   in Loop: Header=BB17_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB17_12:                              //   Parent Loop BB17_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB17_12
.LBB17_13:                              //   in Loop: Header=BB17_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB17_3
// %bb.14:                              //   in Loop: Header=BB17_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB17_3
.LBB17_15:
	cmp	w20, #0
	b.le	.LBB17_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB17_18
.LBB17_17:                              //   in Loop: Header=BB17_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB17_32
.LBB17_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB17_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB17_20
// %bb.19:                              //   in Loop: Header=BB17_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB17_24
.LBB17_20:                              //   in Loop: Header=BB17_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB17_22
// %bb.21:                              //   in Loop: Header=BB17_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB17_23
.LBB17_22:                              //   in Loop: Header=BB17_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB17_23:                              //   in Loop: Header=BB17_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB17_26
.LBB17_24:                              // %.preheader3
                                        //   in Loop: Header=BB17_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB17_25:                              //   Parent Loop BB17_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB17_25
.LBB17_26:                              //   in Loop: Header=BB17_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB17_17
// %bb.27:                              //   in Loop: Header=BB17_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB17_17
.LBB17_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB17_30
.LBB17_29:                              //   in Loop: Header=BB17_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB17_32
.LBB17_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB17_29
// %bb.31:                              //   in Loop: Header=BB17_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB17_29
.LBB17_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB17_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB17_36
.LBB17_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB17_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB17_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB17_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end17:
	.size	_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end17-_Z27test_for_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB18_32
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #21
	movk	w14, #41666, lsl #16
	b.lt	.LBB18_15
// %bb.2:
	mov	w10, #24967                     // =0x6187
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #34328, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w22, #19480                     // =0x4c18
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w20, #20
	add	x24, x21, #80
	lsr	x10, x10, #32
	movk	w22, #28457, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #21                        // =0x15
	lsr	w9, w9, #4
	mul	w9, w9, w10
	sub	w10, w20, w9
	add	w25, w9, #21
	sub	w10, w10, #22
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB18_4
.LBB18_3:                               //   in Loop: Header=BB18_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB18_32
.LBB18_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB18_5 Depth 2
                                        //     Child Loop BB18_9 Depth 2
                                        //     Child Loop BB18_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB18_5:                               //   Parent Loop BB18_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q0, [x11, #48]
	ldr	w12, [x24, x10, lsl #2]
	ldp	q1, q2, [x11]
	add	x10, x10, #21
	cmp	x10, x23
	add	v0.4s, v1.4s, v0.4s
	ldr	q1, [x11, #32]
	add	v2.4s, v2.4s, v3.4s
	add	x11, x11, #84
	add	v0.4s, v0.4s, v1.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w22
	b.lo	.LBB18_5
// %bb.6:                               //   in Loop: Header=BB18_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB18_13
// %bb.7:                               //   in Loop: Header=BB18_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB18_11
// %bb.8:                               //   in Loop: Header=BB18_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB18_9:                               //   Parent Loop BB18_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB18_9
// %bb.10:                              //   in Loop: Header=BB18_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB18_13
.LBB18_11:                              // %.preheader
                                        //   in Loop: Header=BB18_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB18_12:                              //   Parent Loop BB18_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB18_12
.LBB18_13:                              //   in Loop: Header=BB18_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB18_3
// %bb.14:                              //   in Loop: Header=BB18_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB18_3
.LBB18_15:
	cmp	w20, #0
	b.le	.LBB18_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB18_18
.LBB18_17:                              //   in Loop: Header=BB18_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB18_32
.LBB18_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB18_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB18_20
// %bb.19:                              //   in Loop: Header=BB18_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB18_24
.LBB18_20:                              //   in Loop: Header=BB18_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB18_22
// %bb.21:                              //   in Loop: Header=BB18_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB18_23
.LBB18_22:                              //   in Loop: Header=BB18_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB18_23:                              //   in Loop: Header=BB18_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB18_26
.LBB18_24:                              // %.preheader3
                                        //   in Loop: Header=BB18_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB18_25:                              //   Parent Loop BB18_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB18_25
.LBB18_26:                              //   in Loop: Header=BB18_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB18_17
// %bb.27:                              //   in Loop: Header=BB18_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB18_17
.LBB18_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB18_30
.LBB18_29:                              //   in Loop: Header=BB18_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB18_32
.LBB18_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB18_29
// %bb.31:                              //   in Loop: Header=BB18_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB18_29
.LBB18_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB18_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB18_36
.LBB18_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB18_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB18_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB18_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end18:
	.size	_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end18-_Z27test_for_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN14for_loop_testsILi19EiE7do_testEPKiPKc,"axG",@progbits,_ZN14for_loop_testsILi19EiE7do_testEPKiPKc,comdat
	.weak	_ZN14for_loop_testsILi19EiE7do_testEPKiPKc // -- Begin function _ZN14for_loop_testsILi19EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN14for_loop_testsILi19EiE7do_testEPKiPKc,@function
_ZN14for_loop_testsILi19EiE7do_testEPKiPKc: // @_ZN14for_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN14for_loop_testsILi10EiE7do_testEPKiPKc
	adrp	x20, temp_string+1000
	add	x20, x20, :lo12:temp_string+1000
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
.Lfunc_end19:
	.size	_ZN14for_loop_testsILi19EiE7do_testEPKiPKc, .Lfunc_end19-_ZN14for_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB20_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #20
	movk	w13, #41666, lsl #16
	b.lt	.LBB20_15
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #52428, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w14, #46592                     // =0xb600
	mov	w26, #49760                     // =0xc260
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w22, w20, #19
	movk	w26, #45826, lsl #16
	lsr	x9, x9, #36
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #32]                   // 16-byte Folded Spill
	add	w9, w9, w9, lsl #2
	lsl	w9, w9, #2
	sub	w10, w20, w9
	add	w23, w9, #20
	sub	w10, w10, #21
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	and	x24, x10, #0x1fffffff8
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x9, x24, x23
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB20_4
.LBB20_3:                               //   in Loop: Header=BB20_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB20_32
.LBB20_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB20_5 Depth 2
                                        //     Child Loop BB20_9 Depth 2
                                        //     Child Loop BB20_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB20_5:                               //   Parent Loop BB20_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q0, [x11, #48]
	add	x10, x10, #20
	ldp	q1, q2, [x11]
	cmp	x10, x22
	add	v0.4s, v1.4s, v0.4s
	ldr	q1, [x11, #32]
	add	v2.4s, v2.4s, v3.4s
	add	x11, x11, #80
	add	v0.4s, v0.4s, v1.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB20_5
// %bb.6:                               //   in Loop: Header=BB20_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB20_13
// %bb.7:                               //   in Loop: Header=BB20_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB20_11
// %bb.8:                               //   in Loop: Header=BB20_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x10, x24
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB20_9:                               //   Parent Loop BB20_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB20_9
// %bb.10:                              //   in Loop: Header=BB20_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB20_13
.LBB20_11:                              // %.preheader
                                        //   in Loop: Header=BB20_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB20_12:                              //   Parent Loop BB20_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB20_12
.LBB20_13:                              //   in Loop: Header=BB20_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB20_3
// %bb.14:                              //   in Loop: Header=BB20_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #32]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB20_3
.LBB20_15:
	cmp	w20, #0
	b.le	.LBB20_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB20_18
.LBB20_17:                              //   in Loop: Header=BB20_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB20_32
.LBB20_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB20_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB20_20
// %bb.19:                              //   in Loop: Header=BB20_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB20_24
.LBB20_20:                              //   in Loop: Header=BB20_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB20_22
// %bb.21:                              //   in Loop: Header=BB20_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB20_23
.LBB20_22:                              //   in Loop: Header=BB20_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
.LBB20_23:                              //   in Loop: Header=BB20_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB20_26
.LBB20_24:                              // %.preheader3
                                        //   in Loop: Header=BB20_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB20_25:                              //   Parent Loop BB20_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB20_25
.LBB20_26:                              //   in Loop: Header=BB20_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB20_17
// %bb.27:                              //   in Loop: Header=BB20_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB20_17
.LBB20_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB20_30
.LBB20_29:                              //   in Loop: Header=BB20_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB20_32
.LBB20_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB20_29
// %bb.31:                              //   in Loop: Header=BB20_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB20_29
.LBB20_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB20_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB20_36
.LBB20_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB20_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB20_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB20_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end20:
	.size	_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end20-_Z27test_for_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB21_32
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #19
	movk	w16, #41666, lsl #16
	b.lt	.LBB21_15
// %bb.2:
	mov	w10, #27595                     // =0x6bcb
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #44840, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w22, #14504                     // =0x38a8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w23, w20, #18
	add	x24, x21, #72
	lsr	x10, x10, #32
	movk	w22, #63196, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #19                        // =0x13
	lsr	w9, w9, #4
	mul	w9, w9, w10
	sub	w10, w20, w9
	add	w25, w9, #19
	sub	w10, w10, #20
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB21_4
.LBB21_3:                               //   in Loop: Header=BB21_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB21_32
.LBB21_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB21_5 Depth 2
                                        //     Child Loop BB21_9 Depth 2
                                        //     Child Loop BB21_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #16                        // =0x10
.LBB21_5:                               //   Parent Loop BB21_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-40]
	ldur	q1, [x10, #-72]
	ldur	q2, [x10, #-24]
	ldur	q3, [x10, #-56]
	add	v0.4s, v1.4s, v0.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-8]
	ldr	w14, [x10], #76
	add	v0.4s, v0.4s, v2.4s
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #19
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB21_5
// %bb.6:                               //   in Loop: Header=BB21_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB21_13
// %bb.7:                               //   in Loop: Header=BB21_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB21_11
// %bb.8:                               //   in Loop: Header=BB21_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB21_9:                               //   Parent Loop BB21_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB21_9
// %bb.10:                              //   in Loop: Header=BB21_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB21_13
.LBB21_11:                              // %.preheader
                                        //   in Loop: Header=BB21_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB21_12:                              //   Parent Loop BB21_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB21_12
.LBB21_13:                              //   in Loop: Header=BB21_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB21_3
// %bb.14:                              //   in Loop: Header=BB21_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB21_3
.LBB21_15:
	cmp	w20, #0
	b.le	.LBB21_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB21_18
.LBB21_17:                              //   in Loop: Header=BB21_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB21_32
.LBB21_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB21_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB21_20
// %bb.19:                              //   in Loop: Header=BB21_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB21_24
.LBB21_20:                              //   in Loop: Header=BB21_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB21_22
// %bb.21:                              //   in Loop: Header=BB21_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB21_23
.LBB21_22:                              //   in Loop: Header=BB21_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB21_23:                              //   in Loop: Header=BB21_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB21_26
.LBB21_24:                              // %.preheader3
                                        //   in Loop: Header=BB21_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB21_25:                              //   Parent Loop BB21_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB21_25
.LBB21_26:                              //   in Loop: Header=BB21_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB21_17
// %bb.27:                              //   in Loop: Header=BB21_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB21_17
.LBB21_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB21_30
.LBB21_29:                              //   in Loop: Header=BB21_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB21_32
.LBB21_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB21_29
// %bb.31:                              //   in Loop: Header=BB21_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB21_29
.LBB21_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB21_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB21_36
.LBB21_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB21_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB21_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB21_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end21:
	.size	_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end21-_Z27test_for_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB22_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #18
	movk	w15, #41666, lsl #16
	b.lt	.LBB22_15
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #14563, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w22, #44784                     // =0xaef0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #17
	add	x24, x21, #68
	lsr	x9, x9, #34
	movk	w22, #15029, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #3
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	lsl	w9, w9, #1
	sub	w10, w20, w9
	add	w25, w9, #18
	sub	w10, w10, #19
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB22_4
.LBB22_3:                               //   in Loop: Header=BB22_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB22_32
.LBB22_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB22_5 Depth 2
                                        //     Child Loop BB22_9 Depth 2
                                        //     Child Loop BB22_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #16                        // =0x10
.LBB22_5:                               //   Parent Loop BB22_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-68]
	ldur	q2, [x10, #-20]
	ldur	q3, [x10, #-52]
	add	v0.4s, v1.4s, v0.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	x10, x10, #72
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #18
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB22_5
// %bb.6:                               //   in Loop: Header=BB22_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB22_13
// %bb.7:                               //   in Loop: Header=BB22_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB22_11
// %bb.8:                               //   in Loop: Header=BB22_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB22_9:                               //   Parent Loop BB22_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB22_9
// %bb.10:                              //   in Loop: Header=BB22_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB22_13
.LBB22_11:                              // %.preheader
                                        //   in Loop: Header=BB22_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB22_12:                              //   Parent Loop BB22_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB22_12
.LBB22_13:                              //   in Loop: Header=BB22_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB22_3
// %bb.14:                              //   in Loop: Header=BB22_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB22_3
.LBB22_15:
	cmp	w20, #0
	b.le	.LBB22_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB22_18
.LBB22_17:                              //   in Loop: Header=BB22_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB22_32
.LBB22_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB22_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB22_20
// %bb.19:                              //   in Loop: Header=BB22_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB22_24
.LBB22_20:                              //   in Loop: Header=BB22_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB22_22
// %bb.21:                              //   in Loop: Header=BB22_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB22_23
.LBB22_22:                              //   in Loop: Header=BB22_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB22_23:                              //   in Loop: Header=BB22_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB22_26
.LBB22_24:                              // %.preheader3
                                        //   in Loop: Header=BB22_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB22_25:                              //   Parent Loop BB22_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB22_25
.LBB22_26:                              //   in Loop: Header=BB22_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB22_17
// %bb.27:                              //   in Loop: Header=BB22_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB22_17
.LBB22_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB22_30
.LBB22_29:                              //   in Loop: Header=BB22_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB22_32
.LBB22_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB22_29
// %bb.31:                              //   in Loop: Header=BB22_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB22_29
.LBB22_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB22_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB22_36
.LBB22_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB22_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB22_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB22_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end22:
	.size	_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end22-_Z27test_for_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB23_32
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #17
	movk	w14, #41666, lsl #16
	b.lt	.LBB23_15
// %bb.2:
	mov	w10, #61681                     // =0xf0f1
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #61680, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w22, #9528                      // =0x2538
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w20, #16
	add	x24, x21, #64
	lsr	x9, x9, #36
	movk	w22, #32399, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #4
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w25, w9, #17
	sub	w10, w10, #18
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB23_4
.LBB23_3:                               //   in Loop: Header=BB23_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB23_32
.LBB23_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB23_5 Depth 2
                                        //     Child Loop BB23_9 Depth 2
                                        //     Child Loop BB23_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB23_5:                               //   Parent Loop BB23_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #32]
	ldr	w12, [x24, x10, lsl #2]
	ldp	q2, q3, [x11]
	add	x10, x10, #17
	cmp	x10, x23
	add	x11, x11, #68
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w22
	b.lo	.LBB23_5
// %bb.6:                               //   in Loop: Header=BB23_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB23_13
// %bb.7:                               //   in Loop: Header=BB23_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB23_11
// %bb.8:                               //   in Loop: Header=BB23_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB23_9:                               //   Parent Loop BB23_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB23_9
// %bb.10:                              //   in Loop: Header=BB23_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB23_13
.LBB23_11:                              // %.preheader
                                        //   in Loop: Header=BB23_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB23_12:                              //   Parent Loop BB23_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB23_12
.LBB23_13:                              //   in Loop: Header=BB23_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB23_3
// %bb.14:                              //   in Loop: Header=BB23_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB23_3
.LBB23_15:
	cmp	w20, #0
	b.le	.LBB23_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB23_18
.LBB23_17:                              //   in Loop: Header=BB23_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB23_32
.LBB23_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB23_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB23_20
// %bb.19:                              //   in Loop: Header=BB23_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB23_24
.LBB23_20:                              //   in Loop: Header=BB23_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB23_22
// %bb.21:                              //   in Loop: Header=BB23_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB23_23
.LBB23_22:                              //   in Loop: Header=BB23_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB23_23:                              //   in Loop: Header=BB23_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB23_26
.LBB23_24:                              // %.preheader3
                                        //   in Loop: Header=BB23_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB23_25:                              //   Parent Loop BB23_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB23_25
.LBB23_26:                              //   in Loop: Header=BB23_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB23_17
// %bb.27:                              //   in Loop: Header=BB23_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB23_17
.LBB23_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB23_30
.LBB23_29:                              //   in Loop: Header=BB23_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB23_32
.LBB23_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB23_29
// %bb.31:                              //   in Loop: Header=BB23_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB23_29
.LBB23_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB23_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB23_36
.LBB23_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB23_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB23_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB23_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end23:
	.size	_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end23-_Z27test_for_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB24_26
// %bb.1:
	mov	w26, #58432                     // =0xe440
	subs	w9, w21, #16
	movk	w26, #41666, lsl #16
	b.lt	.LBB24_15
// %bb.2:
	and	w9, w9, #0xfffffff0
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	sub	w10, w21, w9
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	add	w22, w9, #16
	sub	w10, w10, #17
	dup	v4.4s, w19
	add	x9, x20, w22, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	dup	v5.4s, w28
	mov	w13, #46592                     // =0xb600
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	mov	w23, #39808                     // =0x9b80
	mov	w27, wzr
	movk	w13, #46159, lsl #16
	sub	w25, w21, #15
	movk	w23, #49768, lsl #16
	add	x11, x9, #16
	add	x9, x10, x22
	adrp	x24, init_value
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB24_4
.LBB24_3:                               //   in Loop: Header=BB24_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB24_26
.LBB24_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB24_5 Depth 2
                                        //     Child Loop BB24_9 Depth 2
                                        //     Child Loop BB24_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB24_5:                               //   Parent Loop BB24_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #32]
	add	x10, x10, #16
	ldp	q2, q3, [x11], #64
	cmp	x10, x25
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w23
	b.lo	.LBB24_5
// %bb.6:                               //   in Loop: Header=BB24_4 Depth=1
	cmp	w22, w21
	b.ge	.LBB24_13
// %bb.7:                               //   in Loop: Header=BB24_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x22
	b.ls	.LBB24_11
// %bb.8:                               //   in Loop: Header=BB24_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB24_9:                               //   Parent Loop BB24_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB24_9
// %bb.10:                              //   in Loop: Header=BB24_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB24_13
.LBB24_11:                              // %.preheader
                                        //   in Loop: Header=BB24_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB24_12:                              //   Parent Loop BB24_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB24_12
.LBB24_13:                              //   in Loop: Header=BB24_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w13
	cmp	w9, w10
	b.eq	.LBB24_3
// %bb.14:                              //   in Loop: Header=BB24_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w13, #46592                     // =0xb600
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #46159, lsl #16
	b	.LBB24_3
.LBB24_15:
	cmp	w21, #0
	b.le	.LBB24_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x27, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB24_18
.LBB24_17:                              //   in Loop: Header=BB24_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB24_26
.LBB24_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB24_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB24_19:                              //   Parent Loop BB24_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB24_19
// %bb.20:                              //   in Loop: Header=BB24_18 Depth=1
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w23
	cmp	w9, w10
	b.eq	.LBB24_17
// %bb.21:                              //   in Loop: Header=BB24_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB24_17
.LBB24_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB24_24
.LBB24_23:                              //   in Loop: Header=BB24_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB24_26
.LBB24_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w26
	cmp	w9, w22
	b.eq	.LBB24_23
// %bb.25:                              //   in Loop: Header=BB24_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB24_23
.LBB24_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB24_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB24_30
.LBB24_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB24_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB24_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB24_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end24:
	.size	_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end24-_Z27test_for_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB25_26
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w21, #15
	movk	w16, #41666, lsl #16
	b.lt	.LBB25_15
// %bb.2:
	mov	w10, #34953                     // =0x8889
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #34952, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w26, #4552                      // =0x11c8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w21, #14
	add	x24, x20, #56
	lsr	x9, x9, #35
	movk	w26, #1602, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	lsl	w10, w9, #4
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w9, w10, w9
	sub	w10, w21, w9
	add	w23, w9, #15
	sub	w10, w10, #16
	add	x9, x20, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB25_4
.LBB25_3:                               //   in Loop: Header=BB25_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB25_26
.LBB25_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB25_5 Depth 2
                                        //     Child Loop BB25_9 Depth 2
                                        //     Child Loop BB25_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #12                        // =0xc
.LBB25_5:                               //   Parent Loop BB25_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-56]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-40]
	ldr	w14, [x10], #60
	add	v0.4s, v0.4s, v1.4s
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #15
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB25_5
// %bb.6:                               //   in Loop: Header=BB25_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB25_13
// %bb.7:                               //   in Loop: Header=BB25_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB25_11
// %bb.8:                               //   in Loop: Header=BB25_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB25_9:                               //   Parent Loop BB25_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB25_9
// %bb.10:                              //   in Loop: Header=BB25_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB25_13
.LBB25_11:                              // %.preheader
                                        //   in Loop: Header=BB25_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB25_12:                              //   Parent Loop BB25_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB25_12
.LBB25_13:                              //   in Loop: Header=BB25_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB25_3
// %bb.14:                              //   in Loop: Header=BB25_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB25_3
.LBB25_15:
	cmp	w21, #0
	b.le	.LBB25_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB25_18
.LBB25_17:                              //   in Loop: Header=BB25_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB25_26
.LBB25_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB25_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB25_19:                              //   Parent Loop BB25_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB25_19
// %bb.20:                              //   in Loop: Header=BB25_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w23
	cmp	w9, w10
	b.eq	.LBB25_17
// %bb.21:                              //   in Loop: Header=BB25_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB25_17
.LBB25_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB25_24
.LBB25_23:                              //   in Loop: Header=BB25_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB25_26
.LBB25_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB25_23
// %bb.25:                              //   in Loop: Header=BB25_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB25_23
.LBB25_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB25_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB25_30
.LBB25_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB25_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB25_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB25_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end25:
	.size	_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end25-_Z27test_for_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB26_26
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w21, #14
	movk	w15, #41666, lsl #16
	b.lt	.LBB26_15
// %bb.2:
	lsr	w9, w9, #1
	mov	w10, #9363                      // =0x2493
	mov	w28, #35256                     // =0x89b8
	movk	w10, #37449, lsl #16
	mov	w19, #38821                     // =0x97a5
	movk	w28, #48166, lsl #16
	umull	x9, w9, w10
	movk	w19, #4117, lsl #16
	dup	v5.4s, w28
	dup	v4.4s, w19
	mov	w16, #46592                     // =0xb600
	mov	w26, #34832                     // =0x8810
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w22, w21, #13
	lsr	x9, x9, #34
	add	x24, x20, #52
	movk	w26, #18971, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	lsl	w10, w9, #4
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w9, w10, w9, lsl #1
	sub	w10, w21, w9
	add	w23, w9, #14
	sub	w10, w10, #15
	add	x9, x20, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB26_4
.LBB26_3:                               //   in Loop: Header=BB26_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB26_26
.LBB26_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB26_5 Depth 2
                                        //     Child Loop BB26_9 Depth 2
                                        //     Child Loop BB26_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #12                        // =0xc
.LBB26_5:                               //   Parent Loop BB26_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-52]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-36]
	add	x10, x10, #56
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #14
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB26_5
// %bb.6:                               //   in Loop: Header=BB26_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB26_13
// %bb.7:                               //   in Loop: Header=BB26_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB26_11
// %bb.8:                               //   in Loop: Header=BB26_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB26_9:                               //   Parent Loop BB26_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB26_9
// %bb.10:                              //   in Loop: Header=BB26_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB26_13
.LBB26_11:                              // %.preheader
                                        //   in Loop: Header=BB26_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB26_12:                              //   Parent Loop BB26_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB26_12
.LBB26_13:                              //   in Loop: Header=BB26_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB26_3
// %bb.14:                              //   in Loop: Header=BB26_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB26_3
.LBB26_15:
	cmp	w21, #0
	b.le	.LBB26_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB26_18
.LBB26_17:                              //   in Loop: Header=BB26_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB26_26
.LBB26_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB26_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB26_19:                              //   Parent Loop BB26_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB26_19
// %bb.20:                              //   in Loop: Header=BB26_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w23
	cmp	w9, w10
	b.eq	.LBB26_17
// %bb.21:                              //   in Loop: Header=BB26_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB26_17
.LBB26_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB26_24
.LBB26_23:                              //   in Loop: Header=BB26_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB26_26
.LBB26_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB26_23
// %bb.25:                              //   in Loop: Header=BB26_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB26_23
.LBB26_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB26_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB26_30
.LBB26_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB26_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB26_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB26_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end26:
	.size	_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end26-_Z27test_for_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB27_26
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w21, #13
	movk	w14, #41666, lsl #16
	b.lt	.LBB27_15
// %bb.2:
	mov	w10, #60495                     // =0xec4f
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #20164, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #13                        // =0xd
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w26, #65112                     // =0xfe58
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w22, w21, #12
	lsr	x9, x9, #34
	add	x24, x20, #48
	movk	w26, #36340, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w21, w9
	add	w23, w9, #13
	sub	w10, w10, #14
	add	x9, x20, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB27_4
.LBB27_3:                               //   in Loop: Header=BB27_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB27_26
.LBB27_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB27_5 Depth 2
                                        //     Child Loop BB27_9 Depth 2
                                        //     Child Loop BB27_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB27_5:                               //   Parent Loop BB27_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q1, [x11]
	ldr	q0, [x11, #32]
	ldr	w12, [x24, x10, lsl #2]
	add	x10, x10, #13
	add	x11, x11, #52
	cmp	x10, x22
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB27_5
// %bb.6:                               //   in Loop: Header=BB27_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB27_13
// %bb.7:                               //   in Loop: Header=BB27_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB27_11
// %bb.8:                               //   in Loop: Header=BB27_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB27_9:                               //   Parent Loop BB27_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB27_9
// %bb.10:                              //   in Loop: Header=BB27_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB27_13
.LBB27_11:                              // %.preheader
                                        //   in Loop: Header=BB27_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB27_12:                              //   Parent Loop BB27_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB27_12
.LBB27_13:                              //   in Loop: Header=BB27_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB27_3
// %bb.14:                              //   in Loop: Header=BB27_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB27_3
.LBB27_15:
	cmp	w21, #0
	b.le	.LBB27_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB27_18
.LBB27_17:                              //   in Loop: Header=BB27_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB27_26
.LBB27_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB27_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB27_19:                              //   Parent Loop BB27_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB27_19
// %bb.20:                              //   in Loop: Header=BB27_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w23
	cmp	w9, w10
	b.eq	.LBB27_17
// %bb.21:                              //   in Loop: Header=BB27_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB27_17
.LBB27_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB27_24
.LBB27_23:                              //   in Loop: Header=BB27_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB27_26
.LBB27_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB27_23
// %bb.25:                              //   in Loop: Header=BB27_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB27_23
.LBB27_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB27_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB27_30
.LBB27_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB27_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB27_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB27_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end27:
	.size	_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end27-_Z27test_for_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB28_26
// %bb.1:
	mov	w26, #58432                     // =0xe440
	subs	w9, w21, #12
	movk	w26, #41666, lsl #16
	b.lt	.LBB28_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w13, #46592                     // =0xb600
	mov	w23, #29856                     // =0x74a0
	mov	w27, wzr
	movk	w13, #46159, lsl #16
	sub	w25, w21, #11
	movk	w23, #53710, lsl #16
	lsr	x9, x9, #35
	adrp	x14, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #32]                   // 16-byte Folded Spill
	add	w9, w9, w9, lsl #1
	lsl	w9, w9, #2
	sub	w10, w21, w9
	add	w22, w9, #12
	sub	w10, w10, #13
	add	x9, x20, w22, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	and	x24, x10, #0x1fffffff8
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x9, x24, x22
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB28_4
.LBB28_3:                               //   in Loop: Header=BB28_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB28_26
.LBB28_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_5 Depth 2
                                        //     Child Loop BB28_9 Depth 2
                                        //     Child Loop BB28_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB28_5:                               //   Parent Loop BB28_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11, #32]
	add	x10, x10, #12
	ldp	q2, q1, [x11], #48
	cmp	x10, x25
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w23
	b.lo	.LBB28_5
// %bb.6:                               //   in Loop: Header=BB28_4 Depth=1
	cmp	w22, w21
	b.ge	.LBB28_13
// %bb.7:                               //   in Loop: Header=BB28_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x22
	b.ls	.LBB28_11
// %bb.8:                               //   in Loop: Header=BB28_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x10, x24
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB28_9:                               //   Parent Loop BB28_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB28_9
// %bb.10:                              //   in Loop: Header=BB28_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB28_13
.LBB28_11:                              // %.preheader
                                        //   in Loop: Header=BB28_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB28_12:                              //   Parent Loop BB28_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB28_12
.LBB28_13:                              //   in Loop: Header=BB28_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w13
	cmp	w9, w10
	b.eq	.LBB28_3
// %bb.14:                              //   in Loop: Header=BB28_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x26, x14
	bl	printf
	adrp	x8, iterations
	mov	x14, x26
	mov	w26, #58432                     // =0xe440
	ldr	q5, [sp, #32]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w13, #46592                     // =0xb600
	ldr	w8, [x8, :lo12:iterations]
	movk	w26, #41666, lsl #16
	movk	w13, #46159, lsl #16
	b	.LBB28_3
.LBB28_15:
	cmp	w21, #0
	b.le	.LBB28_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x27, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB28_18
.LBB28_17:                              //   in Loop: Header=BB28_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB28_26
.LBB28_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB28_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB28_19:                              //   Parent Loop BB28_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB28_19
// %bb.20:                              //   in Loop: Header=BB28_18 Depth=1
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w23
	cmp	w9, w10
	b.eq	.LBB28_17
// %bb.21:                              //   in Loop: Header=BB28_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB28_17
.LBB28_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB28_24
.LBB28_23:                              //   in Loop: Header=BB28_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB28_26
.LBB28_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w26
	cmp	w9, w22
	b.eq	.LBB28_23
// %bb.25:                              //   in Loop: Header=BB28_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB28_23
.LBB28_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB28_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB28_30
.LBB28_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB28_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB28_30:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB28_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end28:
	.size	_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end28-_Z27test_for_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN14for_loop_testsILi10EiE7do_testEPKiPKc,"axG",@progbits,_ZN14for_loop_testsILi10EiE7do_testEPKiPKc,comdat
	.weak	_ZN14for_loop_testsILi10EiE7do_testEPKiPKc // -- Begin function _ZN14for_loop_testsILi10EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN14for_loop_testsILi10EiE7do_testEPKiPKc,@function
_ZN14for_loop_testsILi10EiE7do_testEPKiPKc: // @_ZN14for_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x20, temp_string
	add	x20, x20, :lo12:temp_string
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	mov	x19, x0
	bl	_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
	add	x2, x20, #900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
.Lfunc_end29:
	.size	_ZN14for_loop_testsILi10EiE7do_testEPKiPKc, .Lfunc_end29-_ZN14for_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB30_26
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w21, #11
	movk	w16, #41666, lsl #16
	b.lt	.LBB30_15
// %bb.2:
	mov	w10, #35747                     // =0x8ba3
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #47662, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #11                        // =0xb
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w26, #60136                     // =0xeae8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w21, #10
	lsr	x9, x9, #35
	add	x24, x20, #40
	movk	w26, #5543, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w21, w9
	add	w23, w9, #11
	sub	w10, w10, #12
	add	x9, x20, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB30_4
.LBB30_3:                               //   in Loop: Header=BB30_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB30_26
.LBB30_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB30_5 Depth 2
                                        //     Child Loop BB30_9 Depth 2
                                        //     Child Loop BB30_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #8                         // =0x8
.LBB30_5:                               //   Parent Loop BB30_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-40]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v1.4s, v0.4s
	ldr	w14, [x10], #44
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #11
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB30_5
// %bb.6:                               //   in Loop: Header=BB30_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB30_13
// %bb.7:                               //   in Loop: Header=BB30_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB30_11
// %bb.8:                               //   in Loop: Header=BB30_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB30_9:                               //   Parent Loop BB30_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB30_9
// %bb.10:                              //   in Loop: Header=BB30_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB30_13
.LBB30_11:                              // %.preheader
                                        //   in Loop: Header=BB30_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB30_12:                              //   Parent Loop BB30_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB30_12
.LBB30_13:                              //   in Loop: Header=BB30_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB30_3
// %bb.14:                              //   in Loop: Header=BB30_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB30_3
.LBB30_15:
	cmp	w21, #0
	b.le	.LBB30_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB30_18
.LBB30_17:                              //   in Loop: Header=BB30_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB30_26
.LBB30_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB30_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB30_19:                              //   Parent Loop BB30_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB30_19
// %bb.20:                              //   in Loop: Header=BB30_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w23
	cmp	w9, w10
	b.eq	.LBB30_17
// %bb.21:                              //   in Loop: Header=BB30_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB30_17
.LBB30_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB30_24
.LBB30_23:                              //   in Loop: Header=BB30_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB30_26
.LBB30_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB30_23
// %bb.25:                              //   in Loop: Header=BB30_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB30_23
.LBB30_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB30_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB30_30
.LBB30_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB30_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB30_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB30_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end30:
	.size	_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end30-_Z27test_for_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB31_26
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w21, #10
	movk	w15, #41666, lsl #16
	b.lt	.LBB31_15
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #52428, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w26, #24880                     // =0x6130
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w22, w21, #9
	add	x24, x20, #36
	lsr	x9, x9, #35
	movk	w26, #22913, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #2
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	lsl	w9, w9, #1
	sub	w10, w21, w9
	add	w23, w9, #10
	sub	w10, w10, #11
	add	x9, x20, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB31_4
.LBB31_3:                               //   in Loop: Header=BB31_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB31_26
.LBB31_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB31_5 Depth 2
                                        //     Child Loop BB31_9 Depth 2
                                        //     Child Loop BB31_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #8                         // =0x8
.LBB31_5:                               //   Parent Loop BB31_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-36]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v1.4s, v0.4s
	add	x10, x10, #40
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #10
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB31_5
// %bb.6:                               //   in Loop: Header=BB31_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB31_13
// %bb.7:                               //   in Loop: Header=BB31_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB31_11
// %bb.8:                               //   in Loop: Header=BB31_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB31_9:                               //   Parent Loop BB31_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB31_9
// %bb.10:                              //   in Loop: Header=BB31_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB31_13
.LBB31_11:                              // %.preheader
                                        //   in Loop: Header=BB31_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB31_12:                              //   Parent Loop BB31_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB31_12
.LBB31_13:                              //   in Loop: Header=BB31_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB31_3
// %bb.14:                              //   in Loop: Header=BB31_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB31_3
.LBB31_15:
	cmp	w21, #0
	b.le	.LBB31_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB31_18
.LBB31_17:                              //   in Loop: Header=BB31_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB31_26
.LBB31_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB31_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB31_19:                              //   Parent Loop BB31_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB31_19
// %bb.20:                              //   in Loop: Header=BB31_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w23
	cmp	w9, w10
	b.eq	.LBB31_17
// %bb.21:                              //   in Loop: Header=BB31_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB31_17
.LBB31_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB31_24
.LBB31_23:                              //   in Loop: Header=BB31_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB31_26
.LBB31_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB31_23
// %bb.25:                              //   in Loop: Header=BB31_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB31_23
.LBB31_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB31_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB31_30
.LBB31_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB31_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB31_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB31_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end31:
	.size	_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end31-_Z27test_for_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB32_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #9
	movk	w14, #41666, lsl #16
	b.lt	.LBB32_15
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #14563, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w25, #55160                     // =0xd778
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w20, #8
	add	x24, x21, #32
	lsr	x9, x9, #33
	movk	w25, #40282, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #3
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w22, w9, #9
	sub	w10, w10, #10
	add	x9, x21, w22, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x22
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB32_4
.LBB32_3:                               //   in Loop: Header=BB32_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB32_33
.LBB32_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB32_5 Depth 2
                                        //     Child Loop BB32_9 Depth 2
                                        //     Child Loop BB32_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB32_5:                               //   Parent Loop BB32_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11]
	add	x11, x11, #36
	ldr	w12, [x24, x10, lsl #2]
	add	x10, x10, #9
	cmp	x10, x23
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w25
	b.lo	.LBB32_5
// %bb.6:                               //   in Loop: Header=BB32_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB32_13
// %bb.7:                               //   in Loop: Header=BB32_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x22
	b.ls	.LBB32_11
// %bb.8:                               //   in Loop: Header=BB32_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB32_9:                               //   Parent Loop BB32_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB32_9
// %bb.10:                              //   in Loop: Header=BB32_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB32_13
.LBB32_11:                              // %.preheader
                                        //   in Loop: Header=BB32_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB32_12:                              //   Parent Loop BB32_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB32_12
.LBB32_13:                              //   in Loop: Header=BB32_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB32_3
// %bb.14:                              //   in Loop: Header=BB32_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB32_3
.LBB32_15:
	cmp	w20, #0
	b.le	.LBB32_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB32_18
.LBB32_17:                              //   in Loop: Header=BB32_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB32_33
.LBB32_18:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB32_20
// %bb.19:                              //   in Loop: Header=BB32_18 Depth=1
	add	w9, w9, w23
	b	.LBB32_27
.LBB32_20:                              //   in Loop: Header=BB32_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB32_27
// %bb.21:                              //   in Loop: Header=BB32_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB32_27
// %bb.22:                              //   in Loop: Header=BB32_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB32_27
// %bb.23:                              //   in Loop: Header=BB32_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB32_27
// %bb.24:                              //   in Loop: Header=BB32_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	cmp	w20, #6
	madd	w9, w10, w25, w9
	b.eq	.LBB32_27
// %bb.25:                              //   in Loop: Header=BB32_18 Depth=1
	ldr	w10, [x21, #24]
	add	w9, w9, w23
	cmp	w20, #7
	madd	w9, w10, w25, w9
	b.eq	.LBB32_27
// %bb.26:                              //   in Loop: Header=BB32_18 Depth=1
	ldr	w10, [x21, #28]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB32_27:                              //   in Loop: Header=BB32_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w24
	cmp	w9, w10
	b.eq	.LBB32_17
// %bb.28:                              //   in Loop: Header=BB32_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB32_17
.LBB32_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB32_31
.LBB32_30:                              //   in Loop: Header=BB32_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB32_33
.LBB32_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB32_30
// %bb.32:                              //   in Loop: Header=BB32_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB32_30
.LBB32_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB32_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB32_37
.LBB32_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB32_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB32_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB32_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end32:
	.size	_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end32-_Z27test_for_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB33_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #8
	movk	w13, #41666, lsl #16
	b.lt	.LBB33_15
// %bb.2:
	and	w9, w9, #0xfffffff8
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	sub	w10, w20, w9
	add	w23, w9, #8
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	sub	w10, w10, #9
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w14, #46592                     // =0xb600
	and	x24, x10, #0x1fffffff8
	mov	w26, #19904                     // =0x4dc0
	add	x9, x9, #16
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w25, w20, #7
	movk	w26, #57652, lsl #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x9, x24, x23
	adrp	x22, init_value
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB33_4
.LBB33_3:                               //   in Loop: Header=BB33_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB33_32
.LBB33_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB33_5 Depth 2
                                        //     Child Loop BB33_9 Depth 2
                                        //     Child Loop BB33_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB33_5:                               //   Parent Loop BB33_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11], #32
	add	x10, x10, #8
	cmp	x10, x25
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB33_5
// %bb.6:                               //   in Loop: Header=BB33_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB33_13
// %bb.7:                               //   in Loop: Header=BB33_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB33_11
// %bb.8:                               //   in Loop: Header=BB33_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x10, x24
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB33_9:                               //   Parent Loop BB33_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB33_9
// %bb.10:                              //   in Loop: Header=BB33_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB33_13
.LBB33_11:                              // %.preheader
                                        //   in Loop: Header=BB33_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB33_12:                              //   Parent Loop BB33_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB33_12
.LBB33_13:                              //   in Loop: Header=BB33_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB33_3
// %bb.14:                              //   in Loop: Header=BB33_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #32]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB33_3
.LBB33_15:
	cmp	w20, #0
	b.le	.LBB33_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB33_18
.LBB33_17:                              //   in Loop: Header=BB33_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB33_32
.LBB33_18:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB33_20
// %bb.19:                              //   in Loop: Header=BB33_18 Depth=1
	add	w9, w9, w23
	b	.LBB33_26
.LBB33_20:                              //   in Loop: Header=BB33_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB33_26
// %bb.21:                              //   in Loop: Header=BB33_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB33_26
// %bb.22:                              //   in Loop: Header=BB33_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB33_26
// %bb.23:                              //   in Loop: Header=BB33_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB33_26
// %bb.24:                              //   in Loop: Header=BB33_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	cmp	w20, #6
	madd	w9, w10, w25, w9
	b.eq	.LBB33_26
// %bb.25:                              //   in Loop: Header=BB33_18 Depth=1
	ldr	w10, [x21, #24]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB33_26:                              //   in Loop: Header=BB33_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w24
	cmp	w9, w10
	b.eq	.LBB33_17
// %bb.27:                              //   in Loop: Header=BB33_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB33_17
.LBB33_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB33_30
.LBB33_29:                              //   in Loop: Header=BB33_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB33_32
.LBB33_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB33_29
// %bb.31:                              //   in Loop: Header=BB33_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB33_29
.LBB33_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB33_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB33_36
.LBB33_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB33_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB33_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB33_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end33:
	.size	_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end33-_Z27test_for_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB34_31
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #7
	movk	w16, #41666, lsl #16
	b.lt	.LBB34_15
// %bb.2:
	mov	w10, #18725                     // =0x4925
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #9362, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w26, #50184                     // =0xc408
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w20, #6
	add	x24, x21, #24
	lsr	x10, x10, #32
	movk	w26, #9485, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	lsr	w9, w9, #2
	lsl	w10, w9, #3
	sub	w9, w10, w9
	sub	w10, w20, w9
	add	w23, w9, #7
	sub	w10, w10, #8
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB34_4
.LBB34_3:                               //   in Loop: Header=BB34_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB34_31
.LBB34_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB34_5 Depth 2
                                        //     Child Loop BB34_9 Depth 2
                                        //     Child Loop BB34_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #4                         // =0x4
.LBB34_5:                               //   Parent Loop BB34_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldp	w12, w13, [x10, #-8]
	addv	s0, v0.4s
	ldr	w14, [x10], #28
	add	w13, w13, w14
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #7
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB34_5
// %bb.6:                               //   in Loop: Header=BB34_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB34_13
// %bb.7:                               //   in Loop: Header=BB34_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB34_11
// %bb.8:                               //   in Loop: Header=BB34_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB34_9:                               //   Parent Loop BB34_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB34_9
// %bb.10:                              //   in Loop: Header=BB34_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB34_13
.LBB34_11:                              // %.preheader
                                        //   in Loop: Header=BB34_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB34_12:                              //   Parent Loop BB34_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB34_12
.LBB34_13:                              //   in Loop: Header=BB34_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB34_3
// %bb.14:                              //   in Loop: Header=BB34_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB34_3
.LBB34_15:
	cmp	w20, #0
	b.le	.LBB34_27
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB34_18
.LBB34_17:                              //   in Loop: Header=BB34_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB34_31
.LBB34_18:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB34_20
// %bb.19:                              //   in Loop: Header=BB34_18 Depth=1
	add	w9, w9, w23
	b	.LBB34_25
.LBB34_20:                              //   in Loop: Header=BB34_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB34_25
// %bb.21:                              //   in Loop: Header=BB34_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB34_25
// %bb.22:                              //   in Loop: Header=BB34_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB34_25
// %bb.23:                              //   in Loop: Header=BB34_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB34_25
// %bb.24:                              //   in Loop: Header=BB34_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB34_25:                              //   in Loop: Header=BB34_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w24
	cmp	w9, w10
	b.eq	.LBB34_17
// %bb.26:                              //   in Loop: Header=BB34_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB34_17
.LBB34_27:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB34_29
.LBB34_28:                              //   in Loop: Header=BB34_29 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB34_31
.LBB34_29:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB34_28
// %bb.30:                              //   in Loop: Header=BB34_29 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB34_28
.LBB34_31:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB34_33
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB34_35
.LBB34_33:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB34_36
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
.LBB34_35:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB34_36:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end34:
	.size	_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end34-_Z27test_for_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB35_30
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #6
	movk	w15, #41666, lsl #16
	b.lt	.LBB35_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w26, #14928                     // =0x3a50
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w22, w20, #5
	add	x24, x21, #20
	lsr	x9, x9, #34
	movk	w26, #26855, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #1
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	lsl	w9, w9, #1
	sub	w10, w20, w9
	add	w23, w9, #6
	sub	w10, w10, #7
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB35_4
.LBB35_3:                               //   in Loop: Header=BB35_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB35_30
.LBB35_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB35_5 Depth 2
                                        //     Child Loop BB35_9 Depth 2
                                        //     Child Loop BB35_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #4                         // =0x4
.LBB35_5:                               //   Parent Loop BB35_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldp	w12, w13, [x10, #-4]
	addv	s0, v0.4s
	add	x10, x10, #24
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #6
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB35_5
// %bb.6:                               //   in Loop: Header=BB35_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB35_13
// %bb.7:                               //   in Loop: Header=BB35_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB35_11
// %bb.8:                               //   in Loop: Header=BB35_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB35_9:                               //   Parent Loop BB35_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB35_9
// %bb.10:                              //   in Loop: Header=BB35_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB35_13
.LBB35_11:                              // %.preheader
                                        //   in Loop: Header=BB35_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB35_12:                              //   Parent Loop BB35_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB35_12
.LBB35_13:                              //   in Loop: Header=BB35_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB35_3
// %bb.14:                              //   in Loop: Header=BB35_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB35_3
.LBB35_15:
	cmp	w20, #0
	b.le	.LBB35_26
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB35_18
.LBB35_17:                              //   in Loop: Header=BB35_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB35_30
.LBB35_18:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB35_20
// %bb.19:                              //   in Loop: Header=BB35_18 Depth=1
	add	w9, w9, w23
	b	.LBB35_24
.LBB35_20:                              //   in Loop: Header=BB35_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB35_24
// %bb.21:                              //   in Loop: Header=BB35_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB35_24
// %bb.22:                              //   in Loop: Header=BB35_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB35_24
// %bb.23:                              //   in Loop: Header=BB35_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB35_24:                              //   in Loop: Header=BB35_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB35_17
// %bb.25:                              //   in Loop: Header=BB35_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB35_17
.LBB35_26:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB35_28
.LBB35_27:                              //   in Loop: Header=BB35_28 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB35_30
.LBB35_28:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB35_27
// %bb.29:                              //   in Loop: Header=BB35_28 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB35_27
.LBB35_30:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB35_32
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB35_34
.LBB35_32:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB35_35
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
.LBB35_34:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB35_35:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end35:
	.size	_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end35-_Z27test_for_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB36_35
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #5
	movk	w16, #41666, lsl #16
	b.lt	.LBB36_21
// %bb.2:
	sub	w28, w20, #4
	mov	w10, #5                         // =0x5
	mov	w11, #52429                     // =0xcccd
	cmp	x28, #5
	mov	x12, #-3689348814741910324      // =0xcccccccccccccccc
	movk	w11, #52428, lsl #16
	csel	x10, x28, x10, hi
	movk	x12, #52429
	umull	x9, w9, w11
	sub	x10, x10, #1
	mov	w2, #35256                      // =0x89b8
	mov	w23, #38821                     // =0x97a5
	umulh	x10, x10, x12
	movk	w2, #48166, lsl #16
	movk	w23, #4117, lsl #16
	lsr	x9, x9, #34
	add	x25, x21, #16
	dup	v4.4s, w23
	dup	v5.4s, w2
	mov	w17, #46592                     // =0xb600
	mov	w22, #45208                     // =0xb098
	add	w9, w9, w9, lsl #2
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	movk	w22, #44224, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-16]                 // 16-byte Folded Spill
	lsr	x10, x10, #2
	sub	w11, w20, w9
	add	w1, w9, #5
	sub	w11, w11, #6
	stur	q5, [x29, #-48]                 // 16-byte Folded Spill
	add	x10, x10, #1
	and	x26, x10, #0x7ffffffffffffffe
	stp	x10, x11, [x29, #-32]           // 16-byte Folded Spill
	add	x11, x11, #1
	add	x10, x26, x26, lsl #2
	and	x9, x11, #0x1fffffff8
	stp	x10, x9, [sp, #48]              // 16-byte Folded Spill
	add	x9, x9, x1
	stp	x9, x11, [sp, #24]              // 16-byte Folded Spill
	add	x9, x21, #20
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	add	x9, x25, w1, uxtw #2
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	b	.LBB36_4
.LBB36_3:                               //   in Loop: Header=BB36_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB36_35
.LBB36_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB36_7 Depth 2
                                        //     Child Loop BB36_10 Depth 2
                                        //     Child Loop BB36_15 Depth 2
                                        //     Child Loop BB36_18 Depth 2
	cmp	w28, #6
	b.hs	.LBB36_6
// %bb.5:                               //   in Loop: Header=BB36_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB36_9
.LBB36_6:                               // %.preheader6
                                        //   in Loop: Header=BB36_4 Depth=1
	ldr	x11, [sp, #40]                  // 8-byte Folded Reload
	mov	w9, wzr
	mov	w10, wzr
	mov	x12, x26
.LBB36_7:                               //   Parent Loop BB36_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x11, #-20]
	ldr	q1, [x11]
	add	w9, w9, w22
	ldur	w13, [x11, #-4]
	ldr	w14, [x11, #16]
	add	w10, w10, w22
	addv	s0, v0.4s
	addv	s1, v1.4s
	subs	x12, x12, #2
	add	x11, x11, #40
	fmov	w15, s0
	add	w13, w15, w13
	fmov	w15, s1
	madd	w9, w13, w23, w9
	add	w14, w15, w14
	madd	w10, w14, w23, w10
	b.ne	.LBB36_7
// %bb.8:                               //   in Loop: Header=BB36_4 Depth=1
	ldur	x11, [x29, #-32]                // 8-byte Folded Reload
	add	w9, w10, w9
	ldr	x10, [sp, #48]                  // 8-byte Folded Reload
	cmp	x11, x26
	b.eq	.LBB36_11
.LBB36_9:                               // %.preheader2
                                        //   in Loop: Header=BB36_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB36_10:                              //   Parent Loop BB36_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11], #20
	ldr	w12, [x25, x10, lsl #2]
	add	w9, w9, w22
	add	x10, x10, #5
	addv	s0, v0.4s
	cmp	x10, x28
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w23, w9
	b.lo	.LBB36_10
.LBB36_11:                              //   in Loop: Header=BB36_4 Depth=1
	cmp	w1, w20
	b.ge	.LBB36_19
// %bb.12:                              //   in Loop: Header=BB36_4 Depth=1
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	cmp	w10, #6
	b.hi	.LBB36_14
// %bb.13:                              //   in Loop: Header=BB36_4 Depth=1
	mov	x10, x1
	b	.LBB36_17
.LBB36_14:                              //   in Loop: Header=BB36_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB36_15:                              //   Parent Loop BB36_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB36_15
// %bb.16:                              //   in Loop: Header=BB36_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	cmp	x9, x10
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB36_19
.LBB36_17:                              // %.preheader
                                        //   in Loop: Header=BB36_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB36_18:                              //   Parent Loop BB36_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w2
	add	w10, w10, #1
	madd	w9, w12, w23, w9
	cmp	w20, w10
	b.gt	.LBB36_18
.LBB36_19:                              //   in Loop: Header=BB36_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB36_3
// %bb.20:                              //   in Loop: Header=BB36_4 Depth=1
	adrp	x8, current_test
	mov	x24, x21
	mov	x21, x1
	ldr	w1, [x8, :lo12:current_test]
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	bl	printf
	adrp	x8, iterations
	mov	w2, #35256                      // =0x89b8
	ldur	q5, [x29, #-48]                 // 16-byte Folded Reload
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w2, #48166, lsl #16
	mov	x1, x21
	mov	x21, x24
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB36_3
.LBB36_21:
	cmp	w20, #0
	b.le	.LBB36_31
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB36_24
.LBB36_23:                              //   in Loop: Header=BB36_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB36_35
.LBB36_24:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB36_26
// %bb.25:                              //   in Loop: Header=BB36_24 Depth=1
	add	w9, w9, w23
	b	.LBB36_29
.LBB36_26:                              //   in Loop: Header=BB36_24 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB36_29
// %bb.27:                              //   in Loop: Header=BB36_24 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB36_29
// %bb.28:                              //   in Loop: Header=BB36_24 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB36_29:                              //   in Loop: Header=BB36_24 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w24
	cmp	w9, w10
	b.eq	.LBB36_23
// %bb.30:                              //   in Loop: Header=BB36_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB36_23
.LBB36_31:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB36_33
.LBB36_32:                              //   in Loop: Header=BB36_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB36_35
.LBB36_33:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB36_32
// %bb.34:                              //   in Loop: Header=BB36_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB36_32
.LBB36_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB36_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB36_39
.LBB36_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB36_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB36_39:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB36_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end36:
	.size	_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end36-_Z27test_for_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB37_34
// %bb.1:
	mov	w26, #58432                     // =0xe440
	subs	w9, w20, #4
	movk	w26, #41666, lsl #16
	b.lt	.LBB37_21
// %bb.2:
	sub	w28, w20, #3
	mov	w10, #4                         // =0x4
	and	w9, w9, #0xfffffffc
	cmp	x28, #4
	add	w25, w9, #4
	sub	w9, w20, w9
	csel	x10, x28, x10, hi
	sub	w11, w9, #5
	mov	w24, #35256                     // =0x89b8
	sub	x10, x10, #1
	mov	w22, #38821                     // =0x97a5
	mov	w23, #9952                      // =0x26e0
	lsr	x10, x10, #2
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	movk	w23, #61594, lsl #16
	dup	v20.4s, w22
	dup	v21.4s, w24
	add	x10, x10, #1
	add	x9, x21, w25, uxtw #2
	dup	v22.4s, w23
	stp	x10, x11, [x29, #-48]           // 16-byte Folded Spill
	add	x11, x11, #1
	and	x19, x10, #0x7ffffffffffffff8
	str	x11, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x11, #0x1fffffff8
	lsl	x11, x19, #2
	mov	w13, #46592                     // =0xb600
	mov	w27, wzr
	add	x9, x9, #16
	stp	x11, x10, [sp, #48]             // 16-byte Folded Spill
	add	x10, x10, x25
	movk	w13, #46159, lsl #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x10, x21, #64
	adrp	x14, init_value
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	q21, q20, [x29, #-32]           // 32-byte Folded Spill
	str	q22, [sp, #64]                  // 16-byte Folded Spill
	b	.LBB37_4
.LBB37_3:                               //   in Loop: Header=BB37_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB37_34
.LBB37_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB37_7 Depth 2
                                        //     Child Loop BB37_10 Depth 2
                                        //     Child Loop BB37_15 Depth 2
                                        //     Child Loop BB37_18 Depth 2
	cmp	w28, #29
	b.hs	.LBB37_6
// %bb.5:                               //   in Loop: Header=BB37_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB37_9
.LBB37_6:                               // %.preheader6
                                        //   in Loop: Header=BB37_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	mov	x10, x19
.LBB37_7:                               //   Parent Loop BB37_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	x11, x9, #64
	ld4	{ v16.4s, v17.4s, v18.4s, v19.4s }, [x9]
	subs	x10, x10, #8
	add	x9, x9, #128
	ld4	{ v2.4s, v3.4s, v4.4s, v5.4s }, [x11]
	add	v7.4s, v17.4s, v16.4s
	add	v6.4s, v3.4s, v2.4s
	add	v2.4s, v4.4s, v5.4s
	add	v3.4s, v18.4s, v19.4s
	add	v2.4s, v6.4s, v2.4s
	add	v3.4s, v7.4s, v3.4s
	mla	v0.4s, v2.4s, v20.4s
	mla	v1.4s, v3.4s, v20.4s
	add	v0.4s, v0.4s, v22.4s
	add	v1.4s, v1.4s, v22.4s
	b.ne	.LBB37_7
// %bb.8:                               //   in Loop: Header=BB37_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	ldr	x10, [sp, #48]                  // 8-byte Folded Reload
	cmp	x9, x19
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB37_11
.LBB37_9:                               // %.preheader2
                                        //   in Loop: Header=BB37_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB37_10:                              //   Parent Loop BB37_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11], #16
	add	x10, x10, #4
	cmp	x10, x28
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w22, w9
	add	w9, w9, w23
	b.lo	.LBB37_10
.LBB37_11:                              //   in Loop: Header=BB37_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB37_19
// %bb.12:                              //   in Loop: Header=BB37_4 Depth=1
	ldur	x10, [x29, #-40]                // 8-byte Folded Reload
	cmp	w10, #6
	b.hi	.LBB37_14
// %bb.13:                              //   in Loop: Header=BB37_4 Depth=1
	mov	x10, x25
	b	.LBB37_17
.LBB37_14:                              //   in Loop: Header=BB37_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB37_15:                              //   Parent Loop BB37_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v20.4s
	mla	v1.4s, v3.4s, v20.4s
	add	v0.4s, v0.4s, v21.4s
	add	v1.4s, v1.4s, v21.4s
	b.ne	.LBB37_15
// %bb.16:                              //   in Loop: Header=BB37_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	cmp	x9, x10
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB37_19
.LBB37_17:                              // %.preheader
                                        //   in Loop: Header=BB37_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB37_18:                              //   Parent Loop BB37_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w24
	add	w10, w10, #1
	madd	w9, w12, w22, w9
	cmp	w20, w10
	b.gt	.LBB37_18
.LBB37_19:                              //   in Loop: Header=BB37_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w13
	cmp	w9, w10
	b.eq	.LBB37_3
// %bb.20:                              //   in Loop: Header=BB37_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x26, x14
	bl	printf
	ldp	q21, q20, [x29, #-32]           // 32-byte Folded Reload
	adrp	x8, iterations
	mov	x14, x26
	mov	w26, #58432                     // =0xe440
	ldr	q22, [sp, #64]                  // 16-byte Folded Reload
	mov	w13, #46592                     // =0xb600
	ldr	w8, [x8, :lo12:iterations]
	movk	w26, #41666, lsl #16
	movk	w13, #46159, lsl #16
	b	.LBB37_3
.LBB37_21:
	cmp	w20, #0
	b.le	.LBB37_30
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w28, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x27, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w28, #30797, lsl #16
	b	.LBB37_24
.LBB37_23:                              //   in Loop: Header=BB37_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB37_34
.LBB37_24:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB37_26
// %bb.25:                              //   in Loop: Header=BB37_24 Depth=1
	add	w9, w9, w23
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w24
	cmp	w9, w10
	b.eq	.LBB37_23
	b	.LBB37_28
.LBB37_26:                              //   in Loop: Header=BB37_24 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w28
	b.ne	.LBB37_29
// %bb.27:                              //   in Loop: Header=BB37_24 Depth=1
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w24
	cmp	w9, w10
	b.eq	.LBB37_23
.LBB37_28:                              //   in Loop: Header=BB37_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB37_23
.LBB37_29:                              //   in Loop: Header=BB37_24 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w24
	cmp	w9, w10
	b.eq	.LBB37_23
	b	.LBB37_28
.LBB37_30:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB37_32
.LBB37_31:                              //   in Loop: Header=BB37_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB37_34
.LBB37_32:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w26
	cmp	w9, w22
	b.eq	.LBB37_31
// %bb.33:                              //   in Loop: Header=BB37_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB37_31
.LBB37_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB37_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB37_38
.LBB37_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB37_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB37_38:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB37_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end37:
	.size	_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end37-_Z27test_for_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB38_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #3
	movk	w15, #41666, lsl #16
	b.lt	.LBB38_21
// %bb.2:
	sub	w28, w20, #2
	mov	w10, #3                         // =0x3
	mov	w11, #43691                     // =0xaaab
	cmp	x28, #3
	movk	w11, #43690, lsl #16
	mov	x12, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa
	csel	x10, x28, x10, hi
	movk	x12, #43691
	umull	x9, w9, w11
	sub	x10, x10, #1
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	umulh	x10, x10, x12
	mov	w23, #40232                     // =0x9d28
	movk	w24, #48166, lsl #16
	lsr	x9, x9, #33
	movk	w22, #4117, lsl #16
	movk	w23, #13427, lsl #16
	dup	v18.4s, w22
	dup	v19.4s, w24
	dup	v20.4s, w23
	add	w9, w9, w9, lsl #1
	mov	w16, #46592                     // =0xb600
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	adrp	x26, init_value
	lsr	x10, x10, #1
	sub	w11, w20, w9
	add	w25, w9, #3
	sub	w11, w11, #4
	add	x9, x21, w25, uxtw #2
	stp	q19, q18, [x29, #-48]           // 32-byte Folded Spill
	add	x10, x10, #1
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x11, x11, #1
	and	x19, x10, #0x7ffffffffffffff8
	str	x10, [sp, #64]                  // 8-byte Folded Spill
	and	x10, x11, #0x1fffffff8
	str	x11, [sp, #24]                  // 8-byte Folded Spill
	add	x11, x19, x19, lsl #1
	add	x9, x9, #16
	stp	x11, x10, [sp, #32]             // 16-byte Folded Spill
	add	x10, x10, x25
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	add	x10, x21, #8
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	str	q20, [sp, #48]                  // 16-byte Folded Spill
	b	.LBB38_4
.LBB38_3:                               //   in Loop: Header=BB38_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB38_32
.LBB38_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB38_7 Depth 2
                                        //     Child Loop BB38_10 Depth 2
                                        //     Child Loop BB38_15 Depth 2
                                        //     Child Loop BB38_18 Depth 2
	cmp	w28, #22
	b.hs	.LBB38_6
// %bb.5:                               //   in Loop: Header=BB38_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB38_9
.LBB38_6:                               // %.preheader6
                                        //   in Loop: Header=BB38_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x21
	mov	x10, x19
.LBB38_7:                               //   Parent Loop BB38_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x11, x9
	subs	x10, x10, #8
	add	x9, x9, #96
	ld3	{ v2.4s, v3.4s, v4.4s }, [x11], #48
	ld3	{ v5.4s, v6.4s, v7.4s }, [x11]
	add	v16.4s, v3.4s, v2.4s
	add	v17.4s, v6.4s, v5.4s
	add	v2.4s, v16.4s, v4.4s
	add	v3.4s, v17.4s, v7.4s
	mla	v0.4s, v2.4s, v18.4s
	mla	v1.4s, v3.4s, v18.4s
	add	v0.4s, v0.4s, v20.4s
	add	v1.4s, v1.4s, v20.4s
	b.ne	.LBB38_7
// %bb.8:                               //   in Loop: Header=BB38_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #64]                   // 8-byte Folded Reload
	ldr	x11, [sp, #32]                  // 8-byte Folded Reload
	cmp	x9, x19
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB38_11
.LBB38_9:                               // %.preheader2
                                        //   in Loop: Header=BB38_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	add	x10, x10, x11, lsl #2
	add	x11, x11, #1
.LBB38_10:                              //   Parent Loop BB38_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w12, w13, [x10, #-8]
	ldr	w14, [x10], #12
	add	w12, w13, w12
	add	w12, w12, w14
	madd	w9, w12, w22, w9
	add	x12, x11, #2
	add	x11, x11, #3
	cmp	x12, x28
	add	w9, w9, w23
	b.lo	.LBB38_10
.LBB38_11:                              //   in Loop: Header=BB38_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB38_19
// %bb.12:                              //   in Loop: Header=BB38_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	cmp	w10, #6
	b.hi	.LBB38_14
// %bb.13:                              //   in Loop: Header=BB38_4 Depth=1
	mov	x10, x25
	b	.LBB38_17
.LBB38_14:                              //   in Loop: Header=BB38_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB38_15:                              //   Parent Loop BB38_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v18.4s
	mla	v1.4s, v3.4s, v18.4s
	add	v0.4s, v0.4s, v19.4s
	add	v1.4s, v1.4s, v19.4s
	b.ne	.LBB38_15
// %bb.16:                              //   in Loop: Header=BB38_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB38_19
.LBB38_17:                              // %.preheader
                                        //   in Loop: Header=BB38_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB38_18:                              //   Parent Loop BB38_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w24
	add	w10, w10, #1
	madd	w9, w12, w22, w9
	cmp	w20, w10
	b.gt	.LBB38_18
.LBB38_19:                              //   in Loop: Header=BB38_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB38_3
// %bb.20:                              //   in Loop: Header=BB38_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q19, q18, [x29, #-48]           // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q20, [sp, #48]                  // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB38_3
.LBB38_21:
	cmp	w20, #0
	b.le	.LBB38_28
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB38_24
.LBB38_23:                              //   in Loop: Header=BB38_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB38_32
.LBB38_24:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB38_26
// %bb.25:                              //   in Loop: Header=BB38_24 Depth=1
	add	w9, w9, w23
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB38_23
	b	.LBB38_27
.LBB38_26:                              //   in Loop: Header=BB38_24 Depth=1
	ldr	w10, [x21, #4]
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB38_23
.LBB38_27:                              //   in Loop: Header=BB38_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB38_23
.LBB38_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB38_30
.LBB38_29:                              //   in Loop: Header=BB38_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB38_32
.LBB38_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB38_29
// %bb.31:                              //   in Loop: Header=BB38_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB38_29
.LBB38_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB38_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB38_36
.LBB38_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB38_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB38_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB38_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end38:
	.size	_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end38-_Z27test_for_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB39_29
// %bb.1:
	subs	w9, w21, #2
	b.lt	.LBB39_20
// %bb.2:
	sub	w27, w21, #1
	mov	w10, #2                         // =0x2
	and	w9, w9, #0xfffffffe
	cmp	x27, #2
	sub	w11, w21, w9
	add	w23, w9, #2
	csel	x10, x27, x10, hi
	sub	w9, w11, #3
	mov	w24, #38821                     // =0x97a5
	sub	x10, x10, #1
	add	x11, x9, #1
	mov	w19, #4976                      // =0x1370
	lsr	x10, x10, #1
	mov	w22, #35256                     // =0x89b8
	str	x11, [sp, #32]                  // 8-byte Folded Spill
	and	x11, x11, #0x1fffffff8
	movk	w24, #4117, lsl #16
	movk	w19, #30797, lsl #16
	add	x10, x10, #1
	movk	w22, #48166, lsl #16
	dup	v6.4s, w24
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	and	x28, x10, #0x7ffffffffffffff8
	add	x10, x11, x23
	dup	v7.4s, w22
	stur	x9, [x29, #-24]                 // 8-byte Folded Spill
	add	x9, x20, w23, uxtw #2
	dup	v16.4s, w19
	str	x10, [sp, #24]                  // 8-byte Folded Spill
	lsl	x10, x28, #1
	mov	w13, #58432                     // =0xe440
	mov	w15, #46592                     // =0xb600
	mov	w26, wzr
	movk	w13, #41666, lsl #16
	str	x10, [sp, #56]                  // 8-byte Folded Spill
	add	x10, x20, #32
	add	x9, x9, #16
	adrp	x25, init_value
	movk	w15, #46159, lsl #16
	stp	x11, x10, [sp, #40]             // 16-byte Folded Spill
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	stur	q6, [x29, #-16]                 // 16-byte Folded Spill
	stur	q7, [x29, #-48]                 // 16-byte Folded Spill
	str	q16, [sp, #64]                  // 16-byte Folded Spill
	b	.LBB39_4
.LBB39_3:                               //   in Loop: Header=BB39_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB39_29
.LBB39_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB39_7 Depth 2
                                        //     Child Loop BB39_9 Depth 2
                                        //     Child Loop BB39_14 Depth 2
                                        //     Child Loop BB39_17 Depth 2
	cmp	w21, #16
	b.hs	.LBB39_6
// %bb.5:                               //   in Loop: Header=BB39_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB39_9
.LBB39_6:                               // %.preheader6
                                        //   in Loop: Header=BB39_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #48]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB39_7:                               //   Parent Loop BB39_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	x11, x9, #32
	ld2	{ v4.4s, v5.4s }, [x9]
	subs	x10, x10, #8
	add	x9, x9, #64
	ld2	{ v2.4s, v3.4s }, [x11]
	add	v2.4s, v3.4s, v2.4s
	add	v3.4s, v5.4s, v4.4s
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v16.4s
	add	v1.4s, v1.4s, v16.4s
	b.ne	.LBB39_7
// %bb.8:                               //   in Loop: Header=BB39_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	cmp	x9, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB39_10
.LBB39_9:                               //   Parent Loop BB39_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x11, x20, x10, lsl #2
	add	x10, x10, #2
	cmp	x10, x27
	ldp	w12, w11, [x11]
	add	w11, w11, w12
	madd	w9, w11, w24, w9
	add	w9, w9, w19
	b.lo	.LBB39_9
.LBB39_10:                              //   in Loop: Header=BB39_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB39_18
// %bb.11:                              //   in Loop: Header=BB39_4 Depth=1
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	cmp	w10, #6
	b.hi	.LBB39_13
// %bb.12:                              //   in Loop: Header=BB39_4 Depth=1
	mov	x10, x23
	b	.LBB39_16
.LBB39_13:                              //   in Loop: Header=BB39_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB39_14:                              //   Parent Loop BB39_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB39_14
// %bb.15:                              //   in Loop: Header=BB39_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB39_18
.LBB39_16:                              // %.preheader
                                        //   in Loop: Header=BB39_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB39_17:                              //   Parent Loop BB39_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w10, w10, #1
	cmp	w21, w10
	madd	w9, w12, w24, w9
	add	w9, w9, w22
	b.gt	.LBB39_17
.LBB39_18:                              //   in Loop: Header=BB39_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w15
	cmp	w9, w10
	b.eq	.LBB39_3
// %bb.19:                              //   in Loop: Header=BB39_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #46592                     // =0xb600
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	ldur	q7, [x29, #-48]                 // 16-byte Folded Reload
	ldur	q6, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB39_3
.LBB39_20:
	cmp	w21, #1
	b.ne	.LBB39_25
// %bb.21:                              // %.preheader8
	mov	w22, #58432                     // =0xe440
	mov	w23, #38821                     // =0x97a5
	mov	w25, #11336                     // =0x2c48
	mov	w19, wzr
	movk	w22, #41666, lsl #16
	movk	w23, #4117, lsl #16
	adrp	x24, init_value
	movk	w25, #63529, lsl #16
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB39_23
.LBB39_22:                              //   in Loop: Header=BB39_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB39_29
.LBB39_23:                              // =>This Inner Loop Header: Depth=1
	ldr	d0, [x24, :lo12:init_value]
	ldr	w10, [x20]
	fcvtzs	w9, d0
	mul	w10, w10, w23
	madd	w9, w9, w22, w25
	cmp	w10, w9
	b.eq	.LBB39_22
// %bb.24:                              //   in Loop: Header=BB39_23 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB39_22
.LBB39_25:
	adrp	x21, init_value
	mov	w22, #58432                     // =0xe440
	mov	w23, #18944                     // =0x4a00
	ldr	d0, [x21, :lo12:init_value]
	mov	w19, wzr
	movk	w22, #41666, lsl #16
	movk	w23, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB39_27
.LBB39_26:                              //   in Loop: Header=BB39_27 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB39_29
.LBB39_27:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB39_26
// %bb.28:                              //   in Loop: Header=BB39_27 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB39_26
.LBB39_29:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB39_31
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB39_33
.LBB39_31:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB39_34
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
.LBB39_33:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB39_34:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end39:
	.size	_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end39-_Z27test_for_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc // -- Begin function _Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB40_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB40_13
// %bb.2:
	mov	w28, #38821                     // =0x97a5
	mov	w24, #35256                     // =0x89b8
	mov	w13, #58432                     // =0xe440
	movk	w28, #4117, lsl #16
	movk	w24, #48166, lsl #16
	mov	w19, w20
	dup	v4.4s, w28
	dup	v5.4s, w24
	mov	w27, #46592                     // =0xb600
	mov	w26, wzr
	movk	w13, #41666, lsl #16
	and	x23, x19, #0x7ffffff8
	add	x22, x21, #16
	adrp	x25, init_value
	movk	w27, #46159, lsl #16
	stur	q4, [x29, #-16]                 // 16-byte Folded Spill
	str	q5, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB40_4
.LBB40_3:                               //   in Loop: Header=BB40_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB40_17
.LBB40_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB40_7 Depth 2
                                        //     Child Loop BB40_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB40_6
// %bb.5:                               //   in Loop: Header=BB40_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB40_9
.LBB40_6:                               // %.preheader2
                                        //   in Loop: Header=BB40_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x22
	mov	x10, x23
.LBB40_7:                               //   Parent Loop BB40_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB40_7
// %bb.8:                               //   in Loop: Header=BB40_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x23, x19
	mov	x11, x23
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB40_11
.LBB40_9:                               // %.preheader
                                        //   in Loop: Header=BB40_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x19, x11
.LBB40_10:                              //   Parent Loop BB40_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	madd	w9, w12, w28, w9
	add	w9, w9, w24
	b.ne	.LBB40_10
.LBB40_11:                              //   in Loop: Header=BB40_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w27
	cmp	w9, w10
	b.eq	.LBB40_3
// %bb.12:                              //   in Loop: Header=BB40_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #16]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB40_3
.LBB40_13:
	adrp	x21, init_value
	mov	w22, #58432                     // =0xe440
	mov	w23, #18944                     // =0x4a00
	ldr	d0, [x21, :lo12:init_value]
	mov	w19, wzr
	movk	w22, #41666, lsl #16
	movk	w23, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB40_15
.LBB40_14:                              //   in Loop: Header=BB40_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB40_17
.LBB40_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB40_14
// %bb.16:                              //   in Loop: Header=BB40_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB40_14
.LBB40_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB40_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB40_21
.LBB40_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB40_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB40_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB40_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end40:
	.size	_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end40-_Z27test_for_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB41_33
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #32
	movk	w13, #41666, lsl #16
	b.lt	.LBB41_15
// %bb.2:
	and	w8, w9, #0xffffffe0
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	sub	w9, w20, w8
	add	w23, w8, #32
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	sub	w9, w9, #33
	add	x8, x21, w23, uxtw #2
	stur	x9, [x29, #-16]                 // 8-byte Folded Spill
	add	x9, x9, #1
	dup	v16.4s, w19
	dup	v17.4s, w28
	mov	w12, #46592                     // =0xb600
	and	x24, x9, #0x1fffffff8
	mov	w26, #14080                     // =0x3700
	add	x8, x8, #16
	mov	w27, wzr
	movk	w12, #46159, lsl #16
	sub	w25, w20, #31
	movk	w26, #34001, lsl #16
	stp	x8, x9, [sp, #16]               // 16-byte Folded Spill
	add	x8, x24, x23
	adrp	x22, init_value
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	stur	q16, [x29, #-32]                // 16-byte Folded Spill
	str	q17, [sp, #32]                  // 16-byte Folded Spill
	b	.LBB41_4
.LBB41_3:                               //   in Loop: Header=BB41_4 Depth=1
	adrp	x8, iterations
	add	w27, w27, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w27, w8
	b.ge	.LBB41_33
.LBB41_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB41_5 Depth 2
                                        //     Child Loop BB41_9 Depth 2
                                        //     Child Loop BB41_12 Depth 2
	mov	x9, xzr
	mov	w8, wzr
	mov	x10, x21
.LBB41_5:                               //   Parent Loop BB41_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x10, #96]
	add	x9, x9, #32
	ldp	q2, q3, [x10, #32]
	cmp	x9, x25
	ldp	q4, q5, [x10, #64]
	ldp	q6, q7, [x10], #128
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v3.4s, v7.4s, v5.4s
	add	v2.4s, v6.4s, v4.4s
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w11, s0
	madd	w8, w11, w19, w8
	add	w8, w8, w26
	b.lo	.LBB41_5
// %bb.6:                               //   in Loop: Header=BB41_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB41_13
// %bb.7:                               //   in Loop: Header=BB41_4 Depth=1
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	cmp	w9, #6
	mov	x9, x23
	b.ls	.LBB41_11
// %bb.8:                               //   in Loop: Header=BB41_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x24
	mov	v0.s[0], w8
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
.LBB41_9:                               //   Parent Loop BB41_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x8, #-16]
	subs	x9, x9, #8
	add	x8, x8, #32
	mla	v0.4s, v2.4s, v16.4s
	mla	v1.4s, v3.4s, v16.4s
	add	v0.4s, v0.4s, v17.4s
	add	v1.4s, v1.4s, v17.4s
	b.ne	.LBB41_9
// %bb.10:                              //   in Loop: Header=BB41_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
	cmp	x8, x24
	addv	s0, v0.4s
	fmov	w8, s0
	b.eq	.LBB41_13
.LBB41_11:                              // %.preheader
                                        //   in Loop: Header=BB41_4 Depth=1
	add	x10, x21, x9, lsl #2
.LBB41_12:                              //   Parent Loop BB41_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w11, [x10], #4
	add	w8, w8, w28
	add	w9, w9, #1
	madd	w8, w11, w19, w8
	cmp	w20, w9
	b.gt	.LBB41_12
.LBB41_13:                              //   in Loop: Header=BB41_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w9, d0
	madd	w9, w9, w13, w12
	cmp	w8, w9
	b.eq	.LBB41_3
// %bb.14:                              //   in Loop: Header=BB41_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q17, [sp, #32]                  // 16-byte Folded Reload
	ldur	q16, [x29, #-32]                // 16-byte Folded Reload
	mov	w12, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	movk	w12, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB41_3
.LBB41_15:
	cmp	w20, #0
	b.le	.LBB41_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB41_18
.LBB41_17:                              //   in Loop: Header=BB41_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB41_33
.LBB41_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB41_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB41_20
// %bb.19:                              //   in Loop: Header=BB41_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB41_25
.LBB41_20:                              //   in Loop: Header=BB41_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB41_23
// %bb.21:                              //   in Loop: Header=BB41_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB41_24
// %bb.22:                              //   in Loop: Header=BB41_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB41_23:                              //   in Loop: Header=BB41_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB41_24:                              //   in Loop: Header=BB41_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB41_27
.LBB41_25:                              // %.preheader3
                                        //   in Loop: Header=BB41_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB41_26:                              //   Parent Loop BB41_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB41_26
.LBB41_27:                              //   in Loop: Header=BB41_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB41_17
// %bb.28:                              //   in Loop: Header=BB41_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB41_17
.LBB41_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB41_31
.LBB41_30:                              //   in Loop: Header=BB41_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB41_33
.LBB41_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB41_30
// %bb.32:                              //   in Loop: Header=BB41_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB41_30
.LBB41_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB41_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB41_37
.LBB41_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB41_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB41_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB41_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end41:
	.size	_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end41-_Z29test_while_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB42_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #31
	movk	w15, #41666, lsl #16
	b.lt	.LBB42_15
// %bb.2:
	mov	w8, #4229                       // =0x1085
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w8, #2114, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x8, w9, w8
	dup	v6.4s, w19
	dup	v7.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w25, #44360                     // =0xad48
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #30
	add	x24, x21, #120
	lsr	x8, x8, #32
	movk	w25, #51370, lsl #16
	adrp	x26, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w8
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	add	w8, w8, w9, lsr #1
	lsr	w8, w8, #4
	lsl	w9, w8, #5
	sub	w8, w9, w8
	sub	w9, w20, w8
	add	w22, w8, #31
	sub	w9, w9, #32
	add	x8, x21, w22, uxtw #2
	stur	x9, [x29, #-16]                 // 8-byte Folded Spill
	add	x9, x9, #1
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	and	x9, x9, #0x1fffffff8
	add	x10, x8, #16
	add	x8, x9, x22
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	stp	x8, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB42_4
.LBB42_3:                               //   in Loop: Header=BB42_4 Depth=1
	adrp	x8, iterations
	add	w27, w27, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w27, w8
	b.ge	.LBB42_33
.LBB42_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB42_5 Depth 2
                                        //     Child Loop BB42_9 Depth 2
                                        //     Child Loop BB42_12 Depth 2
	mov	w8, wzr
	mov	x9, x24
	mov	w10, #28                        // =0x1c
.LBB42_5:                               //   Parent Loop BB42_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x9, #-40]
	ldur	q1, [x9, #-104]
	ldur	q2, [x9, #-56]
	ldur	q3, [x9, #-120]
	ldur	q4, [x9, #-24]
	ldur	q5, [x9, #-88]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x9, #-72]
	add	v4.4s, v5.4s, v4.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w11, w12, [x9, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w13, [x9], #124
	add	v2.4s, v2.4s, v4.4s
	add	w12, w12, w13
	add	v0.4s, v2.4s, v0.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w11, w14, w11
	add	w11, w11, w12
	madd	w8, w11, w19, w8
	add	x11, x10, #3
	add	x10, x10, #31
	cmp	x11, x23
	add	w8, w8, w25
	b.lo	.LBB42_5
// %bb.6:                               //   in Loop: Header=BB42_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB42_13
// %bb.7:                               //   in Loop: Header=BB42_4 Depth=1
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	cmp	w9, #6
	mov	x9, x22
	b.ls	.LBB42_11
// %bb.8:                               //   in Loop: Header=BB42_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	mov	v0.s[0], w8
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
.LBB42_9:                               //   Parent Loop BB42_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x8, #-16]
	subs	x9, x9, #8
	add	x8, x8, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB42_9
// %bb.10:                              //   in Loop: Header=BB42_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x8, x9, [sp, #32]               // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x8, x9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	fmov	w8, s0
	b.eq	.LBB42_13
.LBB42_11:                              // %.preheader
                                        //   in Loop: Header=BB42_4 Depth=1
	add	x10, x21, x9, lsl #2
.LBB42_12:                              //   Parent Loop BB42_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w11, [x10], #4
	add	w8, w8, w28
	add	w9, w9, #1
	madd	w8, w11, w19, w8
	cmp	w20, w9
	b.gt	.LBB42_12
.LBB42_13:                              //   in Loop: Header=BB42_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w9, d0
	madd	w9, w9, w15, w16
	cmp	w8, w9
	b.eq	.LBB42_3
// %bb.14:                              //   in Loop: Header=BB42_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB42_3
.LBB42_15:
	cmp	w20, #0
	b.le	.LBB42_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB42_18
.LBB42_17:                              //   in Loop: Header=BB42_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB42_33
.LBB42_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB42_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB42_20
// %bb.19:                              //   in Loop: Header=BB42_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB42_25
.LBB42_20:                              //   in Loop: Header=BB42_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB42_23
// %bb.21:                              //   in Loop: Header=BB42_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB42_24
// %bb.22:                              //   in Loop: Header=BB42_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB42_23:                              //   in Loop: Header=BB42_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB42_24:                              //   in Loop: Header=BB42_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB42_27
.LBB42_25:                              // %.preheader3
                                        //   in Loop: Header=BB42_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB42_26:                              //   Parent Loop BB42_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB42_26
.LBB42_27:                              //   in Loop: Header=BB42_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB42_17
// %bb.28:                              //   in Loop: Header=BB42_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB42_17
.LBB42_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB42_31
.LBB42_30:                              //   in Loop: Header=BB42_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB42_33
.LBB42_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB42_30
// %bb.32:                              //   in Loop: Header=BB42_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB42_30
.LBB42_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB42_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB42_37
.LBB42_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB42_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB42_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB42_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end42:
	.size	_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end42-_Z29test_while_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB43_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #30
	movk	w15, #41666, lsl #16
	b.lt	.LBB43_15
// %bb.2:
	mov	w10, #34953                     // =0x8889
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #34952, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v6.4s, w19
	dup	v7.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w22, #9104                      // =0x2390
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #29
	add	x24, x21, #116
	lsr	x9, x9, #36
	movk	w22, #3204, lsl #16
	adrp	x26, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	lsl	w10, w9, #5
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	sub	w9, w10, w9, lsl #1
	sub	w10, w20, w9
	add	w25, w9, #30
	sub	w10, w10, #31
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB43_4
.LBB43_3:                               //   in Loop: Header=BB43_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB43_33
.LBB43_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB43_5 Depth 2
                                        //     Child Loop BB43_9 Depth 2
                                        //     Child Loop BB43_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #28                        // =0x1c
.LBB43_5:                               //   Parent Loop BB43_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-100]
	ldur	q2, [x10, #-52]
	ldur	q3, [x10, #-116]
	ldur	q4, [x10, #-20]
	ldur	q5, [x10, #-84]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-68]
	add	v4.4s, v5.4s, v4.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #120
	add	v2.4s, v2.4s, v4.4s
	add	v0.4s, v2.4s, v0.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #30
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB43_5
// %bb.6:                               //   in Loop: Header=BB43_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB43_13
// %bb.7:                               //   in Loop: Header=BB43_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB43_11
// %bb.8:                               //   in Loop: Header=BB43_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB43_9:                               //   Parent Loop BB43_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB43_9
// %bb.10:                              //   in Loop: Header=BB43_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB43_13
.LBB43_11:                              // %.preheader
                                        //   in Loop: Header=BB43_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB43_12:                              //   Parent Loop BB43_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB43_12
.LBB43_13:                              //   in Loop: Header=BB43_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB43_3
// %bb.14:                              //   in Loop: Header=BB43_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB43_3
.LBB43_15:
	cmp	w20, #0
	b.le	.LBB43_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB43_18
.LBB43_17:                              //   in Loop: Header=BB43_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB43_33
.LBB43_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB43_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB43_20
// %bb.19:                              //   in Loop: Header=BB43_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB43_25
.LBB43_20:                              //   in Loop: Header=BB43_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB43_23
// %bb.21:                              //   in Loop: Header=BB43_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB43_24
// %bb.22:                              //   in Loop: Header=BB43_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB43_23:                              //   in Loop: Header=BB43_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB43_24:                              //   in Loop: Header=BB43_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB43_27
.LBB43_25:                              // %.preheader3
                                        //   in Loop: Header=BB43_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB43_26:                              //   Parent Loop BB43_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB43_26
.LBB43_27:                              //   in Loop: Header=BB43_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB43_17
// %bb.28:                              //   in Loop: Header=BB43_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB43_17
.LBB43_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB43_31
.LBB43_30:                              //   in Loop: Header=BB43_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB43_33
.LBB43_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB43_30
// %bb.32:                              //   in Loop: Header=BB43_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB43_30
.LBB43_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB43_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB43_37
.LBB43_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB43_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB43_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB43_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end43:
	.size	_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end43-_Z29test_while_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN16while_loop_testsILi28EiE7do_testEPKiPKc,"axG",@progbits,_ZN16while_loop_testsILi28EiE7do_testEPKiPKc,comdat
	.weak	_ZN16while_loop_testsILi28EiE7do_testEPKiPKc // -- Begin function _ZN16while_loop_testsILi28EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN16while_loop_testsILi28EiE7do_testEPKiPKc,@function
_ZN16while_loop_testsILi28EiE7do_testEPKiPKc: // @_ZN16while_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN16while_loop_testsILi19EiE7do_testEPKiPKc
	adrp	x20, temp_string+1900
	add	x20, x20, :lo12:temp_string+1900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
.Lfunc_end44:
	.size	_ZN16while_loop_testsILi28EiE7do_testEPKiPKc, .Lfunc_end44-_ZN16while_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB45_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #29
	movk	w14, #41666, lsl #16
	b.lt	.LBB45_15
// %bb.2:
	mov	w10, #51977                     // =0xcb09
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #36157, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #29                        // =0x1d
	dup	v6.4s, w19
	dup	v7.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w22, #39384                     // =0x99d8
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w20, #28
	lsr	x9, x9, #36
	add	x24, x21, #112
	movk	w22, #20573, lsl #16
	adrp	x26, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w25, w9, #29
	sub	w10, w10, #30
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB45_4
.LBB45_3:                               //   in Loop: Header=BB45_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB45_33
.LBB45_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB45_5 Depth 2
                                        //     Child Loop BB45_9 Depth 2
                                        //     Child Loop BB45_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB45_5:                               //   Parent Loop BB45_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11, #64]
	ldr	q4, [x11, #96]
	ldp	q3, q2, [x11]
	ldr	q5, [x11, #32]
	ldr	w12, [x24, x10, lsl #2]
	add	x10, x10, #29
	add	v4.4s, v5.4s, v4.4s
	cmp	x10, x23
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldr	q2, [x11, #48]
	add	x11, x11, #116
	add	v1.4s, v1.4s, v4.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w22
	b.lo	.LBB45_5
// %bb.6:                               //   in Loop: Header=BB45_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB45_13
// %bb.7:                               //   in Loop: Header=BB45_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB45_11
// %bb.8:                               //   in Loop: Header=BB45_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB45_9:                               //   Parent Loop BB45_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB45_9
// %bb.10:                              //   in Loop: Header=BB45_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB45_13
.LBB45_11:                              // %.preheader
                                        //   in Loop: Header=BB45_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB45_12:                              //   Parent Loop BB45_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB45_12
.LBB45_13:                              //   in Loop: Header=BB45_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB45_3
// %bb.14:                              //   in Loop: Header=BB45_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB45_3
.LBB45_15:
	cmp	w20, #0
	b.le	.LBB45_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB45_18
.LBB45_17:                              //   in Loop: Header=BB45_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB45_33
.LBB45_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB45_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB45_20
// %bb.19:                              //   in Loop: Header=BB45_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB45_25
.LBB45_20:                              //   in Loop: Header=BB45_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB45_23
// %bb.21:                              //   in Loop: Header=BB45_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB45_24
// %bb.22:                              //   in Loop: Header=BB45_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB45_23:                              //   in Loop: Header=BB45_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB45_24:                              //   in Loop: Header=BB45_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB45_27
.LBB45_25:                              // %.preheader3
                                        //   in Loop: Header=BB45_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB45_26:                              //   Parent Loop BB45_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB45_26
.LBB45_27:                              //   in Loop: Header=BB45_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB45_17
// %bb.28:                              //   in Loop: Header=BB45_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB45_17
.LBB45_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB45_31
.LBB45_30:                              //   in Loop: Header=BB45_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB45_33
.LBB45_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB45_30
// %bb.32:                              //   in Loop: Header=BB45_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB45_30
.LBB45_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB45_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB45_37
.LBB45_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB45_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB45_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB45_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end45:
	.size	_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end45-_Z29test_while_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB46_33
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #28
	movk	w13, #41666, lsl #16
	b.lt	.LBB46_15
// %bb.2:
	lsr	w9, w9, #2
	mov	w10, #18725                     // =0x4925
	mov	w28, #35256                     // =0x89b8
	movk	w10, #9362, lsl #16
	mov	w19, #38821                     // =0x97a5
	movk	w28, #48166, lsl #16
	umull	x9, w9, w10
	movk	w19, #4117, lsl #16
	dup	v7.4s, w28
	dup	v6.4s, w19
	mov	w14, #46592                     // =0xb600
	mov	w26, #4128                      // =0x1020
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w22, w20, #27
	lsr	x9, x9, #32
	movk	w26, #37943, lsl #16
	adrp	x25, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	lsl	w10, w9, #5
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	sub	w9, w10, w9, lsl #2
	sub	w10, w20, w9
	add	w23, w9, #28
	sub	w10, w10, #29
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	and	x24, x10, #0x1fffffff8
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x9, x24, x23
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB46_4
.LBB46_3:                               //   in Loop: Header=BB46_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB46_33
.LBB46_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB46_5 Depth 2
                                        //     Child Loop BB46_9 Depth 2
                                        //     Child Loop BB46_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB46_5:                               //   Parent Loop BB46_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11, #64]
	add	x10, x10, #28
	ldp	q3, q2, [x11]
	cmp	x10, x22
	ldr	q4, [x11, #96]
	ldr	q5, [x11, #32]
	add	v4.4s, v5.4s, v4.4s
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldr	q2, [x11, #48]
	add	x11, x11, #112
	add	v1.4s, v1.4s, v4.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB46_5
// %bb.6:                               //   in Loop: Header=BB46_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB46_13
// %bb.7:                               //   in Loop: Header=BB46_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB46_11
// %bb.8:                               //   in Loop: Header=BB46_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x10, x24
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB46_9:                               //   Parent Loop BB46_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB46_9
// %bb.10:                              //   in Loop: Header=BB46_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB46_13
.LBB46_11:                              // %.preheader
                                        //   in Loop: Header=BB46_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB46_12:                              //   Parent Loop BB46_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB46_12
.LBB46_13:                              //   in Loop: Header=BB46_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB46_3
// %bb.14:                              //   in Loop: Header=BB46_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q7, [sp, #32]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB46_3
.LBB46_15:
	cmp	w20, #0
	b.le	.LBB46_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB46_18
.LBB46_17:                              //   in Loop: Header=BB46_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB46_33
.LBB46_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB46_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB46_20
// %bb.19:                              //   in Loop: Header=BB46_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB46_25
.LBB46_20:                              //   in Loop: Header=BB46_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB46_23
// %bb.21:                              //   in Loop: Header=BB46_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB46_24
// %bb.22:                              //   in Loop: Header=BB46_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB46_23:                              //   in Loop: Header=BB46_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB46_24:                              //   in Loop: Header=BB46_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB46_27
.LBB46_25:                              // %.preheader3
                                        //   in Loop: Header=BB46_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB46_26:                              //   Parent Loop BB46_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB46_26
.LBB46_27:                              //   in Loop: Header=BB46_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB46_17
// %bb.28:                              //   in Loop: Header=BB46_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB46_17
.LBB46_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB46_31
.LBB46_30:                              //   in Loop: Header=BB46_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB46_33
.LBB46_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB46_30
// %bb.32:                              //   in Loop: Header=BB46_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB46_30
.LBB46_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB46_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB46_37
.LBB46_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB46_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB46_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB46_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end46:
	.size	_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end46-_Z29test_while_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB47_33
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #27
	movk	w16, #41666, lsl #16
	b.lt	.LBB47_15
// %bb.2:
	mov	w10, #19419                     // =0x4bdb
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #12136, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w22, #34408                     // =0x8668
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w23, w20, #26
	add	x24, x21, #104
	lsr	x10, x10, #32
	movk	w22, #55312, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #27                        // =0x1b
	lsr	w9, w9, #4
	mul	w9, w9, w10
	sub	w10, w20, w9
	add	w25, w9, #27
	sub	w10, w10, #28
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB47_4
.LBB47_3:                               //   in Loop: Header=BB47_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB47_33
.LBB47_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB47_5 Depth 2
                                        //     Child Loop BB47_9 Depth 2
                                        //     Child Loop BB47_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #24                        // =0x18
.LBB47_5:                               //   Parent Loop BB47_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-40]
	ldur	q1, [x10, #-104]
	ldur	q2, [x10, #-24]
	ldur	q3, [x10, #-88]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-72]
	add	v2.4s, v3.4s, v2.4s
	ldur	q3, [x10, #-56]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w14, [x10], #108
	add	v2.4s, v2.4s, v3.4s
	add	w13, w13, w14
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #27
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB47_5
// %bb.6:                               //   in Loop: Header=BB47_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB47_13
// %bb.7:                               //   in Loop: Header=BB47_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB47_11
// %bb.8:                               //   in Loop: Header=BB47_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB47_9:                               //   Parent Loop BB47_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB47_9
// %bb.10:                              //   in Loop: Header=BB47_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB47_13
.LBB47_11:                              // %.preheader
                                        //   in Loop: Header=BB47_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB47_12:                              //   Parent Loop BB47_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB47_12
.LBB47_13:                              //   in Loop: Header=BB47_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB47_3
// %bb.14:                              //   in Loop: Header=BB47_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB47_3
.LBB47_15:
	cmp	w20, #0
	b.le	.LBB47_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB47_18
.LBB47_17:                              //   in Loop: Header=BB47_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB47_33
.LBB47_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB47_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB47_20
// %bb.19:                              //   in Loop: Header=BB47_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB47_25
.LBB47_20:                              //   in Loop: Header=BB47_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB47_23
// %bb.21:                              //   in Loop: Header=BB47_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB47_24
// %bb.22:                              //   in Loop: Header=BB47_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB47_23:                              //   in Loop: Header=BB47_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB47_24:                              //   in Loop: Header=BB47_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB47_27
.LBB47_25:                              // %.preheader3
                                        //   in Loop: Header=BB47_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB47_26:                              //   Parent Loop BB47_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB47_26
.LBB47_27:                              //   in Loop: Header=BB47_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB47_17
// %bb.28:                              //   in Loop: Header=BB47_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB47_17
.LBB47_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB47_31
.LBB47_30:                              //   in Loop: Header=BB47_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB47_33
.LBB47_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB47_30
// %bb.32:                              //   in Loop: Header=BB47_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB47_30
.LBB47_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB47_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB47_37
.LBB47_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB47_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB47_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB47_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end47:
	.size	_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end47-_Z29test_while_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB48_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #26
	movk	w15, #41666, lsl #16
	b.lt	.LBB48_15
// %bb.2:
	mov	w10, #60495                     // =0xec4f
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #20164, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #26                        // =0x1a
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w22, #64688                     // =0xfcb0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #25
	lsr	x9, x9, #35
	add	x24, x21, #100
	movk	w22, #7145, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w25, w9, #26
	sub	w10, w10, #27
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB48_4
.LBB48_3:                               //   in Loop: Header=BB48_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB48_33
.LBB48_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB48_5 Depth 2
                                        //     Child Loop BB48_9 Depth 2
                                        //     Child Loop BB48_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #24                        // =0x18
.LBB48_5:                               //   Parent Loop BB48_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-100]
	ldur	q2, [x10, #-20]
	ldur	q3, [x10, #-84]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-68]
	add	v2.4s, v3.4s, v2.4s
	ldur	q3, [x10, #-52]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #104
	add	v2.4s, v2.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #26
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB48_5
// %bb.6:                               //   in Loop: Header=BB48_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB48_13
// %bb.7:                               //   in Loop: Header=BB48_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB48_11
// %bb.8:                               //   in Loop: Header=BB48_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB48_9:                               //   Parent Loop BB48_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB48_9
// %bb.10:                              //   in Loop: Header=BB48_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB48_13
.LBB48_11:                              // %.preheader
                                        //   in Loop: Header=BB48_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB48_12:                              //   Parent Loop BB48_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB48_12
.LBB48_13:                              //   in Loop: Header=BB48_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB48_3
// %bb.14:                              //   in Loop: Header=BB48_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB48_3
.LBB48_15:
	cmp	w20, #0
	b.le	.LBB48_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB48_18
.LBB48_17:                              //   in Loop: Header=BB48_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB48_33
.LBB48_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB48_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB48_20
// %bb.19:                              //   in Loop: Header=BB48_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB48_25
.LBB48_20:                              //   in Loop: Header=BB48_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB48_23
// %bb.21:                              //   in Loop: Header=BB48_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB48_24
// %bb.22:                              //   in Loop: Header=BB48_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB48_23:                              //   in Loop: Header=BB48_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB48_24:                              //   in Loop: Header=BB48_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB48_27
.LBB48_25:                              // %.preheader3
                                        //   in Loop: Header=BB48_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB48_26:                              //   Parent Loop BB48_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB48_26
.LBB48_27:                              //   in Loop: Header=BB48_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB48_17
// %bb.28:                              //   in Loop: Header=BB48_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB48_17
.LBB48_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB48_31
.LBB48_30:                              //   in Loop: Header=BB48_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB48_33
.LBB48_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB48_30
// %bb.32:                              //   in Loop: Header=BB48_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB48_30
.LBB48_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB48_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB48_37
.LBB48_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB48_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB48_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB48_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end48:
	.size	_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end48-_Z29test_while_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB49_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #25
	movk	w14, #41666, lsl #16
	b.lt	.LBB49_15
// %bb.2:
	mov	w10, #34079                     // =0x851f
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #20971, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #25                        // =0x19
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w22, #29432                     // =0x72f8
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w20, #24
	lsr	x9, x9, #35
	add	x24, x21, #96
	movk	w22, #24515, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w25, w9, #25
	sub	w10, w10, #26
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB49_4
.LBB49_3:                               //   in Loop: Header=BB49_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB49_33
.LBB49_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB49_5 Depth 2
                                        //     Child Loop BB49_9 Depth 2
                                        //     Child Loop BB49_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB49_5:                               //   Parent Loop BB49_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #64]
	ldr	w12, [x24, x10, lsl #2]
	ldp	q2, q3, [x11]
	add	x10, x10, #25
	cmp	x10, x23
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldp	q2, q3, [x11, #32]
	add	x11, x11, #100
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w22
	b.lo	.LBB49_5
// %bb.6:                               //   in Loop: Header=BB49_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB49_13
// %bb.7:                               //   in Loop: Header=BB49_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB49_11
// %bb.8:                               //   in Loop: Header=BB49_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB49_9:                               //   Parent Loop BB49_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB49_9
// %bb.10:                              //   in Loop: Header=BB49_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB49_13
.LBB49_11:                              // %.preheader
                                        //   in Loop: Header=BB49_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB49_12:                              //   Parent Loop BB49_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB49_12
.LBB49_13:                              //   in Loop: Header=BB49_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB49_3
// %bb.14:                              //   in Loop: Header=BB49_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB49_3
.LBB49_15:
	cmp	w20, #0
	b.le	.LBB49_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB49_18
.LBB49_17:                              //   in Loop: Header=BB49_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB49_33
.LBB49_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB49_26 Depth 2
	cmp	w20, #7
	b.hi	.LBB49_20
// %bb.19:                              //   in Loop: Header=BB49_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB49_25
.LBB49_20:                              //   in Loop: Header=BB49_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB49_23
// %bb.21:                              //   in Loop: Header=BB49_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB49_24
// %bb.22:                              //   in Loop: Header=BB49_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB49_23:                              //   in Loop: Header=BB49_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB49_24:                              //   in Loop: Header=BB49_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB49_27
.LBB49_25:                              // %.preheader3
                                        //   in Loop: Header=BB49_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB49_26:                              //   Parent Loop BB49_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB49_26
.LBB49_27:                              //   in Loop: Header=BB49_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB49_17
// %bb.28:                              //   in Loop: Header=BB49_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB49_17
.LBB49_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB49_31
.LBB49_30:                              //   in Loop: Header=BB49_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB49_33
.LBB49_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB49_30
// %bb.32:                              //   in Loop: Header=BB49_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB49_30
.LBB49_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB49_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB49_37
.LBB49_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB49_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB49_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB49_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end49:
	.size	_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end49-_Z29test_while_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB50_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #24
	movk	w13, #41666, lsl #16
	b.lt	.LBB50_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w14, #46592                     // =0xb600
	mov	w26, #59712                     // =0xe940
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w22, w20, #23
	movk	w26, #41884, lsl #16
	lsr	x9, x9, #36
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #32]                   // 16-byte Folded Spill
	add	w9, w9, w9, lsl #1
	lsl	w9, w9, #3
	sub	w10, w20, w9
	add	w23, w9, #24
	sub	w10, w10, #25
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	and	x24, x10, #0x1fffffff8
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x9, x24, x23
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB50_4
.LBB50_3:                               //   in Loop: Header=BB50_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB50_32
.LBB50_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB50_5 Depth 2
                                        //     Child Loop BB50_9 Depth 2
                                        //     Child Loop BB50_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB50_5:                               //   Parent Loop BB50_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #64]
	add	x10, x10, #24
	ldp	q2, q3, [x11]
	cmp	x10, x22
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldp	q2, q3, [x11, #32]
	add	x11, x11, #96
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB50_5
// %bb.6:                               //   in Loop: Header=BB50_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB50_13
// %bb.7:                               //   in Loop: Header=BB50_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB50_11
// %bb.8:                               //   in Loop: Header=BB50_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x10, x24
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB50_9:                               //   Parent Loop BB50_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB50_9
// %bb.10:                              //   in Loop: Header=BB50_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB50_13
.LBB50_11:                              // %.preheader
                                        //   in Loop: Header=BB50_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB50_12:                              //   Parent Loop BB50_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB50_12
.LBB50_13:                              //   in Loop: Header=BB50_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB50_3
// %bb.14:                              //   in Loop: Header=BB50_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #32]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB50_3
.LBB50_15:
	cmp	w20, #0
	b.le	.LBB50_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB50_18
.LBB50_17:                              //   in Loop: Header=BB50_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB50_32
.LBB50_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB50_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB50_20
// %bb.19:                              //   in Loop: Header=BB50_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB50_24
.LBB50_20:                              //   in Loop: Header=BB50_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB50_22
// %bb.21:                              //   in Loop: Header=BB50_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB50_23
.LBB50_22:                              //   in Loop: Header=BB50_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
.LBB50_23:                              //   in Loop: Header=BB50_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB50_26
.LBB50_24:                              // %.preheader3
                                        //   in Loop: Header=BB50_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB50_25:                              //   Parent Loop BB50_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB50_25
.LBB50_26:                              //   in Loop: Header=BB50_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB50_17
// %bb.27:                              //   in Loop: Header=BB50_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB50_17
.LBB50_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB50_30
.LBB50_29:                              //   in Loop: Header=BB50_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB50_32
.LBB50_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB50_29
// %bb.31:                              //   in Loop: Header=BB50_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB50_29
.LBB50_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB50_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB50_36
.LBB50_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB50_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB50_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB50_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end50:
	.size	_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end50-_Z29test_while_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB51_32
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #23
	movk	w16, #41666, lsl #16
	b.lt	.LBB51_15
// %bb.2:
	mov	w10, #17097                     // =0x42c9
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #45590, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #23                        // =0x17
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w25, #24456                     // =0x5f88
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w23, w20, #22
	lsr	x9, x9, #36
	add	x24, x21, #88
	movk	w25, #59254, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w22, w9, #23
	sub	w10, w10, #24
	add	x9, x21, w22, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x22
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB51_4
.LBB51_3:                               //   in Loop: Header=BB51_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB51_32
.LBB51_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB51_5 Depth 2
                                        //     Child Loop BB51_9 Depth 2
                                        //     Child Loop BB51_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #20                        // =0x14
.LBB51_5:                               //   Parent Loop BB51_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-88]
	ldur	q2, [x10, #-40]
	ldur	q3, [x10, #-72]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-56]
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w14, [x10], #92
	add	w13, w13, w14
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #23
	cmp	x12, x23
	add	w9, w9, w25
	b.lo	.LBB51_5
// %bb.6:                               //   in Loop: Header=BB51_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB51_13
// %bb.7:                               //   in Loop: Header=BB51_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x22
	b.ls	.LBB51_11
// %bb.8:                               //   in Loop: Header=BB51_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB51_9:                               //   Parent Loop BB51_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB51_9
// %bb.10:                              //   in Loop: Header=BB51_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB51_13
.LBB51_11:                              // %.preheader
                                        //   in Loop: Header=BB51_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB51_12:                              //   Parent Loop BB51_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB51_12
.LBB51_13:                              //   in Loop: Header=BB51_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB51_3
// %bb.14:                              //   in Loop: Header=BB51_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB51_3
.LBB51_15:
	cmp	w20, #0
	b.le	.LBB51_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB51_18
.LBB51_17:                              //   in Loop: Header=BB51_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB51_32
.LBB51_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB51_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB51_20
// %bb.19:                              //   in Loop: Header=BB51_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB51_24
.LBB51_20:                              //   in Loop: Header=BB51_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB51_22
// %bb.21:                              //   in Loop: Header=BB51_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB51_23
.LBB51_22:                              //   in Loop: Header=BB51_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB51_23:                              //   in Loop: Header=BB51_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB51_26
.LBB51_24:                              // %.preheader3
                                        //   in Loop: Header=BB51_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB51_25:                              //   Parent Loop BB51_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB51_25
.LBB51_26:                              //   in Loop: Header=BB51_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB51_17
// %bb.27:                              //   in Loop: Header=BB51_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB51_17
.LBB51_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB51_30
.LBB51_29:                              //   in Loop: Header=BB51_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB51_32
.LBB51_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB51_29
// %bb.31:                              //   in Loop: Header=BB51_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB51_29
.LBB51_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB51_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB51_36
.LBB51_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB51_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB51_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB51_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end51:
	.size	_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end51-_Z29test_while_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB52_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #22
	movk	w15, #41666, lsl #16
	b.lt	.LBB52_15
// %bb.2:
	mov	w10, #35747                     // =0x8ba3
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #47662, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #22                        // =0x16
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w22, #54736                     // =0xd5d0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #21
	lsr	x9, x9, #36
	add	x24, x21, #84
	movk	w22, #11087, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w25, w9, #22
	sub	w10, w10, #23
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB52_4
.LBB52_3:                               //   in Loop: Header=BB52_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB52_32
.LBB52_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB52_5 Depth 2
                                        //     Child Loop BB52_9 Depth 2
                                        //     Child Loop BB52_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #20                        // =0x14
.LBB52_5:                               //   Parent Loop BB52_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-84]
	ldur	q2, [x10, #-36]
	ldur	q3, [x10, #-68]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-52]
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #88
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #22
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB52_5
// %bb.6:                               //   in Loop: Header=BB52_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB52_13
// %bb.7:                               //   in Loop: Header=BB52_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB52_11
// %bb.8:                               //   in Loop: Header=BB52_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB52_9:                               //   Parent Loop BB52_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB52_9
// %bb.10:                              //   in Loop: Header=BB52_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB52_13
.LBB52_11:                              // %.preheader
                                        //   in Loop: Header=BB52_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB52_12:                              //   Parent Loop BB52_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB52_12
.LBB52_13:                              //   in Loop: Header=BB52_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB52_3
// %bb.14:                              //   in Loop: Header=BB52_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB52_3
.LBB52_15:
	cmp	w20, #0
	b.le	.LBB52_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB52_18
.LBB52_17:                              //   in Loop: Header=BB52_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB52_32
.LBB52_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB52_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB52_20
// %bb.19:                              //   in Loop: Header=BB52_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB52_24
.LBB52_20:                              //   in Loop: Header=BB52_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB52_22
// %bb.21:                              //   in Loop: Header=BB52_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB52_23
.LBB52_22:                              //   in Loop: Header=BB52_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB52_23:                              //   in Loop: Header=BB52_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB52_26
.LBB52_24:                              // %.preheader3
                                        //   in Loop: Header=BB52_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB52_25:                              //   Parent Loop BB52_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB52_25
.LBB52_26:                              //   in Loop: Header=BB52_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB52_17
// %bb.27:                              //   in Loop: Header=BB52_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB52_17
.LBB52_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB52_30
.LBB52_29:                              //   in Loop: Header=BB52_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB52_32
.LBB52_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB52_29
// %bb.31:                              //   in Loop: Header=BB52_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB52_29
.LBB52_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB52_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB52_36
.LBB52_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB52_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB52_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB52_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end52:
	.size	_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end52-_Z29test_while_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB53_32
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #21
	movk	w14, #41666, lsl #16
	b.lt	.LBB53_15
// %bb.2:
	mov	w10, #24967                     // =0x6187
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #34328, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w22, #19480                     // =0x4c18
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w20, #20
	add	x24, x21, #80
	lsr	x10, x10, #32
	movk	w22, #28457, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #21                        // =0x15
	lsr	w9, w9, #4
	mul	w9, w9, w10
	sub	w10, w20, w9
	add	w25, w9, #21
	sub	w10, w10, #22
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB53_4
.LBB53_3:                               //   in Loop: Header=BB53_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB53_32
.LBB53_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB53_5 Depth 2
                                        //     Child Loop BB53_9 Depth 2
                                        //     Child Loop BB53_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB53_5:                               //   Parent Loop BB53_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q0, [x11, #48]
	ldr	w12, [x24, x10, lsl #2]
	ldp	q1, q2, [x11]
	add	x10, x10, #21
	cmp	x10, x23
	add	v0.4s, v1.4s, v0.4s
	ldr	q1, [x11, #32]
	add	v2.4s, v2.4s, v3.4s
	add	x11, x11, #84
	add	v0.4s, v0.4s, v1.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w22
	b.lo	.LBB53_5
// %bb.6:                               //   in Loop: Header=BB53_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB53_13
// %bb.7:                               //   in Loop: Header=BB53_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB53_11
// %bb.8:                               //   in Loop: Header=BB53_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB53_9:                               //   Parent Loop BB53_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB53_9
// %bb.10:                              //   in Loop: Header=BB53_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB53_13
.LBB53_11:                              // %.preheader
                                        //   in Loop: Header=BB53_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB53_12:                              //   Parent Loop BB53_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB53_12
.LBB53_13:                              //   in Loop: Header=BB53_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB53_3
// %bb.14:                              //   in Loop: Header=BB53_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB53_3
.LBB53_15:
	cmp	w20, #0
	b.le	.LBB53_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB53_18
.LBB53_17:                              //   in Loop: Header=BB53_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB53_32
.LBB53_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB53_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB53_20
// %bb.19:                              //   in Loop: Header=BB53_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB53_24
.LBB53_20:                              //   in Loop: Header=BB53_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB53_22
// %bb.21:                              //   in Loop: Header=BB53_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB53_23
.LBB53_22:                              //   in Loop: Header=BB53_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB53_23:                              //   in Loop: Header=BB53_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB53_26
.LBB53_24:                              // %.preheader3
                                        //   in Loop: Header=BB53_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB53_25:                              //   Parent Loop BB53_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB53_25
.LBB53_26:                              //   in Loop: Header=BB53_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB53_17
// %bb.27:                              //   in Loop: Header=BB53_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB53_17
.LBB53_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB53_30
.LBB53_29:                              //   in Loop: Header=BB53_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB53_32
.LBB53_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB53_29
// %bb.31:                              //   in Loop: Header=BB53_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB53_29
.LBB53_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB53_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB53_36
.LBB53_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB53_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB53_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB53_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end53:
	.size	_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end53-_Z29test_while_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN16while_loop_testsILi19EiE7do_testEPKiPKc,"axG",@progbits,_ZN16while_loop_testsILi19EiE7do_testEPKiPKc,comdat
	.weak	_ZN16while_loop_testsILi19EiE7do_testEPKiPKc // -- Begin function _ZN16while_loop_testsILi19EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN16while_loop_testsILi19EiE7do_testEPKiPKc,@function
_ZN16while_loop_testsILi19EiE7do_testEPKiPKc: // @_ZN16while_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN16while_loop_testsILi10EiE7do_testEPKiPKc
	adrp	x20, temp_string+1000
	add	x20, x20, :lo12:temp_string+1000
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
.Lfunc_end54:
	.size	_ZN16while_loop_testsILi19EiE7do_testEPKiPKc, .Lfunc_end54-_ZN16while_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB55_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #20
	movk	w13, #41666, lsl #16
	b.lt	.LBB55_15
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #52428, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w14, #46592                     // =0xb600
	mov	w26, #49760                     // =0xc260
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w22, w20, #19
	movk	w26, #45826, lsl #16
	lsr	x9, x9, #36
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #32]                   // 16-byte Folded Spill
	add	w9, w9, w9, lsl #2
	lsl	w9, w9, #2
	sub	w10, w20, w9
	add	w23, w9, #20
	sub	w10, w10, #21
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	and	x24, x10, #0x1fffffff8
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x9, x24, x23
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB55_4
.LBB55_3:                               //   in Loop: Header=BB55_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB55_32
.LBB55_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB55_5 Depth 2
                                        //     Child Loop BB55_9 Depth 2
                                        //     Child Loop BB55_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB55_5:                               //   Parent Loop BB55_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q0, [x11, #48]
	add	x10, x10, #20
	ldp	q1, q2, [x11]
	cmp	x10, x22
	add	v0.4s, v1.4s, v0.4s
	ldr	q1, [x11, #32]
	add	v2.4s, v2.4s, v3.4s
	add	x11, x11, #80
	add	v0.4s, v0.4s, v1.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB55_5
// %bb.6:                               //   in Loop: Header=BB55_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB55_13
// %bb.7:                               //   in Loop: Header=BB55_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB55_11
// %bb.8:                               //   in Loop: Header=BB55_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x10, x24
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB55_9:                               //   Parent Loop BB55_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB55_9
// %bb.10:                              //   in Loop: Header=BB55_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB55_13
.LBB55_11:                              // %.preheader
                                        //   in Loop: Header=BB55_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB55_12:                              //   Parent Loop BB55_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB55_12
.LBB55_13:                              //   in Loop: Header=BB55_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB55_3
// %bb.14:                              //   in Loop: Header=BB55_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #32]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB55_3
.LBB55_15:
	cmp	w20, #0
	b.le	.LBB55_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB55_18
.LBB55_17:                              //   in Loop: Header=BB55_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB55_32
.LBB55_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB55_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB55_20
// %bb.19:                              //   in Loop: Header=BB55_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB55_24
.LBB55_20:                              //   in Loop: Header=BB55_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB55_22
// %bb.21:                              //   in Loop: Header=BB55_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB55_23
.LBB55_22:                              //   in Loop: Header=BB55_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
.LBB55_23:                              //   in Loop: Header=BB55_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB55_26
.LBB55_24:                              // %.preheader3
                                        //   in Loop: Header=BB55_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB55_25:                              //   Parent Loop BB55_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB55_25
.LBB55_26:                              //   in Loop: Header=BB55_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB55_17
// %bb.27:                              //   in Loop: Header=BB55_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB55_17
.LBB55_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB55_30
.LBB55_29:                              //   in Loop: Header=BB55_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB55_32
.LBB55_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB55_29
// %bb.31:                              //   in Loop: Header=BB55_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB55_29
.LBB55_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB55_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB55_36
.LBB55_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB55_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB55_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB55_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end55:
	.size	_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end55-_Z29test_while_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB56_32
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #19
	movk	w16, #41666, lsl #16
	b.lt	.LBB56_15
// %bb.2:
	mov	w10, #27595                     // =0x6bcb
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #44840, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w22, #14504                     // =0x38a8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w23, w20, #18
	add	x24, x21, #72
	lsr	x10, x10, #32
	movk	w22, #63196, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #19                        // =0x13
	lsr	w9, w9, #4
	mul	w9, w9, w10
	sub	w10, w20, w9
	add	w25, w9, #19
	sub	w10, w10, #20
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB56_4
.LBB56_3:                               //   in Loop: Header=BB56_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB56_32
.LBB56_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB56_5 Depth 2
                                        //     Child Loop BB56_9 Depth 2
                                        //     Child Loop BB56_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #16                        // =0x10
.LBB56_5:                               //   Parent Loop BB56_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-40]
	ldur	q1, [x10, #-72]
	ldur	q2, [x10, #-24]
	ldur	q3, [x10, #-56]
	add	v0.4s, v1.4s, v0.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-8]
	ldr	w14, [x10], #76
	add	v0.4s, v0.4s, v2.4s
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #19
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB56_5
// %bb.6:                               //   in Loop: Header=BB56_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB56_13
// %bb.7:                               //   in Loop: Header=BB56_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB56_11
// %bb.8:                               //   in Loop: Header=BB56_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB56_9:                               //   Parent Loop BB56_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB56_9
// %bb.10:                              //   in Loop: Header=BB56_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB56_13
.LBB56_11:                              // %.preheader
                                        //   in Loop: Header=BB56_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB56_12:                              //   Parent Loop BB56_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB56_12
.LBB56_13:                              //   in Loop: Header=BB56_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB56_3
// %bb.14:                              //   in Loop: Header=BB56_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB56_3
.LBB56_15:
	cmp	w20, #0
	b.le	.LBB56_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB56_18
.LBB56_17:                              //   in Loop: Header=BB56_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB56_32
.LBB56_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB56_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB56_20
// %bb.19:                              //   in Loop: Header=BB56_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB56_24
.LBB56_20:                              //   in Loop: Header=BB56_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB56_22
// %bb.21:                              //   in Loop: Header=BB56_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB56_23
.LBB56_22:                              //   in Loop: Header=BB56_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB56_23:                              //   in Loop: Header=BB56_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB56_26
.LBB56_24:                              // %.preheader3
                                        //   in Loop: Header=BB56_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB56_25:                              //   Parent Loop BB56_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB56_25
.LBB56_26:                              //   in Loop: Header=BB56_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB56_17
// %bb.27:                              //   in Loop: Header=BB56_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB56_17
.LBB56_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB56_30
.LBB56_29:                              //   in Loop: Header=BB56_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB56_32
.LBB56_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB56_29
// %bb.31:                              //   in Loop: Header=BB56_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB56_29
.LBB56_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB56_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB56_36
.LBB56_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB56_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB56_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB56_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end56:
	.size	_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end56-_Z29test_while_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB57_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #18
	movk	w15, #41666, lsl #16
	b.lt	.LBB57_15
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #14563, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w22, #44784                     // =0xaef0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #17
	add	x24, x21, #68
	lsr	x9, x9, #34
	movk	w22, #15029, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #3
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	lsl	w9, w9, #1
	sub	w10, w20, w9
	add	w25, w9, #18
	sub	w10, w10, #19
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB57_4
.LBB57_3:                               //   in Loop: Header=BB57_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB57_32
.LBB57_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB57_5 Depth 2
                                        //     Child Loop BB57_9 Depth 2
                                        //     Child Loop BB57_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #16                        // =0x10
.LBB57_5:                               //   Parent Loop BB57_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-68]
	ldur	q2, [x10, #-20]
	ldur	q3, [x10, #-52]
	add	v0.4s, v1.4s, v0.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	x10, x10, #72
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #18
	cmp	x12, x23
	add	w9, w9, w22
	b.lo	.LBB57_5
// %bb.6:                               //   in Loop: Header=BB57_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB57_13
// %bb.7:                               //   in Loop: Header=BB57_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB57_11
// %bb.8:                               //   in Loop: Header=BB57_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB57_9:                               //   Parent Loop BB57_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB57_9
// %bb.10:                              //   in Loop: Header=BB57_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB57_13
.LBB57_11:                              // %.preheader
                                        //   in Loop: Header=BB57_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB57_12:                              //   Parent Loop BB57_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB57_12
.LBB57_13:                              //   in Loop: Header=BB57_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB57_3
// %bb.14:                              //   in Loop: Header=BB57_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB57_3
.LBB57_15:
	cmp	w20, #0
	b.le	.LBB57_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB57_18
.LBB57_17:                              //   in Loop: Header=BB57_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB57_32
.LBB57_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB57_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB57_20
// %bb.19:                              //   in Loop: Header=BB57_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB57_24
.LBB57_20:                              //   in Loop: Header=BB57_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB57_22
// %bb.21:                              //   in Loop: Header=BB57_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB57_23
.LBB57_22:                              //   in Loop: Header=BB57_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB57_23:                              //   in Loop: Header=BB57_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB57_26
.LBB57_24:                              // %.preheader3
                                        //   in Loop: Header=BB57_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB57_25:                              //   Parent Loop BB57_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB57_25
.LBB57_26:                              //   in Loop: Header=BB57_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB57_17
// %bb.27:                              //   in Loop: Header=BB57_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB57_17
.LBB57_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB57_30
.LBB57_29:                              //   in Loop: Header=BB57_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB57_32
.LBB57_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB57_29
// %bb.31:                              //   in Loop: Header=BB57_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB57_29
.LBB57_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB57_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB57_36
.LBB57_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB57_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB57_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB57_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end57:
	.size	_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end57-_Z29test_while_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB58_32
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #17
	movk	w14, #41666, lsl #16
	b.lt	.LBB58_15
// %bb.2:
	mov	w10, #61681                     // =0xf0f1
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #61680, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w22, #9528                      // =0x2538
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w20, #16
	add	x24, x21, #64
	lsr	x9, x9, #36
	movk	w22, #32399, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #4
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w25, w9, #17
	sub	w10, w10, #18
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x25
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB58_4
.LBB58_3:                               //   in Loop: Header=BB58_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB58_32
.LBB58_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB58_5 Depth 2
                                        //     Child Loop BB58_9 Depth 2
                                        //     Child Loop BB58_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB58_5:                               //   Parent Loop BB58_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #32]
	ldr	w12, [x24, x10, lsl #2]
	ldp	q2, q3, [x11]
	add	x10, x10, #17
	cmp	x10, x23
	add	x11, x11, #68
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w22
	b.lo	.LBB58_5
// %bb.6:                               //   in Loop: Header=BB58_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB58_13
// %bb.7:                               //   in Loop: Header=BB58_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x25
	b.ls	.LBB58_11
// %bb.8:                               //   in Loop: Header=BB58_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB58_9:                               //   Parent Loop BB58_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB58_9
// %bb.10:                              //   in Loop: Header=BB58_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB58_13
.LBB58_11:                              // %.preheader
                                        //   in Loop: Header=BB58_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB58_12:                              //   Parent Loop BB58_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB58_12
.LBB58_13:                              //   in Loop: Header=BB58_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB58_3
// %bb.14:                              //   in Loop: Header=BB58_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB58_3
.LBB58_15:
	cmp	w20, #0
	b.le	.LBB58_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB58_18
.LBB58_17:                              //   in Loop: Header=BB58_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB58_32
.LBB58_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB58_25 Depth 2
	cmp	w20, #7
	b.hi	.LBB58_20
// %bb.19:                              //   in Loop: Header=BB58_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB58_24
.LBB58_20:                              //   in Loop: Header=BB58_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB58_22
// %bb.21:                              //   in Loop: Header=BB58_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB58_23
.LBB58_22:                              //   in Loop: Header=BB58_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB58_23:                              //   in Loop: Header=BB58_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB58_26
.LBB58_24:                              // %.preheader3
                                        //   in Loop: Header=BB58_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB58_25:                              //   Parent Loop BB58_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB58_25
.LBB58_26:                              //   in Loop: Header=BB58_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB58_17
// %bb.27:                              //   in Loop: Header=BB58_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB58_17
.LBB58_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB58_30
.LBB58_29:                              //   in Loop: Header=BB58_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB58_32
.LBB58_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB58_29
// %bb.31:                              //   in Loop: Header=BB58_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB58_29
.LBB58_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB58_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB58_36
.LBB58_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB58_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB58_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB58_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end58:
	.size	_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end58-_Z29test_while_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB59_26
// %bb.1:
	mov	w26, #58432                     // =0xe440
	subs	w9, w21, #16
	movk	w26, #41666, lsl #16
	b.lt	.LBB59_15
// %bb.2:
	and	w9, w9, #0xfffffff0
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	sub	w10, w21, w9
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	add	w22, w9, #16
	sub	w10, w10, #17
	dup	v4.4s, w19
	add	x9, x20, w22, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	dup	v5.4s, w28
	mov	w13, #46592                     // =0xb600
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	mov	w23, #39808                     // =0x9b80
	mov	w27, wzr
	movk	w13, #46159, lsl #16
	sub	w25, w21, #15
	movk	w23, #49768, lsl #16
	add	x11, x9, #16
	add	x9, x10, x22
	adrp	x24, init_value
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB59_4
.LBB59_3:                               //   in Loop: Header=BB59_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB59_26
.LBB59_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB59_5 Depth 2
                                        //     Child Loop BB59_9 Depth 2
                                        //     Child Loop BB59_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB59_5:                               //   Parent Loop BB59_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #32]
	add	x10, x10, #16
	ldp	q2, q3, [x11], #64
	cmp	x10, x25
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w23
	b.lo	.LBB59_5
// %bb.6:                               //   in Loop: Header=BB59_4 Depth=1
	cmp	w22, w21
	b.ge	.LBB59_13
// %bb.7:                               //   in Loop: Header=BB59_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x22
	b.ls	.LBB59_11
// %bb.8:                               //   in Loop: Header=BB59_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB59_9:                               //   Parent Loop BB59_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB59_9
// %bb.10:                              //   in Loop: Header=BB59_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB59_13
.LBB59_11:                              // %.preheader
                                        //   in Loop: Header=BB59_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB59_12:                              //   Parent Loop BB59_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB59_12
.LBB59_13:                              //   in Loop: Header=BB59_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w13
	cmp	w9, w10
	b.eq	.LBB59_3
// %bb.14:                              //   in Loop: Header=BB59_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w13, #46592                     // =0xb600
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #46159, lsl #16
	b	.LBB59_3
.LBB59_15:
	cmp	w21, #0
	b.le	.LBB59_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x27, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB59_18
.LBB59_17:                              //   in Loop: Header=BB59_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB59_26
.LBB59_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB59_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB59_19:                              //   Parent Loop BB59_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB59_19
// %bb.20:                              //   in Loop: Header=BB59_18 Depth=1
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w23
	cmp	w9, w10
	b.eq	.LBB59_17
// %bb.21:                              //   in Loop: Header=BB59_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB59_17
.LBB59_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB59_24
.LBB59_23:                              //   in Loop: Header=BB59_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB59_26
.LBB59_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w26
	cmp	w9, w22
	b.eq	.LBB59_23
// %bb.25:                              //   in Loop: Header=BB59_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB59_23
.LBB59_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB59_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB59_30
.LBB59_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB59_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB59_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB59_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end59:
	.size	_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end59-_Z29test_while_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB60_26
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w21, #15
	movk	w16, #41666, lsl #16
	b.lt	.LBB60_15
// %bb.2:
	mov	w10, #34953                     // =0x8889
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #34952, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w26, #4552                      // =0x11c8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w21, #14
	add	x24, x20, #56
	lsr	x9, x9, #35
	movk	w26, #1602, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	lsl	w10, w9, #4
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w9, w10, w9
	sub	w10, w21, w9
	add	w23, w9, #15
	sub	w10, w10, #16
	add	x9, x20, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB60_4
.LBB60_3:                               //   in Loop: Header=BB60_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB60_26
.LBB60_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB60_5 Depth 2
                                        //     Child Loop BB60_9 Depth 2
                                        //     Child Loop BB60_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #12                        // =0xc
.LBB60_5:                               //   Parent Loop BB60_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-56]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-40]
	ldr	w14, [x10], #60
	add	v0.4s, v0.4s, v1.4s
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #15
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB60_5
// %bb.6:                               //   in Loop: Header=BB60_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB60_13
// %bb.7:                               //   in Loop: Header=BB60_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB60_11
// %bb.8:                               //   in Loop: Header=BB60_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB60_9:                               //   Parent Loop BB60_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB60_9
// %bb.10:                              //   in Loop: Header=BB60_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB60_13
.LBB60_11:                              // %.preheader
                                        //   in Loop: Header=BB60_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB60_12:                              //   Parent Loop BB60_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB60_12
.LBB60_13:                              //   in Loop: Header=BB60_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB60_3
// %bb.14:                              //   in Loop: Header=BB60_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB60_3
.LBB60_15:
	cmp	w21, #0
	b.le	.LBB60_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB60_18
.LBB60_17:                              //   in Loop: Header=BB60_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB60_26
.LBB60_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB60_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB60_19:                              //   Parent Loop BB60_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB60_19
// %bb.20:                              //   in Loop: Header=BB60_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w23
	cmp	w9, w10
	b.eq	.LBB60_17
// %bb.21:                              //   in Loop: Header=BB60_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB60_17
.LBB60_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB60_24
.LBB60_23:                              //   in Loop: Header=BB60_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB60_26
.LBB60_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB60_23
// %bb.25:                              //   in Loop: Header=BB60_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB60_23
.LBB60_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB60_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB60_30
.LBB60_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB60_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB60_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB60_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end60:
	.size	_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end60-_Z29test_while_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB61_26
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w21, #14
	movk	w15, #41666, lsl #16
	b.lt	.LBB61_15
// %bb.2:
	lsr	w9, w9, #1
	mov	w10, #9363                      // =0x2493
	mov	w28, #35256                     // =0x89b8
	movk	w10, #37449, lsl #16
	mov	w19, #38821                     // =0x97a5
	movk	w28, #48166, lsl #16
	umull	x9, w9, w10
	movk	w19, #4117, lsl #16
	dup	v5.4s, w28
	dup	v4.4s, w19
	mov	w16, #46592                     // =0xb600
	mov	w26, #34832                     // =0x8810
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w22, w21, #13
	lsr	x9, x9, #34
	add	x24, x20, #52
	movk	w26, #18971, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	lsl	w10, w9, #4
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w9, w10, w9, lsl #1
	sub	w10, w21, w9
	add	w23, w9, #14
	sub	w10, w10, #15
	add	x9, x20, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB61_4
.LBB61_3:                               //   in Loop: Header=BB61_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB61_26
.LBB61_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB61_5 Depth 2
                                        //     Child Loop BB61_9 Depth 2
                                        //     Child Loop BB61_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #12                        // =0xc
.LBB61_5:                               //   Parent Loop BB61_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-52]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-36]
	add	x10, x10, #56
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #14
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB61_5
// %bb.6:                               //   in Loop: Header=BB61_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB61_13
// %bb.7:                               //   in Loop: Header=BB61_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB61_11
// %bb.8:                               //   in Loop: Header=BB61_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB61_9:                               //   Parent Loop BB61_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB61_9
// %bb.10:                              //   in Loop: Header=BB61_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB61_13
.LBB61_11:                              // %.preheader
                                        //   in Loop: Header=BB61_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB61_12:                              //   Parent Loop BB61_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB61_12
.LBB61_13:                              //   in Loop: Header=BB61_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB61_3
// %bb.14:                              //   in Loop: Header=BB61_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB61_3
.LBB61_15:
	cmp	w21, #0
	b.le	.LBB61_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB61_18
.LBB61_17:                              //   in Loop: Header=BB61_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB61_26
.LBB61_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB61_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB61_19:                              //   Parent Loop BB61_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB61_19
// %bb.20:                              //   in Loop: Header=BB61_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w23
	cmp	w9, w10
	b.eq	.LBB61_17
// %bb.21:                              //   in Loop: Header=BB61_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB61_17
.LBB61_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB61_24
.LBB61_23:                              //   in Loop: Header=BB61_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB61_26
.LBB61_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB61_23
// %bb.25:                              //   in Loop: Header=BB61_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB61_23
.LBB61_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB61_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB61_30
.LBB61_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB61_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB61_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB61_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end61:
	.size	_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end61-_Z29test_while_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB62_26
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w21, #13
	movk	w14, #41666, lsl #16
	b.lt	.LBB62_15
// %bb.2:
	mov	w10, #60495                     // =0xec4f
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #20164, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #13                        // =0xd
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w26, #65112                     // =0xfe58
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w22, w21, #12
	lsr	x9, x9, #34
	add	x24, x20, #48
	movk	w26, #36340, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w21, w9
	add	w23, w9, #13
	sub	w10, w10, #14
	add	x9, x20, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB62_4
.LBB62_3:                               //   in Loop: Header=BB62_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB62_26
.LBB62_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB62_5 Depth 2
                                        //     Child Loop BB62_9 Depth 2
                                        //     Child Loop BB62_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB62_5:                               //   Parent Loop BB62_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q1, [x11]
	ldr	q0, [x11, #32]
	ldr	w12, [x24, x10, lsl #2]
	add	x10, x10, #13
	add	x11, x11, #52
	cmp	x10, x22
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB62_5
// %bb.6:                               //   in Loop: Header=BB62_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB62_13
// %bb.7:                               //   in Loop: Header=BB62_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB62_11
// %bb.8:                               //   in Loop: Header=BB62_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB62_9:                               //   Parent Loop BB62_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB62_9
// %bb.10:                              //   in Loop: Header=BB62_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB62_13
.LBB62_11:                              // %.preheader
                                        //   in Loop: Header=BB62_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB62_12:                              //   Parent Loop BB62_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB62_12
.LBB62_13:                              //   in Loop: Header=BB62_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB62_3
// %bb.14:                              //   in Loop: Header=BB62_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB62_3
.LBB62_15:
	cmp	w21, #0
	b.le	.LBB62_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB62_18
.LBB62_17:                              //   in Loop: Header=BB62_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB62_26
.LBB62_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB62_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB62_19:                              //   Parent Loop BB62_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB62_19
// %bb.20:                              //   in Loop: Header=BB62_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w23
	cmp	w9, w10
	b.eq	.LBB62_17
// %bb.21:                              //   in Loop: Header=BB62_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB62_17
.LBB62_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB62_24
.LBB62_23:                              //   in Loop: Header=BB62_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB62_26
.LBB62_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB62_23
// %bb.25:                              //   in Loop: Header=BB62_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB62_23
.LBB62_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB62_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB62_30
.LBB62_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB62_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB62_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB62_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end62:
	.size	_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end62-_Z29test_while_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB63_26
// %bb.1:
	mov	w26, #58432                     // =0xe440
	subs	w9, w21, #12
	movk	w26, #41666, lsl #16
	b.lt	.LBB63_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w13, #46592                     // =0xb600
	mov	w23, #29856                     // =0x74a0
	mov	w27, wzr
	movk	w13, #46159, lsl #16
	sub	w25, w21, #11
	movk	w23, #53710, lsl #16
	lsr	x9, x9, #35
	adrp	x14, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #32]                   // 16-byte Folded Spill
	add	w9, w9, w9, lsl #1
	lsl	w9, w9, #2
	sub	w10, w21, w9
	add	w22, w9, #12
	sub	w10, w10, #13
	add	x9, x20, w22, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	and	x24, x10, #0x1fffffff8
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x9, x24, x22
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB63_4
.LBB63_3:                               //   in Loop: Header=BB63_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB63_26
.LBB63_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB63_5 Depth 2
                                        //     Child Loop BB63_9 Depth 2
                                        //     Child Loop BB63_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB63_5:                               //   Parent Loop BB63_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11, #32]
	add	x10, x10, #12
	ldp	q2, q1, [x11], #48
	cmp	x10, x25
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w23
	b.lo	.LBB63_5
// %bb.6:                               //   in Loop: Header=BB63_4 Depth=1
	cmp	w22, w21
	b.ge	.LBB63_13
// %bb.7:                               //   in Loop: Header=BB63_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x22
	b.ls	.LBB63_11
// %bb.8:                               //   in Loop: Header=BB63_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x10, x24
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB63_9:                               //   Parent Loop BB63_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB63_9
// %bb.10:                              //   in Loop: Header=BB63_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB63_13
.LBB63_11:                              // %.preheader
                                        //   in Loop: Header=BB63_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB63_12:                              //   Parent Loop BB63_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB63_12
.LBB63_13:                              //   in Loop: Header=BB63_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w13
	cmp	w9, w10
	b.eq	.LBB63_3
// %bb.14:                              //   in Loop: Header=BB63_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x26, x14
	bl	printf
	adrp	x8, iterations
	mov	x14, x26
	mov	w26, #58432                     // =0xe440
	ldr	q5, [sp, #32]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w13, #46592                     // =0xb600
	ldr	w8, [x8, :lo12:iterations]
	movk	w26, #41666, lsl #16
	movk	w13, #46159, lsl #16
	b	.LBB63_3
.LBB63_15:
	cmp	w21, #0
	b.le	.LBB63_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x27, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB63_18
.LBB63_17:                              //   in Loop: Header=BB63_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB63_26
.LBB63_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB63_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB63_19:                              //   Parent Loop BB63_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB63_19
// %bb.20:                              //   in Loop: Header=BB63_18 Depth=1
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w23
	cmp	w9, w10
	b.eq	.LBB63_17
// %bb.21:                              //   in Loop: Header=BB63_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB63_17
.LBB63_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB63_24
.LBB63_23:                              //   in Loop: Header=BB63_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB63_26
.LBB63_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w26
	cmp	w9, w22
	b.eq	.LBB63_23
// %bb.25:                              //   in Loop: Header=BB63_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB63_23
.LBB63_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB63_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB63_30
.LBB63_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB63_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB63_30:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB63_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end63:
	.size	_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end63-_Z29test_while_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN16while_loop_testsILi10EiE7do_testEPKiPKc,"axG",@progbits,_ZN16while_loop_testsILi10EiE7do_testEPKiPKc,comdat
	.weak	_ZN16while_loop_testsILi10EiE7do_testEPKiPKc // -- Begin function _ZN16while_loop_testsILi10EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN16while_loop_testsILi10EiE7do_testEPKiPKc,@function
_ZN16while_loop_testsILi10EiE7do_testEPKiPKc: // @_ZN16while_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x20, temp_string
	add	x20, x20, :lo12:temp_string
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	mov	x19, x0
	bl	_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
	add	x2, x20, #900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
.Lfunc_end64:
	.size	_ZN16while_loop_testsILi10EiE7do_testEPKiPKc, .Lfunc_end64-_ZN16while_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB65_26
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w21, #11
	movk	w16, #41666, lsl #16
	b.lt	.LBB65_15
// %bb.2:
	mov	w10, #35747                     // =0x8ba3
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #47662, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #11                        // =0xb
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w26, #60136                     // =0xeae8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w21, #10
	lsr	x9, x9, #35
	add	x24, x20, #40
	movk	w26, #5543, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	mul	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w21, w9
	add	w23, w9, #11
	sub	w10, w10, #12
	add	x9, x20, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB65_4
.LBB65_3:                               //   in Loop: Header=BB65_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB65_26
.LBB65_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB65_5 Depth 2
                                        //     Child Loop BB65_9 Depth 2
                                        //     Child Loop BB65_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #8                         // =0x8
.LBB65_5:                               //   Parent Loop BB65_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-40]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v1.4s, v0.4s
	ldr	w14, [x10], #44
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #11
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB65_5
// %bb.6:                               //   in Loop: Header=BB65_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB65_13
// %bb.7:                               //   in Loop: Header=BB65_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB65_11
// %bb.8:                               //   in Loop: Header=BB65_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB65_9:                               //   Parent Loop BB65_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB65_9
// %bb.10:                              //   in Loop: Header=BB65_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB65_13
.LBB65_11:                              // %.preheader
                                        //   in Loop: Header=BB65_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB65_12:                              //   Parent Loop BB65_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB65_12
.LBB65_13:                              //   in Loop: Header=BB65_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB65_3
// %bb.14:                              //   in Loop: Header=BB65_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB65_3
.LBB65_15:
	cmp	w21, #0
	b.le	.LBB65_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB65_18
.LBB65_17:                              //   in Loop: Header=BB65_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB65_26
.LBB65_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB65_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB65_19:                              //   Parent Loop BB65_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB65_19
// %bb.20:                              //   in Loop: Header=BB65_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w23
	cmp	w9, w10
	b.eq	.LBB65_17
// %bb.21:                              //   in Loop: Header=BB65_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB65_17
.LBB65_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB65_24
.LBB65_23:                              //   in Loop: Header=BB65_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB65_26
.LBB65_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB65_23
// %bb.25:                              //   in Loop: Header=BB65_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB65_23
.LBB65_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB65_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB65_30
.LBB65_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB65_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB65_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB65_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end65:
	.size	_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end65-_Z29test_while_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB66_26
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w21, #10
	movk	w15, #41666, lsl #16
	b.lt	.LBB66_15
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #52428, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w26, #24880                     // =0x6130
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w22, w21, #9
	add	x24, x20, #36
	lsr	x9, x9, #35
	movk	w26, #22913, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #2
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	lsl	w9, w9, #1
	sub	w10, w21, w9
	add	w23, w9, #10
	sub	w10, w10, #11
	add	x9, x20, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB66_4
.LBB66_3:                               //   in Loop: Header=BB66_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB66_26
.LBB66_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB66_5 Depth 2
                                        //     Child Loop BB66_9 Depth 2
                                        //     Child Loop BB66_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #8                         // =0x8
.LBB66_5:                               //   Parent Loop BB66_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-36]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v1.4s, v0.4s
	add	x10, x10, #40
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #10
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB66_5
// %bb.6:                               //   in Loop: Header=BB66_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB66_13
// %bb.7:                               //   in Loop: Header=BB66_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB66_11
// %bb.8:                               //   in Loop: Header=BB66_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB66_9:                               //   Parent Loop BB66_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB66_9
// %bb.10:                              //   in Loop: Header=BB66_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB66_13
.LBB66_11:                              // %.preheader
                                        //   in Loop: Header=BB66_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB66_12:                              //   Parent Loop BB66_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w21, w10
	b.gt	.LBB66_12
.LBB66_13:                              //   in Loop: Header=BB66_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB66_3
// %bb.14:                              //   in Loop: Header=BB66_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB66_3
.LBB66_15:
	cmp	w21, #0
	b.le	.LBB66_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB66_18
.LBB66_17:                              //   in Loop: Header=BB66_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB66_26
.LBB66_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB66_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB66_19:                              //   Parent Loop BB66_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB66_19
// %bb.20:                              //   in Loop: Header=BB66_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w23
	cmp	w9, w10
	b.eq	.LBB66_17
// %bb.21:                              //   in Loop: Header=BB66_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB66_17
.LBB66_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB66_24
.LBB66_23:                              //   in Loop: Header=BB66_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB66_26
.LBB66_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB66_23
// %bb.25:                              //   in Loop: Header=BB66_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB66_23
.LBB66_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB66_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB66_30
.LBB66_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB66_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB66_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB66_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end66:
	.size	_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end66-_Z29test_while_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB67_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #9
	movk	w14, #41666, lsl #16
	b.lt	.LBB67_15
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #14563, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w25, #55160                     // =0xd778
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w20, #8
	add	x24, x21, #32
	lsr	x9, x9, #33
	movk	w25, #40282, lsl #16
	adrp	x26, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #3
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w22, w9, #9
	sub	w10, w10, #10
	add	x9, x21, w22, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x22
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB67_4
.LBB67_3:                               //   in Loop: Header=BB67_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB67_33
.LBB67_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB67_5 Depth 2
                                        //     Child Loop BB67_9 Depth 2
                                        //     Child Loop BB67_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB67_5:                               //   Parent Loop BB67_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11]
	add	x11, x11, #36
	ldr	w12, [x24, x10, lsl #2]
	add	x10, x10, #9
	cmp	x10, x23
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w25
	b.lo	.LBB67_5
// %bb.6:                               //   in Loop: Header=BB67_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB67_13
// %bb.7:                               //   in Loop: Header=BB67_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x22
	b.ls	.LBB67_11
// %bb.8:                               //   in Loop: Header=BB67_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB67_9:                               //   Parent Loop BB67_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB67_9
// %bb.10:                              //   in Loop: Header=BB67_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB67_13
.LBB67_11:                              // %.preheader
                                        //   in Loop: Header=BB67_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB67_12:                              //   Parent Loop BB67_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB67_12
.LBB67_13:                              //   in Loop: Header=BB67_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB67_3
// %bb.14:                              //   in Loop: Header=BB67_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB67_3
.LBB67_15:
	cmp	w20, #0
	b.le	.LBB67_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB67_18
.LBB67_17:                              //   in Loop: Header=BB67_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB67_33
.LBB67_18:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB67_20
// %bb.19:                              //   in Loop: Header=BB67_18 Depth=1
	add	w9, w9, w23
	b	.LBB67_27
.LBB67_20:                              //   in Loop: Header=BB67_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB67_27
// %bb.21:                              //   in Loop: Header=BB67_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB67_27
// %bb.22:                              //   in Loop: Header=BB67_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB67_27
// %bb.23:                              //   in Loop: Header=BB67_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB67_27
// %bb.24:                              //   in Loop: Header=BB67_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	cmp	w20, #6
	madd	w9, w10, w25, w9
	b.eq	.LBB67_27
// %bb.25:                              //   in Loop: Header=BB67_18 Depth=1
	ldr	w10, [x21, #24]
	add	w9, w9, w23
	cmp	w20, #7
	madd	w9, w10, w25, w9
	b.eq	.LBB67_27
// %bb.26:                              //   in Loop: Header=BB67_18 Depth=1
	ldr	w10, [x21, #28]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB67_27:                              //   in Loop: Header=BB67_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w24
	cmp	w9, w10
	b.eq	.LBB67_17
// %bb.28:                              //   in Loop: Header=BB67_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB67_17
.LBB67_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB67_31
.LBB67_30:                              //   in Loop: Header=BB67_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB67_33
.LBB67_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB67_30
// %bb.32:                              //   in Loop: Header=BB67_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB67_30
.LBB67_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB67_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB67_37
.LBB67_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB67_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB67_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB67_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end67:
	.size	_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end67-_Z29test_while_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB68_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #8
	movk	w13, #41666, lsl #16
	b.lt	.LBB68_15
// %bb.2:
	and	w9, w9, #0xfffffff8
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	sub	w10, w20, w9
	add	w23, w9, #8
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	sub	w10, w10, #9
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w14, #46592                     // =0xb600
	and	x24, x10, #0x1fffffff8
	mov	w26, #19904                     // =0x4dc0
	add	x9, x9, #16
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w25, w20, #7
	movk	w26, #57652, lsl #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x9, x24, x23
	adrp	x22, init_value
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB68_4
.LBB68_3:                               //   in Loop: Header=BB68_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB68_32
.LBB68_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB68_5 Depth 2
                                        //     Child Loop BB68_9 Depth 2
                                        //     Child Loop BB68_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB68_5:                               //   Parent Loop BB68_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11], #32
	add	x10, x10, #8
	cmp	x10, x25
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB68_5
// %bb.6:                               //   in Loop: Header=BB68_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB68_13
// %bb.7:                               //   in Loop: Header=BB68_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB68_11
// %bb.8:                               //   in Loop: Header=BB68_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x10, x24
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB68_9:                               //   Parent Loop BB68_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB68_9
// %bb.10:                              //   in Loop: Header=BB68_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x24
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB68_13
.LBB68_11:                              // %.preheader
                                        //   in Loop: Header=BB68_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB68_12:                              //   Parent Loop BB68_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB68_12
.LBB68_13:                              //   in Loop: Header=BB68_4 Depth=1
	ldr	d0, [x22, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB68_3
// %bb.14:                              //   in Loop: Header=BB68_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #32]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB68_3
.LBB68_15:
	cmp	w20, #0
	b.le	.LBB68_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB68_18
.LBB68_17:                              //   in Loop: Header=BB68_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB68_32
.LBB68_18:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB68_20
// %bb.19:                              //   in Loop: Header=BB68_18 Depth=1
	add	w9, w9, w23
	b	.LBB68_26
.LBB68_20:                              //   in Loop: Header=BB68_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB68_26
// %bb.21:                              //   in Loop: Header=BB68_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB68_26
// %bb.22:                              //   in Loop: Header=BB68_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB68_26
// %bb.23:                              //   in Loop: Header=BB68_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB68_26
// %bb.24:                              //   in Loop: Header=BB68_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	cmp	w20, #6
	madd	w9, w10, w25, w9
	b.eq	.LBB68_26
// %bb.25:                              //   in Loop: Header=BB68_18 Depth=1
	ldr	w10, [x21, #24]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB68_26:                              //   in Loop: Header=BB68_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w24
	cmp	w9, w10
	b.eq	.LBB68_17
// %bb.27:                              //   in Loop: Header=BB68_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB68_17
.LBB68_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB68_30
.LBB68_29:                              //   in Loop: Header=BB68_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB68_32
.LBB68_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB68_29
// %bb.31:                              //   in Loop: Header=BB68_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB68_29
.LBB68_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB68_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB68_36
.LBB68_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB68_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB68_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB68_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end68:
	.size	_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end68-_Z29test_while_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB69_31
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #7
	movk	w16, #41666, lsl #16
	b.lt	.LBB69_15
// %bb.2:
	mov	w10, #18725                     // =0x4925
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #9362, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w26, #50184                     // =0xc408
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w20, #6
	add	x24, x21, #24
	lsr	x10, x10, #32
	movk	w26, #9485, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	lsr	w9, w9, #2
	lsl	w10, w9, #3
	sub	w9, w10, w9
	sub	w10, w20, w9
	add	w23, w9, #7
	sub	w10, w10, #8
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB69_4
.LBB69_3:                               //   in Loop: Header=BB69_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB69_31
.LBB69_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB69_5 Depth 2
                                        //     Child Loop BB69_9 Depth 2
                                        //     Child Loop BB69_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #4                         // =0x4
.LBB69_5:                               //   Parent Loop BB69_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldp	w12, w13, [x10, #-8]
	addv	s0, v0.4s
	ldr	w14, [x10], #28
	add	w13, w13, w14
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #7
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB69_5
// %bb.6:                               //   in Loop: Header=BB69_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB69_13
// %bb.7:                               //   in Loop: Header=BB69_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB69_11
// %bb.8:                               //   in Loop: Header=BB69_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB69_9:                               //   Parent Loop BB69_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB69_9
// %bb.10:                              //   in Loop: Header=BB69_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB69_13
.LBB69_11:                              // %.preheader
                                        //   in Loop: Header=BB69_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB69_12:                              //   Parent Loop BB69_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB69_12
.LBB69_13:                              //   in Loop: Header=BB69_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB69_3
// %bb.14:                              //   in Loop: Header=BB69_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB69_3
.LBB69_15:
	cmp	w20, #0
	b.le	.LBB69_27
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB69_18
.LBB69_17:                              //   in Loop: Header=BB69_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB69_31
.LBB69_18:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB69_20
// %bb.19:                              //   in Loop: Header=BB69_18 Depth=1
	add	w9, w9, w23
	b	.LBB69_25
.LBB69_20:                              //   in Loop: Header=BB69_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB69_25
// %bb.21:                              //   in Loop: Header=BB69_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB69_25
// %bb.22:                              //   in Loop: Header=BB69_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB69_25
// %bb.23:                              //   in Loop: Header=BB69_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB69_25
// %bb.24:                              //   in Loop: Header=BB69_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB69_25:                              //   in Loop: Header=BB69_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w24
	cmp	w9, w10
	b.eq	.LBB69_17
// %bb.26:                              //   in Loop: Header=BB69_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB69_17
.LBB69_27:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB69_29
.LBB69_28:                              //   in Loop: Header=BB69_29 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB69_31
.LBB69_29:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB69_28
// %bb.30:                              //   in Loop: Header=BB69_29 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB69_28
.LBB69_31:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB69_33
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB69_35
.LBB69_33:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB69_36
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
.LBB69_35:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB69_36:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end69:
	.size	_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end69-_Z29test_while_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB70_30
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #6
	movk	w15, #41666, lsl #16
	b.lt	.LBB70_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w26, #14928                     // =0x3a50
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w22, w20, #5
	add	x24, x21, #20
	lsr	x9, x9, #34
	movk	w26, #26855, lsl #16
	adrp	x25, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #1
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	lsl	w9, w9, #1
	sub	w10, w20, w9
	add	w23, w9, #6
	sub	w10, w10, #7
	add	x9, x21, w23, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x10, #0x1fffffff8
	add	x11, x9, #16
	add	x9, x10, x23
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB70_4
.LBB70_3:                               //   in Loop: Header=BB70_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB70_30
.LBB70_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB70_5 Depth 2
                                        //     Child Loop BB70_9 Depth 2
                                        //     Child Loop BB70_12 Depth 2
	mov	w9, wzr
	mov	x10, x24
	mov	w11, #4                         // =0x4
.LBB70_5:                               //   Parent Loop BB70_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldp	w12, w13, [x10, #-4]
	addv	s0, v0.4s
	add	x10, x10, #24
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #2
	add	x11, x11, #6
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB70_5
// %bb.6:                               //   in Loop: Header=BB70_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB70_13
// %bb.7:                               //   in Loop: Header=BB70_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	w10, #6
	mov	x10, x23
	b.ls	.LBB70_11
// %bb.8:                               //   in Loop: Header=BB70_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
.LBB70_9:                               //   Parent Loop BB70_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB70_9
// %bb.10:                              //   in Loop: Header=BB70_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB70_13
.LBB70_11:                              // %.preheader
                                        //   in Loop: Header=BB70_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB70_12:                              //   Parent Loop BB70_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w28
	add	w10, w10, #1
	madd	w9, w12, w19, w9
	cmp	w20, w10
	b.gt	.LBB70_12
.LBB70_13:                              //   in Loop: Header=BB70_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB70_3
// %bb.14:                              //   in Loop: Header=BB70_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB70_3
.LBB70_15:
	cmp	w20, #0
	b.le	.LBB70_26
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB70_18
.LBB70_17:                              //   in Loop: Header=BB70_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB70_30
.LBB70_18:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB70_20
// %bb.19:                              //   in Loop: Header=BB70_18 Depth=1
	add	w9, w9, w23
	b	.LBB70_24
.LBB70_20:                              //   in Loop: Header=BB70_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB70_24
// %bb.21:                              //   in Loop: Header=BB70_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB70_24
// %bb.22:                              //   in Loop: Header=BB70_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB70_24
// %bb.23:                              //   in Loop: Header=BB70_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB70_24:                              //   in Loop: Header=BB70_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB70_17
// %bb.25:                              //   in Loop: Header=BB70_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB70_17
.LBB70_26:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB70_28
.LBB70_27:                              //   in Loop: Header=BB70_28 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB70_30
.LBB70_28:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB70_27
// %bb.29:                              //   in Loop: Header=BB70_28 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB70_27
.LBB70_30:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB70_32
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB70_34
.LBB70_32:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB70_35
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
.LBB70_34:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB70_35:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end70:
	.size	_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end70-_Z29test_while_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB71_35
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #5
	movk	w16, #41666, lsl #16
	b.lt	.LBB71_21
// %bb.2:
	sub	w28, w20, #4
	mov	w10, #5                         // =0x5
	mov	w11, #52429                     // =0xcccd
	cmp	x28, #5
	mov	x12, #-3689348814741910324      // =0xcccccccccccccccc
	movk	w11, #52428, lsl #16
	csel	x10, x28, x10, hi
	movk	x12, #52429
	umull	x9, w9, w11
	sub	x10, x10, #1
	mov	w2, #35256                      // =0x89b8
	mov	w23, #38821                     // =0x97a5
	umulh	x10, x10, x12
	movk	w2, #48166, lsl #16
	movk	w23, #4117, lsl #16
	lsr	x9, x9, #34
	add	x25, x21, #16
	dup	v4.4s, w23
	dup	v5.4s, w2
	mov	w17, #46592                     // =0xb600
	mov	w22, #45208                     // =0xb098
	add	w9, w9, w9, lsl #2
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	movk	w22, #44224, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-16]                 // 16-byte Folded Spill
	lsr	x10, x10, #2
	sub	w11, w20, w9
	add	w1, w9, #5
	sub	w11, w11, #6
	stur	q5, [x29, #-48]                 // 16-byte Folded Spill
	add	x10, x10, #1
	and	x26, x10, #0x7ffffffffffffffe
	stp	x10, x11, [x29, #-32]           // 16-byte Folded Spill
	add	x11, x11, #1
	add	x10, x26, x26, lsl #2
	and	x9, x11, #0x1fffffff8
	stp	x10, x9, [sp, #48]              // 16-byte Folded Spill
	add	x9, x9, x1
	stp	x9, x11, [sp, #24]              // 16-byte Folded Spill
	add	x9, x21, #20
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	add	x9, x25, w1, uxtw #2
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	b	.LBB71_4
.LBB71_3:                               //   in Loop: Header=BB71_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB71_35
.LBB71_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB71_7 Depth 2
                                        //     Child Loop BB71_10 Depth 2
                                        //     Child Loop BB71_15 Depth 2
                                        //     Child Loop BB71_18 Depth 2
	cmp	w28, #6
	b.hs	.LBB71_6
// %bb.5:                               //   in Loop: Header=BB71_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB71_9
.LBB71_6:                               // %.preheader6
                                        //   in Loop: Header=BB71_4 Depth=1
	ldr	x11, [sp, #40]                  // 8-byte Folded Reload
	mov	w9, wzr
	mov	w10, wzr
	mov	x12, x26
.LBB71_7:                               //   Parent Loop BB71_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x11, #-20]
	ldr	q1, [x11]
	add	w9, w9, w22
	ldur	w13, [x11, #-4]
	ldr	w14, [x11, #16]
	add	w10, w10, w22
	addv	s0, v0.4s
	addv	s1, v1.4s
	subs	x12, x12, #2
	add	x11, x11, #40
	fmov	w15, s0
	add	w13, w15, w13
	fmov	w15, s1
	madd	w9, w13, w23, w9
	add	w14, w15, w14
	madd	w10, w14, w23, w10
	b.ne	.LBB71_7
// %bb.8:                               //   in Loop: Header=BB71_4 Depth=1
	ldur	x11, [x29, #-32]                // 8-byte Folded Reload
	add	w9, w10, w9
	ldr	x10, [sp, #48]                  // 8-byte Folded Reload
	cmp	x11, x26
	b.eq	.LBB71_11
.LBB71_9:                               // %.preheader2
                                        //   in Loop: Header=BB71_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB71_10:                              //   Parent Loop BB71_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11], #20
	ldr	w12, [x25, x10, lsl #2]
	add	w9, w9, w22
	add	x10, x10, #5
	addv	s0, v0.4s
	cmp	x10, x28
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w23, w9
	b.lo	.LBB71_10
.LBB71_11:                              //   in Loop: Header=BB71_4 Depth=1
	cmp	w1, w20
	b.ge	.LBB71_19
// %bb.12:                              //   in Loop: Header=BB71_4 Depth=1
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	cmp	w10, #6
	b.hi	.LBB71_14
// %bb.13:                              //   in Loop: Header=BB71_4 Depth=1
	mov	x10, x1
	b	.LBB71_17
.LBB71_14:                              //   in Loop: Header=BB71_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB71_15:                              //   Parent Loop BB71_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB71_15
// %bb.16:                              //   in Loop: Header=BB71_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	cmp	x9, x10
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB71_19
.LBB71_17:                              // %.preheader
                                        //   in Loop: Header=BB71_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB71_18:                              //   Parent Loop BB71_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w2
	add	w10, w10, #1
	madd	w9, w12, w23, w9
	cmp	w20, w10
	b.gt	.LBB71_18
.LBB71_19:                              //   in Loop: Header=BB71_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB71_3
// %bb.20:                              //   in Loop: Header=BB71_4 Depth=1
	adrp	x8, current_test
	mov	x24, x21
	mov	x21, x1
	ldr	w1, [x8, :lo12:current_test]
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	bl	printf
	adrp	x8, iterations
	mov	w2, #35256                      // =0x89b8
	ldur	q5, [x29, #-48]                 // 16-byte Folded Reload
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w2, #48166, lsl #16
	mov	x1, x21
	mov	x21, x24
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB71_3
.LBB71_21:
	cmp	w20, #0
	b.le	.LBB71_31
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB71_24
.LBB71_23:                              //   in Loop: Header=BB71_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB71_35
.LBB71_24:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB71_26
// %bb.25:                              //   in Loop: Header=BB71_24 Depth=1
	add	w9, w9, w23
	b	.LBB71_29
.LBB71_26:                              //   in Loop: Header=BB71_24 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB71_29
// %bb.27:                              //   in Loop: Header=BB71_24 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB71_29
// %bb.28:                              //   in Loop: Header=BB71_24 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB71_29:                              //   in Loop: Header=BB71_24 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w24
	cmp	w9, w10
	b.eq	.LBB71_23
// %bb.30:                              //   in Loop: Header=BB71_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB71_23
.LBB71_31:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB71_33
.LBB71_32:                              //   in Loop: Header=BB71_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB71_35
.LBB71_33:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB71_32
// %bb.34:                              //   in Loop: Header=BB71_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB71_32
.LBB71_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB71_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB71_39
.LBB71_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB71_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB71_39:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB71_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end71:
	.size	_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end71-_Z29test_while_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB72_34
// %bb.1:
	mov	w26, #58432                     // =0xe440
	subs	w9, w20, #4
	movk	w26, #41666, lsl #16
	b.lt	.LBB72_21
// %bb.2:
	sub	w28, w20, #3
	mov	w10, #4                         // =0x4
	and	w9, w9, #0xfffffffc
	cmp	x28, #4
	add	w25, w9, #4
	sub	w9, w20, w9
	csel	x10, x28, x10, hi
	sub	w11, w9, #5
	mov	w24, #35256                     // =0x89b8
	sub	x10, x10, #1
	mov	w22, #38821                     // =0x97a5
	mov	w23, #9952                      // =0x26e0
	lsr	x10, x10, #2
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	movk	w23, #61594, lsl #16
	dup	v20.4s, w22
	dup	v21.4s, w24
	add	x10, x10, #1
	add	x9, x21, w25, uxtw #2
	dup	v22.4s, w23
	stp	x10, x11, [x29, #-48]           // 16-byte Folded Spill
	add	x11, x11, #1
	and	x19, x10, #0x7ffffffffffffff8
	str	x11, [sp, #32]                  // 8-byte Folded Spill
	and	x10, x11, #0x1fffffff8
	lsl	x11, x19, #2
	mov	w13, #46592                     // =0xb600
	mov	w27, wzr
	add	x9, x9, #16
	stp	x11, x10, [sp, #48]             // 16-byte Folded Spill
	add	x10, x10, x25
	movk	w13, #46159, lsl #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	add	x10, x21, #64
	adrp	x14, init_value
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	stp	q21, q20, [x29, #-32]           // 32-byte Folded Spill
	str	q22, [sp, #64]                  // 16-byte Folded Spill
	b	.LBB72_4
.LBB72_3:                               //   in Loop: Header=BB72_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB72_34
.LBB72_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB72_7 Depth 2
                                        //     Child Loop BB72_10 Depth 2
                                        //     Child Loop BB72_15 Depth 2
                                        //     Child Loop BB72_18 Depth 2
	cmp	w28, #29
	b.hs	.LBB72_6
// %bb.5:                               //   in Loop: Header=BB72_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB72_9
.LBB72_6:                               // %.preheader6
                                        //   in Loop: Header=BB72_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	mov	x10, x19
.LBB72_7:                               //   Parent Loop BB72_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	x11, x9, #64
	ld4	{ v16.4s, v17.4s, v18.4s, v19.4s }, [x9]
	subs	x10, x10, #8
	add	x9, x9, #128
	ld4	{ v2.4s, v3.4s, v4.4s, v5.4s }, [x11]
	add	v7.4s, v17.4s, v16.4s
	add	v6.4s, v3.4s, v2.4s
	add	v2.4s, v4.4s, v5.4s
	add	v3.4s, v18.4s, v19.4s
	add	v2.4s, v6.4s, v2.4s
	add	v3.4s, v7.4s, v3.4s
	mla	v0.4s, v2.4s, v20.4s
	mla	v1.4s, v3.4s, v20.4s
	add	v0.4s, v0.4s, v22.4s
	add	v1.4s, v1.4s, v22.4s
	b.ne	.LBB72_7
// %bb.8:                               //   in Loop: Header=BB72_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-48]                 // 8-byte Folded Reload
	ldr	x10, [sp, #48]                  // 8-byte Folded Reload
	cmp	x9, x19
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB72_11
.LBB72_9:                               // %.preheader2
                                        //   in Loop: Header=BB72_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB72_10:                              //   Parent Loop BB72_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11], #16
	add	x10, x10, #4
	cmp	x10, x28
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w22, w9
	add	w9, w9, w23
	b.lo	.LBB72_10
.LBB72_11:                              //   in Loop: Header=BB72_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB72_19
// %bb.12:                              //   in Loop: Header=BB72_4 Depth=1
	ldur	x10, [x29, #-40]                // 8-byte Folded Reload
	cmp	w10, #6
	b.hi	.LBB72_14
// %bb.13:                              //   in Loop: Header=BB72_4 Depth=1
	mov	x10, x25
	b	.LBB72_17
.LBB72_14:                              //   in Loop: Header=BB72_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB72_15:                              //   Parent Loop BB72_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v20.4s
	mla	v1.4s, v3.4s, v20.4s
	add	v0.4s, v0.4s, v21.4s
	add	v1.4s, v1.4s, v21.4s
	b.ne	.LBB72_15
// %bb.16:                              //   in Loop: Header=BB72_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	cmp	x9, x10
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB72_19
.LBB72_17:                              // %.preheader
                                        //   in Loop: Header=BB72_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB72_18:                              //   Parent Loop BB72_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w24
	add	w10, w10, #1
	madd	w9, w12, w22, w9
	cmp	w20, w10
	b.gt	.LBB72_18
.LBB72_19:                              //   in Loop: Header=BB72_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w13
	cmp	w9, w10
	b.eq	.LBB72_3
// %bb.20:                              //   in Loop: Header=BB72_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x26, x14
	bl	printf
	ldp	q21, q20, [x29, #-32]           // 32-byte Folded Reload
	adrp	x8, iterations
	mov	x14, x26
	mov	w26, #58432                     // =0xe440
	ldr	q22, [sp, #64]                  // 16-byte Folded Reload
	mov	w13, #46592                     // =0xb600
	ldr	w8, [x8, :lo12:iterations]
	movk	w26, #41666, lsl #16
	movk	w13, #46159, lsl #16
	b	.LBB72_3
.LBB72_21:
	cmp	w20, #0
	b.le	.LBB72_30
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w28, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x27, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w28, #30797, lsl #16
	b	.LBB72_24
.LBB72_23:                              //   in Loop: Header=BB72_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB72_34
.LBB72_24:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB72_26
// %bb.25:                              //   in Loop: Header=BB72_24 Depth=1
	add	w9, w9, w23
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w24
	cmp	w9, w10
	b.eq	.LBB72_23
	b	.LBB72_28
.LBB72_26:                              //   in Loop: Header=BB72_24 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w28
	b.ne	.LBB72_29
// %bb.27:                              //   in Loop: Header=BB72_24 Depth=1
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w24
	cmp	w9, w10
	b.eq	.LBB72_23
.LBB72_28:                              //   in Loop: Header=BB72_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB72_23
.LBB72_29:                              //   in Loop: Header=BB72_24 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w24
	cmp	w9, w10
	b.eq	.LBB72_23
	b	.LBB72_28
.LBB72_30:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB72_32
.LBB72_31:                              //   in Loop: Header=BB72_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB72_34
.LBB72_32:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w26
	cmp	w9, w22
	b.eq	.LBB72_31
// %bb.33:                              //   in Loop: Header=BB72_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB72_31
.LBB72_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB72_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB72_38
.LBB72_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB72_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB72_38:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB72_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end72:
	.size	_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end72-_Z29test_while_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB73_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #3
	movk	w15, #41666, lsl #16
	b.lt	.LBB73_21
// %bb.2:
	sub	w28, w20, #2
	mov	w10, #3                         // =0x3
	mov	w11, #43691                     // =0xaaab
	cmp	x28, #3
	movk	w11, #43690, lsl #16
	mov	x12, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa
	csel	x10, x28, x10, hi
	movk	x12, #43691
	umull	x9, w9, w11
	sub	x10, x10, #1
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	umulh	x10, x10, x12
	mov	w23, #40232                     // =0x9d28
	movk	w24, #48166, lsl #16
	lsr	x9, x9, #33
	movk	w22, #4117, lsl #16
	movk	w23, #13427, lsl #16
	dup	v18.4s, w22
	dup	v19.4s, w24
	dup	v20.4s, w23
	add	w9, w9, w9, lsl #1
	mov	w16, #46592                     // =0xb600
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	adrp	x26, init_value
	lsr	x10, x10, #1
	sub	w11, w20, w9
	add	w25, w9, #3
	sub	w11, w11, #4
	add	x9, x21, w25, uxtw #2
	stp	q19, q18, [x29, #-48]           // 32-byte Folded Spill
	add	x10, x10, #1
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x11, x11, #1
	and	x19, x10, #0x7ffffffffffffff8
	str	x10, [sp, #64]                  // 8-byte Folded Spill
	and	x10, x11, #0x1fffffff8
	str	x11, [sp, #24]                  // 8-byte Folded Spill
	add	x11, x19, x19, lsl #1
	add	x9, x9, #16
	stp	x11, x10, [sp, #32]             // 16-byte Folded Spill
	add	x10, x10, x25
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	add	x10, x21, #8
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	str	q20, [sp, #48]                  // 16-byte Folded Spill
	b	.LBB73_4
.LBB73_3:                               //   in Loop: Header=BB73_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB73_32
.LBB73_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB73_7 Depth 2
                                        //     Child Loop BB73_10 Depth 2
                                        //     Child Loop BB73_15 Depth 2
                                        //     Child Loop BB73_18 Depth 2
	cmp	w28, #22
	b.hs	.LBB73_6
// %bb.5:                               //   in Loop: Header=BB73_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB73_9
.LBB73_6:                               // %.preheader6
                                        //   in Loop: Header=BB73_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x21
	mov	x10, x19
.LBB73_7:                               //   Parent Loop BB73_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x11, x9
	subs	x10, x10, #8
	add	x9, x9, #96
	ld3	{ v2.4s, v3.4s, v4.4s }, [x11], #48
	ld3	{ v5.4s, v6.4s, v7.4s }, [x11]
	add	v16.4s, v3.4s, v2.4s
	add	v17.4s, v6.4s, v5.4s
	add	v2.4s, v16.4s, v4.4s
	add	v3.4s, v17.4s, v7.4s
	mla	v0.4s, v2.4s, v18.4s
	mla	v1.4s, v3.4s, v18.4s
	add	v0.4s, v0.4s, v20.4s
	add	v1.4s, v1.4s, v20.4s
	b.ne	.LBB73_7
// %bb.8:                               //   in Loop: Header=BB73_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #64]                   // 8-byte Folded Reload
	ldr	x11, [sp, #32]                  // 8-byte Folded Reload
	cmp	x9, x19
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB73_11
.LBB73_9:                               // %.preheader2
                                        //   in Loop: Header=BB73_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	add	x10, x10, x11, lsl #2
	add	x11, x11, #1
.LBB73_10:                              //   Parent Loop BB73_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w12, w13, [x10, #-8]
	ldr	w14, [x10], #12
	add	w12, w13, w12
	add	w12, w12, w14
	madd	w9, w12, w22, w9
	add	x12, x11, #2
	add	x11, x11, #3
	cmp	x12, x28
	add	w9, w9, w23
	b.lo	.LBB73_10
.LBB73_11:                              //   in Loop: Header=BB73_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB73_19
// %bb.12:                              //   in Loop: Header=BB73_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	cmp	w10, #6
	b.hi	.LBB73_14
// %bb.13:                              //   in Loop: Header=BB73_4 Depth=1
	mov	x10, x25
	b	.LBB73_17
.LBB73_14:                              //   in Loop: Header=BB73_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB73_15:                              //   Parent Loop BB73_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v18.4s
	mla	v1.4s, v3.4s, v18.4s
	add	v0.4s, v0.4s, v19.4s
	add	v1.4s, v1.4s, v19.4s
	b.ne	.LBB73_15
// %bb.16:                              //   in Loop: Header=BB73_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #24]                   // 8-byte Folded Reload
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	cmp	x9, x10
	ldr	x10, [sp, #16]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB73_19
.LBB73_17:                              // %.preheader
                                        //   in Loop: Header=BB73_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB73_18:                              //   Parent Loop BB73_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w9, w9, w24
	add	w10, w10, #1
	madd	w9, w12, w22, w9
	cmp	w20, w10
	b.gt	.LBB73_18
.LBB73_19:                              //   in Loop: Header=BB73_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB73_3
// %bb.20:                              //   in Loop: Header=BB73_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q19, q18, [x29, #-48]           // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q20, [sp, #48]                  // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB73_3
.LBB73_21:
	cmp	w20, #0
	b.le	.LBB73_28
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB73_24
.LBB73_23:                              //   in Loop: Header=BB73_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB73_32
.LBB73_24:                              // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB73_26
// %bb.25:                              //   in Loop: Header=BB73_24 Depth=1
	add	w9, w9, w23
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB73_23
	b	.LBB73_27
.LBB73_26:                              //   in Loop: Header=BB73_24 Depth=1
	ldr	w10, [x21, #4]
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB73_23
.LBB73_27:                              //   in Loop: Header=BB73_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB73_23
.LBB73_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB73_30
.LBB73_29:                              //   in Loop: Header=BB73_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB73_32
.LBB73_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB73_29
// %bb.31:                              //   in Loop: Header=BB73_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB73_29
.LBB73_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB73_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB73_36
.LBB73_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB73_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB73_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB73_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end73:
	.size	_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end73-_Z29test_while_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB74_29
// %bb.1:
	subs	w9, w21, #2
	b.lt	.LBB74_20
// %bb.2:
	sub	w27, w21, #1
	mov	w10, #2                         // =0x2
	and	w9, w9, #0xfffffffe
	cmp	x27, #2
	sub	w11, w21, w9
	add	w23, w9, #2
	csel	x10, x27, x10, hi
	sub	w9, w11, #3
	mov	w24, #38821                     // =0x97a5
	sub	x10, x10, #1
	add	x11, x9, #1
	mov	w19, #4976                      // =0x1370
	lsr	x10, x10, #1
	mov	w22, #35256                     // =0x89b8
	str	x11, [sp, #32]                  // 8-byte Folded Spill
	and	x11, x11, #0x1fffffff8
	movk	w24, #4117, lsl #16
	movk	w19, #30797, lsl #16
	add	x10, x10, #1
	movk	w22, #48166, lsl #16
	dup	v6.4s, w24
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	and	x28, x10, #0x7ffffffffffffff8
	add	x10, x11, x23
	dup	v7.4s, w22
	stur	x9, [x29, #-24]                 // 8-byte Folded Spill
	add	x9, x20, w23, uxtw #2
	dup	v16.4s, w19
	str	x10, [sp, #24]                  // 8-byte Folded Spill
	lsl	x10, x28, #1
	mov	w13, #58432                     // =0xe440
	mov	w15, #46592                     // =0xb600
	mov	w26, wzr
	movk	w13, #41666, lsl #16
	str	x10, [sp, #56]                  // 8-byte Folded Spill
	add	x10, x20, #32
	add	x9, x9, #16
	adrp	x25, init_value
	movk	w15, #46159, lsl #16
	stp	x11, x10, [sp, #40]             // 16-byte Folded Spill
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	stur	q6, [x29, #-16]                 // 16-byte Folded Spill
	stur	q7, [x29, #-48]                 // 16-byte Folded Spill
	str	q16, [sp, #64]                  // 16-byte Folded Spill
	b	.LBB74_4
.LBB74_3:                               //   in Loop: Header=BB74_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB74_29
.LBB74_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB74_7 Depth 2
                                        //     Child Loop BB74_9 Depth 2
                                        //     Child Loop BB74_14 Depth 2
                                        //     Child Loop BB74_17 Depth 2
	cmp	w21, #16
	b.hs	.LBB74_6
// %bb.5:                               //   in Loop: Header=BB74_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB74_9
.LBB74_6:                               // %.preheader6
                                        //   in Loop: Header=BB74_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #48]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB74_7:                               //   Parent Loop BB74_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	x11, x9, #32
	ld2	{ v4.4s, v5.4s }, [x9]
	subs	x10, x10, #8
	add	x9, x9, #64
	ld2	{ v2.4s, v3.4s }, [x11]
	add	v2.4s, v3.4s, v2.4s
	add	v3.4s, v5.4s, v4.4s
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v16.4s
	add	v1.4s, v1.4s, v16.4s
	b.ne	.LBB74_7
// %bb.8:                               //   in Loop: Header=BB74_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	cmp	x9, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB74_10
.LBB74_9:                               //   Parent Loop BB74_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x11, x20, x10, lsl #2
	add	x10, x10, #2
	cmp	x10, x27
	ldp	w12, w11, [x11]
	add	w11, w11, w12
	madd	w9, w11, w24, w9
	add	w9, w9, w19
	b.lo	.LBB74_9
.LBB74_10:                              //   in Loop: Header=BB74_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB74_18
// %bb.11:                              //   in Loop: Header=BB74_4 Depth=1
	ldur	x10, [x29, #-24]                // 8-byte Folded Reload
	cmp	w10, #6
	b.hi	.LBB74_13
// %bb.12:                              //   in Loop: Header=BB74_4 Depth=1
	mov	x10, x23
	b	.LBB74_16
.LBB74_13:                              //   in Loop: Header=BB74_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB74_14:                              //   Parent Loop BB74_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB74_14
// %bb.15:                              //   in Loop: Header=BB74_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldp	x9, x10, [sp, #32]              // 16-byte Folded Reload
	addv	s0, v0.4s
	cmp	x9, x10
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	fmov	w9, s0
	b.eq	.LBB74_18
.LBB74_16:                              // %.preheader
                                        //   in Loop: Header=BB74_4 Depth=1
	add	x11, x20, x10, lsl #2
.LBB74_17:                              //   Parent Loop BB74_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x11], #4
	add	w10, w10, #1
	cmp	w21, w10
	madd	w9, w12, w24, w9
	add	w9, w9, w22
	b.gt	.LBB74_17
.LBB74_18:                              //   in Loop: Header=BB74_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w15
	cmp	w9, w10
	b.eq	.LBB74_3
// %bb.19:                              //   in Loop: Header=BB74_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #46592                     // =0xb600
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	ldur	q7, [x29, #-48]                 // 16-byte Folded Reload
	ldur	q6, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB74_3
.LBB74_20:
	cmp	w21, #1
	b.ne	.LBB74_25
// %bb.21:                              // %.preheader8
	mov	w22, #58432                     // =0xe440
	mov	w23, #38821                     // =0x97a5
	mov	w25, #11336                     // =0x2c48
	mov	w19, wzr
	movk	w22, #41666, lsl #16
	movk	w23, #4117, lsl #16
	adrp	x24, init_value
	movk	w25, #63529, lsl #16
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB74_23
.LBB74_22:                              //   in Loop: Header=BB74_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB74_29
.LBB74_23:                              // =>This Inner Loop Header: Depth=1
	ldr	d0, [x24, :lo12:init_value]
	ldr	w10, [x20]
	fcvtzs	w9, d0
	mul	w10, w10, w23
	madd	w9, w9, w22, w25
	cmp	w10, w9
	b.eq	.LBB74_22
// %bb.24:                              //   in Loop: Header=BB74_23 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB74_22
.LBB74_25:
	adrp	x21, init_value
	mov	w22, #58432                     // =0xe440
	mov	w23, #18944                     // =0x4a00
	ldr	d0, [x21, :lo12:init_value]
	mov	w19, wzr
	movk	w22, #41666, lsl #16
	movk	w23, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB74_27
.LBB74_26:                              //   in Loop: Header=BB74_27 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB74_29
.LBB74_27:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB74_26
// %bb.28:                              //   in Loop: Header=BB74_27 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB74_26
.LBB74_29:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB74_31
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB74_33
.LBB74_31:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB74_34
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
.LBB74_33:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB74_34:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end74:
	.size	_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end74-_Z29test_while_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc // -- Begin function _Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB75_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB75_13
// %bb.2:
	mov	w28, #38821                     // =0x97a5
	mov	w24, #35256                     // =0x89b8
	mov	w13, #58432                     // =0xe440
	movk	w28, #4117, lsl #16
	movk	w24, #48166, lsl #16
	mov	w19, w20
	dup	v4.4s, w28
	dup	v5.4s, w24
	mov	w27, #46592                     // =0xb600
	mov	w26, wzr
	movk	w13, #41666, lsl #16
	and	x23, x19, #0x7ffffff8
	add	x22, x21, #16
	adrp	x25, init_value
	movk	w27, #46159, lsl #16
	stur	q4, [x29, #-16]                 // 16-byte Folded Spill
	str	q5, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB75_4
.LBB75_3:                               //   in Loop: Header=BB75_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB75_17
.LBB75_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB75_7 Depth 2
                                        //     Child Loop BB75_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB75_6
// %bb.5:                               //   in Loop: Header=BB75_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB75_9
.LBB75_6:                               // %.preheader2
                                        //   in Loop: Header=BB75_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x22
	mov	x10, x23
.LBB75_7:                               //   Parent Loop BB75_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB75_7
// %bb.8:                               //   in Loop: Header=BB75_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x23, x19
	mov	x11, x23
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB75_11
.LBB75_9:                               // %.preheader
                                        //   in Loop: Header=BB75_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x19, x11
.LBB75_10:                              //   Parent Loop BB75_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	madd	w9, w12, w28, w9
	add	w9, w9, w24
	b.ne	.LBB75_10
.LBB75_11:                              //   in Loop: Header=BB75_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w27
	cmp	w9, w10
	b.eq	.LBB75_3
// %bb.12:                              //   in Loop: Header=BB75_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #16]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB75_3
.LBB75_13:
	adrp	x21, init_value
	mov	w22, #58432                     // =0xe440
	mov	w23, #18944                     // =0x4a00
	ldr	d0, [x21, :lo12:init_value]
	mov	w19, wzr
	movk	w22, #41666, lsl #16
	movk	w23, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB75_15
.LBB75_14:                              //   in Loop: Header=BB75_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB75_17
.LBB75_15:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB75_14
// %bb.16:                              //   in Loop: Header=BB75_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB75_14
.LBB75_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB75_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB75_21
.LBB75_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB75_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB75_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB75_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end75:
	.size	_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end75-_Z29test_while_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB76_33
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #32
	movk	w13, #41666, lsl #16
	b.lt	.LBB76_15
// %bb.2:
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	and	w8, w9, #0xffffffe0
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	add	w22, w8, #32
	mov	w8, w20
	dup	v16.4s, w19
	dup	v17.4s, w28
	sub	x24, x8, x22
	str	x8, [sp, #48]                   // 8-byte Folded Spill
	and	x9, x8, #0x7
	add	x8, x21, w22, uxtw #2
	mov	w12, #46592                     // =0xb600
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	sub	x9, x24, x9
	mov	w25, #14080                     // =0x3700
	mov	w27, wzr
	movk	w12, #46159, lsl #16
	sub	w23, w20, #31
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	add	x9, x9, x22
	add	x8, x8, #16
	movk	w25, #34001, lsl #16
	adrp	x26, init_value
	stp	x8, x9, [sp, #16]               // 16-byte Folded Spill
	stp	q17, q16, [x29, #-32]           // 32-byte Folded Spill
	b	.LBB76_4
.LBB76_3:                               //   in Loop: Header=BB76_4 Depth=1
	adrp	x8, iterations
	add	w27, w27, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w27, w8
	b.ge	.LBB76_33
.LBB76_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB76_5 Depth 2
                                        //     Child Loop BB76_9 Depth 2
                                        //     Child Loop BB76_12 Depth 2
	mov	x9, xzr
	mov	w8, wzr
	mov	x10, x21
.LBB76_5:                               //   Parent Loop BB76_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x10, #96]
	add	x9, x9, #32
	ldp	q2, q3, [x10, #32]
	cmp	x9, x23
	ldp	q4, q5, [x10, #64]
	ldp	q6, q7, [x10], #128
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v3.4s, v7.4s, v5.4s
	add	v2.4s, v6.4s, v4.4s
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w11, s0
	madd	w8, w11, w19, w8
	add	w8, w8, w25
	b.lo	.LBB76_5
// %bb.6:                               //   in Loop: Header=BB76_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB76_13
// %bb.7:                               //   in Loop: Header=BB76_4 Depth=1
	cmp	x24, #7
	mov	x10, x22
	b.ls	.LBB76_11
// %bb.8:                               //   in Loop: Header=BB76_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	mov	v0.s[0], w8
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
.LBB76_9:                               //   Parent Loop BB76_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x8, #-16]
	subs	x9, x9, #8
	add	x8, x8, #32
	mla	v0.4s, v2.4s, v16.4s
	mla	v1.4s, v3.4s, v16.4s
	add	v0.4s, v0.4s, v17.4s
	add	v1.4s, v1.4s, v17.4s
	b.ne	.LBB76_9
// %bb.10:                              //   in Loop: Header=BB76_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w8, s0
	cbz	x9, .LBB76_13
.LBB76_11:                              // %.preheader
                                        //   in Loop: Header=BB76_4 Depth=1
	ldr	x11, [sp, #48]                  // 8-byte Folded Reload
	add	x9, x21, x10, lsl #2
	sub	x10, x11, x10
.LBB76_12:                              //   Parent Loop BB76_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w11, [x9], #4
	add	w8, w8, w28
	subs	x10, x10, #1
	madd	w8, w11, w19, w8
	b.ne	.LBB76_12
.LBB76_13:                              //   in Loop: Header=BB76_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w9, d0
	madd	w9, w9, w13, w12
	cmp	w8, w9
	b.eq	.LBB76_3
// %bb.14:                              //   in Loop: Header=BB76_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q17, q16, [x29, #-32]           // 32-byte Folded Reload
	mov	w12, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	movk	w12, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB76_3
.LBB76_15:
	cmp	w20, #0
	b.le	.LBB76_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB76_18
.LBB76_17:                              //   in Loop: Header=BB76_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB76_33
.LBB76_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB76_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB76_20
// %bb.19:                              //   in Loop: Header=BB76_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB76_25
.LBB76_20:                              //   in Loop: Header=BB76_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB76_23
// %bb.21:                              //   in Loop: Header=BB76_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB76_24
// %bb.22:                              //   in Loop: Header=BB76_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB76_23:                              //   in Loop: Header=BB76_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB76_24:                              //   in Loop: Header=BB76_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB76_27
.LBB76_25:                              // %.preheader3
                                        //   in Loop: Header=BB76_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB76_26:                              //   Parent Loop BB76_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB76_26
.LBB76_27:                              //   in Loop: Header=BB76_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB76_17
// %bb.28:                              //   in Loop: Header=BB76_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB76_17
.LBB76_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB76_31
.LBB76_30:                              //   in Loop: Header=BB76_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB76_33
.LBB76_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB76_30
// %bb.32:                              //   in Loop: Header=BB76_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB76_30
.LBB76_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB76_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB76_37
.LBB76_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB76_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB76_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB76_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end76:
	.size	_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end76-_Z26test_do_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB77_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #31
	movk	w15, #41666, lsl #16
	b.lt	.LBB77_15
// %bb.2:
	mov	w8, #4229                       // =0x1085
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w8, #2114, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x8, w9, w8
	dup	v6.4s, w19
	dup	v7.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w26, #44360                     // =0xad48
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #30
	add	x22, x21, #120
	lsr	x8, x8, #32
	movk	w26, #51370, lsl #16
	adrp	x24, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w8
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	add	w8, w8, w9, lsr #1
	lsr	w8, w8, #4
	lsl	w9, w8, #5
	sub	w8, w9, w8
	mov	w9, w20
	add	w25, w8, #31
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x9, x9, x25
	add	x8, x21, w25, uxtw #2
	stur	x9, [x29, #-16]                 // 8-byte Folded Spill
	and	x9, x9, #0xfffffffffffffff8
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	add	x9, x9, x25
	add	x8, x8, #16
	stp	x8, x9, [sp, #16]               // 16-byte Folded Spill
	b	.LBB77_4
.LBB77_3:                               //   in Loop: Header=BB77_4 Depth=1
	adrp	x8, iterations
	add	w27, w27, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w27, w8
	b.ge	.LBB77_33
.LBB77_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB77_5 Depth 2
                                        //     Child Loop BB77_9 Depth 2
                                        //     Child Loop BB77_12 Depth 2
	mov	w8, wzr
	mov	x9, x22
	mov	w10, #28                        // =0x1c
.LBB77_5:                               //   Parent Loop BB77_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x9, #-40]
	ldur	q1, [x9, #-104]
	ldur	q2, [x9, #-56]
	ldur	q3, [x9, #-120]
	ldur	q4, [x9, #-24]
	ldur	q5, [x9, #-88]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x9, #-72]
	add	v4.4s, v5.4s, v4.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w11, w12, [x9, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w13, [x9], #124
	add	v2.4s, v2.4s, v4.4s
	add	w12, w12, w13
	add	v0.4s, v2.4s, v0.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w11, w14, w11
	add	w11, w11, w12
	madd	w8, w11, w19, w8
	add	x11, x10, #3
	add	x10, x10, #31
	cmp	x11, x23
	add	w8, w8, w26
	b.lo	.LBB77_5
// %bb.6:                               //   in Loop: Header=BB77_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB77_13
// %bb.7:                               //   in Loop: Header=BB77_4 Depth=1
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	mov	x10, x25
	cmp	x9, #7
	b.ls	.LBB77_11
// %bb.8:                               //   in Loop: Header=BB77_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	mov	v0.s[0], w8
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
.LBB77_9:                               //   Parent Loop BB77_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x8, #-16]
	subs	x9, x9, #8
	add	x8, x8, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB77_9
// %bb.10:                              //   in Loop: Header=BB77_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	cmp	x9, x8
	addv	s0, v0.4s
	fmov	w8, s0
	b.eq	.LBB77_13
.LBB77_11:                              // %.preheader
                                        //   in Loop: Header=BB77_4 Depth=1
	ldr	x11, [sp, #32]                  // 8-byte Folded Reload
	add	x9, x21, x10, lsl #2
	sub	x10, x11, x10
.LBB77_12:                              //   Parent Loop BB77_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w11, [x9], #4
	add	w8, w8, w28
	subs	x10, x10, #1
	madd	w8, w11, w19, w8
	b.ne	.LBB77_12
.LBB77_13:                              //   in Loop: Header=BB77_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w9, d0
	madd	w9, w9, w15, w16
	cmp	w8, w9
	b.eq	.LBB77_3
// %bb.14:                              //   in Loop: Header=BB77_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB77_3
.LBB77_15:
	cmp	w20, #0
	b.le	.LBB77_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB77_18
.LBB77_17:                              //   in Loop: Header=BB77_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB77_33
.LBB77_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB77_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB77_20
// %bb.19:                              //   in Loop: Header=BB77_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB77_25
.LBB77_20:                              //   in Loop: Header=BB77_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB77_23
// %bb.21:                              //   in Loop: Header=BB77_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB77_24
// %bb.22:                              //   in Loop: Header=BB77_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB77_23:                              //   in Loop: Header=BB77_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB77_24:                              //   in Loop: Header=BB77_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB77_27
.LBB77_25:                              // %.preheader3
                                        //   in Loop: Header=BB77_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB77_26:                              //   Parent Loop BB77_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB77_26
.LBB77_27:                              //   in Loop: Header=BB77_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB77_17
// %bb.28:                              //   in Loop: Header=BB77_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB77_17
.LBB77_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB77_31
.LBB77_30:                              //   in Loop: Header=BB77_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB77_33
.LBB77_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB77_30
// %bb.32:                              //   in Loop: Header=BB77_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB77_30
.LBB77_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB77_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB77_37
.LBB77_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB77_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB77_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB77_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end77:
	.size	_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end77-_Z26test_do_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB78_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #30
	movk	w15, #41666, lsl #16
	b.lt	.LBB78_15
// %bb.2:
	mov	w10, #34953                     // =0x8889
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #34952, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #30                        // =0x1e
	dup	v6.4s, w23
	dup	v7.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #9104                      // =0x2390
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w25, w20, #29
	lsr	x9, x9, #36
	add	x22, x21, #116
	movk	w26, #3204, lsl #16
	adrp	x19, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB78_4
.LBB78_3:                               //   in Loop: Header=BB78_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB78_33
.LBB78_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB78_5 Depth 2
                                        //     Child Loop BB78_9 Depth 2
                                        //     Child Loop BB78_12 Depth 2
	mov	w9, wzr
	mov	x10, x22
	mov	w11, #28                        // =0x1c
.LBB78_5:                               //   Parent Loop BB78_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-100]
	ldur	q2, [x10, #-52]
	ldur	q3, [x10, #-116]
	ldur	q4, [x10, #-20]
	ldur	q5, [x10, #-84]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-68]
	add	v4.4s, v5.4s, v4.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #120
	add	v2.4s, v2.4s, v4.4s
	add	v0.4s, v2.4s, v0.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #2
	add	x11, x11, #30
	cmp	x12, x25
	add	w9, w9, w26
	b.lo	.LBB78_5
// %bb.6:                               //   in Loop: Header=BB78_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB78_13
// %bb.7:                               //   in Loop: Header=BB78_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB78_11
// %bb.8:                               //   in Loop: Header=BB78_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB78_9:                               //   Parent Loop BB78_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB78_9
// %bb.10:                              //   in Loop: Header=BB78_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB78_13
.LBB78_11:                              // %.preheader
                                        //   in Loop: Header=BB78_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB78_12:                              //   Parent Loop BB78_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB78_12
.LBB78_13:                              //   in Loop: Header=BB78_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB78_3
// %bb.14:                              //   in Loop: Header=BB78_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB78_3
.LBB78_15:
	cmp	w20, #0
	b.le	.LBB78_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB78_18
.LBB78_17:                              //   in Loop: Header=BB78_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB78_33
.LBB78_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB78_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB78_20
// %bb.19:                              //   in Loop: Header=BB78_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB78_25
.LBB78_20:                              //   in Loop: Header=BB78_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB78_23
// %bb.21:                              //   in Loop: Header=BB78_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB78_24
// %bb.22:                              //   in Loop: Header=BB78_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB78_23:                              //   in Loop: Header=BB78_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB78_24:                              //   in Loop: Header=BB78_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB78_27
.LBB78_25:                              // %.preheader3
                                        //   in Loop: Header=BB78_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB78_26:                              //   Parent Loop BB78_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB78_26
.LBB78_27:                              //   in Loop: Header=BB78_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB78_17
// %bb.28:                              //   in Loop: Header=BB78_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB78_17
.LBB78_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB78_31
.LBB78_30:                              //   in Loop: Header=BB78_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB78_33
.LBB78_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB78_30
// %bb.32:                              //   in Loop: Header=BB78_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB78_30
.LBB78_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB78_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB78_37
.LBB78_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB78_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB78_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB78_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end78:
	.size	_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end78-_Z26test_do_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN13do_loop_testsILi28EiE7do_testEPKiPKc,"axG",@progbits,_ZN13do_loop_testsILi28EiE7do_testEPKiPKc,comdat
	.weak	_ZN13do_loop_testsILi28EiE7do_testEPKiPKc // -- Begin function _ZN13do_loop_testsILi28EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN13do_loop_testsILi28EiE7do_testEPKiPKc,@function
_ZN13do_loop_testsILi28EiE7do_testEPKiPKc: // @_ZN13do_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN13do_loop_testsILi19EiE7do_testEPKiPKc
	adrp	x20, temp_string+1900
	add	x20, x20, :lo12:temp_string+1900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
.Lfunc_end79:
	.size	_ZN13do_loop_testsILi28EiE7do_testEPKiPKc, .Lfunc_end79-_ZN13do_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB80_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #29
	movk	w14, #41666, lsl #16
	b.lt	.LBB80_15
// %bb.2:
	mov	w10, #51977                     // =0xcb09
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #36157, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #29                        // =0x1d
	dup	v6.4s, w23
	dup	v7.4s, w24
	mov	w15, #46592                     // =0xb600
	mov	w26, #39384                     // =0x99d8
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w25, w20, #28
	lsr	x9, x9, #36
	add	x22, x21, #112
	movk	w26, #20573, lsl #16
	adrp	x19, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB80_4
.LBB80_3:                               //   in Loop: Header=BB80_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB80_33
.LBB80_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB80_5 Depth 2
                                        //     Child Loop BB80_9 Depth 2
                                        //     Child Loop BB80_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB80_5:                               //   Parent Loop BB80_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11, #64]
	ldr	q4, [x11, #96]
	ldp	q3, q2, [x11]
	ldr	q5, [x11, #32]
	ldr	w12, [x22, x10, lsl #2]
	add	x10, x10, #29
	add	v4.4s, v5.4s, v4.4s
	cmp	x10, x25
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldr	q2, [x11, #48]
	add	x11, x11, #116
	add	v1.4s, v1.4s, v4.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w23, w9
	add	w9, w9, w26
	b.lo	.LBB80_5
// %bb.6:                               //   in Loop: Header=BB80_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB80_13
// %bb.7:                               //   in Loop: Header=BB80_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB80_11
// %bb.8:                               //   in Loop: Header=BB80_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB80_9:                               //   Parent Loop BB80_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB80_9
// %bb.10:                              //   in Loop: Header=BB80_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB80_13
.LBB80_11:                              // %.preheader
                                        //   in Loop: Header=BB80_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB80_12:                              //   Parent Loop BB80_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB80_12
.LBB80_13:                              //   in Loop: Header=BB80_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB80_3
// %bb.14:                              //   in Loop: Header=BB80_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB80_3
.LBB80_15:
	cmp	w20, #0
	b.le	.LBB80_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB80_18
.LBB80_17:                              //   in Loop: Header=BB80_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB80_33
.LBB80_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB80_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB80_20
// %bb.19:                              //   in Loop: Header=BB80_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB80_25
.LBB80_20:                              //   in Loop: Header=BB80_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB80_23
// %bb.21:                              //   in Loop: Header=BB80_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB80_24
// %bb.22:                              //   in Loop: Header=BB80_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB80_23:                              //   in Loop: Header=BB80_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB80_24:                              //   in Loop: Header=BB80_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB80_27
.LBB80_25:                              // %.preheader3
                                        //   in Loop: Header=BB80_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB80_26:                              //   Parent Loop BB80_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB80_26
.LBB80_27:                              //   in Loop: Header=BB80_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB80_17
// %bb.28:                              //   in Loop: Header=BB80_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB80_17
.LBB80_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB80_31
.LBB80_30:                              //   in Loop: Header=BB80_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB80_33
.LBB80_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB80_30
// %bb.32:                              //   in Loop: Header=BB80_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB80_30
.LBB80_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB80_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB80_37
.LBB80_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB80_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB80_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB80_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end80:
	.size	_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end80-_Z26test_do_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB81_33
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #28
	movk	w13, #41666, lsl #16
	b.lt	.LBB81_15
// %bb.2:
	lsr	w9, w9, #2
	mov	w10, #18725                     // =0x4925
	mov	w24, #35256                     // =0x89b8
	movk	w10, #9362, lsl #16
	mov	w23, #38821                     // =0x97a5
	movk	w24, #48166, lsl #16
	umull	x9, w9, w10
	mov	w10, #28                        // =0x1c
	movk	w23, #4117, lsl #16
	dup	v6.4s, w23
	dup	v7.4s, w24
	mov	w14, #46592                     // =0xb600
	mov	w19, #4128                      // =0x1020
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	lsr	x9, x9, #32
	sub	w22, w20, #27
	movk	w19, #37943, lsl #16
	adrp	x26, init_value
	stp	q7, q6, [x29, #-32]             // 32-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	sub	x25, x9, x28
	add	x9, x21, w28, uxtw #2
	and	x10, x25, #0xfffffffffffffff8
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	b	.LBB81_4
.LBB81_3:                               //   in Loop: Header=BB81_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB81_33
.LBB81_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB81_5 Depth 2
                                        //     Child Loop BB81_9 Depth 2
                                        //     Child Loop BB81_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB81_5:                               //   Parent Loop BB81_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11, #64]
	add	x10, x10, #28
	ldp	q3, q2, [x11]
	cmp	x10, x22
	ldr	q4, [x11, #96]
	ldr	q5, [x11, #32]
	add	v4.4s, v5.4s, v4.4s
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldr	q2, [x11, #48]
	add	x11, x11, #112
	add	v1.4s, v1.4s, v4.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w23, w9
	add	w9, w9, w19
	b.lo	.LBB81_5
// %bb.6:                               //   in Loop: Header=BB81_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB81_13
// %bb.7:                               //   in Loop: Header=BB81_4 Depth=1
	cmp	x25, #7
	mov	x11, x28
	b.ls	.LBB81_11
// %bb.8:                               //   in Loop: Header=BB81_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB81_9:                               //   Parent Loop BB81_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB81_9
// %bb.10:                              //   in Loop: Header=BB81_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x25, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB81_13
.LBB81_11:                              // %.preheader
                                        //   in Loop: Header=BB81_4 Depth=1
	ldr	x12, [sp, #24]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB81_12:                              //   Parent Loop BB81_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB81_12
.LBB81_13:                              //   in Loop: Header=BB81_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB81_3
// %bb.14:                              //   in Loop: Header=BB81_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [x29, #-32]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB81_3
.LBB81_15:
	cmp	w20, #0
	b.le	.LBB81_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB81_18
.LBB81_17:                              //   in Loop: Header=BB81_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB81_33
.LBB81_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB81_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB81_20
// %bb.19:                              //   in Loop: Header=BB81_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB81_25
.LBB81_20:                              //   in Loop: Header=BB81_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB81_23
// %bb.21:                              //   in Loop: Header=BB81_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB81_24
// %bb.22:                              //   in Loop: Header=BB81_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB81_23:                              //   in Loop: Header=BB81_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB81_24:                              //   in Loop: Header=BB81_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB81_27
.LBB81_25:                              // %.preheader3
                                        //   in Loop: Header=BB81_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB81_26:                              //   Parent Loop BB81_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB81_26
.LBB81_27:                              //   in Loop: Header=BB81_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB81_17
// %bb.28:                              //   in Loop: Header=BB81_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB81_17
.LBB81_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB81_31
.LBB81_30:                              //   in Loop: Header=BB81_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB81_33
.LBB81_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB81_30
// %bb.32:                              //   in Loop: Header=BB81_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB81_30
.LBB81_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB81_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB81_37
.LBB81_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB81_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB81_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB81_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end81:
	.size	_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end81-_Z26test_do_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB82_33
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #27
	movk	w16, #41666, lsl #16
	b.lt	.LBB82_15
// %bb.2:
	mov	w10, #19419                     // =0x4bdb
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #12136, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w17, #46592                     // =0xb600
	mov	w26, #34408                     // =0x8668
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w25, w20, #26
	add	x22, x21, #104
	lsr	x10, x10, #32
	movk	w26, #55312, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #27                        // =0x1b
	lsr	w9, w9, #4
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB82_4
.LBB82_3:                               //   in Loop: Header=BB82_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB82_33
.LBB82_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB82_5 Depth 2
                                        //     Child Loop BB82_9 Depth 2
                                        //     Child Loop BB82_12 Depth 2
	mov	w9, wzr
	mov	x10, x22
	mov	w11, #24                        // =0x18
.LBB82_5:                               //   Parent Loop BB82_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-40]
	ldur	q1, [x10, #-104]
	ldur	q2, [x10, #-24]
	ldur	q3, [x10, #-88]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-72]
	add	v2.4s, v3.4s, v2.4s
	ldur	q3, [x10, #-56]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w14, [x10], #108
	add	v2.4s, v2.4s, v3.4s
	add	w13, w13, w14
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #3
	add	x11, x11, #27
	cmp	x12, x25
	add	w9, w9, w26
	b.lo	.LBB82_5
// %bb.6:                               //   in Loop: Header=BB82_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB82_13
// %bb.7:                               //   in Loop: Header=BB82_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB82_11
// %bb.8:                               //   in Loop: Header=BB82_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB82_9:                               //   Parent Loop BB82_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB82_9
// %bb.10:                              //   in Loop: Header=BB82_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB82_13
.LBB82_11:                              // %.preheader
                                        //   in Loop: Header=BB82_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB82_12:                              //   Parent Loop BB82_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB82_12
.LBB82_13:                              //   in Loop: Header=BB82_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB82_3
// %bb.14:                              //   in Loop: Header=BB82_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB82_3
.LBB82_15:
	cmp	w20, #0
	b.le	.LBB82_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB82_18
.LBB82_17:                              //   in Loop: Header=BB82_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB82_33
.LBB82_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB82_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB82_20
// %bb.19:                              //   in Loop: Header=BB82_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB82_25
.LBB82_20:                              //   in Loop: Header=BB82_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB82_23
// %bb.21:                              //   in Loop: Header=BB82_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB82_24
// %bb.22:                              //   in Loop: Header=BB82_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB82_23:                              //   in Loop: Header=BB82_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB82_24:                              //   in Loop: Header=BB82_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB82_27
.LBB82_25:                              // %.preheader3
                                        //   in Loop: Header=BB82_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB82_26:                              //   Parent Loop BB82_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB82_26
.LBB82_27:                              //   in Loop: Header=BB82_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB82_17
// %bb.28:                              //   in Loop: Header=BB82_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB82_17
.LBB82_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB82_31
.LBB82_30:                              //   in Loop: Header=BB82_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB82_33
.LBB82_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB82_30
// %bb.32:                              //   in Loop: Header=BB82_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB82_30
.LBB82_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB82_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB82_37
.LBB82_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB82_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB82_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB82_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end82:
	.size	_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end82-_Z26test_do_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB83_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #26
	movk	w15, #41666, lsl #16
	b.lt	.LBB83_15
// %bb.2:
	mov	w10, #60495                     // =0xec4f
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #20164, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #26                        // =0x1a
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #64688                     // =0xfcb0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w25, w20, #25
	lsr	x9, x9, #35
	add	x22, x21, #100
	movk	w26, #7145, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB83_4
.LBB83_3:                               //   in Loop: Header=BB83_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB83_33
.LBB83_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB83_5 Depth 2
                                        //     Child Loop BB83_9 Depth 2
                                        //     Child Loop BB83_12 Depth 2
	mov	w9, wzr
	mov	x10, x22
	mov	w11, #24                        // =0x18
.LBB83_5:                               //   Parent Loop BB83_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-100]
	ldur	q2, [x10, #-20]
	ldur	q3, [x10, #-84]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-68]
	add	v2.4s, v3.4s, v2.4s
	ldur	q3, [x10, #-52]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #104
	add	v2.4s, v2.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #2
	add	x11, x11, #26
	cmp	x12, x25
	add	w9, w9, w26
	b.lo	.LBB83_5
// %bb.6:                               //   in Loop: Header=BB83_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB83_13
// %bb.7:                               //   in Loop: Header=BB83_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB83_11
// %bb.8:                               //   in Loop: Header=BB83_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB83_9:                               //   Parent Loop BB83_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB83_9
// %bb.10:                              //   in Loop: Header=BB83_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB83_13
.LBB83_11:                              // %.preheader
                                        //   in Loop: Header=BB83_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB83_12:                              //   Parent Loop BB83_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB83_12
.LBB83_13:                              //   in Loop: Header=BB83_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB83_3
// %bb.14:                              //   in Loop: Header=BB83_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB83_3
.LBB83_15:
	cmp	w20, #0
	b.le	.LBB83_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB83_18
.LBB83_17:                              //   in Loop: Header=BB83_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB83_33
.LBB83_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB83_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB83_20
// %bb.19:                              //   in Loop: Header=BB83_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB83_25
.LBB83_20:                              //   in Loop: Header=BB83_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB83_23
// %bb.21:                              //   in Loop: Header=BB83_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB83_24
// %bb.22:                              //   in Loop: Header=BB83_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB83_23:                              //   in Loop: Header=BB83_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB83_24:                              //   in Loop: Header=BB83_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB83_27
.LBB83_25:                              // %.preheader3
                                        //   in Loop: Header=BB83_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB83_26:                              //   Parent Loop BB83_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB83_26
.LBB83_27:                              //   in Loop: Header=BB83_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB83_17
// %bb.28:                              //   in Loop: Header=BB83_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB83_17
.LBB83_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB83_31
.LBB83_30:                              //   in Loop: Header=BB83_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB83_33
.LBB83_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB83_30
// %bb.32:                              //   in Loop: Header=BB83_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB83_30
.LBB83_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB83_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB83_37
.LBB83_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB83_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB83_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB83_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end83:
	.size	_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end83-_Z26test_do_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB84_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #25
	movk	w14, #41666, lsl #16
	b.lt	.LBB84_15
// %bb.2:
	mov	w10, #34079                     // =0x851f
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #20971, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #25                        // =0x19
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w15, #46592                     // =0xb600
	mov	w26, #29432                     // =0x72f8
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w25, w20, #24
	lsr	x9, x9, #35
	add	x22, x21, #96
	movk	w26, #24515, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB84_4
.LBB84_3:                               //   in Loop: Header=BB84_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB84_33
.LBB84_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB84_5 Depth 2
                                        //     Child Loop BB84_9 Depth 2
                                        //     Child Loop BB84_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB84_5:                               //   Parent Loop BB84_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #64]
	ldr	w12, [x22, x10, lsl #2]
	ldp	q2, q3, [x11]
	add	x10, x10, #25
	cmp	x10, x25
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldp	q2, q3, [x11, #32]
	add	x11, x11, #100
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w23, w9
	add	w9, w9, w26
	b.lo	.LBB84_5
// %bb.6:                               //   in Loop: Header=BB84_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB84_13
// %bb.7:                               //   in Loop: Header=BB84_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB84_11
// %bb.8:                               //   in Loop: Header=BB84_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB84_9:                               //   Parent Loop BB84_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB84_9
// %bb.10:                              //   in Loop: Header=BB84_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB84_13
.LBB84_11:                              // %.preheader
                                        //   in Loop: Header=BB84_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB84_12:                              //   Parent Loop BB84_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB84_12
.LBB84_13:                              //   in Loop: Header=BB84_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB84_3
// %bb.14:                              //   in Loop: Header=BB84_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB84_3
.LBB84_15:
	cmp	w20, #0
	b.le	.LBB84_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB84_18
.LBB84_17:                              //   in Loop: Header=BB84_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB84_33
.LBB84_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB84_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB84_20
// %bb.19:                              //   in Loop: Header=BB84_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB84_25
.LBB84_20:                              //   in Loop: Header=BB84_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB84_23
// %bb.21:                              //   in Loop: Header=BB84_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB84_24
// %bb.22:                              //   in Loop: Header=BB84_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB84_23:                              //   in Loop: Header=BB84_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB84_24:                              //   in Loop: Header=BB84_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB84_27
.LBB84_25:                              // %.preheader3
                                        //   in Loop: Header=BB84_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB84_26:                              //   Parent Loop BB84_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB84_26
.LBB84_27:                              //   in Loop: Header=BB84_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB84_17
// %bb.28:                              //   in Loop: Header=BB84_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB84_17
.LBB84_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB84_31
.LBB84_30:                              //   in Loop: Header=BB84_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB84_33
.LBB84_31:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB84_30
// %bb.32:                              //   in Loop: Header=BB84_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB84_30
.LBB84_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB84_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB84_37
.LBB84_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB84_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB84_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB84_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end84:
	.size	_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end84-_Z26test_do_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB85_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #24
	movk	w13, #41666, lsl #16
	b.lt	.LBB85_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #24                        // =0x18
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w14, #46592                     // =0xb600
	mov	w19, #59712                     // =0xe940
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w25, w20, #23
	lsr	x9, x9, #36
	movk	w19, #41884, lsl #16
	adrp	x26, init_value
	stp	q5, q4, [x29, #-32]             // 32-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	and	x10, x9, #0x7
	stp	x10, x9, [sp, #40]              // 16-byte Folded Spill
	sub	x22, x9, x28
	add	x9, x21, w28, uxtw #2
	sub	x10, x22, x10
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB85_4
.LBB85_3:                               //   in Loop: Header=BB85_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB85_32
.LBB85_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB85_5 Depth 2
                                        //     Child Loop BB85_9 Depth 2
                                        //     Child Loop BB85_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB85_5:                               //   Parent Loop BB85_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #64]
	add	x10, x10, #24
	ldp	q2, q3, [x11]
	cmp	x10, x25
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldp	q2, q3, [x11, #32]
	add	x11, x11, #96
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w23, w9
	add	w9, w9, w19
	b.lo	.LBB85_5
// %bb.6:                               //   in Loop: Header=BB85_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB85_13
// %bb.7:                               //   in Loop: Header=BB85_4 Depth=1
	cmp	x22, #7
	mov	x11, x28
	b.ls	.LBB85_11
// %bb.8:                               //   in Loop: Header=BB85_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB85_9:                               //   Parent Loop BB85_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB85_9
// %bb.10:                              //   in Loop: Header=BB85_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	cbz	x10, .LBB85_13
.LBB85_11:                              // %.preheader
                                        //   in Loop: Header=BB85_4 Depth=1
	ldr	x12, [sp, #48]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB85_12:                              //   Parent Loop BB85_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB85_12
.LBB85_13:                              //   in Loop: Header=BB85_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB85_3
// %bb.14:                              //   in Loop: Header=BB85_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q5, q4, [x29, #-32]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB85_3
.LBB85_15:
	cmp	w20, #0
	b.le	.LBB85_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB85_18
.LBB85_17:                              //   in Loop: Header=BB85_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB85_32
.LBB85_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB85_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB85_20
// %bb.19:                              //   in Loop: Header=BB85_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB85_24
.LBB85_20:                              //   in Loop: Header=BB85_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB85_22
// %bb.21:                              //   in Loop: Header=BB85_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB85_23
.LBB85_22:                              //   in Loop: Header=BB85_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB85_23:                              //   in Loop: Header=BB85_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB85_26
.LBB85_24:                              // %.preheader3
                                        //   in Loop: Header=BB85_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB85_25:                              //   Parent Loop BB85_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB85_25
.LBB85_26:                              //   in Loop: Header=BB85_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB85_17
// %bb.27:                              //   in Loop: Header=BB85_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB85_17
.LBB85_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB85_30
.LBB85_29:                              //   in Loop: Header=BB85_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB85_32
.LBB85_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB85_29
// %bb.31:                              //   in Loop: Header=BB85_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB85_29
.LBB85_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB85_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB85_36
.LBB85_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB85_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB85_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB85_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end85:
	.size	_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end85-_Z26test_do_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB86_32
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #23
	movk	w16, #41666, lsl #16
	b.lt	.LBB86_15
// %bb.2:
	mov	w10, #17097                     // =0x42c9
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #45590, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #23                        // =0x17
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w17, #46592                     // =0xb600
	mov	w26, #24456                     // =0x5f88
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w20, #22
	lsr	x9, x9, #36
	add	x25, x21, #88
	movk	w26, #59254, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB86_4
.LBB86_3:                               //   in Loop: Header=BB86_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB86_32
.LBB86_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB86_5 Depth 2
                                        //     Child Loop BB86_9 Depth 2
                                        //     Child Loop BB86_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #20                        // =0x14
.LBB86_5:                               //   Parent Loop BB86_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-88]
	ldur	q2, [x10, #-40]
	ldur	q3, [x10, #-72]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-56]
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w14, [x10], #92
	add	w13, w13, w14
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #3
	add	x11, x11, #23
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB86_5
// %bb.6:                               //   in Loop: Header=BB86_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB86_13
// %bb.7:                               //   in Loop: Header=BB86_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB86_11
// %bb.8:                               //   in Loop: Header=BB86_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB86_9:                               //   Parent Loop BB86_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB86_9
// %bb.10:                              //   in Loop: Header=BB86_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB86_13
.LBB86_11:                              // %.preheader
                                        //   in Loop: Header=BB86_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB86_12:                              //   Parent Loop BB86_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB86_12
.LBB86_13:                              //   in Loop: Header=BB86_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB86_3
// %bb.14:                              //   in Loop: Header=BB86_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB86_3
.LBB86_15:
	cmp	w20, #0
	b.le	.LBB86_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB86_18
.LBB86_17:                              //   in Loop: Header=BB86_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB86_32
.LBB86_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB86_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB86_20
// %bb.19:                              //   in Loop: Header=BB86_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB86_24
.LBB86_20:                              //   in Loop: Header=BB86_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB86_22
// %bb.21:                              //   in Loop: Header=BB86_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB86_23
.LBB86_22:                              //   in Loop: Header=BB86_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB86_23:                              //   in Loop: Header=BB86_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB86_26
.LBB86_24:                              // %.preheader3
                                        //   in Loop: Header=BB86_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB86_25:                              //   Parent Loop BB86_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB86_25
.LBB86_26:                              //   in Loop: Header=BB86_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB86_17
// %bb.27:                              //   in Loop: Header=BB86_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB86_17
.LBB86_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB86_30
.LBB86_29:                              //   in Loop: Header=BB86_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB86_32
.LBB86_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB86_29
// %bb.31:                              //   in Loop: Header=BB86_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB86_29
.LBB86_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB86_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB86_36
.LBB86_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB86_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB86_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB86_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end86:
	.size	_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end86-_Z26test_do_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB87_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #22
	movk	w15, #41666, lsl #16
	b.lt	.LBB87_15
// %bb.2:
	mov	w10, #35747                     // =0x8ba3
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #47662, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #22                        // =0x16
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #54736                     // =0xd5d0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w22, w20, #21
	lsr	x9, x9, #36
	add	x25, x21, #84
	movk	w26, #11087, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB87_4
.LBB87_3:                               //   in Loop: Header=BB87_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB87_32
.LBB87_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB87_5 Depth 2
                                        //     Child Loop BB87_9 Depth 2
                                        //     Child Loop BB87_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #20                        // =0x14
.LBB87_5:                               //   Parent Loop BB87_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-84]
	ldur	q2, [x10, #-36]
	ldur	q3, [x10, #-68]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-52]
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #88
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #2
	add	x11, x11, #22
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB87_5
// %bb.6:                               //   in Loop: Header=BB87_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB87_13
// %bb.7:                               //   in Loop: Header=BB87_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB87_11
// %bb.8:                               //   in Loop: Header=BB87_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB87_9:                               //   Parent Loop BB87_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB87_9
// %bb.10:                              //   in Loop: Header=BB87_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB87_13
.LBB87_11:                              // %.preheader
                                        //   in Loop: Header=BB87_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB87_12:                              //   Parent Loop BB87_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB87_12
.LBB87_13:                              //   in Loop: Header=BB87_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB87_3
// %bb.14:                              //   in Loop: Header=BB87_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB87_3
.LBB87_15:
	cmp	w20, #0
	b.le	.LBB87_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB87_18
.LBB87_17:                              //   in Loop: Header=BB87_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB87_32
.LBB87_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB87_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB87_20
// %bb.19:                              //   in Loop: Header=BB87_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB87_24
.LBB87_20:                              //   in Loop: Header=BB87_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB87_22
// %bb.21:                              //   in Loop: Header=BB87_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB87_23
.LBB87_22:                              //   in Loop: Header=BB87_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB87_23:                              //   in Loop: Header=BB87_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB87_26
.LBB87_24:                              // %.preheader3
                                        //   in Loop: Header=BB87_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB87_25:                              //   Parent Loop BB87_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB87_25
.LBB87_26:                              //   in Loop: Header=BB87_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB87_17
// %bb.27:                              //   in Loop: Header=BB87_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB87_17
.LBB87_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB87_30
.LBB87_29:                              //   in Loop: Header=BB87_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB87_32
.LBB87_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB87_29
// %bb.31:                              //   in Loop: Header=BB87_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB87_29
.LBB87_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB87_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB87_36
.LBB87_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB87_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB87_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB87_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end87:
	.size	_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end87-_Z26test_do_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB88_32
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #21
	movk	w14, #41666, lsl #16
	b.lt	.LBB88_15
// %bb.2:
	mov	w10, #24967                     // =0x6187
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #34328, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w15, #46592                     // =0xb600
	mov	w26, #19480                     // =0x4c18
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w25, w20, #20
	add	x22, x21, #80
	lsr	x10, x10, #32
	movk	w26, #28457, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #21                        // =0x15
	lsr	w9, w9, #4
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB88_4
.LBB88_3:                               //   in Loop: Header=BB88_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB88_32
.LBB88_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB88_5 Depth 2
                                        //     Child Loop BB88_9 Depth 2
                                        //     Child Loop BB88_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB88_5:                               //   Parent Loop BB88_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q0, [x11, #48]
	ldr	w12, [x22, x10, lsl #2]
	ldp	q1, q2, [x11]
	add	x10, x10, #21
	cmp	x10, x25
	add	v0.4s, v1.4s, v0.4s
	ldr	q1, [x11, #32]
	add	v2.4s, v2.4s, v3.4s
	add	x11, x11, #84
	add	v0.4s, v0.4s, v1.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w23, w9
	add	w9, w9, w26
	b.lo	.LBB88_5
// %bb.6:                               //   in Loop: Header=BB88_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB88_13
// %bb.7:                               //   in Loop: Header=BB88_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB88_11
// %bb.8:                               //   in Loop: Header=BB88_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB88_9:                               //   Parent Loop BB88_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB88_9
// %bb.10:                              //   in Loop: Header=BB88_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB88_13
.LBB88_11:                              // %.preheader
                                        //   in Loop: Header=BB88_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB88_12:                              //   Parent Loop BB88_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB88_12
.LBB88_13:                              //   in Loop: Header=BB88_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB88_3
// %bb.14:                              //   in Loop: Header=BB88_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB88_3
.LBB88_15:
	cmp	w20, #0
	b.le	.LBB88_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB88_18
.LBB88_17:                              //   in Loop: Header=BB88_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB88_32
.LBB88_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB88_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB88_20
// %bb.19:                              //   in Loop: Header=BB88_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB88_24
.LBB88_20:                              //   in Loop: Header=BB88_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB88_22
// %bb.21:                              //   in Loop: Header=BB88_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB88_23
.LBB88_22:                              //   in Loop: Header=BB88_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB88_23:                              //   in Loop: Header=BB88_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB88_26
.LBB88_24:                              // %.preheader3
                                        //   in Loop: Header=BB88_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB88_25:                              //   Parent Loop BB88_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB88_25
.LBB88_26:                              //   in Loop: Header=BB88_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB88_17
// %bb.27:                              //   in Loop: Header=BB88_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB88_17
.LBB88_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB88_30
.LBB88_29:                              //   in Loop: Header=BB88_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB88_32
.LBB88_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB88_29
// %bb.31:                              //   in Loop: Header=BB88_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB88_29
.LBB88_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB88_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB88_36
.LBB88_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB88_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB88_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB88_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end88:
	.size	_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end88-_Z26test_do_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN13do_loop_testsILi19EiE7do_testEPKiPKc,"axG",@progbits,_ZN13do_loop_testsILi19EiE7do_testEPKiPKc,comdat
	.weak	_ZN13do_loop_testsILi19EiE7do_testEPKiPKc // -- Begin function _ZN13do_loop_testsILi19EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN13do_loop_testsILi19EiE7do_testEPKiPKc,@function
_ZN13do_loop_testsILi19EiE7do_testEPKiPKc: // @_ZN13do_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN13do_loop_testsILi10EiE7do_testEPKiPKc
	adrp	x20, temp_string+1000
	add	x20, x20, :lo12:temp_string+1000
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
.Lfunc_end89:
	.size	_ZN13do_loop_testsILi19EiE7do_testEPKiPKc, .Lfunc_end89-_ZN13do_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB90_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #20
	movk	w13, #41666, lsl #16
	b.lt	.LBB90_15
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #52428, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #20                        // =0x14
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w14, #46592                     // =0xb600
	mov	w26, #49760                     // =0xc260
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w22, w20, #19
	lsr	x9, x9, #36
	movk	w26, #45826, lsl #16
	adrp	x19, init_value
	stp	q5, q4, [x29, #-32]             // 32-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	sub	x25, x9, x28
	add	x9, x21, w28, uxtw #2
	and	x10, x25, #0xfffffffffffffff8
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	b	.LBB90_4
.LBB90_3:                               //   in Loop: Header=BB90_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB90_32
.LBB90_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB90_5 Depth 2
                                        //     Child Loop BB90_9 Depth 2
                                        //     Child Loop BB90_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB90_5:                               //   Parent Loop BB90_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q0, [x11, #48]
	add	x10, x10, #20
	ldp	q1, q2, [x11]
	cmp	x10, x22
	add	v0.4s, v1.4s, v0.4s
	ldr	q1, [x11, #32]
	add	v2.4s, v2.4s, v3.4s
	add	x11, x11, #80
	add	v0.4s, v0.4s, v1.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w23, w9
	add	w9, w9, w26
	b.lo	.LBB90_5
// %bb.6:                               //   in Loop: Header=BB90_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB90_13
// %bb.7:                               //   in Loop: Header=BB90_4 Depth=1
	cmp	x25, #7
	mov	x11, x28
	b.ls	.LBB90_11
// %bb.8:                               //   in Loop: Header=BB90_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB90_9:                               //   Parent Loop BB90_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB90_9
// %bb.10:                              //   in Loop: Header=BB90_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x25, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB90_13
.LBB90_11:                              // %.preheader
                                        //   in Loop: Header=BB90_4 Depth=1
	ldr	x12, [sp, #24]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB90_12:                              //   Parent Loop BB90_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB90_12
.LBB90_13:                              //   in Loop: Header=BB90_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB90_3
// %bb.14:                              //   in Loop: Header=BB90_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q5, q4, [x29, #-32]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB90_3
.LBB90_15:
	cmp	w20, #0
	b.le	.LBB90_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB90_18
.LBB90_17:                              //   in Loop: Header=BB90_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB90_32
.LBB90_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB90_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB90_20
// %bb.19:                              //   in Loop: Header=BB90_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB90_24
.LBB90_20:                              //   in Loop: Header=BB90_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB90_22
// %bb.21:                              //   in Loop: Header=BB90_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB90_23
.LBB90_22:                              //   in Loop: Header=BB90_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
.LBB90_23:                              //   in Loop: Header=BB90_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB90_26
.LBB90_24:                              // %.preheader3
                                        //   in Loop: Header=BB90_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB90_25:                              //   Parent Loop BB90_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB90_25
.LBB90_26:                              //   in Loop: Header=BB90_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB90_17
// %bb.27:                              //   in Loop: Header=BB90_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB90_17
.LBB90_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB90_30
.LBB90_29:                              //   in Loop: Header=BB90_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB90_32
.LBB90_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB90_29
// %bb.31:                              //   in Loop: Header=BB90_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB90_29
.LBB90_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB90_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB90_36
.LBB90_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB90_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB90_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB90_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end90:
	.size	_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end90-_Z26test_do_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB91_32
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #19
	movk	w16, #41666, lsl #16
	b.lt	.LBB91_15
// %bb.2:
	mov	w10, #27595                     // =0x6bcb
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #44840, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w17, #46592                     // =0xb600
	mov	w26, #14504                     // =0x38a8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w25, w20, #18
	add	x22, x21, #72
	lsr	x10, x10, #32
	movk	w26, #63196, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #19                        // =0x13
	lsr	w9, w9, #4
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB91_4
.LBB91_3:                               //   in Loop: Header=BB91_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB91_32
.LBB91_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB91_5 Depth 2
                                        //     Child Loop BB91_9 Depth 2
                                        //     Child Loop BB91_12 Depth 2
	mov	w9, wzr
	mov	x10, x22
	mov	w11, #16                        // =0x10
.LBB91_5:                               //   Parent Loop BB91_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-40]
	ldur	q1, [x10, #-72]
	ldur	q2, [x10, #-24]
	ldur	q3, [x10, #-56]
	add	v0.4s, v1.4s, v0.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-8]
	ldr	w14, [x10], #76
	add	v0.4s, v0.4s, v2.4s
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #3
	add	x11, x11, #19
	cmp	x12, x25
	add	w9, w9, w26
	b.lo	.LBB91_5
// %bb.6:                               //   in Loop: Header=BB91_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB91_13
// %bb.7:                               //   in Loop: Header=BB91_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB91_11
// %bb.8:                               //   in Loop: Header=BB91_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB91_9:                               //   Parent Loop BB91_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB91_9
// %bb.10:                              //   in Loop: Header=BB91_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB91_13
.LBB91_11:                              // %.preheader
                                        //   in Loop: Header=BB91_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB91_12:                              //   Parent Loop BB91_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB91_12
.LBB91_13:                              //   in Loop: Header=BB91_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB91_3
// %bb.14:                              //   in Loop: Header=BB91_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB91_3
.LBB91_15:
	cmp	w20, #0
	b.le	.LBB91_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB91_18
.LBB91_17:                              //   in Loop: Header=BB91_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB91_32
.LBB91_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB91_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB91_20
// %bb.19:                              //   in Loop: Header=BB91_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB91_24
.LBB91_20:                              //   in Loop: Header=BB91_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB91_22
// %bb.21:                              //   in Loop: Header=BB91_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB91_23
.LBB91_22:                              //   in Loop: Header=BB91_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB91_23:                              //   in Loop: Header=BB91_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB91_26
.LBB91_24:                              // %.preheader3
                                        //   in Loop: Header=BB91_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB91_25:                              //   Parent Loop BB91_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB91_25
.LBB91_26:                              //   in Loop: Header=BB91_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB91_17
// %bb.27:                              //   in Loop: Header=BB91_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB91_17
.LBB91_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB91_30
.LBB91_29:                              //   in Loop: Header=BB91_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB91_32
.LBB91_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB91_29
// %bb.31:                              //   in Loop: Header=BB91_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB91_29
.LBB91_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB91_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB91_36
.LBB91_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB91_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB91_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB91_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end91:
	.size	_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end91-_Z26test_do_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB92_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #18
	movk	w15, #41666, lsl #16
	b.lt	.LBB92_15
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #14563, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #18                        // =0x12
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #44784                     // =0xaef0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w25, w20, #17
	lsr	x9, x9, #34
	add	x22, x21, #68
	movk	w26, #15029, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB92_4
.LBB92_3:                               //   in Loop: Header=BB92_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB92_32
.LBB92_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB92_5 Depth 2
                                        //     Child Loop BB92_9 Depth 2
                                        //     Child Loop BB92_12 Depth 2
	mov	w9, wzr
	mov	x10, x22
	mov	w11, #16                        // =0x10
.LBB92_5:                               //   Parent Loop BB92_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-68]
	ldur	q2, [x10, #-20]
	ldur	q3, [x10, #-52]
	add	v0.4s, v1.4s, v0.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	x10, x10, #72
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #2
	add	x11, x11, #18
	cmp	x12, x25
	add	w9, w9, w26
	b.lo	.LBB92_5
// %bb.6:                               //   in Loop: Header=BB92_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB92_13
// %bb.7:                               //   in Loop: Header=BB92_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB92_11
// %bb.8:                               //   in Loop: Header=BB92_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB92_9:                               //   Parent Loop BB92_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB92_9
// %bb.10:                              //   in Loop: Header=BB92_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB92_13
.LBB92_11:                              // %.preheader
                                        //   in Loop: Header=BB92_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB92_12:                              //   Parent Loop BB92_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB92_12
.LBB92_13:                              //   in Loop: Header=BB92_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB92_3
// %bb.14:                              //   in Loop: Header=BB92_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB92_3
.LBB92_15:
	cmp	w20, #0
	b.le	.LBB92_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB92_18
.LBB92_17:                              //   in Loop: Header=BB92_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB92_32
.LBB92_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB92_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB92_20
// %bb.19:                              //   in Loop: Header=BB92_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB92_24
.LBB92_20:                              //   in Loop: Header=BB92_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB92_22
// %bb.21:                              //   in Loop: Header=BB92_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB92_23
.LBB92_22:                              //   in Loop: Header=BB92_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB92_23:                              //   in Loop: Header=BB92_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB92_26
.LBB92_24:                              // %.preheader3
                                        //   in Loop: Header=BB92_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB92_25:                              //   Parent Loop BB92_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB92_25
.LBB92_26:                              //   in Loop: Header=BB92_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB92_17
// %bb.27:                              //   in Loop: Header=BB92_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB92_17
.LBB92_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB92_30
.LBB92_29:                              //   in Loop: Header=BB92_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB92_32
.LBB92_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB92_29
// %bb.31:                              //   in Loop: Header=BB92_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB92_29
.LBB92_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB92_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB92_36
.LBB92_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB92_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB92_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB92_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end92:
	.size	_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end92-_Z26test_do_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB93_32
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #17
	movk	w14, #41666, lsl #16
	b.lt	.LBB93_15
// %bb.2:
	mov	w10, #61681                     // =0xf0f1
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #61680, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, w20
	dup	v4.4s, w19
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w26, #9528                      // =0x2538
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	lsr	x9, x9, #36
	sub	w23, w20, #16
	add	x25, x21, #64
	movk	w26, #32399, lsl #16
	adrp	x24, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #4
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w22, w9, #17
	sub	x10, x10, x22
	add	x9, x21, w22, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x22
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB93_4
.LBB93_3:                               //   in Loop: Header=BB93_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB93_32
.LBB93_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB93_5 Depth 2
                                        //     Child Loop BB93_9 Depth 2
                                        //     Child Loop BB93_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB93_5:                               //   Parent Loop BB93_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #32]
	ldr	w12, [x25, x10, lsl #2]
	ldp	q2, q3, [x11]
	add	x10, x10, #17
	cmp	x10, x23
	add	x11, x11, #68
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB93_5
// %bb.6:                               //   in Loop: Header=BB93_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB93_13
// %bb.7:                               //   in Loop: Header=BB93_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x22
	cmp	x10, #7
	b.ls	.LBB93_11
// %bb.8:                               //   in Loop: Header=BB93_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB93_9:                               //   Parent Loop BB93_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB93_9
// %bb.10:                              //   in Loop: Header=BB93_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB93_13
.LBB93_11:                              // %.preheader
                                        //   in Loop: Header=BB93_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB93_12:                              //   Parent Loop BB93_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB93_12
.LBB93_13:                              //   in Loop: Header=BB93_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB93_3
// %bb.14:                              //   in Loop: Header=BB93_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB93_3
.LBB93_15:
	cmp	w20, #0
	b.le	.LBB93_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB93_18
.LBB93_17:                              //   in Loop: Header=BB93_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB93_32
.LBB93_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB93_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB93_20
// %bb.19:                              //   in Loop: Header=BB93_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB93_24
.LBB93_20:                              //   in Loop: Header=BB93_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB93_22
// %bb.21:                              //   in Loop: Header=BB93_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB93_23
.LBB93_22:                              //   in Loop: Header=BB93_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB93_23:                              //   in Loop: Header=BB93_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB93_26
.LBB93_24:                              // %.preheader3
                                        //   in Loop: Header=BB93_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB93_25:                              //   Parent Loop BB93_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB93_25
.LBB93_26:                              //   in Loop: Header=BB93_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB93_17
// %bb.27:                              //   in Loop: Header=BB93_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB93_17
.LBB93_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB93_30
.LBB93_29:                              //   in Loop: Header=BB93_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB93_32
.LBB93_30:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB93_29
// %bb.31:                              //   in Loop: Header=BB93_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB93_29
.LBB93_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB93_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB93_36
.LBB93_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB93_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB93_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB93_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end93:
	.size	_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end93-_Z26test_do_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB94_26
// %bb.1:
	mov	w26, #58432                     // =0xe440
	subs	w9, w21, #16
	movk	w26, #41666, lsl #16
	b.lt	.LBB94_15
// %bb.2:
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	and	w9, w9, #0xfffffff0
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	add	w23, w9, #16
	mov	w9, w21
	dup	v4.4s, w19
	dup	v5.4s, w28
	sub	x10, x9, x23
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	and	x11, x9, #0x7
	add	x9, x20, w23, uxtw #2
	mov	w13, #46592                     // =0xb600
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	sub	x10, x10, x11
	mov	w25, #39808                     // =0x9b80
	mov	w27, wzr
	movk	w13, #46159, lsl #16
	sub	w22, w21, #15
	stp	x10, x11, [sp, #24]             // 16-byte Folded Spill
	add	x10, x10, x23
	add	x9, x9, #16
	movk	w25, #49768, lsl #16
	adrp	x24, init_value
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB94_4
.LBB94_3:                               //   in Loop: Header=BB94_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB94_26
.LBB94_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB94_5 Depth 2
                                        //     Child Loop BB94_9 Depth 2
                                        //     Child Loop BB94_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB94_5:                               //   Parent Loop BB94_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #32]
	add	x10, x10, #16
	ldp	q2, q3, [x11], #64
	cmp	x10, x22
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w25
	b.lo	.LBB94_5
// %bb.6:                               //   in Loop: Header=BB94_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB94_13
// %bb.7:                               //   in Loop: Header=BB94_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x23
	cmp	x10, #7
	b.ls	.LBB94_11
// %bb.8:                               //   in Loop: Header=BB94_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB94_9:                               //   Parent Loop BB94_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB94_9
// %bb.10:                              //   in Loop: Header=BB94_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	cbz	x10, .LBB94_13
.LBB94_11:                              // %.preheader
                                        //   in Loop: Header=BB94_4 Depth=1
	ldr	x12, [sp, #40]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB94_12:                              //   Parent Loop BB94_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB94_12
.LBB94_13:                              //   in Loop: Header=BB94_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w13
	cmp	w9, w10
	b.eq	.LBB94_3
// %bb.14:                              //   in Loop: Header=BB94_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w13, #46592                     // =0xb600
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #46159, lsl #16
	b	.LBB94_3
.LBB94_15:
	cmp	w21, #0
	b.le	.LBB94_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x27, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB94_18
.LBB94_17:                              //   in Loop: Header=BB94_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB94_26
.LBB94_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB94_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB94_19:                              //   Parent Loop BB94_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB94_19
// %bb.20:                              //   in Loop: Header=BB94_18 Depth=1
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w23
	cmp	w9, w10
	b.eq	.LBB94_17
// %bb.21:                              //   in Loop: Header=BB94_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB94_17
.LBB94_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB94_24
.LBB94_23:                              //   in Loop: Header=BB94_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB94_26
.LBB94_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w26
	cmp	w9, w22
	b.eq	.LBB94_23
// %bb.25:                              //   in Loop: Header=BB94_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB94_23
.LBB94_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB94_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB94_30
.LBB94_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB94_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB94_30:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB94_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end94:
	.size	_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end94-_Z26test_do_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB95_26
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w21, #15
	movk	w16, #41666, lsl #16
	b.lt	.LBB95_15
// %bb.2:
	mov	w10, #34953                     // =0x8889
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #34952, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w26, #4552                      // =0x11c8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w21, #14
	add	x23, x20, #56
	lsr	x9, x9, #35
	movk	w26, #1602, lsl #16
	adrp	x18, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	lsl	w10, w9, #4
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w9, w10, w9
	mov	w10, w21
	add	w25, w9, #15
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	sub	x10, x10, x25
	add	x9, x20, w25, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x25
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB95_4
.LBB95_3:                               //   in Loop: Header=BB95_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB95_26
.LBB95_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB95_5 Depth 2
                                        //     Child Loop BB95_9 Depth 2
                                        //     Child Loop BB95_12 Depth 2
	mov	w9, wzr
	mov	x10, x23
	mov	w11, #12                        // =0xc
.LBB95_5:                               //   Parent Loop BB95_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-56]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-40]
	ldr	w14, [x10], #60
	add	v0.4s, v0.4s, v1.4s
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #15
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB95_5
// %bb.6:                               //   in Loop: Header=BB95_4 Depth=1
	cmp	w25, w21
	b.ge	.LBB95_13
// %bb.7:                               //   in Loop: Header=BB95_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x25
	cmp	x10, #7
	b.ls	.LBB95_11
// %bb.8:                               //   in Loop: Header=BB95_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB95_9:                               //   Parent Loop BB95_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB95_9
// %bb.10:                              //   in Loop: Header=BB95_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB95_13
.LBB95_11:                              // %.preheader
                                        //   in Loop: Header=BB95_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB95_12:                              //   Parent Loop BB95_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB95_12
.LBB95_13:                              //   in Loop: Header=BB95_4 Depth=1
	ldr	d0, [x18, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB95_3
// %bb.14:                              //   in Loop: Header=BB95_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x24, x20
	mov	x20, x18
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	mov	x18, x20
	mov	x20, x24
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB95_3
.LBB95_15:
	cmp	w21, #0
	b.le	.LBB95_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB95_18
.LBB95_17:                              //   in Loop: Header=BB95_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB95_26
.LBB95_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB95_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB95_19:                              //   Parent Loop BB95_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB95_19
// %bb.20:                              //   in Loop: Header=BB95_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w23
	cmp	w9, w10
	b.eq	.LBB95_17
// %bb.21:                              //   in Loop: Header=BB95_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB95_17
.LBB95_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB95_24
.LBB95_23:                              //   in Loop: Header=BB95_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB95_26
.LBB95_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB95_23
// %bb.25:                              //   in Loop: Header=BB95_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB95_23
.LBB95_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB95_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB95_30
.LBB95_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB95_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB95_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB95_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end95:
	.size	_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end95-_Z26test_do_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB96_26
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w21, #14
	movk	w15, #41666, lsl #16
	b.lt	.LBB96_15
// %bb.2:
	lsr	w9, w9, #1
	mov	w10, #9363                      // =0x2493
	mov	w24, #35256                     // =0x89b8
	movk	w10, #37449, lsl #16
	mov	w22, #38821                     // =0x97a5
	movk	w24, #48166, lsl #16
	umull	x9, w9, w10
	mov	w10, #14                        // =0xe
	movk	w22, #4117, lsl #16
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #34832                     // =0x8810
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	lsr	x9, x9, #34
	sub	w23, w21, #13
	add	x25, x20, #52
	movk	w26, #18971, lsl #16
	adrp	x17, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w21
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x20, w28, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB96_4
.LBB96_3:                               //   in Loop: Header=BB96_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB96_26
.LBB96_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB96_5 Depth 2
                                        //     Child Loop BB96_9 Depth 2
                                        //     Child Loop BB96_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #12                        // =0xc
.LBB96_5:                               //   Parent Loop BB96_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-52]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-36]
	add	x10, x10, #56
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w22, w9
	add	x12, x11, #2
	add	x11, x11, #14
	cmp	x12, x23
	add	w9, w9, w26
	b.lo	.LBB96_5
// %bb.6:                               //   in Loop: Header=BB96_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB96_13
// %bb.7:                               //   in Loop: Header=BB96_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB96_11
// %bb.8:                               //   in Loop: Header=BB96_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB96_9:                               //   Parent Loop BB96_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB96_9
// %bb.10:                              //   in Loop: Header=BB96_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB96_13
.LBB96_11:                              // %.preheader
                                        //   in Loop: Header=BB96_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB96_12:                              //   Parent Loop BB96_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB96_12
.LBB96_13:                              //   in Loop: Header=BB96_4 Depth=1
	ldr	d0, [x17, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB96_3
// %bb.14:                              //   in Loop: Header=BB96_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x19, x20
	mov	x20, x17
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	mov	x17, x20
	mov	x20, x19
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB96_3
.LBB96_15:
	cmp	w21, #0
	b.le	.LBB96_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB96_18
.LBB96_17:                              //   in Loop: Header=BB96_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB96_26
.LBB96_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB96_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB96_19:                              //   Parent Loop BB96_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB96_19
// %bb.20:                              //   in Loop: Header=BB96_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w23
	cmp	w9, w10
	b.eq	.LBB96_17
// %bb.21:                              //   in Loop: Header=BB96_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB96_17
.LBB96_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB96_24
.LBB96_23:                              //   in Loop: Header=BB96_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB96_26
.LBB96_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB96_23
// %bb.25:                              //   in Loop: Header=BB96_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB96_23
.LBB96_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB96_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB96_30
.LBB96_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB96_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB96_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB96_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end96:
	.size	_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end96-_Z26test_do_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB97_26
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w21, #13
	movk	w14, #41666, lsl #16
	b.lt	.LBB97_15
// %bb.2:
	mov	w10, #60495                     // =0xec4f
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	movk	w10, #20164, lsl #16
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #13                        // =0xd
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w15, #46592                     // =0xb600
	mov	w26, #65112                     // =0xfe58
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w21, #12
	lsr	x9, x9, #34
	add	x25, x20, #48
	movk	w26, #36340, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w21
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x20, w28, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB97_4
.LBB97_3:                               //   in Loop: Header=BB97_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB97_26
.LBB97_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB97_5 Depth 2
                                        //     Child Loop BB97_9 Depth 2
                                        //     Child Loop BB97_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB97_5:                               //   Parent Loop BB97_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q1, [x11]
	ldr	q0, [x11, #32]
	ldr	w12, [x25, x10, lsl #2]
	add	x10, x10, #13
	add	x11, x11, #52
	cmp	x10, x23
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w22, w9
	add	w9, w9, w26
	b.lo	.LBB97_5
// %bb.6:                               //   in Loop: Header=BB97_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB97_13
// %bb.7:                               //   in Loop: Header=BB97_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB97_11
// %bb.8:                               //   in Loop: Header=BB97_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB97_9:                               //   Parent Loop BB97_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB97_9
// %bb.10:                              //   in Loop: Header=BB97_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB97_13
.LBB97_11:                              // %.preheader
                                        //   in Loop: Header=BB97_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB97_12:                              //   Parent Loop BB97_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB97_12
.LBB97_13:                              //   in Loop: Header=BB97_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB97_3
// %bb.14:                              //   in Loop: Header=BB97_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB97_3
.LBB97_15:
	cmp	w21, #0
	b.le	.LBB97_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB97_18
.LBB97_17:                              //   in Loop: Header=BB97_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB97_26
.LBB97_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB97_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB97_19:                              //   Parent Loop BB97_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB97_19
// %bb.20:                              //   in Loop: Header=BB97_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w23
	cmp	w9, w10
	b.eq	.LBB97_17
// %bb.21:                              //   in Loop: Header=BB97_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB97_17
.LBB97_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB97_24
.LBB97_23:                              //   in Loop: Header=BB97_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB97_26
.LBB97_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB97_23
// %bb.25:                              //   in Loop: Header=BB97_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB97_23
.LBB97_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB97_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB97_30
.LBB97_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB97_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB97_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB97_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end97:
	.size	_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end97-_Z26test_do_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB98_26
// %bb.1:
	mov	w26, #58432                     // =0xe440
	subs	w9, w21, #12
	movk	w26, #41666, lsl #16
	b.lt	.LBB98_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #12                        // =0xc
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w13, #46592                     // =0xb600
	mov	w19, #29856                     // =0x74a0
	mov	w27, wzr
	movk	w13, #46159, lsl #16
	sub	w25, w21, #11
	lsr	x9, x9, #35
	movk	w19, #53710, lsl #16
	adrp	x14, init_value
	stp	q5, q4, [x29, #-32]             // 32-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w21
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x23, x9, x28
	add	x9, x20, w28, uxtw #2
	and	x10, x23, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB98_4
.LBB98_3:                               //   in Loop: Header=BB98_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB98_26
.LBB98_4:                               // =>This Loop Header: Depth=1
                                        //     Child Loop BB98_5 Depth 2
                                        //     Child Loop BB98_9 Depth 2
                                        //     Child Loop BB98_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB98_5:                               //   Parent Loop BB98_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11, #32]
	add	x10, x10, #12
	ldp	q2, q1, [x11], #48
	cmp	x10, x25
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w22, w9
	add	w9, w9, w19
	b.lo	.LBB98_5
// %bb.6:                               //   in Loop: Header=BB98_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB98_13
// %bb.7:                               //   in Loop: Header=BB98_4 Depth=1
	cmp	x23, #7
	mov	x11, x28
	b.ls	.LBB98_11
// %bb.8:                               //   in Loop: Header=BB98_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB98_9:                               //   Parent Loop BB98_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB98_9
// %bb.10:                              //   in Loop: Header=BB98_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x23, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB98_13
.LBB98_11:                              // %.preheader
                                        //   in Loop: Header=BB98_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB98_12:                              //   Parent Loop BB98_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB98_12
.LBB98_13:                              //   in Loop: Header=BB98_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w13
	cmp	w9, w10
	b.eq	.LBB98_3
// %bb.14:                              //   in Loop: Header=BB98_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x26, x14
	bl	printf
	ldp	q5, q4, [x29, #-32]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	x14, x26
	mov	w26, #58432                     // =0xe440
	mov	w13, #46592                     // =0xb600
	ldr	w8, [x8, :lo12:iterations]
	movk	w26, #41666, lsl #16
	movk	w13, #46159, lsl #16
	b	.LBB98_3
.LBB98_15:
	cmp	w21, #0
	b.le	.LBB98_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x27, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB98_18
.LBB98_17:                              //   in Loop: Header=BB98_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB98_26
.LBB98_18:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB98_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB98_19:                              //   Parent Loop BB98_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB98_19
// %bb.20:                              //   in Loop: Header=BB98_18 Depth=1
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w23
	cmp	w9, w10
	b.eq	.LBB98_17
// %bb.21:                              //   in Loop: Header=BB98_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB98_17
.LBB98_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB98_24
.LBB98_23:                              //   in Loop: Header=BB98_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB98_26
.LBB98_24:                              // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w26
	cmp	w9, w22
	b.eq	.LBB98_23
// %bb.25:                              //   in Loop: Header=BB98_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB98_23
.LBB98_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB98_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB98_30
.LBB98_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB98_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB98_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB98_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end98:
	.size	_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end98-_Z26test_do_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN13do_loop_testsILi10EiE7do_testEPKiPKc,"axG",@progbits,_ZN13do_loop_testsILi10EiE7do_testEPKiPKc,comdat
	.weak	_ZN13do_loop_testsILi10EiE7do_testEPKiPKc // -- Begin function _ZN13do_loop_testsILi10EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN13do_loop_testsILi10EiE7do_testEPKiPKc,@function
_ZN13do_loop_testsILi10EiE7do_testEPKiPKc: // @_ZN13do_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x20, temp_string
	add	x20, x20, :lo12:temp_string
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	mov	x19, x0
	bl	_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
	add	x2, x20, #900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
.Lfunc_end99:
	.size	_ZN13do_loop_testsILi10EiE7do_testEPKiPKc, .Lfunc_end99-_ZN13do_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB100_26
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w21, #11
	movk	w16, #41666, lsl #16
	b.lt	.LBB100_15
// %bb.2:
	mov	w10, #35747                     // =0x8ba3
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	movk	w10, #47662, lsl #16
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #11                        // =0xb
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w17, #46592                     // =0xb600
	mov	w26, #60136                     // =0xeae8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w23, w21, #10
	lsr	x9, x9, #35
	add	x25, x20, #40
	movk	w26, #5543, lsl #16
	adrp	x18, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w21
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x20, w28, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB100_4
.LBB100_3:                              //   in Loop: Header=BB100_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB100_26
.LBB100_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB100_5 Depth 2
                                        //     Child Loop BB100_9 Depth 2
                                        //     Child Loop BB100_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #8                         // =0x8
.LBB100_5:                              //   Parent Loop BB100_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-40]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v1.4s, v0.4s
	ldr	w14, [x10], #44
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w22, w9
	add	x12, x11, #3
	add	x11, x11, #11
	cmp	x12, x23
	add	w9, w9, w26
	b.lo	.LBB100_5
// %bb.6:                               //   in Loop: Header=BB100_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB100_13
// %bb.7:                               //   in Loop: Header=BB100_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB100_11
// %bb.8:                               //   in Loop: Header=BB100_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB100_9:                              //   Parent Loop BB100_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB100_9
// %bb.10:                              //   in Loop: Header=BB100_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB100_13
.LBB100_11:                             // %.preheader
                                        //   in Loop: Header=BB100_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB100_12:                             //   Parent Loop BB100_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB100_12
.LBB100_13:                             //   in Loop: Header=BB100_4 Depth=1
	ldr	d0, [x18, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB100_3
// %bb.14:                              //   in Loop: Header=BB100_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x19, x20
	mov	x20, x18
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	mov	x18, x20
	mov	x20, x19
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB100_3
.LBB100_15:
	cmp	w21, #0
	b.le	.LBB100_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB100_18
.LBB100_17:                             //   in Loop: Header=BB100_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB100_26
.LBB100_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB100_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB100_19:                             //   Parent Loop BB100_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB100_19
// %bb.20:                              //   in Loop: Header=BB100_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w23
	cmp	w9, w10
	b.eq	.LBB100_17
// %bb.21:                              //   in Loop: Header=BB100_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB100_17
.LBB100_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB100_24
.LBB100_23:                             //   in Loop: Header=BB100_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB100_26
.LBB100_24:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB100_23
// %bb.25:                              //   in Loop: Header=BB100_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB100_23
.LBB100_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB100_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB100_30
.LBB100_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB100_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB100_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB100_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end100:
	.size	_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end100-_Z26test_do_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB101_26
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w21, #10
	movk	w15, #41666, lsl #16
	b.lt	.LBB101_15
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	movk	w10, #52428, lsl #16
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #10                        // =0xa
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #24880                     // =0x6130
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w21, #9
	lsr	x9, x9, #35
	add	x25, x20, #36
	movk	w26, #22913, lsl #16
	adrp	x17, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w21
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x20, w28, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB101_4
.LBB101_3:                              //   in Loop: Header=BB101_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB101_26
.LBB101_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB101_5 Depth 2
                                        //     Child Loop BB101_9 Depth 2
                                        //     Child Loop BB101_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #8                         // =0x8
.LBB101_5:                              //   Parent Loop BB101_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-36]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v1.4s, v0.4s
	add	x10, x10, #40
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w22, w9
	add	x12, x11, #2
	add	x11, x11, #10
	cmp	x12, x23
	add	w9, w9, w26
	b.lo	.LBB101_5
// %bb.6:                               //   in Loop: Header=BB101_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB101_13
// %bb.7:                               //   in Loop: Header=BB101_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB101_11
// %bb.8:                               //   in Loop: Header=BB101_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB101_9:                              //   Parent Loop BB101_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB101_9
// %bb.10:                              //   in Loop: Header=BB101_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB101_13
.LBB101_11:                             // %.preheader
                                        //   in Loop: Header=BB101_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB101_12:                             //   Parent Loop BB101_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB101_12
.LBB101_13:                             //   in Loop: Header=BB101_4 Depth=1
	ldr	d0, [x17, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB101_3
// %bb.14:                              //   in Loop: Header=BB101_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x19, x20
	mov	x20, x17
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	mov	x17, x20
	mov	x20, x19
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB101_3
.LBB101_15:
	cmp	w21, #0
	b.le	.LBB101_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB101_18
.LBB101_17:                             //   in Loop: Header=BB101_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB101_26
.LBB101_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB101_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB101_19:                             //   Parent Loop BB101_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB101_19
// %bb.20:                              //   in Loop: Header=BB101_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w23
	cmp	w9, w10
	b.eq	.LBB101_17
// %bb.21:                              //   in Loop: Header=BB101_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB101_17
.LBB101_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB101_24
.LBB101_23:                             //   in Loop: Header=BB101_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB101_26
.LBB101_24:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB101_23
// %bb.25:                              //   in Loop: Header=BB101_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB101_23
.LBB101_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB101_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB101_30
.LBB101_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB101_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB101_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB101_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end101:
	.size	_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end101-_Z26test_do_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB102_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #9
	movk	w14, #41666, lsl #16
	b.lt	.LBB102_15
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #14563, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, w20
	dup	v4.4s, w19
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w26, #55160                     // =0xd778
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	lsr	x9, x9, #33
	sub	w23, w20, #8
	add	x22, x21, #32
	movk	w26, #40282, lsl #16
	adrp	x24, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #3
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w25, w9, #9
	sub	x10, x10, x25
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x25
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB102_4
.LBB102_3:                              //   in Loop: Header=BB102_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB102_33
.LBB102_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB102_5 Depth 2
                                        //     Child Loop BB102_9 Depth 2
                                        //     Child Loop BB102_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB102_5:                              //   Parent Loop BB102_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11]
	add	x11, x11, #36
	ldr	w12, [x22, x10, lsl #2]
	add	x10, x10, #9
	cmp	x10, x23
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB102_5
// %bb.6:                               //   in Loop: Header=BB102_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB102_13
// %bb.7:                               //   in Loop: Header=BB102_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x25
	cmp	x10, #7
	b.ls	.LBB102_11
// %bb.8:                               //   in Loop: Header=BB102_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB102_9:                              //   Parent Loop BB102_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB102_9
// %bb.10:                              //   in Loop: Header=BB102_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB102_13
.LBB102_11:                             // %.preheader
                                        //   in Loop: Header=BB102_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB102_12:                             //   Parent Loop BB102_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB102_12
.LBB102_13:                             //   in Loop: Header=BB102_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB102_3
// %bb.14:                              //   in Loop: Header=BB102_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB102_3
.LBB102_15:
	cmp	w20, #0
	b.le	.LBB102_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB102_18
.LBB102_17:                             //   in Loop: Header=BB102_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB102_33
.LBB102_18:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB102_20
// %bb.19:                              //   in Loop: Header=BB102_18 Depth=1
	add	w9, w9, w23
	b	.LBB102_27
.LBB102_20:                             //   in Loop: Header=BB102_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB102_27
// %bb.21:                              //   in Loop: Header=BB102_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB102_27
// %bb.22:                              //   in Loop: Header=BB102_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB102_27
// %bb.23:                              //   in Loop: Header=BB102_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB102_27
// %bb.24:                              //   in Loop: Header=BB102_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	cmp	w20, #6
	madd	w9, w10, w25, w9
	b.eq	.LBB102_27
// %bb.25:                              //   in Loop: Header=BB102_18 Depth=1
	ldr	w10, [x21, #24]
	add	w9, w9, w23
	cmp	w20, #7
	madd	w9, w10, w25, w9
	b.eq	.LBB102_27
// %bb.26:                              //   in Loop: Header=BB102_18 Depth=1
	ldr	w10, [x21, #28]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB102_27:                             //   in Loop: Header=BB102_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w24
	cmp	w9, w10
	b.eq	.LBB102_17
// %bb.28:                              //   in Loop: Header=BB102_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB102_17
.LBB102_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB102_31
.LBB102_30:                             //   in Loop: Header=BB102_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB102_33
.LBB102_31:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB102_30
// %bb.32:                              //   in Loop: Header=BB102_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB102_30
.LBB102_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB102_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB102_37
.LBB102_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB102_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB102_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB102_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end102:
	.size	_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end102-_Z26test_do_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB103_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #8
	movk	w13, #41666, lsl #16
	b.lt	.LBB103_15
// %bb.2:
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	and	w9, w9, #0xfffffff8
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	add	w22, w9, #8
	mov	w9, w20
	dup	v4.4s, w19
	dup	v5.4s, w28
	sub	x24, x9, x22
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	and	x10, x9, #0x7
	add	x9, x21, w22, uxtw #2
	mov	w14, #46592                     // =0xb600
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	sub	x10, x24, x10
	mov	w25, #19904                     // =0x4dc0
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w23, w20, #7
	str	x10, [sp, #24]                  // 8-byte Folded Spill
	add	x10, x10, x22
	add	x9, x9, #16
	movk	w25, #57652, lsl #16
	adrp	x26, init_value
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	stp	q5, q4, [x29, #-32]             // 32-byte Folded Spill
	b	.LBB103_4
.LBB103_3:                              //   in Loop: Header=BB103_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB103_32
.LBB103_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB103_5 Depth 2
                                        //     Child Loop BB103_9 Depth 2
                                        //     Child Loop BB103_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB103_5:                              //   Parent Loop BB103_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11], #32
	add	x10, x10, #8
	cmp	x10, x23
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w25
	b.lo	.LBB103_5
// %bb.6:                               //   in Loop: Header=BB103_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB103_13
// %bb.7:                               //   in Loop: Header=BB103_4 Depth=1
	cmp	x24, #7
	mov	x11, x22
	b.ls	.LBB103_11
// %bb.8:                               //   in Loop: Header=BB103_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB103_9:                              //   Parent Loop BB103_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB103_9
// %bb.10:                              //   in Loop: Header=BB103_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	cbz	x10, .LBB103_13
.LBB103_11:                             // %.preheader
                                        //   in Loop: Header=BB103_4 Depth=1
	ldr	x12, [sp, #40]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB103_12:                             //   Parent Loop BB103_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB103_12
.LBB103_13:                             //   in Loop: Header=BB103_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB103_3
// %bb.14:                              //   in Loop: Header=BB103_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q5, q4, [x29, #-32]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB103_3
.LBB103_15:
	cmp	w20, #0
	b.le	.LBB103_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB103_18
.LBB103_17:                             //   in Loop: Header=BB103_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB103_32
.LBB103_18:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB103_20
// %bb.19:                              //   in Loop: Header=BB103_18 Depth=1
	add	w9, w9, w23
	b	.LBB103_26
.LBB103_20:                             //   in Loop: Header=BB103_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB103_26
// %bb.21:                              //   in Loop: Header=BB103_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB103_26
// %bb.22:                              //   in Loop: Header=BB103_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB103_26
// %bb.23:                              //   in Loop: Header=BB103_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB103_26
// %bb.24:                              //   in Loop: Header=BB103_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	cmp	w20, #6
	madd	w9, w10, w25, w9
	b.eq	.LBB103_26
// %bb.25:                              //   in Loop: Header=BB103_18 Depth=1
	ldr	w10, [x21, #24]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB103_26:                             //   in Loop: Header=BB103_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w24
	cmp	w9, w10
	b.eq	.LBB103_17
// %bb.27:                              //   in Loop: Header=BB103_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB103_17
.LBB103_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB103_30
.LBB103_29:                             //   in Loop: Header=BB103_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB103_32
.LBB103_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB103_29
// %bb.31:                              //   in Loop: Header=BB103_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB103_29
.LBB103_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB103_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB103_36
.LBB103_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB103_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB103_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB103_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end103:
	.size	_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end103-_Z26test_do_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB104_31
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #7
	movk	w16, #41666, lsl #16
	b.lt	.LBB104_15
// %bb.2:
	mov	w10, #18725                     // =0x4925
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #9362, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w26, #50184                     // =0xc408
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w20, #6
	add	x23, x21, #24
	lsr	x10, x10, #32
	movk	w26, #9485, lsl #16
	adrp	x24, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	lsr	w9, w9, #2
	lsl	w10, w9, #3
	sub	w9, w10, w9
	mov	w10, w20
	add	w25, w9, #7
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	sub	x10, x10, x25
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x25
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB104_4
.LBB104_3:                              //   in Loop: Header=BB104_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB104_31
.LBB104_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB104_5 Depth 2
                                        //     Child Loop BB104_9 Depth 2
                                        //     Child Loop BB104_12 Depth 2
	mov	w9, wzr
	mov	x10, x23
	mov	w11, #4                         // =0x4
.LBB104_5:                              //   Parent Loop BB104_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldp	w12, w13, [x10, #-8]
	addv	s0, v0.4s
	ldr	w14, [x10], #28
	add	w13, w13, w14
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #7
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB104_5
// %bb.6:                               //   in Loop: Header=BB104_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB104_13
// %bb.7:                               //   in Loop: Header=BB104_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x25
	cmp	x10, #7
	b.ls	.LBB104_11
// %bb.8:                               //   in Loop: Header=BB104_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB104_9:                              //   Parent Loop BB104_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB104_9
// %bb.10:                              //   in Loop: Header=BB104_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB104_13
.LBB104_11:                             // %.preheader
                                        //   in Loop: Header=BB104_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB104_12:                             //   Parent Loop BB104_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB104_12
.LBB104_13:                             //   in Loop: Header=BB104_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB104_3
// %bb.14:                              //   in Loop: Header=BB104_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB104_3
.LBB104_15:
	cmp	w20, #0
	b.le	.LBB104_27
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB104_18
.LBB104_17:                             //   in Loop: Header=BB104_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB104_31
.LBB104_18:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB104_20
// %bb.19:                              //   in Loop: Header=BB104_18 Depth=1
	add	w9, w9, w23
	b	.LBB104_25
.LBB104_20:                             //   in Loop: Header=BB104_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB104_25
// %bb.21:                              //   in Loop: Header=BB104_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB104_25
// %bb.22:                              //   in Loop: Header=BB104_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB104_25
// %bb.23:                              //   in Loop: Header=BB104_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB104_25
// %bb.24:                              //   in Loop: Header=BB104_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB104_25:                             //   in Loop: Header=BB104_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w24
	cmp	w9, w10
	b.eq	.LBB104_17
// %bb.26:                              //   in Loop: Header=BB104_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB104_17
.LBB104_27:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB104_29
.LBB104_28:                             //   in Loop: Header=BB104_29 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB104_31
.LBB104_29:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB104_28
// %bb.30:                              //   in Loop: Header=BB104_29 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB104_28
.LBB104_31:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB104_33
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB104_35
.LBB104_33:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB104_36
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
.LBB104_35:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB104_36:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end104:
	.size	_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end104-_Z26test_do_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB105_30
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #6
	movk	w15, #41666, lsl #16
	b.lt	.LBB105_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #6                         // =0x6
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #14928                     // =0x3a50
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #5
	lsr	x9, x9, #34
	add	x25, x21, #20
	movk	w26, #26855, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB105_4
.LBB105_3:                              //   in Loop: Header=BB105_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB105_30
.LBB105_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB105_5 Depth 2
                                        //     Child Loop BB105_9 Depth 2
                                        //     Child Loop BB105_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #4                         // =0x4
.LBB105_5:                              //   Parent Loop BB105_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldp	w12, w13, [x10, #-4]
	addv	s0, v0.4s
	add	x10, x10, #24
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w22, w9
	add	x12, x11, #2
	add	x11, x11, #6
	cmp	x12, x23
	add	w9, w9, w26
	b.lo	.LBB105_5
// %bb.6:                               //   in Loop: Header=BB105_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB105_13
// %bb.7:                               //   in Loop: Header=BB105_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB105_11
// %bb.8:                               //   in Loop: Header=BB105_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB105_9:                              //   Parent Loop BB105_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB105_9
// %bb.10:                              //   in Loop: Header=BB105_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB105_13
.LBB105_11:                             // %.preheader
                                        //   in Loop: Header=BB105_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB105_12:                             //   Parent Loop BB105_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB105_12
.LBB105_13:                             //   in Loop: Header=BB105_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB105_3
// %bb.14:                              //   in Loop: Header=BB105_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB105_3
.LBB105_15:
	cmp	w20, #0
	b.le	.LBB105_26
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB105_18
.LBB105_17:                             //   in Loop: Header=BB105_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB105_30
.LBB105_18:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB105_20
// %bb.19:                              //   in Loop: Header=BB105_18 Depth=1
	add	w9, w9, w23
	b	.LBB105_24
.LBB105_20:                             //   in Loop: Header=BB105_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB105_24
// %bb.21:                              //   in Loop: Header=BB105_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB105_24
// %bb.22:                              //   in Loop: Header=BB105_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB105_24
// %bb.23:                              //   in Loop: Header=BB105_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB105_24:                             //   in Loop: Header=BB105_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB105_17
// %bb.25:                              //   in Loop: Header=BB105_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB105_17
.LBB105_26:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB105_28
.LBB105_27:                             //   in Loop: Header=BB105_28 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB105_30
.LBB105_28:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB105_27
// %bb.29:                              //   in Loop: Header=BB105_28 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB105_27
.LBB105_30:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB105_32
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB105_34
.LBB105_32:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB105_35
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
.LBB105_34:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB105_35:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end105:
	.size	_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end105-_Z26test_do_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB106_35
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #5
	movk	w16, #41666, lsl #16
	b.lt	.LBB106_21
// %bb.2:
	sub	w28, w20, #4
	mov	w10, #5                         // =0x5
	mov	w11, #52429                     // =0xcccd
	cmp	x28, #5
	mov	x12, #-3689348814741910324      // =0xcccccccccccccccc
	movk	w11, #52428, lsl #16
	csel	x10, x28, x10, hi
	movk	x12, #52429
	umull	x9, w9, w11
	sub	x10, x10, #1
	mov	w11, w20
	mov	w2, #35256                      // =0x89b8
	umulh	x10, x10, x12
	mov	w23, #38821                     // =0x97a5
	movk	w2, #48166, lsl #16
	lsr	x9, x9, #34
	movk	w23, #4117, lsl #16
	add	x25, x21, #16
	dup	v4.4s, w23
	dup	v5.4s, w2
	mov	w17, #46592                     // =0xb600
	add	w9, w9, w9, lsl #2
	mov	w22, #45208                     // =0xb098
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	movk	w22, #44224, lsl #16
	adrp	x26, init_value
	lsr	x10, x10, #2
	add	w1, w9, #5
	str	x11, [sp, #32]                  // 8-byte Folded Spill
	stp	q5, q4, [x29, #-48]             // 32-byte Folded Spill
	add	x9, x10, #1
	sub	x10, x11, x1
	and	x19, x9, #0x7ffffffffffffffe
	stp	x9, x10, [x29, #-16]            // 16-byte Folded Spill
	and	x9, x10, #0xfffffffffffffff8
	add	x10, x19, x19, lsl #2
	stp	x10, x9, [sp, #48]              // 16-byte Folded Spill
	add	x9, x9, x1
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	add	x9, x21, #20
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	add	x9, x25, w1, uxtw #2
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	b	.LBB106_4
.LBB106_3:                              //   in Loop: Header=BB106_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB106_35
.LBB106_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB106_7 Depth 2
                                        //     Child Loop BB106_10 Depth 2
                                        //     Child Loop BB106_15 Depth 2
                                        //     Child Loop BB106_18 Depth 2
	cmp	w28, #6
	b.hs	.LBB106_6
// %bb.5:                               //   in Loop: Header=BB106_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB106_9
.LBB106_6:                              // %.preheader6
                                        //   in Loop: Header=BB106_4 Depth=1
	ldr	x11, [sp, #40]                  // 8-byte Folded Reload
	mov	w9, wzr
	mov	w10, wzr
	mov	x12, x19
.LBB106_7:                              //   Parent Loop BB106_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x11, #-20]
	ldr	q1, [x11]
	add	w9, w9, w22
	ldur	w13, [x11, #-4]
	ldr	w14, [x11, #16]
	add	w10, w10, w22
	addv	s0, v0.4s
	addv	s1, v1.4s
	subs	x12, x12, #2
	add	x11, x11, #40
	fmov	w15, s0
	add	w13, w15, w13
	fmov	w15, s1
	madd	w9, w13, w23, w9
	add	w14, w15, w14
	madd	w10, w14, w23, w10
	b.ne	.LBB106_7
// %bb.8:                               //   in Loop: Header=BB106_4 Depth=1
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	add	w9, w10, w9
	ldr	x10, [sp, #48]                  // 8-byte Folded Reload
	cmp	x11, x19
	b.eq	.LBB106_11
.LBB106_9:                              // %.preheader2
                                        //   in Loop: Header=BB106_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB106_10:                             //   Parent Loop BB106_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11], #20
	ldr	w12, [x25, x10, lsl #2]
	add	w9, w9, w22
	add	x10, x10, #5
	addv	s0, v0.4s
	cmp	x10, x28
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w23, w9
	b.lo	.LBB106_10
.LBB106_11:                             //   in Loop: Header=BB106_4 Depth=1
	cmp	w1, w20
	b.ge	.LBB106_19
// %bb.12:                              //   in Loop: Header=BB106_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	x10, #7
	b.hi	.LBB106_14
// %bb.13:                              //   in Loop: Header=BB106_4 Depth=1
	mov	x11, x1
	b	.LBB106_17
.LBB106_14:                             //   in Loop: Header=BB106_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB106_15:                             //   Parent Loop BB106_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB106_15
// %bb.16:                              //   in Loop: Header=BB106_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x9, x10
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB106_19
.LBB106_17:                             // %.preheader
                                        //   in Loop: Header=BB106_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB106_18:                             //   Parent Loop BB106_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w2
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB106_18
.LBB106_19:                             //   in Loop: Header=BB106_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB106_3
// %bb.20:                              //   in Loop: Header=BB106_4 Depth=1
	adrp	x8, current_test
	mov	x24, x21
	mov	w21, w20
	mov	x20, x1
	ldr	w1, [x8, :lo12:current_test]
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	bl	printf
	ldp	q5, q4, [x29, #-48]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w2, #35256                      // =0x89b8
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w2, #48166, lsl #16
	mov	x1, x20
	mov	w20, w21
	mov	x21, x24
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB106_3
.LBB106_21:
	cmp	w20, #0
	b.le	.LBB106_31
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB106_24
.LBB106_23:                             //   in Loop: Header=BB106_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB106_35
.LBB106_24:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB106_26
// %bb.25:                              //   in Loop: Header=BB106_24 Depth=1
	add	w9, w9, w23
	b	.LBB106_29
.LBB106_26:                             //   in Loop: Header=BB106_24 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB106_29
// %bb.27:                              //   in Loop: Header=BB106_24 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB106_29
// %bb.28:                              //   in Loop: Header=BB106_24 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB106_29:                             //   in Loop: Header=BB106_24 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w24
	cmp	w9, w10
	b.eq	.LBB106_23
// %bb.30:                              //   in Loop: Header=BB106_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB106_23
.LBB106_31:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB106_33
.LBB106_32:                             //   in Loop: Header=BB106_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB106_35
.LBB106_33:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB106_32
// %bb.34:                              //   in Loop: Header=BB106_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB106_32
.LBB106_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB106_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB106_39
.LBB106_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB106_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB106_39:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB106_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end106:
	.size	_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end106-_Z26test_do_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB107_34
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #4
	movk	w13, #41666, lsl #16
	b.lt	.LBB107_21
// %bb.2:
	sub	w28, w20, #3
	mov	w10, #4                         // =0x4
	and	w9, w9, #0xfffffffc
	cmp	x28, #4
	mov	w11, w20
	add	w23, w9, #4
	csel	x10, x28, x10, hi
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	sub	x10, x10, #1
	mov	w25, #9952                      // =0x26e0
	str	x11, [sp, #32]                  // 8-byte Folded Spill
	lsr	x10, x10, #2
	sub	x11, x11, x23
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	movk	w25, #61594, lsl #16
	stur	x11, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	dup	v20.4s, w22
	dup	v21.4s, w24
	and	x26, x10, #0x7ffffffffffffff8
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	and	x10, x11, #0xfffffffffffffff8
	lsl	x11, x26, #2
	add	x9, x21, w23, uxtw #2
	dup	v22.4s, w25
	mov	w14, #46592                     // =0xb600
	mov	w27, wzr
	adrp	x19, init_value
	stp	x11, x10, [sp, #48]             // 16-byte Folded Spill
	add	x10, x10, x23
	movk	w14, #46159, lsl #16
	str	x10, [sp, #24]                  // 8-byte Folded Spill
	add	x10, x21, #64
	add	x9, x9, #16
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	stp	q21, q20, [x29, #-48]           // 32-byte Folded Spill
	str	q22, [sp, #64]                  // 16-byte Folded Spill
	b	.LBB107_4
.LBB107_3:                              //   in Loop: Header=BB107_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB107_34
.LBB107_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB107_7 Depth 2
                                        //     Child Loop BB107_10 Depth 2
                                        //     Child Loop BB107_15 Depth 2
                                        //     Child Loop BB107_18 Depth 2
	cmp	w28, #29
	b.hs	.LBB107_6
// %bb.5:                               //   in Loop: Header=BB107_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB107_9
.LBB107_6:                              // %.preheader6
                                        //   in Loop: Header=BB107_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	mov	x10, x26
.LBB107_7:                              //   Parent Loop BB107_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	x11, x9, #64
	ld4	{ v16.4s, v17.4s, v18.4s, v19.4s }, [x9]
	subs	x10, x10, #8
	add	x9, x9, #128
	ld4	{ v2.4s, v3.4s, v4.4s, v5.4s }, [x11]
	add	v7.4s, v17.4s, v16.4s
	add	v6.4s, v3.4s, v2.4s
	add	v2.4s, v4.4s, v5.4s
	add	v3.4s, v18.4s, v19.4s
	add	v2.4s, v6.4s, v2.4s
	add	v3.4s, v7.4s, v3.4s
	mla	v0.4s, v2.4s, v20.4s
	mla	v1.4s, v3.4s, v20.4s
	add	v0.4s, v0.4s, v22.4s
	add	v1.4s, v1.4s, v22.4s
	b.ne	.LBB107_7
// %bb.8:                               //   in Loop: Header=BB107_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #48]                  // 8-byte Folded Reload
	cmp	x9, x26
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB107_11
.LBB107_9:                              // %.preheader2
                                        //   in Loop: Header=BB107_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB107_10:                             //   Parent Loop BB107_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11], #16
	add	x10, x10, #4
	cmp	x10, x28
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w22, w9
	add	w9, w9, w25
	b.lo	.LBB107_10
.LBB107_11:                             //   in Loop: Header=BB107_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB107_19
// %bb.12:                              //   in Loop: Header=BB107_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	x10, #7
	b.hi	.LBB107_14
// %bb.13:                              //   in Loop: Header=BB107_4 Depth=1
	mov	x11, x23
	b	.LBB107_17
.LBB107_14:                             //   in Loop: Header=BB107_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB107_15:                             //   Parent Loop BB107_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v20.4s
	mla	v1.4s, v3.4s, v20.4s
	add	v0.4s, v0.4s, v21.4s
	add	v1.4s, v1.4s, v21.4s
	b.ne	.LBB107_15
// %bb.16:                              //   in Loop: Header=BB107_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #56]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB107_19
.LBB107_17:                             // %.preheader
                                        //   in Loop: Header=BB107_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB107_18:                             //   Parent Loop BB107_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB107_18
.LBB107_19:                             //   in Loop: Header=BB107_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB107_3
// %bb.20:                              //   in Loop: Header=BB107_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q21, q20, [x29, #-48]           // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q22, [sp, #64]                  // 16-byte Folded Reload
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB107_3
.LBB107_21:
	cmp	w20, #0
	b.le	.LBB107_30
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB107_24
.LBB107_23:                             //   in Loop: Header=BB107_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB107_34
.LBB107_24:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB107_26
// %bb.25:                              //   in Loop: Header=BB107_24 Depth=1
	add	w9, w9, w23
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w24
	cmp	w9, w10
	b.eq	.LBB107_23
	b	.LBB107_28
.LBB107_26:                             //   in Loop: Header=BB107_24 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.ne	.LBB107_29
// %bb.27:                              //   in Loop: Header=BB107_24 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w24
	cmp	w9, w10
	b.eq	.LBB107_23
.LBB107_28:                             //   in Loop: Header=BB107_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB107_23
.LBB107_29:                             //   in Loop: Header=BB107_24 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w24
	cmp	w9, w10
	b.eq	.LBB107_23
	b	.LBB107_28
.LBB107_30:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB107_32
.LBB107_31:                             //   in Loop: Header=BB107_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB107_34
.LBB107_32:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB107_31
// %bb.33:                              //   in Loop: Header=BB107_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB107_31
.LBB107_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB107_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB107_38
.LBB107_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB107_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB107_38:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB107_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end107:
	.size	_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end107-_Z26test_do_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB108_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #3
	movk	w15, #41666, lsl #16
	b.lt	.LBB108_21
// %bb.2:
	sub	w28, w20, #2
	mov	w10, #3                         // =0x3
	mov	w11, #43691                     // =0xaaab
	cmp	x28, #3
	mov	x12, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa
	movk	w11, #43690, lsl #16
	csel	x10, x28, x10, hi
	movk	x12, #43691
	umull	x9, w9, w11
	sub	x10, x10, #1
	mov	w11, w20
	mov	w24, #35256                     // =0x89b8
	umulh	x10, x10, x12
	mov	w22, #38821                     // =0x97a5
	mov	w25, #40232                     // =0x9d28
	lsr	x9, x9, #33
	str	x11, [sp, #24]                  // 8-byte Folded Spill
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	movk	w25, #13427, lsl #16
	dup	v19.4s, w24
	add	w9, w9, w9, lsl #1
	dup	v18.4s, w22
	dup	v20.4s, w25
	mov	w16, #46592                     // =0xb600
	mov	w27, wzr
	adrp	x19, init_value
	lsr	x10, x10, #1
	add	w23, w9, #3
	movk	w16, #46159, lsl #16
	sub	x11, x11, x23
	add	x9, x21, w23, uxtw #2
	stp	q19, q18, [x29, #-48]           // 32-byte Folded Spill
	add	x10, x10, #1
	stur	x11, [x29, #-16]                // 8-byte Folded Spill
	and	x26, x10, #0x7ffffffffffffff8
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	and	x10, x11, #0xfffffffffffffff8
	add	x11, x26, x26, lsl #1
	add	x9, x9, #16
	str	q20, [sp, #48]                  // 16-byte Folded Spill
	stp	x11, x10, [sp, #32]             // 16-byte Folded Spill
	add	x10, x10, x23
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	add	x10, x21, #8
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	b	.LBB108_4
.LBB108_3:                              //   in Loop: Header=BB108_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB108_32
.LBB108_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB108_7 Depth 2
                                        //     Child Loop BB108_10 Depth 2
                                        //     Child Loop BB108_15 Depth 2
                                        //     Child Loop BB108_18 Depth 2
	cmp	w28, #22
	b.hs	.LBB108_6
// %bb.5:                               //   in Loop: Header=BB108_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB108_9
.LBB108_6:                              // %.preheader6
                                        //   in Loop: Header=BB108_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x21
	mov	x10, x26
.LBB108_7:                              //   Parent Loop BB108_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x11, x9
	subs	x10, x10, #8
	add	x9, x9, #96
	ld3	{ v2.4s, v3.4s, v4.4s }, [x11], #48
	ld3	{ v5.4s, v6.4s, v7.4s }, [x11]
	add	v16.4s, v3.4s, v2.4s
	add	v17.4s, v6.4s, v5.4s
	add	v2.4s, v16.4s, v4.4s
	add	v3.4s, v17.4s, v7.4s
	mla	v0.4s, v2.4s, v18.4s
	mla	v1.4s, v3.4s, v18.4s
	add	v0.4s, v0.4s, v20.4s
	add	v1.4s, v1.4s, v20.4s
	b.ne	.LBB108_7
// %bb.8:                               //   in Loop: Header=BB108_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #32]                  // 8-byte Folded Reload
	cmp	x9, x26
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB108_11
.LBB108_9:                              // %.preheader2
                                        //   in Loop: Header=BB108_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	add	x10, x10, x11, lsl #2
	add	x11, x11, #1
.LBB108_10:                             //   Parent Loop BB108_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w12, w13, [x10, #-8]
	ldr	w14, [x10], #12
	add	w12, w13, w12
	add	w12, w12, w14
	madd	w9, w12, w22, w9
	add	x12, x11, #2
	add	x11, x11, #3
	cmp	x12, x28
	add	w9, w9, w25
	b.lo	.LBB108_10
.LBB108_11:                             //   in Loop: Header=BB108_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB108_19
// %bb.12:                              //   in Loop: Header=BB108_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	x10, #7
	b.hi	.LBB108_14
// %bb.13:                              //   in Loop: Header=BB108_4 Depth=1
	mov	x11, x23
	b	.LBB108_17
.LBB108_14:                             //   in Loop: Header=BB108_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB108_15:                             //   Parent Loop BB108_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v18.4s
	mla	v1.4s, v3.4s, v18.4s
	add	v0.4s, v0.4s, v19.4s
	add	v1.4s, v1.4s, v19.4s
	b.ne	.LBB108_15
// %bb.16:                              //   in Loop: Header=BB108_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB108_19
.LBB108_17:                             // %.preheader
                                        //   in Loop: Header=BB108_4 Depth=1
	ldr	x12, [sp, #24]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB108_18:                             //   Parent Loop BB108_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB108_18
.LBB108_19:                             //   in Loop: Header=BB108_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB108_3
// %bb.20:                              //   in Loop: Header=BB108_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q19, q18, [x29, #-48]           // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q20, [sp, #48]                  // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB108_3
.LBB108_21:
	cmp	w20, #0
	b.le	.LBB108_28
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB108_24
.LBB108_23:                             //   in Loop: Header=BB108_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB108_32
.LBB108_24:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB108_26
// %bb.25:                              //   in Loop: Header=BB108_24 Depth=1
	add	w9, w9, w23
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB108_23
	b	.LBB108_27
.LBB108_26:                             //   in Loop: Header=BB108_24 Depth=1
	ldr	w10, [x21, #4]
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB108_23
.LBB108_27:                             //   in Loop: Header=BB108_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB108_23
.LBB108_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB108_30
.LBB108_29:                             //   in Loop: Header=BB108_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB108_32
.LBB108_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB108_29
// %bb.31:                              //   in Loop: Header=BB108_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB108_29
.LBB108_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB108_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB108_36
.LBB108_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB108_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB108_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB108_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end108:
	.size	_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end108-_Z26test_do_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB109_29
// %bb.1:
	subs	w9, w21, #2
	b.lt	.LBB109_20
// %bb.2:
	sub	w27, w21, #1
	mov	w10, #2                         // =0x2
	and	w9, w9, #0xfffffffe
	cmp	x27, #2
	mov	w24, #38821                     // =0x97a5
	mov	w11, w21
	csel	x10, x27, x10, hi
	mov	w22, #4976                      // =0x1370
	mov	w23, #35256                     // =0x89b8
	sub	x10, x10, #1
	add	w25, w9, #2
	movk	w24, #4117, lsl #16
	lsr	x10, x10, #1
	movk	w22, #30797, lsl #16
	movk	w23, #48166, lsl #16
	str	x11, [sp, #24]                  // 8-byte Folded Spill
	sub	x11, x11, x25
	dup	v6.4s, w24
	add	x10, x10, #1
	dup	v7.4s, w23
	add	x9, x20, w25, uxtw #2
	stur	x11, [x29, #-8]                 // 8-byte Folded Spill
	and	x11, x11, #0xfffffffffffffff8
	and	x28, x10, #0x7ffffffffffffff8
	dup	v16.4s, w22
	mov	w13, #58432                     // =0xe440
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	str	x11, [sp, #64]                  // 8-byte Folded Spill
	add	x10, x11, x25
	lsl	x11, x28, #1
	mov	w15, #46592                     // =0xb600
	mov	w26, wzr
	movk	w13, #41666, lsl #16
	str	x10, [sp, #16]                  // 8-byte Folded Spill
	add	x10, x20, #32
	add	x9, x9, #16
	adrp	x19, init_value
	movk	w15, #46159, lsl #16
	stp	x10, x11, [sp, #32]             // 16-byte Folded Spill
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	stp	q7, q6, [x29, #-48]             // 32-byte Folded Spill
	str	q16, [sp, #48]                  // 16-byte Folded Spill
	b	.LBB109_4
.LBB109_3:                              //   in Loop: Header=BB109_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB109_29
.LBB109_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB109_7 Depth 2
                                        //     Child Loop BB109_9 Depth 2
                                        //     Child Loop BB109_14 Depth 2
                                        //     Child Loop BB109_17 Depth 2
	cmp	w21, #16
	b.hs	.LBB109_6
// %bb.5:                               //   in Loop: Header=BB109_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB109_9
.LBB109_6:                              // %.preheader6
                                        //   in Loop: Header=BB109_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB109_7:                              //   Parent Loop BB109_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	x11, x9, #32
	ld2	{ v4.4s, v5.4s }, [x9]
	subs	x10, x10, #8
	add	x9, x9, #64
	ld2	{ v2.4s, v3.4s }, [x11]
	add	v2.4s, v3.4s, v2.4s
	add	v3.4s, v5.4s, v4.4s
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v16.4s
	add	v1.4s, v1.4s, v16.4s
	b.ne	.LBB109_7
// %bb.8:                               //   in Loop: Header=BB109_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	cmp	x9, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB109_10
.LBB109_9:                              //   Parent Loop BB109_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x11, x20, x10, lsl #2
	add	x10, x10, #2
	cmp	x10, x27
	ldp	w12, w11, [x11]
	add	w11, w11, w12
	madd	w9, w11, w24, w9
	add	w9, w9, w22
	b.lo	.LBB109_9
.LBB109_10:                             //   in Loop: Header=BB109_4 Depth=1
	cmp	w25, w21
	b.ge	.LBB109_18
// %bb.11:                              //   in Loop: Header=BB109_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	x10, #7
	b.hi	.LBB109_13
// %bb.12:                              //   in Loop: Header=BB109_4 Depth=1
	mov	x11, x25
	b	.LBB109_16
.LBB109_13:                             //   in Loop: Header=BB109_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #64]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB109_14:                             //   Parent Loop BB109_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB109_14
// %bb.15:                              //   in Loop: Header=BB109_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #64]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB109_18
.LBB109_16:                             // %.preheader
                                        //   in Loop: Header=BB109_4 Depth=1
	ldr	x12, [sp, #24]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB109_17:                             //   Parent Loop BB109_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	add	w9, w9, w23
	b.ne	.LBB109_17
.LBB109_18:                             //   in Loop: Header=BB109_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w15
	cmp	w9, w10
	b.eq	.LBB109_3
// %bb.19:                              //   in Loop: Header=BB109_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [x29, #-48]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w15, #46592                     // =0xb600
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB109_3
.LBB109_20:
	adrp	x19, init_value
	cmp	w21, #1
	ldr	d0, [x19, :lo12:init_value]
	b.ne	.LBB109_25
// %bb.21:                              // %.preheader8
	mov	w23, #58432                     // =0xe440
	mov	w24, #38821                     // =0x97a5
	mov	w25, #11336                     // =0x2c48
	mov	w22, wzr
	movk	w23, #41666, lsl #16
	movk	w24, #4117, lsl #16
	movk	w25, #63529, lsl #16
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB109_23
.LBB109_22:                             //   in Loop: Header=BB109_23 Depth=1
	add	w22, w22, #1
	cmp	w22, w8
	b.ge	.LBB109_29
.LBB109_23:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	ldr	w10, [x20]
	mul	w10, w10, w24
	madd	w9, w9, w23, w25
	cmp	w10, w9
	b.eq	.LBB109_22
// %bb.24:                              //   in Loop: Header=BB109_23 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x19, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB109_22
.LBB109_25:                             // %.preheader10
	mov	w22, #58432                     // =0xe440
	mov	w23, #18944                     // =0x4a00
	mov	w21, wzr
	movk	w22, #41666, lsl #16
	movk	w23, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB109_27
.LBB109_26:                             //   in Loop: Header=BB109_27 Depth=1
	add	w21, w21, #1
	cmp	w21, w8
	b.ge	.LBB109_29
.LBB109_27:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB109_26
// %bb.28:                              //   in Loop: Header=BB109_27 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x19, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB109_26
.LBB109_29:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB109_31
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB109_33
.LBB109_31:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB109_34
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
.LBB109_33:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB109_34:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end109:
	.size	_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end109-_Z26test_do_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc // -- Begin function _Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB110_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB110_13
// %bb.2:
	mov	w28, #38821                     // =0x97a5
	mov	w24, #35256                     // =0x89b8
	mov	w13, #58432                     // =0xe440
	movk	w28, #4117, lsl #16
	movk	w24, #48166, lsl #16
	mov	w19, w20
	dup	v4.4s, w28
	dup	v5.4s, w24
	mov	w27, #46592                     // =0xb600
	mov	w26, wzr
	movk	w13, #41666, lsl #16
	and	x23, x19, #0x7ffffff8
	add	x22, x21, #16
	adrp	x25, init_value
	movk	w27, #46159, lsl #16
	stur	q4, [x29, #-16]                 // 16-byte Folded Spill
	str	q5, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB110_4
.LBB110_3:                              //   in Loop: Header=BB110_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB110_17
.LBB110_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB110_7 Depth 2
                                        //     Child Loop BB110_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB110_6
// %bb.5:                               //   in Loop: Header=BB110_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB110_9
.LBB110_6:                              // %.preheader2
                                        //   in Loop: Header=BB110_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x22
	mov	x10, x23
.LBB110_7:                              //   Parent Loop BB110_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB110_7
// %bb.8:                               //   in Loop: Header=BB110_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x23, x19
	mov	x11, x23
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB110_11
.LBB110_9:                              // %.preheader
                                        //   in Loop: Header=BB110_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x19, x11
.LBB110_10:                             //   Parent Loop BB110_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	madd	w9, w12, w28, w9
	add	w9, w9, w24
	b.ne	.LBB110_10
.LBB110_11:                             //   in Loop: Header=BB110_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w27
	cmp	w9, w10
	b.eq	.LBB110_3
// %bb.12:                              //   in Loop: Header=BB110_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #16]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB110_3
.LBB110_13:
	adrp	x21, init_value
	mov	w22, #58432                     // =0xe440
	mov	w23, #18944                     // =0x4a00
	ldr	d0, [x21, :lo12:init_value]
	mov	w19, wzr
	movk	w22, #41666, lsl #16
	movk	w23, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB110_15
.LBB110_14:                             //   in Loop: Header=BB110_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB110_17
.LBB110_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB110_14
// %bb.16:                              //   in Loop: Header=BB110_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB110_14
.LBB110_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB110_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB110_21
.LBB110_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB110_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB110_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB110_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end110:
	.size	_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end110-_Z26test_do_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB111_33
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #32
	movk	w13, #41666, lsl #16
	b.lt	.LBB111_15
// %bb.2:
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	and	w8, w9, #0xffffffe0
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	add	w22, w8, #32
	mov	w8, w20
	dup	v16.4s, w19
	dup	v17.4s, w28
	sub	x24, x8, x22
	str	x8, [sp, #48]                   // 8-byte Folded Spill
	and	x9, x8, #0x7
	add	x8, x21, w22, uxtw #2
	mov	w12, #46592                     // =0xb600
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	sub	x9, x24, x9
	mov	w25, #14080                     // =0x3700
	mov	w27, wzr
	movk	w12, #46159, lsl #16
	sub	w23, w20, #31
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	add	x9, x9, x22
	add	x8, x8, #16
	movk	w25, #34001, lsl #16
	adrp	x26, init_value
	stp	x8, x9, [sp, #16]               // 16-byte Folded Spill
	stp	q17, q16, [x29, #-32]           // 32-byte Folded Spill
	b	.LBB111_4
.LBB111_3:                              //   in Loop: Header=BB111_4 Depth=1
	adrp	x8, iterations
	add	w27, w27, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w27, w8
	b.ge	.LBB111_33
.LBB111_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB111_5 Depth 2
                                        //     Child Loop BB111_9 Depth 2
                                        //     Child Loop BB111_12 Depth 2
	mov	x9, xzr
	mov	w8, wzr
	mov	x10, x21
.LBB111_5:                              //   Parent Loop BB111_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x10, #96]
	add	x9, x9, #32
	ldp	q2, q3, [x10, #32]
	cmp	x9, x23
	ldp	q4, q5, [x10, #64]
	ldp	q6, q7, [x10], #128
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v3.4s, v7.4s, v5.4s
	add	v2.4s, v6.4s, v4.4s
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w11, s0
	madd	w8, w11, w19, w8
	add	w8, w8, w25
	b.lo	.LBB111_5
// %bb.6:                               //   in Loop: Header=BB111_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB111_13
// %bb.7:                               //   in Loop: Header=BB111_4 Depth=1
	cmp	x24, #7
	mov	x10, x22
	b.ls	.LBB111_11
// %bb.8:                               //   in Loop: Header=BB111_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	mov	v0.s[0], w8
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
.LBB111_9:                              //   Parent Loop BB111_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x8, #-16]
	subs	x9, x9, #8
	add	x8, x8, #32
	mla	v0.4s, v2.4s, v16.4s
	mla	v1.4s, v3.4s, v16.4s
	add	v0.4s, v0.4s, v17.4s
	add	v1.4s, v1.4s, v17.4s
	b.ne	.LBB111_9
// %bb.10:                              //   in Loop: Header=BB111_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w8, s0
	cbz	x9, .LBB111_13
.LBB111_11:                             // %.preheader
                                        //   in Loop: Header=BB111_4 Depth=1
	ldr	x11, [sp, #48]                  // 8-byte Folded Reload
	add	x9, x21, x10, lsl #2
	sub	x10, x11, x10
.LBB111_12:                             //   Parent Loop BB111_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w11, [x9], #4
	add	w8, w8, w28
	subs	x10, x10, #1
	madd	w8, w11, w19, w8
	b.ne	.LBB111_12
.LBB111_13:                             //   in Loop: Header=BB111_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w9, d0
	madd	w9, w9, w13, w12
	cmp	w8, w9
	b.eq	.LBB111_3
// %bb.14:                              //   in Loop: Header=BB111_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q17, q16, [x29, #-32]           // 32-byte Folded Reload
	mov	w12, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	movk	w12, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB111_3
.LBB111_15:
	cmp	w20, #0
	b.le	.LBB111_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB111_18
.LBB111_17:                             //   in Loop: Header=BB111_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB111_33
.LBB111_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB111_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB111_20
// %bb.19:                              //   in Loop: Header=BB111_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB111_25
.LBB111_20:                             //   in Loop: Header=BB111_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB111_23
// %bb.21:                              //   in Loop: Header=BB111_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB111_24
// %bb.22:                              //   in Loop: Header=BB111_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB111_23:                             //   in Loop: Header=BB111_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB111_24:                             //   in Loop: Header=BB111_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB111_27
.LBB111_25:                             // %.preheader3
                                        //   in Loop: Header=BB111_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB111_26:                             //   Parent Loop BB111_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB111_26
.LBB111_27:                             //   in Loop: Header=BB111_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB111_17
// %bb.28:                              //   in Loop: Header=BB111_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB111_17
.LBB111_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB111_31
.LBB111_30:                             //   in Loop: Header=BB111_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB111_33
.LBB111_31:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB111_30
// %bb.32:                              //   in Loop: Header=BB111_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB111_30
.LBB111_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB111_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB111_37
.LBB111_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB111_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB111_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB111_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end111:
	.size	_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc, .Lfunc_end111-_Z28test_goto_loop_unroll_factorILi32EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB112_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #31
	movk	w15, #41666, lsl #16
	b.lt	.LBB112_15
// %bb.2:
	mov	w8, #4229                       // =0x1085
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w8, #2114, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x8, w9, w8
	dup	v6.4s, w19
	dup	v7.4s, w28
	mov	w16, #46592                     // =0xb600
	mov	w26, #44360                     // =0xad48
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #30
	add	x22, x21, #120
	lsr	x8, x8, #32
	movk	w26, #51370, lsl #16
	adrp	x24, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w8
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	add	w8, w8, w9, lsr #1
	lsr	w8, w8, #4
	lsl	w9, w8, #5
	sub	w8, w9, w8
	mov	w9, w20
	add	w25, w8, #31
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x9, x9, x25
	add	x8, x21, w25, uxtw #2
	stur	x9, [x29, #-16]                 // 8-byte Folded Spill
	and	x9, x9, #0xfffffffffffffff8
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	add	x9, x9, x25
	add	x8, x8, #16
	stp	x8, x9, [sp, #16]               // 16-byte Folded Spill
	b	.LBB112_4
.LBB112_3:                              //   in Loop: Header=BB112_4 Depth=1
	adrp	x8, iterations
	add	w27, w27, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w27, w8
	b.ge	.LBB112_33
.LBB112_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB112_5 Depth 2
                                        //     Child Loop BB112_9 Depth 2
                                        //     Child Loop BB112_12 Depth 2
	mov	w8, wzr
	mov	x9, x22
	mov	w10, #28                        // =0x1c
.LBB112_5:                              //   Parent Loop BB112_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x9, #-40]
	ldur	q1, [x9, #-104]
	ldur	q2, [x9, #-56]
	ldur	q3, [x9, #-120]
	ldur	q4, [x9, #-24]
	ldur	q5, [x9, #-88]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x9, #-72]
	add	v4.4s, v5.4s, v4.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w11, w12, [x9, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w13, [x9], #124
	add	v2.4s, v2.4s, v4.4s
	add	w12, w12, w13
	add	v0.4s, v2.4s, v0.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w11, w14, w11
	add	w11, w11, w12
	madd	w8, w11, w19, w8
	add	x11, x10, #3
	add	x10, x10, #31
	cmp	x11, x23
	add	w8, w8, w26
	b.lo	.LBB112_5
// %bb.6:                               //   in Loop: Header=BB112_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB112_13
// %bb.7:                               //   in Loop: Header=BB112_4 Depth=1
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	mov	x10, x25
	cmp	x9, #7
	b.ls	.LBB112_11
// %bb.8:                               //   in Loop: Header=BB112_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	mov	v0.s[0], w8
	ldr	x8, [sp, #16]                   // 8-byte Folded Reload
.LBB112_9:                              //   Parent Loop BB112_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x8, #-16]
	subs	x9, x9, #8
	add	x8, x8, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB112_9
// %bb.10:                              //   in Loop: Header=BB112_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	ldur	x9, [x29, #-16]                 // 8-byte Folded Reload
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	cmp	x9, x8
	addv	s0, v0.4s
	fmov	w8, s0
	b.eq	.LBB112_13
.LBB112_11:                             // %.preheader
                                        //   in Loop: Header=BB112_4 Depth=1
	ldr	x11, [sp, #32]                  // 8-byte Folded Reload
	add	x9, x21, x10, lsl #2
	sub	x10, x11, x10
.LBB112_12:                             //   Parent Loop BB112_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w11, [x9], #4
	add	w8, w8, w28
	subs	x10, x10, #1
	madd	w8, w11, w19, w8
	b.ne	.LBB112_12
.LBB112_13:                             //   in Loop: Header=BB112_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w9, d0
	madd	w9, w9, w15, w16
	cmp	w8, w9
	b.eq	.LBB112_3
// %bb.14:                              //   in Loop: Header=BB112_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB112_3
.LBB112_15:
	cmp	w20, #0
	b.le	.LBB112_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB112_18
.LBB112_17:                             //   in Loop: Header=BB112_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB112_33
.LBB112_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB112_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB112_20
// %bb.19:                              //   in Loop: Header=BB112_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB112_25
.LBB112_20:                             //   in Loop: Header=BB112_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB112_23
// %bb.21:                              //   in Loop: Header=BB112_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB112_24
// %bb.22:                              //   in Loop: Header=BB112_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB112_23:                             //   in Loop: Header=BB112_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB112_24:                             //   in Loop: Header=BB112_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB112_27
.LBB112_25:                             // %.preheader3
                                        //   in Loop: Header=BB112_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB112_26:                             //   Parent Loop BB112_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB112_26
.LBB112_27:                             //   in Loop: Header=BB112_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB112_17
// %bb.28:                              //   in Loop: Header=BB112_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB112_17
.LBB112_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB112_31
.LBB112_30:                             //   in Loop: Header=BB112_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB112_33
.LBB112_31:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB112_30
// %bb.32:                              //   in Loop: Header=BB112_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB112_30
.LBB112_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB112_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB112_37
.LBB112_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB112_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB112_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB112_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end112:
	.size	_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc, .Lfunc_end112-_Z28test_goto_loop_unroll_factorILi31EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB113_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #30
	movk	w15, #41666, lsl #16
	b.lt	.LBB113_15
// %bb.2:
	mov	w10, #34953                     // =0x8889
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #34952, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #30                        // =0x1e
	dup	v6.4s, w23
	dup	v7.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #9104                      // =0x2390
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w25, w20, #29
	lsr	x9, x9, #36
	add	x22, x21, #116
	movk	w26, #3204, lsl #16
	adrp	x19, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB113_4
.LBB113_3:                              //   in Loop: Header=BB113_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB113_33
.LBB113_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB113_5 Depth 2
                                        //     Child Loop BB113_9 Depth 2
                                        //     Child Loop BB113_12 Depth 2
	mov	w9, wzr
	mov	x10, x22
	mov	w11, #28                        // =0x1c
.LBB113_5:                              //   Parent Loop BB113_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-100]
	ldur	q2, [x10, #-52]
	ldur	q3, [x10, #-116]
	ldur	q4, [x10, #-20]
	ldur	q5, [x10, #-84]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-68]
	add	v4.4s, v5.4s, v4.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #120
	add	v2.4s, v2.4s, v4.4s
	add	v0.4s, v2.4s, v0.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #2
	add	x11, x11, #30
	cmp	x12, x25
	add	w9, w9, w26
	b.lo	.LBB113_5
// %bb.6:                               //   in Loop: Header=BB113_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB113_13
// %bb.7:                               //   in Loop: Header=BB113_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB113_11
// %bb.8:                               //   in Loop: Header=BB113_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB113_9:                              //   Parent Loop BB113_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB113_9
// %bb.10:                              //   in Loop: Header=BB113_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB113_13
.LBB113_11:                             // %.preheader
                                        //   in Loop: Header=BB113_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB113_12:                             //   Parent Loop BB113_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB113_12
.LBB113_13:                             //   in Loop: Header=BB113_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB113_3
// %bb.14:                              //   in Loop: Header=BB113_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB113_3
.LBB113_15:
	cmp	w20, #0
	b.le	.LBB113_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB113_18
.LBB113_17:                             //   in Loop: Header=BB113_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB113_33
.LBB113_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB113_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB113_20
// %bb.19:                              //   in Loop: Header=BB113_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB113_25
.LBB113_20:                             //   in Loop: Header=BB113_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB113_23
// %bb.21:                              //   in Loop: Header=BB113_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB113_24
// %bb.22:                              //   in Loop: Header=BB113_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB113_23:                             //   in Loop: Header=BB113_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB113_24:                             //   in Loop: Header=BB113_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB113_27
.LBB113_25:                             // %.preheader3
                                        //   in Loop: Header=BB113_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB113_26:                             //   Parent Loop BB113_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB113_26
.LBB113_27:                             //   in Loop: Header=BB113_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB113_17
// %bb.28:                              //   in Loop: Header=BB113_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB113_17
.LBB113_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB113_31
.LBB113_30:                             //   in Loop: Header=BB113_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB113_33
.LBB113_31:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB113_30
// %bb.32:                              //   in Loop: Header=BB113_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB113_30
.LBB113_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB113_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB113_37
.LBB113_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB113_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB113_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB113_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end113:
	.size	_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc, .Lfunc_end113-_Z28test_goto_loop_unroll_factorILi30EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN15goto_loop_testsILi28EiE7do_testEPKiPKc,"axG",@progbits,_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc,comdat
	.weak	_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc // -- Begin function _ZN15goto_loop_testsILi28EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc,@function
_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc: // @_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc
	adrp	x20, temp_string+1900
	add	x20, x20, :lo12:temp_string+1900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
.Lfunc_end114:
	.size	_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc, .Lfunc_end114-_ZN15goto_loop_testsILi28EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB115_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #29
	movk	w14, #41666, lsl #16
	b.lt	.LBB115_15
// %bb.2:
	mov	w10, #51977                     // =0xcb09
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #36157, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #29                        // =0x1d
	dup	v6.4s, w23
	dup	v7.4s, w24
	mov	w15, #46592                     // =0xb600
	mov	w26, #39384                     // =0x99d8
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w25, w20, #28
	lsr	x9, x9, #36
	add	x22, x21, #112
	movk	w26, #20573, lsl #16
	adrp	x19, init_value
	stur	q6, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q7, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB115_4
.LBB115_3:                              //   in Loop: Header=BB115_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB115_33
.LBB115_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB115_5 Depth 2
                                        //     Child Loop BB115_9 Depth 2
                                        //     Child Loop BB115_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB115_5:                              //   Parent Loop BB115_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11, #64]
	ldr	q4, [x11, #96]
	ldp	q3, q2, [x11]
	ldr	q5, [x11, #32]
	ldr	w12, [x22, x10, lsl #2]
	add	x10, x10, #29
	add	v4.4s, v5.4s, v4.4s
	cmp	x10, x25
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldr	q2, [x11, #48]
	add	x11, x11, #116
	add	v1.4s, v1.4s, v4.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w23, w9
	add	w9, w9, w26
	b.lo	.LBB115_5
// %bb.6:                               //   in Loop: Header=BB115_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB115_13
// %bb.7:                               //   in Loop: Header=BB115_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB115_11
// %bb.8:                               //   in Loop: Header=BB115_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB115_9:                              //   Parent Loop BB115_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB115_9
// %bb.10:                              //   in Loop: Header=BB115_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB115_13
.LBB115_11:                             // %.preheader
                                        //   in Loop: Header=BB115_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB115_12:                             //   Parent Loop BB115_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB115_12
.LBB115_13:                             //   in Loop: Header=BB115_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB115_3
// %bb.14:                              //   in Loop: Header=BB115_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldur	q6, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB115_3
.LBB115_15:
	cmp	w20, #0
	b.le	.LBB115_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB115_18
.LBB115_17:                             //   in Loop: Header=BB115_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB115_33
.LBB115_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB115_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB115_20
// %bb.19:                              //   in Loop: Header=BB115_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB115_25
.LBB115_20:                             //   in Loop: Header=BB115_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB115_23
// %bb.21:                              //   in Loop: Header=BB115_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB115_24
// %bb.22:                              //   in Loop: Header=BB115_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB115_23:                             //   in Loop: Header=BB115_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB115_24:                             //   in Loop: Header=BB115_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB115_27
.LBB115_25:                             // %.preheader3
                                        //   in Loop: Header=BB115_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB115_26:                             //   Parent Loop BB115_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB115_26
.LBB115_27:                             //   in Loop: Header=BB115_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB115_17
// %bb.28:                              //   in Loop: Header=BB115_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB115_17
.LBB115_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB115_31
.LBB115_30:                             //   in Loop: Header=BB115_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB115_33
.LBB115_31:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB115_30
// %bb.32:                              //   in Loop: Header=BB115_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB115_30
.LBB115_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB115_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB115_37
.LBB115_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB115_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB115_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB115_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end115:
	.size	_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc, .Lfunc_end115-_Z28test_goto_loop_unroll_factorILi29EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB116_33
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #28
	movk	w13, #41666, lsl #16
	b.lt	.LBB116_15
// %bb.2:
	lsr	w9, w9, #2
	mov	w10, #18725                     // =0x4925
	mov	w24, #35256                     // =0x89b8
	movk	w10, #9362, lsl #16
	mov	w23, #38821                     // =0x97a5
	movk	w24, #48166, lsl #16
	umull	x9, w9, w10
	mov	w10, #28                        // =0x1c
	movk	w23, #4117, lsl #16
	dup	v6.4s, w23
	dup	v7.4s, w24
	mov	w14, #46592                     // =0xb600
	mov	w19, #4128                      // =0x1020
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	lsr	x9, x9, #32
	sub	w22, w20, #27
	movk	w19, #37943, lsl #16
	adrp	x26, init_value
	stp	q7, q6, [x29, #-32]             // 32-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	sub	x25, x9, x28
	add	x9, x21, w28, uxtw #2
	and	x10, x25, #0xfffffffffffffff8
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	b	.LBB116_4
.LBB116_3:                              //   in Loop: Header=BB116_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB116_33
.LBB116_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB116_5 Depth 2
                                        //     Child Loop BB116_9 Depth 2
                                        //     Child Loop BB116_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB116_5:                              //   Parent Loop BB116_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11, #64]
	add	x10, x10, #28
	ldp	q3, q2, [x11]
	cmp	x10, x22
	ldr	q4, [x11, #96]
	ldr	q5, [x11, #32]
	add	v4.4s, v5.4s, v4.4s
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldr	q2, [x11, #48]
	add	x11, x11, #112
	add	v1.4s, v1.4s, v4.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w23, w9
	add	w9, w9, w19
	b.lo	.LBB116_5
// %bb.6:                               //   in Loop: Header=BB116_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB116_13
// %bb.7:                               //   in Loop: Header=BB116_4 Depth=1
	cmp	x25, #7
	mov	x11, x28
	b.ls	.LBB116_11
// %bb.8:                               //   in Loop: Header=BB116_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB116_9:                              //   Parent Loop BB116_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB116_9
// %bb.10:                              //   in Loop: Header=BB116_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x25, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB116_13
.LBB116_11:                             // %.preheader
                                        //   in Loop: Header=BB116_4 Depth=1
	ldr	x12, [sp, #24]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB116_12:                             //   Parent Loop BB116_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB116_12
.LBB116_13:                             //   in Loop: Header=BB116_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB116_3
// %bb.14:                              //   in Loop: Header=BB116_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [x29, #-32]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB116_3
.LBB116_15:
	cmp	w20, #0
	b.le	.LBB116_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB116_18
.LBB116_17:                             //   in Loop: Header=BB116_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB116_33
.LBB116_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB116_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB116_20
// %bb.19:                              //   in Loop: Header=BB116_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB116_25
.LBB116_20:                             //   in Loop: Header=BB116_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB116_23
// %bb.21:                              //   in Loop: Header=BB116_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB116_24
// %bb.22:                              //   in Loop: Header=BB116_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB116_23:                             //   in Loop: Header=BB116_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB116_24:                             //   in Loop: Header=BB116_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB116_27
.LBB116_25:                             // %.preheader3
                                        //   in Loop: Header=BB116_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB116_26:                             //   Parent Loop BB116_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB116_26
.LBB116_27:                             //   in Loop: Header=BB116_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB116_17
// %bb.28:                              //   in Loop: Header=BB116_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB116_17
.LBB116_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB116_31
.LBB116_30:                             //   in Loop: Header=BB116_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB116_33
.LBB116_31:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB116_30
// %bb.32:                              //   in Loop: Header=BB116_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB116_30
.LBB116_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB116_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB116_37
.LBB116_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB116_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB116_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB116_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end116:
	.size	_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc, .Lfunc_end116-_Z28test_goto_loop_unroll_factorILi28EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB117_33
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #27
	movk	w16, #41666, lsl #16
	b.lt	.LBB117_15
// %bb.2:
	mov	w10, #19419                     // =0x4bdb
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #12136, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w17, #46592                     // =0xb600
	mov	w26, #34408                     // =0x8668
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w25, w20, #26
	add	x22, x21, #104
	lsr	x10, x10, #32
	movk	w26, #55312, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #27                        // =0x1b
	lsr	w9, w9, #4
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB117_4
.LBB117_3:                              //   in Loop: Header=BB117_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB117_33
.LBB117_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB117_5 Depth 2
                                        //     Child Loop BB117_9 Depth 2
                                        //     Child Loop BB117_12 Depth 2
	mov	w9, wzr
	mov	x10, x22
	mov	w11, #24                        // =0x18
.LBB117_5:                              //   Parent Loop BB117_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-40]
	ldur	q1, [x10, #-104]
	ldur	q2, [x10, #-24]
	ldur	q3, [x10, #-88]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-72]
	add	v2.4s, v3.4s, v2.4s
	ldur	q3, [x10, #-56]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w14, [x10], #108
	add	v2.4s, v2.4s, v3.4s
	add	w13, w13, w14
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #3
	add	x11, x11, #27
	cmp	x12, x25
	add	w9, w9, w26
	b.lo	.LBB117_5
// %bb.6:                               //   in Loop: Header=BB117_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB117_13
// %bb.7:                               //   in Loop: Header=BB117_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB117_11
// %bb.8:                               //   in Loop: Header=BB117_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB117_9:                              //   Parent Loop BB117_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB117_9
// %bb.10:                              //   in Loop: Header=BB117_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB117_13
.LBB117_11:                             // %.preheader
                                        //   in Loop: Header=BB117_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB117_12:                             //   Parent Loop BB117_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB117_12
.LBB117_13:                             //   in Loop: Header=BB117_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB117_3
// %bb.14:                              //   in Loop: Header=BB117_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB117_3
.LBB117_15:
	cmp	w20, #0
	b.le	.LBB117_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB117_18
.LBB117_17:                             //   in Loop: Header=BB117_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB117_33
.LBB117_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB117_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB117_20
// %bb.19:                              //   in Loop: Header=BB117_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB117_25
.LBB117_20:                             //   in Loop: Header=BB117_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB117_23
// %bb.21:                              //   in Loop: Header=BB117_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB117_24
// %bb.22:                              //   in Loop: Header=BB117_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB117_23:                             //   in Loop: Header=BB117_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB117_24:                             //   in Loop: Header=BB117_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB117_27
.LBB117_25:                             // %.preheader3
                                        //   in Loop: Header=BB117_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB117_26:                             //   Parent Loop BB117_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB117_26
.LBB117_27:                             //   in Loop: Header=BB117_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB117_17
// %bb.28:                              //   in Loop: Header=BB117_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB117_17
.LBB117_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB117_31
.LBB117_30:                             //   in Loop: Header=BB117_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB117_33
.LBB117_31:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB117_30
// %bb.32:                              //   in Loop: Header=BB117_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB117_30
.LBB117_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB117_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB117_37
.LBB117_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB117_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB117_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB117_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end117:
	.size	_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc, .Lfunc_end117-_Z28test_goto_loop_unroll_factorILi27EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB118_33
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #26
	movk	w15, #41666, lsl #16
	b.lt	.LBB118_15
// %bb.2:
	mov	w10, #60495                     // =0xec4f
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #20164, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #26                        // =0x1a
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #64688                     // =0xfcb0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w25, w20, #25
	lsr	x9, x9, #35
	add	x22, x21, #100
	movk	w26, #7145, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB118_4
.LBB118_3:                              //   in Loop: Header=BB118_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB118_33
.LBB118_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB118_5 Depth 2
                                        //     Child Loop BB118_9 Depth 2
                                        //     Child Loop BB118_12 Depth 2
	mov	w9, wzr
	mov	x10, x22
	mov	w11, #24                        // =0x18
.LBB118_5:                              //   Parent Loop BB118_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-100]
	ldur	q2, [x10, #-20]
	ldur	q3, [x10, #-84]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-68]
	add	v2.4s, v3.4s, v2.4s
	ldur	q3, [x10, #-52]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #104
	add	v2.4s, v2.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #2
	add	x11, x11, #26
	cmp	x12, x25
	add	w9, w9, w26
	b.lo	.LBB118_5
// %bb.6:                               //   in Loop: Header=BB118_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB118_13
// %bb.7:                               //   in Loop: Header=BB118_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB118_11
// %bb.8:                               //   in Loop: Header=BB118_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB118_9:                              //   Parent Loop BB118_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB118_9
// %bb.10:                              //   in Loop: Header=BB118_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB118_13
.LBB118_11:                             // %.preheader
                                        //   in Loop: Header=BB118_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB118_12:                             //   Parent Loop BB118_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB118_12
.LBB118_13:                             //   in Loop: Header=BB118_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB118_3
// %bb.14:                              //   in Loop: Header=BB118_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB118_3
.LBB118_15:
	cmp	w20, #0
	b.le	.LBB118_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB118_18
.LBB118_17:                             //   in Loop: Header=BB118_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB118_33
.LBB118_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB118_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB118_20
// %bb.19:                              //   in Loop: Header=BB118_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB118_25
.LBB118_20:                             //   in Loop: Header=BB118_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB118_23
// %bb.21:                              //   in Loop: Header=BB118_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB118_24
// %bb.22:                              //   in Loop: Header=BB118_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB118_23:                             //   in Loop: Header=BB118_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB118_24:                             //   in Loop: Header=BB118_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB118_27
.LBB118_25:                             // %.preheader3
                                        //   in Loop: Header=BB118_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB118_26:                             //   Parent Loop BB118_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB118_26
.LBB118_27:                             //   in Loop: Header=BB118_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB118_17
// %bb.28:                              //   in Loop: Header=BB118_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB118_17
.LBB118_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB118_31
.LBB118_30:                             //   in Loop: Header=BB118_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB118_33
.LBB118_31:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB118_30
// %bb.32:                              //   in Loop: Header=BB118_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB118_30
.LBB118_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB118_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB118_37
.LBB118_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB118_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB118_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB118_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end118:
	.size	_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc, .Lfunc_end118-_Z28test_goto_loop_unroll_factorILi26EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB119_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #25
	movk	w14, #41666, lsl #16
	b.lt	.LBB119_15
// %bb.2:
	mov	w10, #34079                     // =0x851f
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #20971, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #25                        // =0x19
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w15, #46592                     // =0xb600
	mov	w26, #29432                     // =0x72f8
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w25, w20, #24
	lsr	x9, x9, #35
	add	x22, x21, #96
	movk	w26, #24515, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB119_4
.LBB119_3:                              //   in Loop: Header=BB119_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB119_33
.LBB119_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB119_5 Depth 2
                                        //     Child Loop BB119_9 Depth 2
                                        //     Child Loop BB119_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB119_5:                              //   Parent Loop BB119_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #64]
	ldr	w12, [x22, x10, lsl #2]
	ldp	q2, q3, [x11]
	add	x10, x10, #25
	cmp	x10, x25
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldp	q2, q3, [x11, #32]
	add	x11, x11, #100
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w23, w9
	add	w9, w9, w26
	b.lo	.LBB119_5
// %bb.6:                               //   in Loop: Header=BB119_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB119_13
// %bb.7:                               //   in Loop: Header=BB119_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB119_11
// %bb.8:                               //   in Loop: Header=BB119_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB119_9:                              //   Parent Loop BB119_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB119_9
// %bb.10:                              //   in Loop: Header=BB119_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB119_13
.LBB119_11:                             // %.preheader
                                        //   in Loop: Header=BB119_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB119_12:                             //   Parent Loop BB119_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB119_12
.LBB119_13:                             //   in Loop: Header=BB119_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB119_3
// %bb.14:                              //   in Loop: Header=BB119_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB119_3
.LBB119_15:
	cmp	w20, #0
	b.le	.LBB119_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB119_18
.LBB119_17:                             //   in Loop: Header=BB119_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB119_33
.LBB119_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB119_26 Depth 2
	cmp	w20, #8
	b.hs	.LBB119_20
// %bb.19:                              //   in Loop: Header=BB119_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB119_25
.LBB119_20:                             //   in Loop: Header=BB119_18 Depth=1
	ldp	q0, q1, [x21]
	cmp	x27, #8
	mul	v0.4s, v0.4s, v4.4s
	mul	v1.4s, v1.4s, v4.4s
	b.eq	.LBB119_23
// %bb.21:                              //   in Loop: Header=BB119_18 Depth=1
	ldp	q2, q3, [x21, #32]
	cmp	x27, #16
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
	b.eq	.LBB119_24
// %bb.22:                              //   in Loop: Header=BB119_18 Depth=1
	ldp	q2, q3, [x21, #64]
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
.LBB119_23:                             //   in Loop: Header=BB119_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	add	v0.4s, v0.4s, v2.4s
	add	v1.4s, v1.4s, v2.4s
.LBB119_24:                             //   in Loop: Header=BB119_18 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x27, x25
	mov	x11, x27
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB119_27
.LBB119_25:                             // %.preheader3
                                        //   in Loop: Header=BB119_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB119_26:                             //   Parent Loop BB119_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB119_26
.LBB119_27:                             //   in Loop: Header=BB119_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB119_17
// %bb.28:                              //   in Loop: Header=BB119_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB119_17
.LBB119_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB119_31
.LBB119_30:                             //   in Loop: Header=BB119_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB119_33
.LBB119_31:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB119_30
// %bb.32:                              //   in Loop: Header=BB119_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB119_30
.LBB119_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB119_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB119_37
.LBB119_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB119_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB119_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB119_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end119:
	.size	_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc, .Lfunc_end119-_Z28test_goto_loop_unroll_factorILi25EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB120_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #24
	movk	w13, #41666, lsl #16
	b.lt	.LBB120_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #24                        // =0x18
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w14, #46592                     // =0xb600
	mov	w19, #59712                     // =0xe940
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w25, w20, #23
	lsr	x9, x9, #36
	movk	w19, #41884, lsl #16
	adrp	x26, init_value
	stp	q5, q4, [x29, #-32]             // 32-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	and	x10, x9, #0x7
	stp	x10, x9, [sp, #40]              // 16-byte Folded Spill
	sub	x22, x9, x28
	add	x9, x21, w28, uxtw #2
	sub	x10, x22, x10
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB120_4
.LBB120_3:                              //   in Loop: Header=BB120_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB120_32
.LBB120_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB120_5 Depth 2
                                        //     Child Loop BB120_9 Depth 2
                                        //     Child Loop BB120_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB120_5:                              //   Parent Loop BB120_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #64]
	add	x10, x10, #24
	ldp	q2, q3, [x11]
	cmp	x10, x25
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	ldp	q2, q3, [x11, #32]
	add	x11, x11, #96
	add	v1.4s, v1.4s, v3.4s
	add	v0.4s, v0.4s, v2.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w23, w9
	add	w9, w9, w19
	b.lo	.LBB120_5
// %bb.6:                               //   in Loop: Header=BB120_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB120_13
// %bb.7:                               //   in Loop: Header=BB120_4 Depth=1
	cmp	x22, #7
	mov	x11, x28
	b.ls	.LBB120_11
// %bb.8:                               //   in Loop: Header=BB120_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB120_9:                              //   Parent Loop BB120_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB120_9
// %bb.10:                              //   in Loop: Header=BB120_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	cbz	x10, .LBB120_13
.LBB120_11:                             // %.preheader
                                        //   in Loop: Header=BB120_4 Depth=1
	ldr	x12, [sp, #48]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB120_12:                             //   Parent Loop BB120_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB120_12
.LBB120_13:                             //   in Loop: Header=BB120_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB120_3
// %bb.14:                              //   in Loop: Header=BB120_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q5, q4, [x29, #-32]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB120_3
.LBB120_15:
	cmp	w20, #0
	b.le	.LBB120_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB120_18
.LBB120_17:                             //   in Loop: Header=BB120_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB120_32
.LBB120_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB120_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB120_20
// %bb.19:                              //   in Loop: Header=BB120_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB120_24
.LBB120_20:                             //   in Loop: Header=BB120_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB120_22
// %bb.21:                              //   in Loop: Header=BB120_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB120_23
.LBB120_22:                             //   in Loop: Header=BB120_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB120_23:                             //   in Loop: Header=BB120_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB120_26
.LBB120_24:                             // %.preheader3
                                        //   in Loop: Header=BB120_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB120_25:                             //   Parent Loop BB120_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB120_25
.LBB120_26:                             //   in Loop: Header=BB120_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB120_17
// %bb.27:                              //   in Loop: Header=BB120_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB120_17
.LBB120_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB120_30
.LBB120_29:                             //   in Loop: Header=BB120_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB120_32
.LBB120_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB120_29
// %bb.31:                              //   in Loop: Header=BB120_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB120_29
.LBB120_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB120_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB120_36
.LBB120_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB120_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB120_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB120_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end120:
	.size	_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc, .Lfunc_end120-_Z28test_goto_loop_unroll_factorILi24EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB121_32
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #23
	movk	w16, #41666, lsl #16
	b.lt	.LBB121_15
// %bb.2:
	mov	w10, #17097                     // =0x42c9
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #45590, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #23                        // =0x17
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w17, #46592                     // =0xb600
	mov	w26, #24456                     // =0x5f88
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w20, #22
	lsr	x9, x9, #36
	add	x25, x21, #88
	movk	w26, #59254, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB121_4
.LBB121_3:                              //   in Loop: Header=BB121_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB121_32
.LBB121_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB121_5 Depth 2
                                        //     Child Loop BB121_9 Depth 2
                                        //     Child Loop BB121_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #20                        // =0x14
.LBB121_5:                              //   Parent Loop BB121_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-88]
	ldur	q2, [x10, #-40]
	ldur	q3, [x10, #-72]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-56]
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v0.4s, v1.4s
	ldr	w14, [x10], #92
	add	w13, w13, w14
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #3
	add	x11, x11, #23
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB121_5
// %bb.6:                               //   in Loop: Header=BB121_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB121_13
// %bb.7:                               //   in Loop: Header=BB121_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB121_11
// %bb.8:                               //   in Loop: Header=BB121_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB121_9:                              //   Parent Loop BB121_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB121_9
// %bb.10:                              //   in Loop: Header=BB121_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB121_13
.LBB121_11:                             // %.preheader
                                        //   in Loop: Header=BB121_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB121_12:                             //   Parent Loop BB121_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB121_12
.LBB121_13:                             //   in Loop: Header=BB121_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB121_3
// %bb.14:                              //   in Loop: Header=BB121_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB121_3
.LBB121_15:
	cmp	w20, #0
	b.le	.LBB121_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB121_18
.LBB121_17:                             //   in Loop: Header=BB121_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB121_32
.LBB121_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB121_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB121_20
// %bb.19:                              //   in Loop: Header=BB121_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB121_24
.LBB121_20:                             //   in Loop: Header=BB121_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB121_22
// %bb.21:                              //   in Loop: Header=BB121_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB121_23
.LBB121_22:                             //   in Loop: Header=BB121_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB121_23:                             //   in Loop: Header=BB121_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB121_26
.LBB121_24:                             // %.preheader3
                                        //   in Loop: Header=BB121_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB121_25:                             //   Parent Loop BB121_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB121_25
.LBB121_26:                             //   in Loop: Header=BB121_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB121_17
// %bb.27:                              //   in Loop: Header=BB121_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB121_17
.LBB121_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB121_30
.LBB121_29:                             //   in Loop: Header=BB121_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB121_32
.LBB121_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB121_29
// %bb.31:                              //   in Loop: Header=BB121_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB121_29
.LBB121_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB121_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB121_36
.LBB121_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB121_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB121_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB121_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end121:
	.size	_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc, .Lfunc_end121-_Z28test_goto_loop_unroll_factorILi23EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB122_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #22
	movk	w15, #41666, lsl #16
	b.lt	.LBB122_15
// %bb.2:
	mov	w10, #35747                     // =0x8ba3
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #47662, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #22                        // =0x16
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #54736                     // =0xd5d0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w22, w20, #21
	lsr	x9, x9, #36
	add	x25, x21, #84
	movk	w26, #11087, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB122_4
.LBB122_3:                              //   in Loop: Header=BB122_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB122_32
.LBB122_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB122_5 Depth 2
                                        //     Child Loop BB122_9 Depth 2
                                        //     Child Loop BB122_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #20                        // =0x14
.LBB122_5:                              //   Parent Loop BB122_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-84]
	ldur	q2, [x10, #-36]
	ldur	q3, [x10, #-68]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-52]
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v0.4s, v1.4s
	add	x10, x10, #88
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #2
	add	x11, x11, #22
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB122_5
// %bb.6:                               //   in Loop: Header=BB122_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB122_13
// %bb.7:                               //   in Loop: Header=BB122_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB122_11
// %bb.8:                               //   in Loop: Header=BB122_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB122_9:                              //   Parent Loop BB122_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB122_9
// %bb.10:                              //   in Loop: Header=BB122_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB122_13
.LBB122_11:                             // %.preheader
                                        //   in Loop: Header=BB122_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB122_12:                             //   Parent Loop BB122_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB122_12
.LBB122_13:                             //   in Loop: Header=BB122_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB122_3
// %bb.14:                              //   in Loop: Header=BB122_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB122_3
.LBB122_15:
	cmp	w20, #0
	b.le	.LBB122_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB122_18
.LBB122_17:                             //   in Loop: Header=BB122_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB122_32
.LBB122_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB122_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB122_20
// %bb.19:                              //   in Loop: Header=BB122_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB122_24
.LBB122_20:                             //   in Loop: Header=BB122_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB122_22
// %bb.21:                              //   in Loop: Header=BB122_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB122_23
.LBB122_22:                             //   in Loop: Header=BB122_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB122_23:                             //   in Loop: Header=BB122_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB122_26
.LBB122_24:                             // %.preheader3
                                        //   in Loop: Header=BB122_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB122_25:                             //   Parent Loop BB122_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB122_25
.LBB122_26:                             //   in Loop: Header=BB122_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB122_17
// %bb.27:                              //   in Loop: Header=BB122_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB122_17
.LBB122_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB122_30
.LBB122_29:                             //   in Loop: Header=BB122_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB122_32
.LBB122_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB122_29
// %bb.31:                              //   in Loop: Header=BB122_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB122_29
.LBB122_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB122_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB122_36
.LBB122_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB122_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB122_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB122_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end122:
	.size	_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc, .Lfunc_end122-_Z28test_goto_loop_unroll_factorILi22EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB123_32
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #21
	movk	w14, #41666, lsl #16
	b.lt	.LBB123_15
// %bb.2:
	mov	w10, #24967                     // =0x6187
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #34328, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w15, #46592                     // =0xb600
	mov	w26, #19480                     // =0x4c18
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w25, w20, #20
	add	x22, x21, #80
	lsr	x10, x10, #32
	movk	w26, #28457, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #21                        // =0x15
	lsr	w9, w9, #4
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB123_4
.LBB123_3:                              //   in Loop: Header=BB123_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB123_32
.LBB123_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB123_5 Depth 2
                                        //     Child Loop BB123_9 Depth 2
                                        //     Child Loop BB123_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB123_5:                              //   Parent Loop BB123_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q0, [x11, #48]
	ldr	w12, [x22, x10, lsl #2]
	ldp	q1, q2, [x11]
	add	x10, x10, #21
	cmp	x10, x25
	add	v0.4s, v1.4s, v0.4s
	ldr	q1, [x11, #32]
	add	v2.4s, v2.4s, v3.4s
	add	x11, x11, #84
	add	v0.4s, v0.4s, v1.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w23, w9
	add	w9, w9, w26
	b.lo	.LBB123_5
// %bb.6:                               //   in Loop: Header=BB123_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB123_13
// %bb.7:                               //   in Loop: Header=BB123_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB123_11
// %bb.8:                               //   in Loop: Header=BB123_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB123_9:                              //   Parent Loop BB123_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB123_9
// %bb.10:                              //   in Loop: Header=BB123_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB123_13
.LBB123_11:                             // %.preheader
                                        //   in Loop: Header=BB123_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB123_12:                             //   Parent Loop BB123_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB123_12
.LBB123_13:                             //   in Loop: Header=BB123_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB123_3
// %bb.14:                              //   in Loop: Header=BB123_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB123_3
.LBB123_15:
	cmp	w20, #0
	b.le	.LBB123_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB123_18
.LBB123_17:                             //   in Loop: Header=BB123_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB123_32
.LBB123_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB123_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB123_20
// %bb.19:                              //   in Loop: Header=BB123_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB123_24
.LBB123_20:                             //   in Loop: Header=BB123_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB123_22
// %bb.21:                              //   in Loop: Header=BB123_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB123_23
.LBB123_22:                             //   in Loop: Header=BB123_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB123_23:                             //   in Loop: Header=BB123_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB123_26
.LBB123_24:                             // %.preheader3
                                        //   in Loop: Header=BB123_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB123_25:                             //   Parent Loop BB123_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB123_25
.LBB123_26:                             //   in Loop: Header=BB123_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB123_17
// %bb.27:                              //   in Loop: Header=BB123_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB123_17
.LBB123_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB123_30
.LBB123_29:                             //   in Loop: Header=BB123_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB123_32
.LBB123_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB123_29
// %bb.31:                              //   in Loop: Header=BB123_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB123_29
.LBB123_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB123_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB123_36
.LBB123_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB123_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB123_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB123_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end123:
	.size	_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc, .Lfunc_end123-_Z28test_goto_loop_unroll_factorILi21EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN15goto_loop_testsILi19EiE7do_testEPKiPKc,"axG",@progbits,_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc,comdat
	.weak	_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc // -- Begin function _ZN15goto_loop_testsILi19EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc,@function
_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc: // @_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc
	adrp	x20, temp_string+1000
	add	x20, x20, :lo12:temp_string+1000
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
.Lfunc_end124:
	.size	_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc, .Lfunc_end124-_ZN15goto_loop_testsILi19EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB125_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #20
	movk	w13, #41666, lsl #16
	b.lt	.LBB125_15
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #52428, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #20                        // =0x14
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w14, #46592                     // =0xb600
	mov	w26, #49760                     // =0xc260
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w22, w20, #19
	lsr	x9, x9, #36
	movk	w26, #45826, lsl #16
	adrp	x19, init_value
	stp	q5, q4, [x29, #-32]             // 32-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	sub	x25, x9, x28
	add	x9, x21, w28, uxtw #2
	and	x10, x25, #0xfffffffffffffff8
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	b	.LBB125_4
.LBB125_3:                              //   in Loop: Header=BB125_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB125_32
.LBB125_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB125_5 Depth 2
                                        //     Child Loop BB125_9 Depth 2
                                        //     Child Loop BB125_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB125_5:                              //   Parent Loop BB125_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q3, q0, [x11, #48]
	add	x10, x10, #20
	ldp	q1, q2, [x11]
	cmp	x10, x22
	add	v0.4s, v1.4s, v0.4s
	ldr	q1, [x11, #32]
	add	v2.4s, v2.4s, v3.4s
	add	x11, x11, #80
	add	v0.4s, v0.4s, v1.4s
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w23, w9
	add	w9, w9, w26
	b.lo	.LBB125_5
// %bb.6:                               //   in Loop: Header=BB125_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB125_13
// %bb.7:                               //   in Loop: Header=BB125_4 Depth=1
	cmp	x25, #7
	mov	x11, x28
	b.ls	.LBB125_11
// %bb.8:                               //   in Loop: Header=BB125_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB125_9:                              //   Parent Loop BB125_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB125_9
// %bb.10:                              //   in Loop: Header=BB125_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x25, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB125_13
.LBB125_11:                             // %.preheader
                                        //   in Loop: Header=BB125_4 Depth=1
	ldr	x12, [sp, #24]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB125_12:                             //   Parent Loop BB125_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB125_12
.LBB125_13:                             //   in Loop: Header=BB125_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB125_3
// %bb.14:                              //   in Loop: Header=BB125_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q5, q4, [x29, #-32]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB125_3
.LBB125_15:
	cmp	w20, #0
	b.le	.LBB125_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB125_18
.LBB125_17:                             //   in Loop: Header=BB125_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB125_32
.LBB125_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB125_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB125_20
// %bb.19:                              //   in Loop: Header=BB125_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB125_24
.LBB125_20:                             //   in Loop: Header=BB125_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB125_22
// %bb.21:                              //   in Loop: Header=BB125_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB125_23
.LBB125_22:                             //   in Loop: Header=BB125_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #32]                   // 16-byte Folded Reload
.LBB125_23:                             //   in Loop: Header=BB125_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB125_26
.LBB125_24:                             // %.preheader3
                                        //   in Loop: Header=BB125_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB125_25:                             //   Parent Loop BB125_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB125_25
.LBB125_26:                             //   in Loop: Header=BB125_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w26
	cmp	w9, w10
	b.eq	.LBB125_17
// %bb.27:                              //   in Loop: Header=BB125_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB125_17
.LBB125_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB125_30
.LBB125_29:                             //   in Loop: Header=BB125_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB125_32
.LBB125_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB125_29
// %bb.31:                              //   in Loop: Header=BB125_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB125_29
.LBB125_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB125_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB125_36
.LBB125_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB125_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB125_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB125_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end125:
	.size	_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc, .Lfunc_end125-_Z28test_goto_loop_unroll_factorILi20EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB126_32
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #19
	movk	w16, #41666, lsl #16
	b.lt	.LBB126_15
// %bb.2:
	mov	w10, #27595                     // =0x6bcb
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #44840, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w17, #46592                     // =0xb600
	mov	w26, #14504                     // =0x38a8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w25, w20, #18
	add	x22, x21, #72
	lsr	x10, x10, #32
	movk	w26, #63196, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	w10, #19                        // =0x13
	lsr	w9, w9, #4
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB126_4
.LBB126_3:                              //   in Loop: Header=BB126_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB126_32
.LBB126_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB126_5 Depth 2
                                        //     Child Loop BB126_9 Depth 2
                                        //     Child Loop BB126_12 Depth 2
	mov	w9, wzr
	mov	x10, x22
	mov	w11, #16                        // =0x10
.LBB126_5:                              //   Parent Loop BB126_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-40]
	ldur	q1, [x10, #-72]
	ldur	q2, [x10, #-24]
	ldur	q3, [x10, #-56]
	add	v0.4s, v1.4s, v0.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-8]
	ldr	w14, [x10], #76
	add	v0.4s, v0.4s, v2.4s
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #3
	add	x11, x11, #19
	cmp	x12, x25
	add	w9, w9, w26
	b.lo	.LBB126_5
// %bb.6:                               //   in Loop: Header=BB126_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB126_13
// %bb.7:                               //   in Loop: Header=BB126_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB126_11
// %bb.8:                               //   in Loop: Header=BB126_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB126_9:                              //   Parent Loop BB126_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB126_9
// %bb.10:                              //   in Loop: Header=BB126_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB126_13
.LBB126_11:                             // %.preheader
                                        //   in Loop: Header=BB126_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB126_12:                             //   Parent Loop BB126_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB126_12
.LBB126_13:                             //   in Loop: Header=BB126_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB126_3
// %bb.14:                              //   in Loop: Header=BB126_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB126_3
.LBB126_15:
	cmp	w20, #0
	b.le	.LBB126_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB126_18
.LBB126_17:                             //   in Loop: Header=BB126_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB126_32
.LBB126_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB126_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB126_20
// %bb.19:                              //   in Loop: Header=BB126_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB126_24
.LBB126_20:                             //   in Loop: Header=BB126_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB126_22
// %bb.21:                              //   in Loop: Header=BB126_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB126_23
.LBB126_22:                             //   in Loop: Header=BB126_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB126_23:                             //   in Loop: Header=BB126_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB126_26
.LBB126_24:                             // %.preheader3
                                        //   in Loop: Header=BB126_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB126_25:                             //   Parent Loop BB126_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB126_25
.LBB126_26:                             //   in Loop: Header=BB126_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w26
	cmp	w9, w10
	b.eq	.LBB126_17
// %bb.27:                              //   in Loop: Header=BB126_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB126_17
.LBB126_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB126_30
.LBB126_29:                             //   in Loop: Header=BB126_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB126_32
.LBB126_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB126_29
// %bb.31:                              //   in Loop: Header=BB126_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB126_29
.LBB126_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB126_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB126_36
.LBB126_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB126_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB126_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB126_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end126:
	.size	_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc, .Lfunc_end126-_Z28test_goto_loop_unroll_factorILi19EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB127_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #18
	movk	w15, #41666, lsl #16
	b.lt	.LBB127_15
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	w24, #35256                     // =0x89b8
	mov	w23, #38821                     // =0x97a5
	movk	w10, #14563, lsl #16
	movk	w24, #48166, lsl #16
	movk	w23, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #18                        // =0x12
	dup	v4.4s, w23
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #44784                     // =0xaef0
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w25, w20, #17
	lsr	x9, x9, #34
	add	x22, x21, #68
	movk	w26, #15029, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB127_4
.LBB127_3:                              //   in Loop: Header=BB127_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB127_32
.LBB127_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB127_5 Depth 2
                                        //     Child Loop BB127_9 Depth 2
                                        //     Child Loop BB127_12 Depth 2
	mov	w9, wzr
	mov	x10, x22
	mov	w11, #16                        // =0x10
.LBB127_5:                              //   Parent Loop BB127_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-36]
	ldur	q1, [x10, #-68]
	ldur	q2, [x10, #-20]
	ldur	q3, [x10, #-52]
	add	v0.4s, v1.4s, v0.4s
	add	v2.4s, v3.4s, v2.4s
	ldp	w12, w13, [x10, #-4]
	add	x10, x10, #72
	add	v0.4s, v0.4s, v2.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w23, w9
	add	x12, x11, #2
	add	x11, x11, #18
	cmp	x12, x25
	add	w9, w9, w26
	b.lo	.LBB127_5
// %bb.6:                               //   in Loop: Header=BB127_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB127_13
// %bb.7:                               //   in Loop: Header=BB127_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB127_11
// %bb.8:                               //   in Loop: Header=BB127_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB127_9:                              //   Parent Loop BB127_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB127_9
// %bb.10:                              //   in Loop: Header=BB127_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB127_13
.LBB127_11:                             // %.preheader
                                        //   in Loop: Header=BB127_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB127_12:                             //   Parent Loop BB127_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB127_12
.LBB127_13:                             //   in Loop: Header=BB127_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB127_3
// %bb.14:                              //   in Loop: Header=BB127_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB127_3
.LBB127_15:
	cmp	w20, #0
	b.le	.LBB127_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB127_18
.LBB127_17:                             //   in Loop: Header=BB127_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB127_32
.LBB127_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB127_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB127_20
// %bb.19:                              //   in Loop: Header=BB127_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB127_24
.LBB127_20:                             //   in Loop: Header=BB127_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB127_22
// %bb.21:                              //   in Loop: Header=BB127_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB127_23
.LBB127_22:                             //   in Loop: Header=BB127_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB127_23:                             //   in Loop: Header=BB127_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB127_26
.LBB127_24:                             // %.preheader3
                                        //   in Loop: Header=BB127_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB127_25:                             //   Parent Loop BB127_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB127_25
.LBB127_26:                             //   in Loop: Header=BB127_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w26
	cmp	w9, w10
	b.eq	.LBB127_17
// %bb.27:                              //   in Loop: Header=BB127_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB127_17
.LBB127_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB127_30
.LBB127_29:                             //   in Loop: Header=BB127_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB127_32
.LBB127_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB127_29
// %bb.31:                              //   in Loop: Header=BB127_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB127_29
.LBB127_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB127_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB127_36
.LBB127_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB127_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB127_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB127_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end127:
	.size	_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc, .Lfunc_end127-_Z28test_goto_loop_unroll_factorILi18EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB128_32
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #17
	movk	w14, #41666, lsl #16
	b.lt	.LBB128_15
// %bb.2:
	mov	w10, #61681                     // =0xf0f1
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #61680, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, w20
	dup	v4.4s, w19
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w26, #9528                      // =0x2538
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	lsr	x9, x9, #36
	sub	w23, w20, #16
	add	x25, x21, #64
	movk	w26, #32399, lsl #16
	adrp	x24, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #4
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w22, w9, #17
	sub	x10, x10, x22
	add	x9, x21, w22, uxtw #2
	stur	x10, [x29, #-16]                // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x22
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB128_4
.LBB128_3:                              //   in Loop: Header=BB128_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB128_32
.LBB128_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB128_5 Depth 2
                                        //     Child Loop BB128_9 Depth 2
                                        //     Child Loop BB128_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB128_5:                              //   Parent Loop BB128_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #32]
	ldr	w12, [x25, x10, lsl #2]
	ldp	q2, q3, [x11]
	add	x10, x10, #17
	cmp	x10, x23
	add	x11, x11, #68
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB128_5
// %bb.6:                               //   in Loop: Header=BB128_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB128_13
// %bb.7:                               //   in Loop: Header=BB128_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	mov	x11, x22
	cmp	x10, #7
	b.ls	.LBB128_11
// %bb.8:                               //   in Loop: Header=BB128_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB128_9:                              //   Parent Loop BB128_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB128_9
// %bb.10:                              //   in Loop: Header=BB128_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB128_13
.LBB128_11:                             // %.preheader
                                        //   in Loop: Header=BB128_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB128_12:                             //   Parent Loop BB128_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB128_12
.LBB128_13:                             //   in Loop: Header=BB128_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB128_3
// %bb.14:                              //   in Loop: Header=BB128_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB128_3
.LBB128_15:
	cmp	w20, #0
	b.le	.LBB128_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #38821                     // =0x97a5
	mov	w9, #4976                       // =0x1370
	movk	w23, #48166, lsl #16
	movk	w24, #4117, lsl #16
	movk	w9, #30797, lsl #16
	dup	v0.4s, w23
	dup	v4.4s, w24
	mov	w25, w20
	mov	w26, #46592                     // =0xb600
	mov	w19, wzr
	and	x27, x25, #0x7ffffff8
	movk	w26, #46159, lsl #16
	adrp	x28, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q0, q4, [x29, #-32]             // 32-byte Folded Spill
	dup	v0.4s, w9
	str	q0, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB128_18
.LBB128_17:                             //   in Loop: Header=BB128_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB128_32
.LBB128_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB128_25 Depth 2
	cmp	w20, #8
	b.hs	.LBB128_20
// %bb.19:                              //   in Loop: Header=BB128_18 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB128_24
.LBB128_20:                             //   in Loop: Header=BB128_18 Depth=1
	ldp	q0, q2, [x21]
	cmp	x27, #8
	mul	v1.4s, v0.4s, v4.4s
	mul	v0.4s, v2.4s, v4.4s
	b.ne	.LBB128_22
// %bb.21:                              //   in Loop: Header=BB128_18 Depth=1
	ldur	q2, [x29, #-32]                 // 16-byte Folded Reload
	b	.LBB128_23
.LBB128_22:                             //   in Loop: Header=BB128_18 Depth=1
	ldp	q2, q3, [x21, #32]
	mla	v1.4s, v2.4s, v4.4s
	mla	v0.4s, v3.4s, v4.4s
	ldr	q2, [sp, #48]                   // 16-byte Folded Reload
.LBB128_23:                             //   in Loop: Header=BB128_18 Depth=1
	add	v1.4s, v1.4s, v2.4s
	add	v0.4s, v0.4s, v2.4s
	cmp	x27, x25
	mov	x11, x27
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB128_26
.LBB128_24:                             // %.preheader3
                                        //   in Loop: Header=BB128_18 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x25, x11
.LBB128_25:                             //   Parent Loop BB128_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w23
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB128_25
.LBB128_26:                             //   in Loop: Header=BB128_18 Depth=1
	ldr	d0, [x28, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w26
	cmp	w9, w10
	b.eq	.LBB128_17
// %bb.27:                              //   in Loop: Header=BB128_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB128_17
.LBB128_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB128_30
.LBB128_29:                             //   in Loop: Header=BB128_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB128_32
.LBB128_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB128_29
// %bb.31:                              //   in Loop: Header=BB128_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB128_29
.LBB128_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB128_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB128_36
.LBB128_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB128_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB128_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB128_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end128:
	.size	_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc, .Lfunc_end128-_Z28test_goto_loop_unroll_factorILi17EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB129_26
// %bb.1:
	mov	w26, #58432                     // =0xe440
	subs	w9, w21, #16
	movk	w26, #41666, lsl #16
	b.lt	.LBB129_15
// %bb.2:
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	and	w9, w9, #0xfffffff0
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	add	w23, w9, #16
	mov	w9, w21
	dup	v4.4s, w19
	dup	v5.4s, w28
	sub	x10, x9, x23
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	and	x11, x9, #0x7
	add	x9, x20, w23, uxtw #2
	mov	w13, #46592                     // =0xb600
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	sub	x10, x10, x11
	mov	w25, #39808                     // =0x9b80
	mov	w27, wzr
	movk	w13, #46159, lsl #16
	sub	w22, w21, #15
	stp	x10, x11, [sp, #24]             // 16-byte Folded Spill
	add	x10, x10, x23
	add	x9, x9, #16
	movk	w25, #49768, lsl #16
	adrp	x24, init_value
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	b	.LBB129_4
.LBB129_3:                              //   in Loop: Header=BB129_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB129_26
.LBB129_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB129_5 Depth 2
                                        //     Child Loop BB129_9 Depth 2
                                        //     Child Loop BB129_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB129_5:                              //   Parent Loop BB129_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q0, q1, [x11, #32]
	add	x10, x10, #16
	ldp	q2, q3, [x11], #64
	cmp	x10, x22
	add	v1.4s, v3.4s, v1.4s
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w25
	b.lo	.LBB129_5
// %bb.6:                               //   in Loop: Header=BB129_4 Depth=1
	cmp	w23, w21
	b.ge	.LBB129_13
// %bb.7:                               //   in Loop: Header=BB129_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x23
	cmp	x10, #7
	b.ls	.LBB129_11
// %bb.8:                               //   in Loop: Header=BB129_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB129_9:                              //   Parent Loop BB129_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB129_9
// %bb.10:                              //   in Loop: Header=BB129_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	cbz	x10, .LBB129_13
.LBB129_11:                             // %.preheader
                                        //   in Loop: Header=BB129_4 Depth=1
	ldr	x12, [sp, #40]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB129_12:                             //   Parent Loop BB129_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB129_12
.LBB129_13:                             //   in Loop: Header=BB129_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w13
	cmp	w9, w10
	b.eq	.LBB129_3
// %bb.14:                              //   in Loop: Header=BB129_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w13, #46592                     // =0xb600
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #46159, lsl #16
	b	.LBB129_3
.LBB129_15:
	cmp	w21, #0
	b.le	.LBB129_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x27, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB129_18
.LBB129_17:                             //   in Loop: Header=BB129_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB129_26
.LBB129_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB129_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB129_19:                             //   Parent Loop BB129_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB129_19
// %bb.20:                              //   in Loop: Header=BB129_18 Depth=1
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w23
	cmp	w9, w10
	b.eq	.LBB129_17
// %bb.21:                              //   in Loop: Header=BB129_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB129_17
.LBB129_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB129_24
.LBB129_23:                             //   in Loop: Header=BB129_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB129_26
.LBB129_24:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w26
	cmp	w9, w22
	b.eq	.LBB129_23
// %bb.25:                              //   in Loop: Header=BB129_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB129_23
.LBB129_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB129_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB129_30
.LBB129_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB129_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB129_30:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB129_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end129:
	.size	_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc, .Lfunc_end129-_Z28test_goto_loop_unroll_factorILi16EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB130_26
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w21, #15
	movk	w16, #41666, lsl #16
	b.lt	.LBB130_15
// %bb.2:
	mov	w10, #34953                     // =0x8889
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #34952, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w26, #4552                      // =0x11c8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w21, #14
	add	x23, x20, #56
	lsr	x9, x9, #35
	movk	w26, #1602, lsl #16
	adrp	x18, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	lsl	w10, w9, #4
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	sub	w9, w10, w9
	mov	w10, w21
	add	w25, w9, #15
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	sub	x10, x10, x25
	add	x9, x20, w25, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x25
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB130_4
.LBB130_3:                              //   in Loop: Header=BB130_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB130_26
.LBB130_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB130_5 Depth 2
                                        //     Child Loop BB130_9 Depth 2
                                        //     Child Loop BB130_12 Depth 2
	mov	w9, wzr
	mov	x10, x23
	mov	w11, #12                        // =0xc
.LBB130_5:                              //   Parent Loop BB130_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-56]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-40]
	ldr	w14, [x10], #60
	add	v0.4s, v0.4s, v1.4s
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #15
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB130_5
// %bb.6:                               //   in Loop: Header=BB130_4 Depth=1
	cmp	w25, w21
	b.ge	.LBB130_13
// %bb.7:                               //   in Loop: Header=BB130_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x25
	cmp	x10, #7
	b.ls	.LBB130_11
// %bb.8:                               //   in Loop: Header=BB130_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB130_9:                              //   Parent Loop BB130_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB130_9
// %bb.10:                              //   in Loop: Header=BB130_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB130_13
.LBB130_11:                             // %.preheader
                                        //   in Loop: Header=BB130_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB130_12:                             //   Parent Loop BB130_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB130_12
.LBB130_13:                             //   in Loop: Header=BB130_4 Depth=1
	ldr	d0, [x18, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB130_3
// %bb.14:                              //   in Loop: Header=BB130_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x24, x20
	mov	x20, x18
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	mov	x18, x20
	mov	x20, x24
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB130_3
.LBB130_15:
	cmp	w21, #0
	b.le	.LBB130_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB130_18
.LBB130_17:                             //   in Loop: Header=BB130_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB130_26
.LBB130_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB130_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB130_19:                             //   Parent Loop BB130_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB130_19
// %bb.20:                              //   in Loop: Header=BB130_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w23
	cmp	w9, w10
	b.eq	.LBB130_17
// %bb.21:                              //   in Loop: Header=BB130_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB130_17
.LBB130_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB130_24
.LBB130_23:                             //   in Loop: Header=BB130_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB130_26
.LBB130_24:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB130_23
// %bb.25:                              //   in Loop: Header=BB130_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB130_23
.LBB130_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB130_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB130_30
.LBB130_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB130_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB130_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB130_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end130:
	.size	_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc, .Lfunc_end130-_Z28test_goto_loop_unroll_factorILi15EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB131_26
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w21, #14
	movk	w15, #41666, lsl #16
	b.lt	.LBB131_15
// %bb.2:
	lsr	w9, w9, #1
	mov	w10, #9363                      // =0x2493
	mov	w24, #35256                     // =0x89b8
	movk	w10, #37449, lsl #16
	mov	w22, #38821                     // =0x97a5
	movk	w24, #48166, lsl #16
	umull	x9, w9, w10
	mov	w10, #14                        // =0xe
	movk	w22, #4117, lsl #16
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #34832                     // =0x8810
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	lsr	x9, x9, #34
	sub	w23, w21, #13
	add	x25, x20, #52
	movk	w26, #18971, lsl #16
	adrp	x17, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w21
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x20, w28, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB131_4
.LBB131_3:                              //   in Loop: Header=BB131_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB131_26
.LBB131_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB131_5 Depth 2
                                        //     Child Loop BB131_9 Depth 2
                                        //     Child Loop BB131_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #12                        // =0xc
.LBB131_5:                              //   Parent Loop BB131_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-52]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v1.4s, v0.4s
	ldur	q1, [x10, #-36]
	add	x10, x10, #56
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w22, w9
	add	x12, x11, #2
	add	x11, x11, #14
	cmp	x12, x23
	add	w9, w9, w26
	b.lo	.LBB131_5
// %bb.6:                               //   in Loop: Header=BB131_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB131_13
// %bb.7:                               //   in Loop: Header=BB131_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB131_11
// %bb.8:                               //   in Loop: Header=BB131_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB131_9:                              //   Parent Loop BB131_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB131_9
// %bb.10:                              //   in Loop: Header=BB131_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB131_13
.LBB131_11:                             // %.preheader
                                        //   in Loop: Header=BB131_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB131_12:                             //   Parent Loop BB131_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB131_12
.LBB131_13:                             //   in Loop: Header=BB131_4 Depth=1
	ldr	d0, [x17, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB131_3
// %bb.14:                              //   in Loop: Header=BB131_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x19, x20
	mov	x20, x17
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	mov	x17, x20
	mov	x20, x19
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB131_3
.LBB131_15:
	cmp	w21, #0
	b.le	.LBB131_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB131_18
.LBB131_17:                             //   in Loop: Header=BB131_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB131_26
.LBB131_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB131_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB131_19:                             //   Parent Loop BB131_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB131_19
// %bb.20:                              //   in Loop: Header=BB131_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w23
	cmp	w9, w10
	b.eq	.LBB131_17
// %bb.21:                              //   in Loop: Header=BB131_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB131_17
.LBB131_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB131_24
.LBB131_23:                             //   in Loop: Header=BB131_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB131_26
.LBB131_24:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB131_23
// %bb.25:                              //   in Loop: Header=BB131_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB131_23
.LBB131_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB131_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB131_30
.LBB131_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB131_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB131_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB131_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end131:
	.size	_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc, .Lfunc_end131-_Z28test_goto_loop_unroll_factorILi14EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB132_26
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w21, #13
	movk	w14, #41666, lsl #16
	b.lt	.LBB132_15
// %bb.2:
	mov	w10, #60495                     // =0xec4f
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	movk	w10, #20164, lsl #16
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #13                        // =0xd
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w15, #46592                     // =0xb600
	mov	w26, #65112                     // =0xfe58
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	sub	w23, w21, #12
	lsr	x9, x9, #34
	add	x25, x20, #48
	movk	w26, #36340, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w21
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x20, w28, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB132_4
.LBB132_3:                              //   in Loop: Header=BB132_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB132_26
.LBB132_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB132_5 Depth 2
                                        //     Child Loop BB132_9 Depth 2
                                        //     Child Loop BB132_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB132_5:                              //   Parent Loop BB132_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q1, [x11]
	ldr	q0, [x11, #32]
	ldr	w12, [x25, x10, lsl #2]
	add	x10, x10, #13
	add	x11, x11, #52
	cmp	x10, x23
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w22, w9
	add	w9, w9, w26
	b.lo	.LBB132_5
// %bb.6:                               //   in Loop: Header=BB132_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB132_13
// %bb.7:                               //   in Loop: Header=BB132_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB132_11
// %bb.8:                               //   in Loop: Header=BB132_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB132_9:                              //   Parent Loop BB132_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB132_9
// %bb.10:                              //   in Loop: Header=BB132_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB132_13
.LBB132_11:                             // %.preheader
                                        //   in Loop: Header=BB132_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB132_12:                             //   Parent Loop BB132_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB132_12
.LBB132_13:                             //   in Loop: Header=BB132_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB132_3
// %bb.14:                              //   in Loop: Header=BB132_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB132_3
.LBB132_15:
	cmp	w21, #0
	b.le	.LBB132_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB132_18
.LBB132_17:                             //   in Loop: Header=BB132_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB132_26
.LBB132_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB132_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB132_19:                             //   Parent Loop BB132_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB132_19
// %bb.20:                              //   in Loop: Header=BB132_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w23
	cmp	w9, w10
	b.eq	.LBB132_17
// %bb.21:                              //   in Loop: Header=BB132_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB132_17
.LBB132_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB132_24
.LBB132_23:                             //   in Loop: Header=BB132_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB132_26
.LBB132_24:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB132_23
// %bb.25:                              //   in Loop: Header=BB132_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB132_23
.LBB132_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB132_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB132_30
.LBB132_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB132_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB132_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB132_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end132:
	.size	_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc, .Lfunc_end132-_Z28test_goto_loop_unroll_factorILi13EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB133_26
// %bb.1:
	mov	w26, #58432                     // =0xe440
	subs	w9, w21, #12
	movk	w26, #41666, lsl #16
	b.lt	.LBB133_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #12                        // =0xc
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w13, #46592                     // =0xb600
	mov	w19, #29856                     // =0x74a0
	mov	w27, wzr
	movk	w13, #46159, lsl #16
	sub	w25, w21, #11
	lsr	x9, x9, #35
	movk	w19, #53710, lsl #16
	adrp	x14, init_value
	stp	q5, q4, [x29, #-32]             // 32-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w21
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x23, x9, x28
	add	x9, x20, w28, uxtw #2
	and	x10, x23, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB133_4
.LBB133_3:                              //   in Loop: Header=BB133_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB133_26
.LBB133_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB133_5 Depth 2
                                        //     Child Loop BB133_9 Depth 2
                                        //     Child Loop BB133_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x20
.LBB133_5:                              //   Parent Loop BB133_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11, #32]
	add	x10, x10, #12
	ldp	q2, q1, [x11], #48
	cmp	x10, x25
	add	v0.4s, v2.4s, v0.4s
	add	v0.4s, v0.4s, v1.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w22, w9
	add	w9, w9, w19
	b.lo	.LBB133_5
// %bb.6:                               //   in Loop: Header=BB133_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB133_13
// %bb.7:                               //   in Loop: Header=BB133_4 Depth=1
	cmp	x23, #7
	mov	x11, x28
	b.ls	.LBB133_11
// %bb.8:                               //   in Loop: Header=BB133_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB133_9:                              //   Parent Loop BB133_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB133_9
// %bb.10:                              //   in Loop: Header=BB133_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x23, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB133_13
.LBB133_11:                             // %.preheader
                                        //   in Loop: Header=BB133_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB133_12:                             //   Parent Loop BB133_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB133_12
.LBB133_13:                             //   in Loop: Header=BB133_4 Depth=1
	ldr	d0, [x14, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w13
	cmp	w9, w10
	b.eq	.LBB133_3
// %bb.14:                              //   in Loop: Header=BB133_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x26, x14
	bl	printf
	ldp	q5, q4, [x29, #-32]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	x14, x26
	mov	w26, #58432                     // =0xe440
	mov	w13, #46592                     // =0xb600
	ldr	w8, [x8, :lo12:iterations]
	movk	w26, #41666, lsl #16
	movk	w13, #46159, lsl #16
	b	.LBB133_3
.LBB133_15:
	cmp	w21, #0
	b.le	.LBB133_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x27, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB133_18
.LBB133_17:                             //   in Loop: Header=BB133_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB133_26
.LBB133_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB133_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB133_19:                             //   Parent Loop BB133_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB133_19
// %bb.20:                              //   in Loop: Header=BB133_18 Depth=1
	ldr	d0, [x27, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w26, w23
	cmp	w9, w10
	b.eq	.LBB133_17
// %bb.21:                              //   in Loop: Header=BB133_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB133_17
.LBB133_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB133_24
.LBB133_23:                             //   in Loop: Header=BB133_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB133_26
.LBB133_24:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w26
	cmp	w9, w22
	b.eq	.LBB133_23
// %bb.25:                              //   in Loop: Header=BB133_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB133_23
.LBB133_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB133_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB133_30
.LBB133_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB133_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB133_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB133_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end133:
	.size	_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc, .Lfunc_end133-_Z28test_goto_loop_unroll_factorILi12EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN15goto_loop_testsILi10EiE7do_testEPKiPKc,"axG",@progbits,_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc,comdat
	.weak	_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc // -- Begin function _ZN15goto_loop_testsILi10EiE7do_testEPKiPKc
	.p2align	2
	.type	_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc,@function
_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc: // @_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x20, temp_string
	add	x20, x20, :lo12:temp_string
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	mov	x19, x0
	bl	_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
	add	x2, x20, #900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
.Lfunc_end134:
	.size	_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc, .Lfunc_end134-_ZN15goto_loop_testsILi10EiE7do_testEPKiPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB135_26
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w21, #11
	movk	w16, #41666, lsl #16
	b.lt	.LBB135_15
// %bb.2:
	mov	w10, #35747                     // =0x8ba3
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	movk	w10, #47662, lsl #16
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #11                        // =0xb
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w17, #46592                     // =0xb600
	mov	w26, #60136                     // =0xeae8
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w23, w21, #10
	lsr	x9, x9, #35
	add	x25, x20, #40
	movk	w26, #5543, lsl #16
	adrp	x18, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w21
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x20, w28, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB135_4
.LBB135_3:                              //   in Loop: Header=BB135_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB135_26
.LBB135_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB135_5 Depth 2
                                        //     Child Loop BB135_9 Depth 2
                                        //     Child Loop BB135_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #8                         // =0x8
.LBB135_5:                              //   Parent Loop BB135_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldur	q1, [x10, #-40]
	ldp	w12, w13, [x10, #-8]
	add	v0.4s, v1.4s, v0.4s
	ldr	w14, [x10], #44
	add	w13, w13, w14
	addv	s0, v0.4s
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w22, w9
	add	x12, x11, #3
	add	x11, x11, #11
	cmp	x12, x23
	add	w9, w9, w26
	b.lo	.LBB135_5
// %bb.6:                               //   in Loop: Header=BB135_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB135_13
// %bb.7:                               //   in Loop: Header=BB135_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB135_11
// %bb.8:                               //   in Loop: Header=BB135_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB135_9:                              //   Parent Loop BB135_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB135_9
// %bb.10:                              //   in Loop: Header=BB135_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB135_13
.LBB135_11:                             // %.preheader
                                        //   in Loop: Header=BB135_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB135_12:                             //   Parent Loop BB135_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB135_12
.LBB135_13:                             //   in Loop: Header=BB135_4 Depth=1
	ldr	d0, [x18, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB135_3
// %bb.14:                              //   in Loop: Header=BB135_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x19, x20
	mov	x20, x18
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	mov	x18, x20
	mov	x20, x19
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB135_3
.LBB135_15:
	cmp	w21, #0
	b.le	.LBB135_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB135_18
.LBB135_17:                             //   in Loop: Header=BB135_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB135_26
.LBB135_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB135_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB135_19:                             //   Parent Loop BB135_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB135_19
// %bb.20:                              //   in Loop: Header=BB135_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w23
	cmp	w9, w10
	b.eq	.LBB135_17
// %bb.21:                              //   in Loop: Header=BB135_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB135_17
.LBB135_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB135_24
.LBB135_23:                             //   in Loop: Header=BB135_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB135_26
.LBB135_24:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB135_23
// %bb.25:                              //   in Loop: Header=BB135_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB135_23
.LBB135_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB135_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB135_30
.LBB135_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB135_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB135_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB135_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end135:
	.size	_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc, .Lfunc_end135-_Z28test_goto_loop_unroll_factorILi11EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB136_26
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w21, #10
	movk	w15, #41666, lsl #16
	b.lt	.LBB136_15
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	movk	w10, #52428, lsl #16
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #10                        // =0xa
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #24880                     // =0x6130
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w21, #9
	lsr	x9, x9, #35
	add	x25, x20, #36
	movk	w26, #22913, lsl #16
	adrp	x17, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w21
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x20, w28, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB136_4
.LBB136_3:                              //   in Loop: Header=BB136_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB136_26
.LBB136_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB136_5 Depth 2
                                        //     Child Loop BB136_9 Depth 2
                                        //     Child Loop BB136_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #8                         // =0x8
.LBB136_5:                              //   Parent Loop BB136_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldur	q1, [x10, #-36]
	ldp	w12, w13, [x10, #-4]
	add	v0.4s, v1.4s, v0.4s
	add	x10, x10, #40
	addv	s0, v0.4s
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w22, w9
	add	x12, x11, #2
	add	x11, x11, #10
	cmp	x12, x23
	add	w9, w9, w26
	b.lo	.LBB136_5
// %bb.6:                               //   in Loop: Header=BB136_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB136_13
// %bb.7:                               //   in Loop: Header=BB136_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB136_11
// %bb.8:                               //   in Loop: Header=BB136_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB136_9:                              //   Parent Loop BB136_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB136_9
// %bb.10:                              //   in Loop: Header=BB136_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB136_13
.LBB136_11:                             // %.preheader
                                        //   in Loop: Header=BB136_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB136_12:                             //   Parent Loop BB136_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB136_12
.LBB136_13:                             //   in Loop: Header=BB136_4 Depth=1
	ldr	d0, [x17, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB136_3
// %bb.14:                              //   in Loop: Header=BB136_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x19, x20
	mov	x20, x17
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	mov	x17, x20
	mov	x20, x19
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB136_3
.LBB136_15:
	cmp	w21, #0
	b.le	.LBB136_22
// %bb.16:
	mov	w22, #35256                     // =0x89b8
	mov	w23, #46592                     // =0xb600
	mov	w24, #38821                     // =0x97a5
	mov	w19, wzr
	movk	w22, #48166, lsl #16
	movk	w23, #46159, lsl #16
	movk	w24, #4117, lsl #16
	mov	w25, w21
	adrp	x26, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB136_18
.LBB136_17:                             //   in Loop: Header=BB136_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB136_26
.LBB136_18:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB136_19 Depth 2
	mov	w9, wzr
	mov	x10, x20
	mov	x11, x25
.LBB136_19:                             //   Parent Loop BB136_18 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w22
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	b.ne	.LBB136_19
// %bb.20:                              //   in Loop: Header=BB136_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w23
	cmp	w9, w10
	b.eq	.LBB136_17
// %bb.21:                              //   in Loop: Header=BB136_18 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB136_17
.LBB136_22:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB136_24
.LBB136_23:                             //   in Loop: Header=BB136_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB136_26
.LBB136_24:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB136_23
// %bb.25:                              //   in Loop: Header=BB136_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB136_23
.LBB136_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB136_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB136_30
.LBB136_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB136_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB136_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB136_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end136:
	.size	_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc, .Lfunc_end136-_Z28test_goto_loop_unroll_factorILi10EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB137_33
// %bb.1:
	mov	w14, #58432                     // =0xe440
	subs	w9, w20, #9
	movk	w14, #41666, lsl #16
	b.lt	.LBB137_15
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #14563, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, w20
	dup	v4.4s, w19
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	dup	v5.4s, w28
	mov	w15, #46592                     // =0xb600
	mov	w26, #55160                     // =0xd778
	mov	w27, wzr
	movk	w15, #46159, lsl #16
	lsr	x9, x9, #33
	sub	w23, w20, #8
	add	x22, x21, #32
	movk	w26, #40282, lsl #16
	adrp	x24, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	add	w9, w9, w9, lsl #3
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w25, w9, #9
	sub	x10, x10, x25
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x25
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB137_4
.LBB137_3:                              //   in Loop: Header=BB137_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB137_33
.LBB137_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB137_5 Depth 2
                                        //     Child Loop BB137_9 Depth 2
                                        //     Child Loop BB137_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB137_5:                              //   Parent Loop BB137_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11]
	add	x11, x11, #36
	ldr	w12, [x22, x10, lsl #2]
	add	x10, x10, #9
	cmp	x10, x23
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w19, w9
	add	w9, w9, w26
	b.lo	.LBB137_5
// %bb.6:                               //   in Loop: Header=BB137_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB137_13
// %bb.7:                               //   in Loop: Header=BB137_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x25
	cmp	x10, #7
	b.ls	.LBB137_11
// %bb.8:                               //   in Loop: Header=BB137_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB137_9:                              //   Parent Loop BB137_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB137_9
// %bb.10:                              //   in Loop: Header=BB137_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB137_13
.LBB137_11:                             // %.preheader
                                        //   in Loop: Header=BB137_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB137_12:                             //   Parent Loop BB137_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB137_12
.LBB137_13:                             //   in Loop: Header=BB137_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w15
	cmp	w9, w10
	b.eq	.LBB137_3
// %bb.14:                              //   in Loop: Header=BB137_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w15, #46592                     // =0xb600
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w14, #41666, lsl #16
	b	.LBB137_3
.LBB137_15:
	cmp	w20, #0
	b.le	.LBB137_29
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB137_18
.LBB137_17:                             //   in Loop: Header=BB137_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB137_33
.LBB137_18:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB137_20
// %bb.19:                              //   in Loop: Header=BB137_18 Depth=1
	add	w9, w9, w23
	b	.LBB137_27
.LBB137_20:                             //   in Loop: Header=BB137_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB137_27
// %bb.21:                              //   in Loop: Header=BB137_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB137_27
// %bb.22:                              //   in Loop: Header=BB137_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB137_27
// %bb.23:                              //   in Loop: Header=BB137_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB137_27
// %bb.24:                              //   in Loop: Header=BB137_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	cmp	w20, #6
	madd	w9, w10, w25, w9
	b.eq	.LBB137_27
// %bb.25:                              //   in Loop: Header=BB137_18 Depth=1
	ldr	w10, [x21, #24]
	add	w9, w9, w23
	cmp	w20, #7
	madd	w9, w10, w25, w9
	b.eq	.LBB137_27
// %bb.26:                              //   in Loop: Header=BB137_18 Depth=1
	ldr	w10, [x21, #28]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB137_27:                             //   in Loop: Header=BB137_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w14, w24
	cmp	w9, w10
	b.eq	.LBB137_17
// %bb.28:                              //   in Loop: Header=BB137_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB137_17
.LBB137_29:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB137_31
.LBB137_30:                             //   in Loop: Header=BB137_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB137_33
.LBB137_31:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w14
	cmp	w9, w22
	b.eq	.LBB137_30
// %bb.32:                              //   in Loop: Header=BB137_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w14, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #41666, lsl #16
	b	.LBB137_30
.LBB137_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB137_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB137_37
.LBB137_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB137_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB137_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB137_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end137:
	.size	_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc, .Lfunc_end137-_Z28test_goto_loop_unroll_factorILi9EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #176
	.cfi_def_cfa_offset 176
	stp	x29, x30, [sp, #80]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #96]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #112]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #128]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #144]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #160]            // 16-byte Folded Spill
	add	x29, sp, #80
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB138_32
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #8
	movk	w13, #41666, lsl #16
	b.lt	.LBB138_15
// %bb.2:
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	and	w9, w9, #0xfffffff8
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	add	w22, w9, #8
	mov	w9, w20
	dup	v4.4s, w19
	dup	v5.4s, w28
	sub	x24, x9, x22
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	and	x10, x9, #0x7
	add	x9, x21, w22, uxtw #2
	mov	w14, #46592                     // =0xb600
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	sub	x10, x24, x10
	mov	w25, #19904                     // =0x4dc0
	mov	w27, wzr
	movk	w14, #46159, lsl #16
	sub	w23, w20, #7
	str	x10, [sp, #24]                  // 8-byte Folded Spill
	add	x10, x10, x22
	add	x9, x9, #16
	movk	w25, #57652, lsl #16
	adrp	x26, init_value
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	stp	q5, q4, [x29, #-32]             // 32-byte Folded Spill
	b	.LBB138_4
.LBB138_3:                              //   in Loop: Header=BB138_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB138_32
.LBB138_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB138_5 Depth 2
                                        //     Child Loop BB138_9 Depth 2
                                        //     Child Loop BB138_12 Depth 2
	mov	x10, xzr
	mov	w9, wzr
	mov	x11, x21
.LBB138_5:                              //   Parent Loop BB138_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q0, [x11], #32
	add	x10, x10, #8
	cmp	x10, x23
	add	v0.4s, v1.4s, v0.4s
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w19, w9
	add	w9, w9, w25
	b.lo	.LBB138_5
// %bb.6:                               //   in Loop: Header=BB138_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB138_13
// %bb.7:                               //   in Loop: Header=BB138_4 Depth=1
	cmp	x24, #7
	mov	x11, x22
	b.ls	.LBB138_11
// %bb.8:                               //   in Loop: Header=BB138_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB138_9:                              //   Parent Loop BB138_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB138_9
// %bb.10:                              //   in Loop: Header=BB138_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	ldr	x10, [sp, #32]                  // 8-byte Folded Reload
	addv	s0, v0.4s
	fmov	w9, s0
	cbz	x10, .LBB138_13
.LBB138_11:                             // %.preheader
                                        //   in Loop: Header=BB138_4 Depth=1
	ldr	x12, [sp, #40]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB138_12:                             //   Parent Loop BB138_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB138_12
.LBB138_13:                             //   in Loop: Header=BB138_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB138_3
// %bb.14:                              //   in Loop: Header=BB138_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q5, q4, [x29, #-32]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB138_3
.LBB138_15:
	cmp	w20, #0
	b.le	.LBB138_28
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB138_18
.LBB138_17:                             //   in Loop: Header=BB138_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB138_32
.LBB138_18:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB138_20
// %bb.19:                              //   in Loop: Header=BB138_18 Depth=1
	add	w9, w9, w23
	b	.LBB138_26
.LBB138_20:                             //   in Loop: Header=BB138_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB138_26
// %bb.21:                              //   in Loop: Header=BB138_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB138_26
// %bb.22:                              //   in Loop: Header=BB138_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB138_26
// %bb.23:                              //   in Loop: Header=BB138_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB138_26
// %bb.24:                              //   in Loop: Header=BB138_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	cmp	w20, #6
	madd	w9, w10, w25, w9
	b.eq	.LBB138_26
// %bb.25:                              //   in Loop: Header=BB138_18 Depth=1
	ldr	w10, [x21, #24]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB138_26:                             //   in Loop: Header=BB138_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w24
	cmp	w9, w10
	b.eq	.LBB138_17
// %bb.27:                              //   in Loop: Header=BB138_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB138_17
.LBB138_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB138_30
.LBB138_29:                             //   in Loop: Header=BB138_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB138_32
.LBB138_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB138_29
// %bb.31:                              //   in Loop: Header=BB138_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB138_29
.LBB138_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB138_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB138_36
.LBB138_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB138_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB138_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 176
	ldp	x20, x19, [sp, #160]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #144]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #128]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #112]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #96]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #176
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB138_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end138:
	.size	_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc, .Lfunc_end138-_Z28test_goto_loop_unroll_factorILi8EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB139_31
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #7
	movk	w16, #41666, lsl #16
	b.lt	.LBB139_15
// %bb.2:
	mov	w10, #18725                     // =0x4925
	mov	w28, #35256                     // =0x89b8
	mov	w19, #38821                     // =0x97a5
	movk	w10, #9362, lsl #16
	movk	w28, #48166, lsl #16
	movk	w19, #4117, lsl #16
	umull	x10, w9, w10
	dup	v4.4s, w19
	dup	v5.4s, w28
	mov	w17, #46592                     // =0xb600
	mov	w26, #50184                     // =0xc408
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	sub	w22, w20, #6
	add	x23, x21, #24
	lsr	x10, x10, #32
	movk	w26, #9485, lsl #16
	adrp	x24, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	sub	w9, w9, w10
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	lsr	w9, w9, #2
	lsl	w10, w9, #3
	sub	w9, w10, w9
	mov	w10, w20
	add	w25, w9, #7
	str	x10, [sp, #32]                  // 8-byte Folded Spill
	sub	x10, x10, x25
	add	x9, x21, w25, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x25
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB139_4
.LBB139_3:                              //   in Loop: Header=BB139_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB139_31
.LBB139_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB139_5 Depth 2
                                        //     Child Loop BB139_9 Depth 2
                                        //     Child Loop BB139_12 Depth 2
	mov	w9, wzr
	mov	x10, x23
	mov	w11, #4                         // =0x4
.LBB139_5:                              //   Parent Loop BB139_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-24]
	ldp	w12, w13, [x10, #-8]
	addv	s0, v0.4s
	ldr	w14, [x10], #28
	add	w13, w13, w14
	fmov	w15, s0
	add	w12, w15, w12
	add	w12, w12, w13
	madd	w9, w12, w19, w9
	add	x12, x11, #3
	add	x11, x11, #7
	cmp	x12, x22
	add	w9, w9, w26
	b.lo	.LBB139_5
// %bb.6:                               //   in Loop: Header=BB139_4 Depth=1
	cmp	w25, w20
	b.ge	.LBB139_13
// %bb.7:                               //   in Loop: Header=BB139_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x25
	cmp	x10, #7
	b.ls	.LBB139_11
// %bb.8:                               //   in Loop: Header=BB139_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB139_9:                              //   Parent Loop BB139_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB139_9
// %bb.10:                              //   in Loop: Header=BB139_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB139_13
.LBB139_11:                             // %.preheader
                                        //   in Loop: Header=BB139_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB139_12:                             //   Parent Loop BB139_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w28
	subs	x11, x11, #1
	madd	w9, w12, w19, w9
	b.ne	.LBB139_12
.LBB139_13:                             //   in Loop: Header=BB139_4 Depth=1
	ldr	d0, [x24, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB139_3
// %bb.14:                              //   in Loop: Header=BB139_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB139_3
.LBB139_15:
	cmp	w20, #0
	b.le	.LBB139_27
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB139_18
.LBB139_17:                             //   in Loop: Header=BB139_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB139_31
.LBB139_18:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB139_20
// %bb.19:                              //   in Loop: Header=BB139_18 Depth=1
	add	w9, w9, w23
	b	.LBB139_25
.LBB139_20:                             //   in Loop: Header=BB139_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB139_25
// %bb.21:                              //   in Loop: Header=BB139_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB139_25
// %bb.22:                              //   in Loop: Header=BB139_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB139_25
// %bb.23:                              //   in Loop: Header=BB139_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	cmp	w20, #5
	madd	w9, w10, w25, w9
	b.eq	.LBB139_25
// %bb.24:                              //   in Loop: Header=BB139_18 Depth=1
	ldr	w10, [x21, #20]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB139_25:                             //   in Loop: Header=BB139_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w24
	cmp	w9, w10
	b.eq	.LBB139_17
// %bb.26:                              //   in Loop: Header=BB139_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB139_17
.LBB139_27:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB139_29
.LBB139_28:                             //   in Loop: Header=BB139_29 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB139_31
.LBB139_29:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB139_28
// %bb.30:                              //   in Loop: Header=BB139_29 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB139_28
.LBB139_31:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB139_33
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB139_35
.LBB139_33:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB139_36
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
.LBB139_35:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB139_36:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end139:
	.size	_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc, .Lfunc_end139-_Z28test_goto_loop_unroll_factorILi7EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #192
	.cfi_def_cfa_offset 192
	stp	x29, x30, [sp, #96]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #112]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #128]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #144]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #160]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #176]            // 16-byte Folded Spill
	add	x29, sp, #96
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB140_30
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #6
	movk	w15, #41666, lsl #16
	b.lt	.LBB140_15
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	movk	w10, #43690, lsl #16
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	umull	x9, w9, w10
	mov	w10, #6                         // =0x6
	dup	v4.4s, w22
	dup	v5.4s, w24
	mov	w16, #46592                     // =0xb600
	mov	w26, #14928                     // =0x3a50
	mov	w27, wzr
	movk	w16, #46159, lsl #16
	sub	w23, w20, #5
	lsr	x9, x9, #34
	add	x25, x21, #20
	movk	w26, #26855, lsl #16
	adrp	x19, init_value
	stur	q4, [x29, #-32]                 // 16-byte Folded Spill
	madd	w28, w9, w10, w10
	mov	w9, w20
	str	q5, [sp, #48]                   // 16-byte Folded Spill
	str	x9, [sp, #32]                   // 8-byte Folded Spill
	sub	x10, x9, x28
	add	x9, x21, w28, uxtw #2
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	and	x10, x10, #0xfffffffffffffff8
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	add	x10, x10, x28
	add	x9, x9, #16
	stp	x9, x10, [sp, #16]              // 16-byte Folded Spill
	b	.LBB140_4
.LBB140_3:                              //   in Loop: Header=BB140_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB140_30
.LBB140_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB140_5 Depth 2
                                        //     Child Loop BB140_9 Depth 2
                                        //     Child Loop BB140_12 Depth 2
	mov	w9, wzr
	mov	x10, x25
	mov	w11, #4                         // =0x4
.LBB140_5:                              //   Parent Loop BB140_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x10, #-20]
	ldp	w12, w13, [x10, #-4]
	addv	s0, v0.4s
	add	x10, x10, #24
	fmov	w14, s0
	add	w12, w14, w12
	add	w12, w12, w13
	madd	w9, w12, w22, w9
	add	x12, x11, #2
	add	x11, x11, #6
	cmp	x12, x23
	add	w9, w9, w26
	b.lo	.LBB140_5
// %bb.6:                               //   in Loop: Header=BB140_4 Depth=1
	cmp	w28, w20
	b.ge	.LBB140_13
// %bb.7:                               //   in Loop: Header=BB140_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	mov	x11, x28
	cmp	x10, #7
	b.ls	.LBB140_11
// %bb.8:                               //   in Loop: Header=BB140_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB140_9:                              //   Parent Loop BB140_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB140_9
// %bb.10:                              //   in Loop: Header=BB140_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB140_13
.LBB140_11:                             // %.preheader
                                        //   in Loop: Header=BB140_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB140_12:                             //   Parent Loop BB140_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB140_12
.LBB140_13:                             //   in Loop: Header=BB140_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB140_3
// %bb.14:                              //   in Loop: Header=BB140_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-32]                 // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB140_3
.LBB140_15:
	cmp	w20, #0
	b.le	.LBB140_26
// %bb.16:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB140_18
.LBB140_17:                             //   in Loop: Header=BB140_18 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB140_30
.LBB140_18:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB140_20
// %bb.19:                              //   in Loop: Header=BB140_18 Depth=1
	add	w9, w9, w23
	b	.LBB140_24
.LBB140_20:                             //   in Loop: Header=BB140_18 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB140_24
// %bb.21:                              //   in Loop: Header=BB140_18 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB140_24
// %bb.22:                              //   in Loop: Header=BB140_18 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	cmp	w20, #4
	madd	w9, w10, w25, w9
	b.eq	.LBB140_24
// %bb.23:                              //   in Loop: Header=BB140_18 Depth=1
	ldr	w10, [x21, #16]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB140_24:                             //   in Loop: Header=BB140_18 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB140_17
// %bb.25:                              //   in Loop: Header=BB140_18 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB140_17
.LBB140_26:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB140_28
.LBB140_27:                             //   in Loop: Header=BB140_28 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB140_30
.LBB140_28:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB140_27
// %bb.29:                              //   in Loop: Header=BB140_28 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB140_27
.LBB140_30:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB140_32
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB140_34
.LBB140_32:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB140_35
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
.LBB140_34:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 192
	ldp	x20, x19, [sp, #176]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #160]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #144]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #128]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #112]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #192
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB140_35:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end140:
	.size	_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc, .Lfunc_end140-_Z28test_goto_loop_unroll_factorILi6EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB141_35
// %bb.1:
	mov	w16, #58432                     // =0xe440
	subs	w9, w20, #5
	movk	w16, #41666, lsl #16
	b.lt	.LBB141_21
// %bb.2:
	sub	w28, w20, #4
	mov	w10, #5                         // =0x5
	mov	w11, #52429                     // =0xcccd
	cmp	x28, #5
	mov	x12, #-3689348814741910324      // =0xcccccccccccccccc
	movk	w11, #52428, lsl #16
	csel	x10, x28, x10, hi
	movk	x12, #52429
	umull	x9, w9, w11
	sub	x10, x10, #1
	mov	w11, w20
	mov	w2, #35256                      // =0x89b8
	umulh	x10, x10, x12
	mov	w23, #38821                     // =0x97a5
	movk	w2, #48166, lsl #16
	lsr	x9, x9, #34
	movk	w23, #4117, lsl #16
	add	x25, x21, #16
	dup	v4.4s, w23
	dup	v5.4s, w2
	mov	w17, #46592                     // =0xb600
	add	w9, w9, w9, lsl #2
	mov	w22, #45208                     // =0xb098
	mov	w27, wzr
	movk	w17, #46159, lsl #16
	movk	w22, #44224, lsl #16
	adrp	x26, init_value
	lsr	x10, x10, #2
	add	w1, w9, #5
	str	x11, [sp, #32]                  // 8-byte Folded Spill
	stp	q5, q4, [x29, #-48]             // 32-byte Folded Spill
	add	x9, x10, #1
	sub	x10, x11, x1
	and	x19, x9, #0x7ffffffffffffffe
	stp	x9, x10, [x29, #-16]            // 16-byte Folded Spill
	and	x9, x10, #0xfffffffffffffff8
	add	x10, x19, x19, lsl #2
	stp	x10, x9, [sp, #48]              // 16-byte Folded Spill
	add	x9, x9, x1
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	add	x9, x21, #20
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	add	x9, x25, w1, uxtw #2
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	b	.LBB141_4
.LBB141_3:                              //   in Loop: Header=BB141_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB141_35
.LBB141_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB141_7 Depth 2
                                        //     Child Loop BB141_10 Depth 2
                                        //     Child Loop BB141_15 Depth 2
                                        //     Child Loop BB141_18 Depth 2
	cmp	w28, #6
	b.hs	.LBB141_6
// %bb.5:                               //   in Loop: Header=BB141_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB141_9
.LBB141_6:                              // %.preheader6
                                        //   in Loop: Header=BB141_4 Depth=1
	ldr	x11, [sp, #40]                  // 8-byte Folded Reload
	mov	w9, wzr
	mov	w10, wzr
	mov	x12, x19
.LBB141_7:                              //   Parent Loop BB141_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldur	q0, [x11, #-20]
	ldr	q1, [x11]
	add	w9, w9, w22
	ldur	w13, [x11, #-4]
	ldr	w14, [x11, #16]
	add	w10, w10, w22
	addv	s0, v0.4s
	addv	s1, v1.4s
	subs	x12, x12, #2
	add	x11, x11, #40
	fmov	w15, s0
	add	w13, w15, w13
	fmov	w15, s1
	madd	w9, w13, w23, w9
	add	w14, w15, w14
	madd	w10, w14, w23, w10
	b.ne	.LBB141_7
// %bb.8:                               //   in Loop: Header=BB141_4 Depth=1
	ldur	x11, [x29, #-16]                // 8-byte Folded Reload
	add	w9, w10, w9
	ldr	x10, [sp, #48]                  // 8-byte Folded Reload
	cmp	x11, x19
	b.eq	.LBB141_11
.LBB141_9:                              // %.preheader2
                                        //   in Loop: Header=BB141_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB141_10:                             //   Parent Loop BB141_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11], #20
	ldr	w12, [x25, x10, lsl #2]
	add	w9, w9, w22
	add	x10, x10, #5
	addv	s0, v0.4s
	cmp	x10, x28
	fmov	w13, s0
	add	w12, w13, w12
	madd	w9, w12, w23, w9
	b.lo	.LBB141_10
.LBB141_11:                             //   in Loop: Header=BB141_4 Depth=1
	cmp	w1, w20
	b.ge	.LBB141_19
// %bb.12:                              //   in Loop: Header=BB141_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	x10, #7
	b.hi	.LBB141_14
// %bb.13:                              //   in Loop: Header=BB141_4 Depth=1
	mov	x11, x1
	b	.LBB141_17
.LBB141_14:                             //   in Loop: Header=BB141_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB141_15:                             //   Parent Loop BB141_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB141_15
// %bb.16:                              //   in Loop: Header=BB141_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-8]                  // 8-byte Folded Reload
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x9, x10
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB141_19
.LBB141_17:                             // %.preheader
                                        //   in Loop: Header=BB141_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB141_18:                             //   Parent Loop BB141_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w2
	subs	x11, x11, #1
	madd	w9, w12, w23, w9
	b.ne	.LBB141_18
.LBB141_19:                             //   in Loop: Header=BB141_4 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w17
	cmp	w9, w10
	b.eq	.LBB141_3
// %bb.20:                              //   in Loop: Header=BB141_4 Depth=1
	adrp	x8, current_test
	mov	x24, x21
	mov	w21, w20
	mov	x20, x1
	ldr	w1, [x8, :lo12:current_test]
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	bl	printf
	ldp	q5, q4, [x29, #-48]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w2, #35256                      // =0x89b8
	mov	w17, #46592                     // =0xb600
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w2, #48166, lsl #16
	mov	x1, x20
	mov	w20, w21
	mov	x21, x24
	movk	w17, #46159, lsl #16
	movk	w16, #41666, lsl #16
	b	.LBB141_3
.LBB141_21:
	cmp	w20, #0
	b.le	.LBB141_31
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB141_24
.LBB141_23:                             //   in Loop: Header=BB141_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB141_35
.LBB141_24:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB141_26
// %bb.25:                              //   in Loop: Header=BB141_24 Depth=1
	add	w9, w9, w23
	b	.LBB141_29
.LBB141_26:                             //   in Loop: Header=BB141_24 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.eq	.LBB141_29
// %bb.27:                              //   in Loop: Header=BB141_24 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	cmp	w20, #3
	madd	w9, w10, w25, w9
	b.eq	.LBB141_29
// %bb.28:                              //   in Loop: Header=BB141_24 Depth=1
	ldr	w10, [x21, #12]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
.LBB141_29:                             //   in Loop: Header=BB141_24 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w16, w24
	cmp	w9, w10
	b.eq	.LBB141_23
// %bb.30:                              //   in Loop: Header=BB141_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB141_23
.LBB141_31:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB141_33
.LBB141_32:                             //   in Loop: Header=BB141_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB141_35
.LBB141_33:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w16
	cmp	w9, w22
	b.eq	.LBB141_32
// %bb.34:                              //   in Loop: Header=BB141_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w16, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #41666, lsl #16
	b	.LBB141_32
.LBB141_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB141_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB141_39
.LBB141_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB141_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB141_39:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB141_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end141:
	.size	_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc, .Lfunc_end141-_Z28test_goto_loop_unroll_factorILi5EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB142_34
// %bb.1:
	mov	w13, #58432                     // =0xe440
	subs	w9, w20, #4
	movk	w13, #41666, lsl #16
	b.lt	.LBB142_21
// %bb.2:
	sub	w28, w20, #3
	mov	w10, #4                         // =0x4
	and	w9, w9, #0xfffffffc
	cmp	x28, #4
	mov	w11, w20
	add	w23, w9, #4
	csel	x10, x28, x10, hi
	mov	w24, #35256                     // =0x89b8
	mov	w22, #38821                     // =0x97a5
	sub	x10, x10, #1
	mov	w25, #9952                      // =0x26e0
	str	x11, [sp, #32]                  // 8-byte Folded Spill
	lsr	x10, x10, #2
	sub	x11, x11, x23
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	movk	w25, #61594, lsl #16
	stur	x11, [x29, #-8]                 // 8-byte Folded Spill
	add	x10, x10, #1
	dup	v20.4s, w22
	dup	v21.4s, w24
	and	x26, x10, #0x7ffffffffffffff8
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	and	x10, x11, #0xfffffffffffffff8
	lsl	x11, x26, #2
	add	x9, x21, w23, uxtw #2
	dup	v22.4s, w25
	mov	w14, #46592                     // =0xb600
	mov	w27, wzr
	adrp	x19, init_value
	stp	x11, x10, [sp, #48]             // 16-byte Folded Spill
	add	x10, x10, x23
	movk	w14, #46159, lsl #16
	str	x10, [sp, #24]                  // 8-byte Folded Spill
	add	x10, x21, #64
	add	x9, x9, #16
	str	x10, [sp, #40]                  // 8-byte Folded Spill
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	stp	q21, q20, [x29, #-48]           // 32-byte Folded Spill
	str	q22, [sp, #64]                  // 16-byte Folded Spill
	b	.LBB142_4
.LBB142_3:                              //   in Loop: Header=BB142_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB142_34
.LBB142_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB142_7 Depth 2
                                        //     Child Loop BB142_10 Depth 2
                                        //     Child Loop BB142_15 Depth 2
                                        //     Child Loop BB142_18 Depth 2
	cmp	w28, #29
	b.hs	.LBB142_6
// %bb.5:                               //   in Loop: Header=BB142_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB142_9
.LBB142_6:                              // %.preheader6
                                        //   in Loop: Header=BB142_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	mov	x10, x26
.LBB142_7:                              //   Parent Loop BB142_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	x11, x9, #64
	ld4	{ v16.4s, v17.4s, v18.4s, v19.4s }, [x9]
	subs	x10, x10, #8
	add	x9, x9, #128
	ld4	{ v2.4s, v3.4s, v4.4s, v5.4s }, [x11]
	add	v7.4s, v17.4s, v16.4s
	add	v6.4s, v3.4s, v2.4s
	add	v2.4s, v4.4s, v5.4s
	add	v3.4s, v18.4s, v19.4s
	add	v2.4s, v6.4s, v2.4s
	add	v3.4s, v7.4s, v3.4s
	mla	v0.4s, v2.4s, v20.4s
	mla	v1.4s, v3.4s, v20.4s
	add	v0.4s, v0.4s, v22.4s
	add	v1.4s, v1.4s, v22.4s
	b.ne	.LBB142_7
// %bb.8:                               //   in Loop: Header=BB142_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #48]                  // 8-byte Folded Reload
	cmp	x9, x26
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB142_11
.LBB142_9:                              // %.preheader2
                                        //   in Loop: Header=BB142_4 Depth=1
	add	x11, x21, x10, lsl #2
.LBB142_10:                             //   Parent Loop BB142_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	q0, [x11], #16
	add	x10, x10, #4
	cmp	x10, x28
	addv	s0, v0.4s
	fmov	w12, s0
	madd	w9, w12, w22, w9
	add	w9, w9, w25
	b.lo	.LBB142_10
.LBB142_11:                             //   in Loop: Header=BB142_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB142_19
// %bb.12:                              //   in Loop: Header=BB142_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	x10, #7
	b.hi	.LBB142_14
// %bb.13:                              //   in Loop: Header=BB142_4 Depth=1
	mov	x11, x23
	b	.LBB142_17
.LBB142_14:                             //   in Loop: Header=BB142_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #56]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
.LBB142_15:                             //   Parent Loop BB142_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v20.4s
	mla	v1.4s, v3.4s, v20.4s
	add	v0.4s, v0.4s, v21.4s
	add	v1.4s, v1.4s, v21.4s
	b.ne	.LBB142_15
// %bb.16:                              //   in Loop: Header=BB142_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #56]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #24]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB142_19
.LBB142_17:                             // %.preheader
                                        //   in Loop: Header=BB142_4 Depth=1
	ldr	x12, [sp, #32]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB142_18:                             //   Parent Loop BB142_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB142_18
.LBB142_19:                             //   in Loop: Header=BB142_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w14
	cmp	w9, w10
	b.eq	.LBB142_3
// %bb.20:                              //   in Loop: Header=BB142_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q21, q20, [x29, #-48]           // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q22, [sp, #64]                  // 16-byte Folded Reload
	mov	w14, #46592                     // =0xb600
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w14, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB142_3
.LBB142_21:
	cmp	w20, #0
	b.le	.LBB142_30
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB142_24
.LBB142_23:                             //   in Loop: Header=BB142_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB142_34
.LBB142_24:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB142_26
// %bb.25:                              //   in Loop: Header=BB142_24 Depth=1
	add	w9, w9, w23
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w24
	cmp	w9, w10
	b.eq	.LBB142_23
	b	.LBB142_28
.LBB142_26:                             //   in Loop: Header=BB142_24 Depth=1
	ldr	w10, [x21, #4]
	cmp	w20, #2
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	b.ne	.LBB142_29
// %bb.27:                              //   in Loop: Header=BB142_24 Depth=1
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w24
	cmp	w9, w10
	b.eq	.LBB142_23
.LBB142_28:                             //   in Loop: Header=BB142_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB142_23
.LBB142_29:                             //   in Loop: Header=BB142_24 Depth=1
	ldr	w10, [x21, #8]
	add	w9, w9, w23
	madd	w9, w10, w25, w9
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w24
	cmp	w9, w10
	b.eq	.LBB142_23
	b	.LBB142_28
.LBB142_30:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB142_32
.LBB142_31:                             //   in Loop: Header=BB142_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB142_34
.LBB142_32:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w13
	cmp	w9, w22
	b.eq	.LBB142_31
// %bb.33:                              //   in Loop: Header=BB142_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w13, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB142_31
.LBB142_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB142_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB142_38
.LBB142_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB142_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB142_38:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB142_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end142:
	.size	_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc, .Lfunc_end142-_Z28test_goto_loop_unroll_factorILi4EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB143_32
// %bb.1:
	mov	w15, #58432                     // =0xe440
	subs	w9, w20, #3
	movk	w15, #41666, lsl #16
	b.lt	.LBB143_21
// %bb.2:
	sub	w28, w20, #2
	mov	w10, #3                         // =0x3
	mov	w11, #43691                     // =0xaaab
	cmp	x28, #3
	mov	x12, #-6148914691236517206      // =0xaaaaaaaaaaaaaaaa
	movk	w11, #43690, lsl #16
	csel	x10, x28, x10, hi
	movk	x12, #43691
	umull	x9, w9, w11
	sub	x10, x10, #1
	mov	w11, w20
	mov	w24, #35256                     // =0x89b8
	umulh	x10, x10, x12
	mov	w22, #38821                     // =0x97a5
	mov	w25, #40232                     // =0x9d28
	lsr	x9, x9, #33
	str	x11, [sp, #24]                  // 8-byte Folded Spill
	movk	w24, #48166, lsl #16
	movk	w22, #4117, lsl #16
	movk	w25, #13427, lsl #16
	dup	v19.4s, w24
	add	w9, w9, w9, lsl #1
	dup	v18.4s, w22
	dup	v20.4s, w25
	mov	w16, #46592                     // =0xb600
	mov	w27, wzr
	adrp	x19, init_value
	lsr	x10, x10, #1
	add	w23, w9, #3
	movk	w16, #46159, lsl #16
	sub	x11, x11, x23
	add	x9, x21, w23, uxtw #2
	stp	q19, q18, [x29, #-48]           // 32-byte Folded Spill
	add	x10, x10, #1
	stur	x11, [x29, #-16]                // 8-byte Folded Spill
	and	x26, x10, #0x7ffffffffffffff8
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	and	x10, x11, #0xfffffffffffffff8
	add	x11, x26, x26, lsl #1
	add	x9, x9, #16
	str	q20, [sp, #48]                  // 16-byte Folded Spill
	stp	x11, x10, [sp, #32]             // 16-byte Folded Spill
	add	x10, x10, x23
	stp	x9, x10, [sp, #8]               // 16-byte Folded Spill
	add	x10, x21, #8
	stur	x10, [x29, #-8]                 // 8-byte Folded Spill
	b	.LBB143_4
.LBB143_3:                              //   in Loop: Header=BB143_4 Depth=1
	add	w27, w27, #1
	cmp	w27, w8
	b.ge	.LBB143_32
.LBB143_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB143_7 Depth 2
                                        //     Child Loop BB143_10 Depth 2
                                        //     Child Loop BB143_15 Depth 2
                                        //     Child Loop BB143_18 Depth 2
	cmp	w28, #22
	b.hs	.LBB143_6
// %bb.5:                               //   in Loop: Header=BB143_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB143_9
.LBB143_6:                              // %.preheader6
                                        //   in Loop: Header=BB143_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x21
	mov	x10, x26
.LBB143_7:                              //   Parent Loop BB143_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov	x11, x9
	subs	x10, x10, #8
	add	x9, x9, #96
	ld3	{ v2.4s, v3.4s, v4.4s }, [x11], #48
	ld3	{ v5.4s, v6.4s, v7.4s }, [x11]
	add	v16.4s, v3.4s, v2.4s
	add	v17.4s, v6.4s, v5.4s
	add	v2.4s, v16.4s, v4.4s
	add	v3.4s, v17.4s, v7.4s
	mla	v0.4s, v2.4s, v18.4s
	mla	v1.4s, v3.4s, v18.4s
	add	v0.4s, v0.4s, v20.4s
	add	v1.4s, v1.4s, v20.4s
	b.ne	.LBB143_7
// %bb.8:                               //   in Loop: Header=BB143_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #32]                  // 8-byte Folded Reload
	cmp	x9, x26
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB143_11
.LBB143_9:                              // %.preheader2
                                        //   in Loop: Header=BB143_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	add	x10, x10, x11, lsl #2
	add	x11, x11, #1
.LBB143_10:                             //   Parent Loop BB143_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	w12, w13, [x10, #-8]
	ldr	w14, [x10], #12
	add	w12, w13, w12
	add	w12, w12, w14
	madd	w9, w12, w22, w9
	add	x12, x11, #2
	add	x11, x11, #3
	cmp	x12, x28
	add	w9, w9, w25
	b.lo	.LBB143_10
.LBB143_11:                             //   in Loop: Header=BB143_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB143_19
// %bb.12:                              //   in Loop: Header=BB143_4 Depth=1
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	cmp	x10, #7
	b.hi	.LBB143_14
// %bb.13:                              //   in Loop: Header=BB143_4 Depth=1
	mov	x11, x23
	b	.LBB143_17
.LBB143_14:                             //   in Loop: Header=BB143_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB143_15:                             //   Parent Loop BB143_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v18.4s
	mla	v1.4s, v3.4s, v18.4s
	add	v0.4s, v0.4s, v19.4s
	add	v1.4s, v1.4s, v19.4s
	b.ne	.LBB143_15
// %bb.16:                              //   in Loop: Header=BB143_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #40]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-16]                // 8-byte Folded Reload
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB143_19
.LBB143_17:                             // %.preheader
                                        //   in Loop: Header=BB143_4 Depth=1
	ldr	x12, [sp, #24]                  // 8-byte Folded Reload
	add	x10, x21, x11, lsl #2
	sub	x11, x12, x11
.LBB143_18:                             //   Parent Loop BB143_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	add	w9, w9, w24
	subs	x11, x11, #1
	madd	w9, w12, w22, w9
	b.ne	.LBB143_18
.LBB143_19:                             //   in Loop: Header=BB143_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w16
	cmp	w9, w10
	b.eq	.LBB143_3
// %bb.20:                              //   in Loop: Header=BB143_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q19, q18, [x29, #-48]           // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q20, [sp, #48]                  // 16-byte Folded Reload
	mov	w16, #46592                     // =0xb600
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w16, #46159, lsl #16
	movk	w15, #41666, lsl #16
	b	.LBB143_3
.LBB143_21:
	cmp	w20, #0
	b.le	.LBB143_28
// %bb.22:
	mov	w23, #35256                     // =0x89b8
	mov	w24, #46592                     // =0xb600
	mov	w25, #38821                     // =0x97a5
	mov	w27, #4976                      // =0x1370
	mov	w19, wzr
	movk	w23, #48166, lsl #16
	movk	w24, #46159, lsl #16
	movk	w25, #4117, lsl #16
	adrp	x26, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	movk	w27, #30797, lsl #16
	b	.LBB143_24
.LBB143_23:                             //   in Loop: Header=BB143_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB143_32
.LBB143_24:                             // =>This Inner Loop Header: Depth=1
	ldr	w9, [x21]
	cmp	w20, #1
	mul	w9, w9, w25
	b.ne	.LBB143_26
// %bb.25:                              //   in Loop: Header=BB143_24 Depth=1
	add	w9, w9, w23
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB143_23
	b	.LBB143_27
.LBB143_26:                             //   in Loop: Header=BB143_24 Depth=1
	ldr	w10, [x21, #4]
	madd	w9, w10, w25, w9
	add	w9, w9, w27
	ldr	d0, [x26, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w15, w24
	cmp	w9, w10
	b.eq	.LBB143_23
.LBB143_27:                             //   in Loop: Header=BB143_24 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB143_23
.LBB143_28:
	adrp	x21, init_value
	mov	w22, #18944                     // =0x4a00
	mov	w19, wzr
	ldr	d0, [x21, :lo12:init_value]
	movk	w22, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB143_30
.LBB143_29:                             //   in Loop: Header=BB143_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB143_32
.LBB143_30:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w15
	cmp	w9, w22
	b.eq	.LBB143_29
// %bb.31:                              //   in Loop: Header=BB143_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	mov	w15, #58432                     // =0xe440
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #41666, lsl #16
	b	.LBB143_29
.LBB143_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB143_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB143_36
.LBB143_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB143_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB143_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB143_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end143:
	.size	_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc, .Lfunc_end143-_Z28test_goto_loop_unroll_factorILi3EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB144_29
// %bb.1:
	subs	w9, w21, #2
	b.lt	.LBB144_20
// %bb.2:
	sub	w27, w21, #1
	mov	w10, #2                         // =0x2
	and	w9, w9, #0xfffffffe
	cmp	x27, #2
	mov	w24, #38821                     // =0x97a5
	mov	w11, w21
	csel	x10, x27, x10, hi
	mov	w22, #4976                      // =0x1370
	mov	w23, #35256                     // =0x89b8
	sub	x10, x10, #1
	add	w25, w9, #2
	movk	w24, #4117, lsl #16
	lsr	x10, x10, #1
	movk	w22, #30797, lsl #16
	movk	w23, #48166, lsl #16
	str	x11, [sp, #24]                  // 8-byte Folded Spill
	sub	x11, x11, x25
	dup	v6.4s, w24
	add	x10, x10, #1
	dup	v7.4s, w23
	add	x9, x20, w25, uxtw #2
	stur	x11, [x29, #-8]                 // 8-byte Folded Spill
	and	x11, x11, #0xfffffffffffffff8
	and	x28, x10, #0x7ffffffffffffff8
	dup	v16.4s, w22
	mov	w13, #58432                     // =0xe440
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	str	x11, [sp, #64]                  // 8-byte Folded Spill
	add	x10, x11, x25
	lsl	x11, x28, #1
	mov	w15, #46592                     // =0xb600
	mov	w26, wzr
	movk	w13, #41666, lsl #16
	str	x10, [sp, #16]                  // 8-byte Folded Spill
	add	x10, x20, #32
	add	x9, x9, #16
	adrp	x19, init_value
	movk	w15, #46159, lsl #16
	stp	x10, x11, [sp, #32]             // 16-byte Folded Spill
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	stp	q7, q6, [x29, #-48]             // 32-byte Folded Spill
	str	q16, [sp, #48]                  // 16-byte Folded Spill
	b	.LBB144_4
.LBB144_3:                              //   in Loop: Header=BB144_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB144_29
.LBB144_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB144_7 Depth 2
                                        //     Child Loop BB144_9 Depth 2
                                        //     Child Loop BB144_14 Depth 2
                                        //     Child Loop BB144_17 Depth 2
	cmp	w21, #16
	b.hs	.LBB144_6
// %bb.5:                               //   in Loop: Header=BB144_4 Depth=1
	mov	x10, xzr
	mov	w9, wzr
	b	.LBB144_9
.LBB144_6:                              // %.preheader6
                                        //   in Loop: Header=BB144_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	mov	x10, x28
.LBB144_7:                              //   Parent Loop BB144_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	sub	x11, x9, #32
	ld2	{ v4.4s, v5.4s }, [x9]
	subs	x10, x10, #8
	add	x9, x9, #64
	ld2	{ v2.4s, v3.4s }, [x11]
	add	v2.4s, v3.4s, v2.4s
	add	v3.4s, v5.4s, v4.4s
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v16.4s
	add	v1.4s, v1.4s, v16.4s
	b.ne	.LBB144_7
// %bb.8:                               //   in Loop: Header=BB144_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #40]                  // 8-byte Folded Reload
	cmp	x9, x28
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB144_10
.LBB144_9:                              //   Parent Loop BB144_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x11, x20, x10, lsl #2
	add	x10, x10, #2
	cmp	x10, x27
	ldp	w12, w11, [x11]
	add	w11, w11, w12
	madd	w9, w11, w24, w9
	add	w9, w9, w22
	b.lo	.LBB144_9
.LBB144_10:                             //   in Loop: Header=BB144_4 Depth=1
	cmp	w25, w21
	b.ge	.LBB144_18
// %bb.11:                              //   in Loop: Header=BB144_4 Depth=1
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	cmp	x10, #7
	b.hi	.LBB144_13
// %bb.12:                              //   in Loop: Header=BB144_4 Depth=1
	mov	x11, x25
	b	.LBB144_16
.LBB144_13:                             //   in Loop: Header=BB144_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	ldr	x10, [sp, #64]                  // 8-byte Folded Reload
	mov	v0.s[0], w9
	ldr	x9, [sp, #8]                    // 8-byte Folded Reload
.LBB144_14:                             //   Parent Loop BB144_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v6.4s
	mla	v1.4s, v3.4s, v6.4s
	add	v0.4s, v0.4s, v7.4s
	add	v1.4s, v1.4s, v7.4s
	b.ne	.LBB144_14
// %bb.15:                              //   in Loop: Header=BB144_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	ldr	x9, [sp, #64]                   // 8-byte Folded Reload
	ldur	x10, [x29, #-8]                 // 8-byte Folded Reload
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x10, x9
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB144_18
.LBB144_16:                             // %.preheader
                                        //   in Loop: Header=BB144_4 Depth=1
	ldr	x12, [sp, #24]                  // 8-byte Folded Reload
	add	x10, x20, x11, lsl #2
	sub	x11, x12, x11
.LBB144_17:                             //   Parent Loop BB144_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	madd	w9, w12, w24, w9
	add	w9, w9, w23
	b.ne	.LBB144_17
.LBB144_18:                             //   in Loop: Header=BB144_4 Depth=1
	ldr	d0, [x19, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w15
	cmp	w9, w10
	b.eq	.LBB144_3
// %bb.19:                              //   in Loop: Header=BB144_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [x29, #-48]             // 32-byte Folded Reload
	adrp	x8, iterations
	mov	w15, #46592                     // =0xb600
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w15, #46159, lsl #16
	movk	w13, #41666, lsl #16
	b	.LBB144_3
.LBB144_20:
	adrp	x19, init_value
	cmp	w21, #1
	ldr	d0, [x19, :lo12:init_value]
	b.ne	.LBB144_25
// %bb.21:                              // %.preheader8
	mov	w23, #58432                     // =0xe440
	mov	w24, #38821                     // =0x97a5
	mov	w25, #11336                     // =0x2c48
	mov	w22, wzr
	movk	w23, #41666, lsl #16
	movk	w24, #4117, lsl #16
	movk	w25, #63529, lsl #16
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB144_23
.LBB144_22:                             //   in Loop: Header=BB144_23 Depth=1
	add	w22, w22, #1
	cmp	w22, w8
	b.ge	.LBB144_29
.LBB144_23:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	ldr	w10, [x20]
	mul	w10, w10, w24
	madd	w9, w9, w23, w25
	cmp	w10, w9
	b.eq	.LBB144_22
// %bb.24:                              //   in Loop: Header=BB144_23 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x19, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB144_22
.LBB144_25:                             // %.preheader10
	mov	w22, #58432                     // =0xe440
	mov	w23, #18944                     // =0x4a00
	mov	w21, wzr
	movk	w22, #41666, lsl #16
	movk	w23, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB144_27
.LBB144_26:                             //   in Loop: Header=BB144_27 Depth=1
	add	w21, w21, #1
	cmp	w21, w8
	b.ge	.LBB144_29
.LBB144_27:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB144_26
// %bb.28:                              //   in Loop: Header=BB144_27 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x19, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB144_26
.LBB144_29:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB144_31
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB144_33
.LBB144_31:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB144_34
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
.LBB144_33:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB144_34:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end144:
	.size	_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc, .Lfunc_end144-_Z28test_goto_loop_unroll_factorILi2EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc // -- Begin function _Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #144
	.cfi_def_cfa_offset 144
	stp	x29, x30, [sp, #48]             // 16-byte Folded Spill
	stp	x28, x27, [sp, #64]             // 16-byte Folded Spill
	stp	x26, x25, [sp, #80]             // 16-byte Folded Spill
	stp	x24, x23, [sp, #96]             // 16-byte Folded Spill
	stp	x22, x21, [sp, #112]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #128]            // 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB145_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB145_13
// %bb.2:
	mov	w28, #38821                     // =0x97a5
	mov	w24, #35256                     // =0x89b8
	mov	w13, #58432                     // =0xe440
	movk	w28, #4117, lsl #16
	movk	w24, #48166, lsl #16
	mov	w19, w20
	dup	v4.4s, w28
	dup	v5.4s, w24
	mov	w27, #46592                     // =0xb600
	mov	w26, wzr
	movk	w13, #41666, lsl #16
	and	x23, x19, #0x7ffffff8
	add	x22, x21, #16
	adrp	x25, init_value
	movk	w27, #46159, lsl #16
	stur	q4, [x29, #-16]                 // 16-byte Folded Spill
	str	q5, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB145_4
.LBB145_3:                              //   in Loop: Header=BB145_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB145_17
.LBB145_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB145_7 Depth 2
                                        //     Child Loop BB145_10 Depth 2
	cmp	w20, #8
	b.hs	.LBB145_6
// %bb.5:                               //   in Loop: Header=BB145_4 Depth=1
	mov	x11, xzr
	mov	w9, wzr
	b	.LBB145_9
.LBB145_6:                              // %.preheader2
                                        //   in Loop: Header=BB145_4 Depth=1
	movi	v0.2d, #0000000000000000
	movi	v1.2d, #0000000000000000
	mov	x9, x22
	mov	x10, x23
.LBB145_7:                              //   Parent Loop BB145_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q2, q3, [x9, #-16]
	subs	x10, x10, #8
	add	x9, x9, #32
	mla	v0.4s, v2.4s, v4.4s
	mla	v1.4s, v3.4s, v4.4s
	add	v0.4s, v0.4s, v5.4s
	add	v1.4s, v1.4s, v5.4s
	b.ne	.LBB145_7
// %bb.8:                               //   in Loop: Header=BB145_4 Depth=1
	add	v0.4s, v1.4s, v0.4s
	cmp	x23, x19
	mov	x11, x23
	addv	s0, v0.4s
	fmov	w9, s0
	b.eq	.LBB145_11
.LBB145_9:                              // %.preheader
                                        //   in Loop: Header=BB145_4 Depth=1
	add	x10, x21, x11, lsl #2
	sub	x11, x19, x11
.LBB145_10:                             //   Parent Loop BB145_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	w12, [x10], #4
	subs	x11, x11, #1
	madd	w9, w12, w28, w9
	add	w9, w9, w24
	b.ne	.LBB145_10
.LBB145_11:                             //   in Loop: Header=BB145_4 Depth=1
	ldr	d0, [x25, :lo12:init_value]
	fcvtzs	w10, d0
	madd	w10, w10, w13, w27
	cmp	w9, w10
	b.eq	.LBB145_3
// %bb.12:                              //   in Loop: Header=BB145_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	q5, [sp, #16]                   // 16-byte Folded Reload
	ldur	q4, [x29, #-16]                 // 16-byte Folded Reload
	mov	w13, #58432                     // =0xe440
	ldr	w8, [x8, :lo12:iterations]
	movk	w13, #41666, lsl #16
	b	.LBB145_3
.LBB145_13:
	adrp	x21, init_value
	mov	w22, #58432                     // =0xe440
	mov	w23, #18944                     // =0x4a00
	ldr	d0, [x21, :lo12:init_value]
	mov	w19, wzr
	movk	w22, #41666, lsl #16
	movk	w23, #19376, lsl #16
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	b	.LBB145_15
.LBB145_14:                             //   in Loop: Header=BB145_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB145_17
.LBB145_15:                             // =>This Inner Loop Header: Depth=1
	fcvtzs	w9, d0
	mul	w9, w9, w22
	cmp	w9, w23
	b.eq	.LBB145_14
// %bb.16:                              //   in Loop: Header=BB145_15 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB145_14
.LBB145_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB145_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB145_21
.LBB145_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB145_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB145_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 144
	ldp	x20, x19, [sp, #128]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #112]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #96]             // 16-byte Folded Reload
	ldp	x26, x25, [sp, #80]             // 16-byte Folded Reload
	ldp	x28, x27, [sp, #64]             // 16-byte Folded Reload
	ldp	x29, x30, [sp, #48]             // 16-byte Folded Reload
	add	sp, sp, #144
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	ret
.LBB145_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end145:
	.size	_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc, .Lfunc_end145-_Z28test_goto_loop_unroll_factorILi1EiEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI146_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI146_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB146_35
// %bb.1:
	subs	w9, w20, #32
	b.lt	.LBB146_14
// %bb.2:
	and	w8, w9, #0xffffffe0
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v18.2d, #-13.00000000
	sub	w9, w20, w8
	add	w24, w8, #32
	mov	x8, #253411660398592            // =0xe67a00000000
	sub	w19, w9, #33
	movk	x8, #16683, lsl #48
	movk	x10, #16584, lsl #48
	add	x11, x19, #1
	dup	v17.2d, x8
	fmov	d9, x8
	and	x22, x11, #0x1fffffffc
	add	x9, x21, w24, uxtw #3
	dup	v16.2d, x10
	add	x8, x22, x24
	fmov	d8, x10
	fmov	d10, #-13.00000000
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	adrp	x8, .LCPI146_1
	mov	w26, wzr
	ldr	d11, [x8, :lo12:.LCPI146_1]
	adrp	x8, .LCPI146_0
	sub	w27, w20, #31
	ldr	d12, [x8, :lo12:.LCPI146_0]
	mov	x8, #70368744177664             // =0x400000000000
	add	x28, x21, #128
	movk	x8, #49343, lsl #48
	add	x23, x9, #16
	adrp	x25, init_value
	fmov	d13, x8
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	b	.LBB146_4
.LBB146_3:                              //   in Loop: Header=BB146_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB146_35
.LBB146_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB146_5 Depth 2
                                        //     Child Loop BB146_8 Depth 2
                                        //     Child Loop BB146_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB146_5:                              //   Parent Loop BB146_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-128]
	add	x8, x8, #32
	ldp	d3, d4, [x9, #-112]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-96]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-80]
	fadd	d1, d1, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-64]
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fadd	d3, d3, d8
	fadd	d0, d0, d4
	fadd	d2, d2, d8
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-48]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d6, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-32]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d3, d3, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #-16]
	fmadd	d2, d2, d9, d10
	fadd	d5, d5, d8
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d2, d2, d8
	fmadd	d5, d5, d9, d10
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d6
	ldp	d7, d6, [x9]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d6, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #16]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d3, d3, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #32]
	fmadd	d2, d2, d9, d10
	fadd	d5, d5, d8
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d2, d2, d8
	fmadd	d5, d5, d9, d10
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #48]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #64]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d1, d1, d8
	fmadd	d3, d3, d9, d10
	fmadd	d2, d6, d9, d10
	fadd	d7, d7, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d9, d10
	fmadd	d1, d1, d9, d10
	ldp	d6, d5, [x9, #80]
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d4, d5, d8
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d5, d6, d9, d10
	fadd	d0, d0, d7
	fmadd	d3, d3, d9, d10
	ldp	d6, d7, [x9, #96]
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d2, d2, d8
	fadd	d6, d6, d8
	fadd	d5, d5, d8
	fadd	d0, d0, d3
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d3, d6, d9, d10
	fmadd	d5, d5, d9, d10
	fadd	d6, d7, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	ldp	d7, d5, [x9, #112]
	fmadd	d6, d6, d9, d10
	add	x9, x9, #256
	fadd	d0, d0, d1
	fadd	d7, d7, d8
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d6, d6, d8
	fmadd	d5, d7, d9, d10
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d3
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB146_5
// %bb.6:                               //   in Loop: Header=BB146_4 Depth=1
	cmp	w24, w20
	b.ge	.LBB146_12
// %bb.7:                               //   in Loop: Header=BB146_4 Depth=1
	cmp	w19, #3
	mov	x10, x24
	mov	x8, x23
	mov	x9, x22
	b.lo	.LBB146_10
.LBB146_8:                              //   Parent Loop BB146_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB146_8
// %bb.9:                               //   in Loop: Header=BB146_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x22
	b.eq	.LBB146_12
.LBB146_10:                             // %.preheader
                                        //   in Loop: Header=BB146_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB146_11:                             //   Parent Loop BB146_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.gt	.LBB146_11
.LBB146_12:                             //   in Loop: Header=BB146_4 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB146_3
// %bb.13:                              //   in Loop: Header=BB146_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB146_3
.LBB146_14:
	cmp	w20, #0
	b.le	.LBB146_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI146_1
	ldr	d12, [x9, :lo12:.LCPI146_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI146_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI146_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB146_17
.LBB146_16:                             //   in Loop: Header=BB146_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB146_35
.LBB146_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB146_28 Depth 2
	cmp	w20, #3
	b.hi	.LBB146_19
// %bb.18:                              //   in Loop: Header=BB146_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB146_27
.LBB146_19:                             //   in Loop: Header=BB146_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB146_26
// %bb.20:                              //   in Loop: Header=BB146_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB146_26
// %bb.21:                              //   in Loop: Header=BB146_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB146_26
// %bb.22:                              //   in Loop: Header=BB146_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB146_26
// %bb.23:                              //   in Loop: Header=BB146_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB146_26
// %bb.24:                              //   in Loop: Header=BB146_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB146_26
// %bb.25:                              //   in Loop: Header=BB146_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB146_26:                             //   in Loop: Header=BB146_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB146_29
.LBB146_27:                             // %.preheader4
                                        //   in Loop: Header=BB146_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB146_28:                             //   Parent Loop BB146_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB146_28
.LBB146_29:                             //   in Loop: Header=BB146_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB146_16
// %bb.30:                              //   in Loop: Header=BB146_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB146_16
.LBB146_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI146_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI146_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB146_33
.LBB146_32:                             //   in Loop: Header=BB146_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB146_35
.LBB146_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB146_32
// %bb.34:                              //   in Loop: Header=BB146_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB146_32
.LBB146_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB146_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB146_39
.LBB146_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB146_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB146_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB146_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end146:
	.size	_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end146-_Z27test_for_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI147_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI147_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB147_35
// %bb.1:
	subs	w9, w20, #31
	b.lt	.LBB147_14
// %bb.2:
	mov	w8, #4229                       // =0x1085
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w8, #2114, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	movk	x12, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI147_1
	dup	v18.2d, x10
	fmov	d10, x10
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI147_1]
	mov	w26, wzr
	lsr	x8, x8, #32
	sub	w27, w20, #30
	add	x28, x21, #120
	adrp	x24, init_value
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w9, w9, w8
	add	w8, w8, w9, lsr #1
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x9, #16584, lsl #48
	lsr	w8, w8, #4
	dup	v17.2d, x9
	fmov	d9, x9
	lsl	w11, w8, #5
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w8, w11, w8
	sub	w9, w20, w8
	add	w19, w8, #31
	sub	w22, w9, #32
	add	x8, x21, w19, uxtw #3
	adrp	x9, .LCPI147_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI147_0]
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB147_4
.LBB147_3:                              //   in Loop: Header=BB147_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB147_35
.LBB147_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB147_5 Depth 2
                                        //     Child Loop BB147_8 Depth 2
                                        //     Child Loop BB147_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB147_5:                              //   Parent Loop BB147_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-120]
	add	x8, x8, #31
	ldp	d3, d4, [x9, #-104]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-88]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-56]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-40]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-24]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #-8]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #8]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d7, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #40]
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #56]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #72]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #88]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #104]
	fadd	d7, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d5
	fmadd	d5, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #120]
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	add	x9, x9, #248
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB147_5
// %bb.6:                               //   in Loop: Header=BB147_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB147_12
// %bb.7:                               //   in Loop: Header=BB147_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB147_10
.LBB147_8:                              //   Parent Loop BB147_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB147_8
// %bb.9:                               //   in Loop: Header=BB147_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB147_12
.LBB147_10:                             // %.preheader
                                        //   in Loop: Header=BB147_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB147_11:                             //   Parent Loop BB147_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB147_11
.LBB147_12:                             //   in Loop: Header=BB147_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB147_3
// %bb.13:                              //   in Loop: Header=BB147_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB147_3
.LBB147_14:
	cmp	w20, #0
	b.le	.LBB147_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI147_1
	ldr	d12, [x9, :lo12:.LCPI147_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI147_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI147_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB147_17
.LBB147_16:                             //   in Loop: Header=BB147_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB147_35
.LBB147_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB147_28 Depth 2
	cmp	w20, #3
	b.hi	.LBB147_19
// %bb.18:                              //   in Loop: Header=BB147_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB147_27
.LBB147_19:                             //   in Loop: Header=BB147_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB147_26
// %bb.20:                              //   in Loop: Header=BB147_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB147_26
// %bb.21:                              //   in Loop: Header=BB147_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB147_26
// %bb.22:                              //   in Loop: Header=BB147_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB147_26
// %bb.23:                              //   in Loop: Header=BB147_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB147_26
// %bb.24:                              //   in Loop: Header=BB147_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB147_26
// %bb.25:                              //   in Loop: Header=BB147_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB147_26:                             //   in Loop: Header=BB147_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB147_29
.LBB147_27:                             // %.preheader4
                                        //   in Loop: Header=BB147_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB147_28:                             //   Parent Loop BB147_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB147_28
.LBB147_29:                             //   in Loop: Header=BB147_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB147_16
// %bb.30:                              //   in Loop: Header=BB147_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB147_16
.LBB147_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI147_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI147_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB147_33
.LBB147_32:                             //   in Loop: Header=BB147_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB147_35
.LBB147_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB147_32
// %bb.34:                              //   in Loop: Header=BB147_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB147_32
.LBB147_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB147_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB147_39
.LBB147_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB147_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB147_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB147_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end147:
	.size	_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end147-_Z27test_for_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI148_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI148_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB148_35
// %bb.1:
	subs	w9, w20, #30
	b.lt	.LBB148_14
// %bb.2:
	mov	w8, #34953                      // =0x8889
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #34952, lsl #16
	movk	x10, #16584, lsl #48
	movk	x11, #16683, lsl #48
	umull	x8, w9, w8
	dup	v17.2d, x10
	fmov	d9, x10
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI148_1
	dup	v18.2d, x11
	fmov	d10, x11
	ldr	d11, [x12, :lo12:.LCPI148_1]
	lsr	x8, x8, #36
	mov	w26, wzr
	sub	w27, w20, #29
	add	x28, x21, #120
	adrp	x24, init_value
	lsl	w9, w8, #5
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w8, w9, w8, lsl #1
	mov	x9, #70368744177664             // =0x400000000000
	movk	x9, #49343, lsl #48
	sub	w10, w20, w8
	add	w19, w8, #30
	fmov	d13, x9
	sub	w22, w10, #31
	add	x8, x21, w19, uxtw #3
	adrp	x10, .LCPI148_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI148_0]
	and	x23, x11, #0x1fffffffc
	add	x25, x8, #16
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB148_4
.LBB148_3:                              //   in Loop: Header=BB148_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB148_35
.LBB148_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB148_5 Depth 2
                                        //     Child Loop BB148_8 Depth 2
                                        //     Child Loop BB148_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB148_5:                              //   Parent Loop BB148_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-120]
	add	x8, x8, #30
	ldp	d3, d4, [x9, #-104]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-88]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-56]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-24]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #-8]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d5, d7, [x9, #8]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #40]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #56]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #72]
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d1, d1, d10, d8
	ldp	d6, d7, [x9, #88]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #104]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #240
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB148_5
// %bb.6:                               //   in Loop: Header=BB148_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB148_12
// %bb.7:                               //   in Loop: Header=BB148_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB148_10
.LBB148_8:                              //   Parent Loop BB148_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB148_8
// %bb.9:                               //   in Loop: Header=BB148_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB148_12
.LBB148_10:                             // %.preheader
                                        //   in Loop: Header=BB148_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB148_11:                             //   Parent Loop BB148_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB148_11
.LBB148_12:                             //   in Loop: Header=BB148_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB148_3
// %bb.13:                              //   in Loop: Header=BB148_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB148_3
.LBB148_14:
	cmp	w20, #0
	b.le	.LBB148_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI148_1
	ldr	d12, [x9, :lo12:.LCPI148_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI148_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI148_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB148_17
.LBB148_16:                             //   in Loop: Header=BB148_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB148_35
.LBB148_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB148_28 Depth 2
	cmp	w20, #3
	b.hi	.LBB148_19
// %bb.18:                              //   in Loop: Header=BB148_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB148_27
.LBB148_19:                             //   in Loop: Header=BB148_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB148_26
// %bb.20:                              //   in Loop: Header=BB148_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB148_26
// %bb.21:                              //   in Loop: Header=BB148_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB148_26
// %bb.22:                              //   in Loop: Header=BB148_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB148_26
// %bb.23:                              //   in Loop: Header=BB148_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB148_26
// %bb.24:                              //   in Loop: Header=BB148_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB148_26
// %bb.25:                              //   in Loop: Header=BB148_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB148_26:                             //   in Loop: Header=BB148_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB148_29
.LBB148_27:                             // %.preheader4
                                        //   in Loop: Header=BB148_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB148_28:                             //   Parent Loop BB148_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB148_28
.LBB148_29:                             //   in Loop: Header=BB148_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB148_16
// %bb.30:                              //   in Loop: Header=BB148_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB148_16
.LBB148_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI148_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI148_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB148_33
.LBB148_32:                             //   in Loop: Header=BB148_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB148_35
.LBB148_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB148_32
// %bb.34:                              //   in Loop: Header=BB148_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB148_32
.LBB148_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB148_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB148_39
.LBB148_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB148_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB148_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB148_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end148:
	.size	_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end148-_Z27test_for_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN14for_loop_testsILi28EdE7do_testEPKdPKc,"axG",@progbits,_ZN14for_loop_testsILi28EdE7do_testEPKdPKc,comdat
	.weak	_ZN14for_loop_testsILi28EdE7do_testEPKdPKc // -- Begin function _ZN14for_loop_testsILi28EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN14for_loop_testsILi28EdE7do_testEPKdPKc,@function
_ZN14for_loop_testsILi28EdE7do_testEPKdPKc: // @_ZN14for_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN14for_loop_testsILi19EdE7do_testEPKdPKc
	adrp	x20, temp_string+1900
	add	x20, x20, :lo12:temp_string+1900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
.Lfunc_end149:
	.size	_ZN14for_loop_testsILi28EdE7do_testEPKdPKc, .Lfunc_end149-_ZN14for_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI150_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI150_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB150_35
// %bb.1:
	subs	w9, w20, #29
	b.lt	.LBB150_14
// %bb.2:
	mov	w8, #51977                      // =0xcb09
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #36157, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #29                         // =0x1d
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI150_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #36
	ldr	d11, [x12, :lo12:.LCPI150_1]
	sub	w27, w20, #28
	add	x28, x21, #112
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI150_0
	sub	w10, w20, w8
	add	w19, w8, #29
	ldr	d12, [x9, :lo12:.LCPI150_0]
	sub	w22, w10, #30
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB150_4
.LBB150_3:                              //   in Loop: Header=BB150_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB150_35
.LBB150_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB150_5 Depth 2
                                        //     Child Loop BB150_8 Depth 2
                                        //     Child Loop BB150_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB150_5:                              //   Parent Loop BB150_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-112]
	add	x8, x8, #29
	ldp	d3, d4, [x9, #-96]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-80]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-48]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-32]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-16]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #16]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #32]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #48]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #64]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #80]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #96]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #112]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #232
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB150_5
// %bb.6:                               //   in Loop: Header=BB150_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB150_12
// %bb.7:                               //   in Loop: Header=BB150_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB150_10
.LBB150_8:                              //   Parent Loop BB150_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB150_8
// %bb.9:                               //   in Loop: Header=BB150_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB150_12
.LBB150_10:                             // %.preheader
                                        //   in Loop: Header=BB150_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB150_11:                             //   Parent Loop BB150_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB150_11
.LBB150_12:                             //   in Loop: Header=BB150_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB150_3
// %bb.13:                              //   in Loop: Header=BB150_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB150_3
.LBB150_14:
	cmp	w20, #0
	b.le	.LBB150_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI150_1
	ldr	d12, [x9, :lo12:.LCPI150_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI150_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI150_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB150_17
.LBB150_16:                             //   in Loop: Header=BB150_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB150_35
.LBB150_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB150_28 Depth 2
	cmp	w20, #3
	b.hi	.LBB150_19
// %bb.18:                              //   in Loop: Header=BB150_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB150_27
.LBB150_19:                             //   in Loop: Header=BB150_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB150_26
// %bb.20:                              //   in Loop: Header=BB150_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB150_26
// %bb.21:                              //   in Loop: Header=BB150_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB150_26
// %bb.22:                              //   in Loop: Header=BB150_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB150_26
// %bb.23:                              //   in Loop: Header=BB150_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB150_26
// %bb.24:                              //   in Loop: Header=BB150_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB150_26
// %bb.25:                              //   in Loop: Header=BB150_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB150_26:                             //   in Loop: Header=BB150_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB150_29
.LBB150_27:                             // %.preheader4
                                        //   in Loop: Header=BB150_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB150_28:                             //   Parent Loop BB150_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB150_28
.LBB150_29:                             //   in Loop: Header=BB150_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB150_16
// %bb.30:                              //   in Loop: Header=BB150_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB150_16
.LBB150_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI150_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI150_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB150_33
.LBB150_32:                             //   in Loop: Header=BB150_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB150_35
.LBB150_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB150_32
// %bb.34:                              //   in Loop: Header=BB150_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB150_32
.LBB150_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB150_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB150_39
.LBB150_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB150_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB150_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB150_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end150:
	.size	_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end150-_Z27test_for_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI151_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI151_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB151_34
// %bb.1:
	subs	w9, w20, #28
	b.lt	.LBB151_14
// %bb.2:
	lsr	w8, w9, #2
	mov	w9, #18725                      // =0x4925
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w9, #9362, lsl #16
	movk	x10, #16584, lsl #48
	mov	x11, #253411660398592           // =0xe67a00000000
	umull	x8, w8, w9
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI151_1
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #32
	ldr	d11, [x12, :lo12:.LCPI151_1]
	mov	w26, wzr
	sub	w27, w20, #27
	add	x28, x21, #112
	adrp	x24, init_value
	lsl	w9, w8, #5
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w8, w9, w8, lsl #2
	mov	x9, #70368744177664             // =0x400000000000
	movk	x9, #49343, lsl #48
	sub	w10, w20, w8
	add	w19, w8, #28
	fmov	d13, x9
	sub	w22, w10, #29
	add	x8, x21, w19, uxtw #3
	adrp	x10, .LCPI151_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI151_0]
	and	x23, x11, #0x1fffffffc
	add	x25, x8, #16
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB151_4
.LBB151_3:                              //   in Loop: Header=BB151_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB151_34
.LBB151_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB151_5 Depth 2
                                        //     Child Loop BB151_8 Depth 2
                                        //     Child Loop BB151_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB151_5:                              //   Parent Loop BB151_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-112]
	add	x8, x8, #28
	ldp	d3, d4, [x9, #-96]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-80]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-64]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-48]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-32]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-16]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #16]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #32]
	fmadd	d5, d5, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d5, d5, d9
	fadd	d4, d4, d9
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #48]
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #80]
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d7, d5, [x9, #96]
	add	x9, x9, #224
	fadd	d1, d1, d9
	fadd	d4, d4, d9
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB151_5
// %bb.6:                               //   in Loop: Header=BB151_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB151_12
// %bb.7:                               //   in Loop: Header=BB151_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB151_10
.LBB151_8:                              //   Parent Loop BB151_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB151_8
// %bb.9:                               //   in Loop: Header=BB151_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB151_12
.LBB151_10:                             // %.preheader
                                        //   in Loop: Header=BB151_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB151_11:                             //   Parent Loop BB151_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB151_11
.LBB151_12:                             //   in Loop: Header=BB151_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB151_3
// %bb.13:                              //   in Loop: Header=BB151_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB151_3
.LBB151_14:
	cmp	w20, #0
	b.le	.LBB151_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI151_1
	ldr	d12, [x9, :lo12:.LCPI151_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI151_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI151_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB151_17
.LBB151_16:                             //   in Loop: Header=BB151_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB151_34
.LBB151_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB151_27 Depth 2
	cmp	w20, #3
	b.hi	.LBB151_19
// %bb.18:                              //   in Loop: Header=BB151_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB151_26
.LBB151_19:                             //   in Loop: Header=BB151_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB151_25
// %bb.20:                              //   in Loop: Header=BB151_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB151_25
// %bb.21:                              //   in Loop: Header=BB151_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB151_25
// %bb.22:                              //   in Loop: Header=BB151_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB151_25
// %bb.23:                              //   in Loop: Header=BB151_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB151_25
// %bb.24:                              //   in Loop: Header=BB151_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB151_25:                             //   in Loop: Header=BB151_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB151_28
.LBB151_26:                             // %.preheader4
                                        //   in Loop: Header=BB151_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB151_27:                             //   Parent Loop BB151_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB151_27
.LBB151_28:                             //   in Loop: Header=BB151_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB151_16
// %bb.29:                              //   in Loop: Header=BB151_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB151_16
.LBB151_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI151_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI151_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB151_32
.LBB151_31:                             //   in Loop: Header=BB151_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB151_34
.LBB151_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB151_31
// %bb.33:                              //   in Loop: Header=BB151_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB151_31
.LBB151_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB151_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB151_38
.LBB151_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB151_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB151_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB151_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end151:
	.size	_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end151-_Z27test_for_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI152_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI152_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB152_34
// %bb.1:
	subs	w9, w20, #27
	b.lt	.LBB152_14
// %bb.2:
	mov	w8, #19419                      // =0x4bdb
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #12136, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI152_1
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI152_1]
	mov	w26, wzr
	lsr	x8, x8, #32
	sub	w27, w20, #26
	add	x28, x21, #104
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w9, w9, w8
	add	w8, w8, w9, lsr #1
	mov	w9, #27                         // =0x1b
	lsr	w8, w8, #4
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI152_0
	sub	w10, w20, w8
	add	w19, w8, #27
	ldr	d12, [x9, :lo12:.LCPI152_0]
	sub	w22, w10, #28
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB152_4
.LBB152_3:                              //   in Loop: Header=BB152_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB152_34
.LBB152_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB152_5 Depth 2
                                        //     Child Loop BB152_8 Depth 2
                                        //     Child Loop BB152_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB152_5:                              //   Parent Loop BB152_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-104]
	add	x8, x8, #27
	ldp	d3, d4, [x9, #-88]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-72]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-56]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-40]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-8]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #8]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d5, d7, [x9, #24]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d6
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #40]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #56]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #88]
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fmadd	d1, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #104]
	add	x9, x9, #216
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB152_5
// %bb.6:                               //   in Loop: Header=BB152_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB152_12
// %bb.7:                               //   in Loop: Header=BB152_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB152_10
.LBB152_8:                              //   Parent Loop BB152_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB152_8
// %bb.9:                               //   in Loop: Header=BB152_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB152_12
.LBB152_10:                             // %.preheader
                                        //   in Loop: Header=BB152_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB152_11:                             //   Parent Loop BB152_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB152_11
.LBB152_12:                             //   in Loop: Header=BB152_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB152_3
// %bb.13:                              //   in Loop: Header=BB152_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB152_3
.LBB152_14:
	cmp	w20, #0
	b.le	.LBB152_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI152_1
	ldr	d12, [x9, :lo12:.LCPI152_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI152_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI152_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB152_17
.LBB152_16:                             //   in Loop: Header=BB152_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB152_34
.LBB152_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB152_27 Depth 2
	cmp	w20, #3
	b.hi	.LBB152_19
// %bb.18:                              //   in Loop: Header=BB152_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB152_26
.LBB152_19:                             //   in Loop: Header=BB152_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB152_25
// %bb.20:                              //   in Loop: Header=BB152_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB152_25
// %bb.21:                              //   in Loop: Header=BB152_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB152_25
// %bb.22:                              //   in Loop: Header=BB152_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB152_25
// %bb.23:                              //   in Loop: Header=BB152_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB152_25
// %bb.24:                              //   in Loop: Header=BB152_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB152_25:                             //   in Loop: Header=BB152_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB152_28
.LBB152_26:                             // %.preheader4
                                        //   in Loop: Header=BB152_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB152_27:                             //   Parent Loop BB152_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB152_27
.LBB152_28:                             //   in Loop: Header=BB152_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB152_16
// %bb.29:                              //   in Loop: Header=BB152_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB152_16
.LBB152_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI152_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI152_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB152_32
.LBB152_31:                             //   in Loop: Header=BB152_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB152_34
.LBB152_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB152_31
// %bb.33:                              //   in Loop: Header=BB152_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB152_31
.LBB152_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB152_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB152_38
.LBB152_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB152_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB152_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB152_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end152:
	.size	_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end152-_Z27test_for_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI153_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI153_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB153_34
// %bb.1:
	subs	w9, w20, #26
	b.lt	.LBB153_14
// %bb.2:
	mov	w8, #60495                      // =0xec4f
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #20164, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #26                         // =0x1a
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI153_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #35
	ldr	d11, [x12, :lo12:.LCPI153_1]
	sub	w27, w20, #25
	add	x28, x21, #104
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI153_0
	sub	w10, w20, w8
	add	w19, w8, #26
	ldr	d12, [x9, :lo12:.LCPI153_0]
	sub	w22, w10, #27
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB153_4
.LBB153_3:                              //   in Loop: Header=BB153_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB153_34
.LBB153_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB153_5 Depth 2
                                        //     Child Loop BB153_8 Depth 2
                                        //     Child Loop BB153_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB153_5:                              //   Parent Loop BB153_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-104]
	add	x8, x8, #26
	ldp	d3, d4, [x9, #-88]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-72]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-40]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-24]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-8]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #8]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #24]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #40]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fmadd	d1, d1, d10, d8
	ldp	d6, d5, [x9, #56]
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d3, d3, d10, d8
	ldp	d6, d7, [x9, #72]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #88]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #208
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB153_5
// %bb.6:                               //   in Loop: Header=BB153_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB153_12
// %bb.7:                               //   in Loop: Header=BB153_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB153_10
.LBB153_8:                              //   Parent Loop BB153_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB153_8
// %bb.9:                               //   in Loop: Header=BB153_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB153_12
.LBB153_10:                             // %.preheader
                                        //   in Loop: Header=BB153_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB153_11:                             //   Parent Loop BB153_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB153_11
.LBB153_12:                             //   in Loop: Header=BB153_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB153_3
// %bb.13:                              //   in Loop: Header=BB153_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB153_3
.LBB153_14:
	cmp	w20, #0
	b.le	.LBB153_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI153_1
	ldr	d12, [x9, :lo12:.LCPI153_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI153_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI153_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB153_17
.LBB153_16:                             //   in Loop: Header=BB153_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB153_34
.LBB153_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB153_27 Depth 2
	cmp	w20, #3
	b.hi	.LBB153_19
// %bb.18:                              //   in Loop: Header=BB153_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB153_26
.LBB153_19:                             //   in Loop: Header=BB153_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB153_25
// %bb.20:                              //   in Loop: Header=BB153_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB153_25
// %bb.21:                              //   in Loop: Header=BB153_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB153_25
// %bb.22:                              //   in Loop: Header=BB153_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB153_25
// %bb.23:                              //   in Loop: Header=BB153_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB153_25
// %bb.24:                              //   in Loop: Header=BB153_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB153_25:                             //   in Loop: Header=BB153_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB153_28
.LBB153_26:                             // %.preheader4
                                        //   in Loop: Header=BB153_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB153_27:                             //   Parent Loop BB153_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB153_27
.LBB153_28:                             //   in Loop: Header=BB153_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB153_16
// %bb.29:                              //   in Loop: Header=BB153_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB153_16
.LBB153_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI153_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI153_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB153_32
.LBB153_31:                             //   in Loop: Header=BB153_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB153_34
.LBB153_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB153_31
// %bb.33:                              //   in Loop: Header=BB153_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB153_31
.LBB153_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB153_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB153_38
.LBB153_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB153_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB153_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB153_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end153:
	.size	_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end153-_Z27test_for_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI154_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI154_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB154_34
// %bb.1:
	subs	w9, w20, #25
	b.lt	.LBB154_14
// %bb.2:
	mov	w8, #34079                      // =0x851f
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #20971, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #25                         // =0x19
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI154_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #35
	ldr	d11, [x12, :lo12:.LCPI154_1]
	sub	w27, w20, #24
	add	x28, x21, #96
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI154_0
	sub	w10, w20, w8
	add	w19, w8, #25
	ldr	d12, [x9, :lo12:.LCPI154_0]
	sub	w22, w10, #26
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB154_4
.LBB154_3:                              //   in Loop: Header=BB154_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB154_34
.LBB154_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB154_5 Depth 2
                                        //     Child Loop BB154_8 Depth 2
                                        //     Child Loop BB154_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB154_5:                              //   Parent Loop BB154_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-96]
	add	x8, x8, #25
	ldp	d3, d4, [x9, #-80]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-32]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-16]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #16]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d2, d2, d10, d8
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	fadd	d2, d2, d9
	ldp	d7, d6, [x9, #32]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #48]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #64]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #80]
	fadd	d7, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d5
	fmadd	d5, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #96]
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	add	x9, x9, #200
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB154_5
// %bb.6:                               //   in Loop: Header=BB154_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB154_12
// %bb.7:                               //   in Loop: Header=BB154_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB154_10
.LBB154_8:                              //   Parent Loop BB154_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB154_8
// %bb.9:                               //   in Loop: Header=BB154_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB154_12
.LBB154_10:                             // %.preheader
                                        //   in Loop: Header=BB154_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB154_11:                             //   Parent Loop BB154_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB154_11
.LBB154_12:                             //   in Loop: Header=BB154_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB154_3
// %bb.13:                              //   in Loop: Header=BB154_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB154_3
.LBB154_14:
	cmp	w20, #0
	b.le	.LBB154_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI154_1
	ldr	d12, [x9, :lo12:.LCPI154_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI154_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI154_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB154_17
.LBB154_16:                             //   in Loop: Header=BB154_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB154_34
.LBB154_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB154_27 Depth 2
	cmp	w20, #3
	b.hi	.LBB154_19
// %bb.18:                              //   in Loop: Header=BB154_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB154_26
.LBB154_19:                             //   in Loop: Header=BB154_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB154_25
// %bb.20:                              //   in Loop: Header=BB154_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB154_25
// %bb.21:                              //   in Loop: Header=BB154_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB154_25
// %bb.22:                              //   in Loop: Header=BB154_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB154_25
// %bb.23:                              //   in Loop: Header=BB154_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB154_25
// %bb.24:                              //   in Loop: Header=BB154_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB154_25:                             //   in Loop: Header=BB154_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB154_28
.LBB154_26:                             // %.preheader4
                                        //   in Loop: Header=BB154_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB154_27:                             //   Parent Loop BB154_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB154_27
.LBB154_28:                             //   in Loop: Header=BB154_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB154_16
// %bb.29:                              //   in Loop: Header=BB154_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB154_16
.LBB154_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI154_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI154_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB154_32
.LBB154_31:                             //   in Loop: Header=BB154_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB154_34
.LBB154_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB154_31
// %bb.33:                              //   in Loop: Header=BB154_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB154_31
.LBB154_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB154_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB154_38
.LBB154_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB154_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB154_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB154_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end154:
	.size	_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end154-_Z27test_for_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI155_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI155_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB155_33
// %bb.1:
	subs	w9, w20, #24
	b.lt	.LBB155_14
// %bb.2:
	mov	w8, #43691                      // =0xaaab
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #43690, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x11, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI155_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #36
	fmov	d10, x10
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI155_1]
	mov	w26, wzr
	sub	w27, w20, #23
	add	w8, w8, w8, lsl #1
	add	x28, x21, #96
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	lsl	w8, w8, #3
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w9, w20, w8
	add	w19, w8, #24
	sub	w22, w9, #25
	add	x8, x21, w19, uxtw #3
	adrp	x9, .LCPI155_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI155_0]
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB155_4
.LBB155_3:                              //   in Loop: Header=BB155_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB155_33
.LBB155_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB155_5 Depth 2
                                        //     Child Loop BB155_8 Depth 2
                                        //     Child Loop BB155_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB155_5:                              //   Parent Loop BB155_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-96]
	add	x8, x8, #24
	ldp	d3, d4, [x9, #-80]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-32]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #16]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #32]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #48]
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d1, d1, d10, d8
	ldp	d6, d7, [x9, #64]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #80]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #192
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB155_5
// %bb.6:                               //   in Loop: Header=BB155_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB155_12
// %bb.7:                               //   in Loop: Header=BB155_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB155_10
.LBB155_8:                              //   Parent Loop BB155_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB155_8
// %bb.9:                               //   in Loop: Header=BB155_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB155_12
.LBB155_10:                             // %.preheader
                                        //   in Loop: Header=BB155_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB155_11:                             //   Parent Loop BB155_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB155_11
.LBB155_12:                             //   in Loop: Header=BB155_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB155_3
// %bb.13:                              //   in Loop: Header=BB155_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB155_3
.LBB155_14:
	cmp	w20, #0
	b.le	.LBB155_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI155_1
	ldr	d12, [x9, :lo12:.LCPI155_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI155_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI155_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB155_17
.LBB155_16:                             //   in Loop: Header=BB155_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB155_33
.LBB155_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB155_26 Depth 2
	cmp	w20, #3
	b.hi	.LBB155_19
// %bb.18:                              //   in Loop: Header=BB155_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB155_25
.LBB155_19:                             //   in Loop: Header=BB155_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB155_24
// %bb.20:                              //   in Loop: Header=BB155_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB155_24
// %bb.21:                              //   in Loop: Header=BB155_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB155_24
// %bb.22:                              //   in Loop: Header=BB155_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB155_24
// %bb.23:                              //   in Loop: Header=BB155_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB155_24:                             //   in Loop: Header=BB155_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB155_27
.LBB155_25:                             // %.preheader4
                                        //   in Loop: Header=BB155_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB155_26:                             //   Parent Loop BB155_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB155_26
.LBB155_27:                             //   in Loop: Header=BB155_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB155_16
// %bb.28:                              //   in Loop: Header=BB155_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB155_16
.LBB155_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI155_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI155_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB155_31
.LBB155_30:                             //   in Loop: Header=BB155_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB155_33
.LBB155_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB155_30
// %bb.32:                              //   in Loop: Header=BB155_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB155_30
.LBB155_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB155_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB155_37
.LBB155_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB155_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB155_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB155_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end155:
	.size	_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end155-_Z27test_for_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI156_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI156_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB156_33
// %bb.1:
	subs	w9, w20, #23
	b.lt	.LBB156_14
// %bb.2:
	mov	w8, #17097                      // =0x42c9
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #45590, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #23                         // =0x17
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI156_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #36
	ldr	d11, [x12, :lo12:.LCPI156_1]
	sub	w27, w20, #22
	add	x28, x21, #88
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI156_0
	sub	w10, w20, w8
	add	w19, w8, #23
	ldr	d12, [x9, :lo12:.LCPI156_0]
	sub	w22, w10, #24
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB156_4
.LBB156_3:                              //   in Loop: Header=BB156_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB156_33
.LBB156_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB156_5 Depth 2
                                        //     Child Loop BB156_8 Depth 2
                                        //     Child Loop BB156_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB156_5:                              //   Parent Loop BB156_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-88]
	add	x8, x8, #23
	ldp	d3, d4, [x9, #-72]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-24]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-8]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #8]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #24]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #40]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #56]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #72]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #88]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #184
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB156_5
// %bb.6:                               //   in Loop: Header=BB156_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB156_12
// %bb.7:                               //   in Loop: Header=BB156_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB156_10
.LBB156_8:                              //   Parent Loop BB156_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB156_8
// %bb.9:                               //   in Loop: Header=BB156_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB156_12
.LBB156_10:                             // %.preheader
                                        //   in Loop: Header=BB156_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB156_11:                             //   Parent Loop BB156_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB156_11
.LBB156_12:                             //   in Loop: Header=BB156_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB156_3
// %bb.13:                              //   in Loop: Header=BB156_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB156_3
.LBB156_14:
	cmp	w20, #0
	b.le	.LBB156_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI156_1
	ldr	d12, [x9, :lo12:.LCPI156_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI156_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI156_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB156_17
.LBB156_16:                             //   in Loop: Header=BB156_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB156_33
.LBB156_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB156_26 Depth 2
	cmp	w20, #3
	b.hi	.LBB156_19
// %bb.18:                              //   in Loop: Header=BB156_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB156_25
.LBB156_19:                             //   in Loop: Header=BB156_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB156_24
// %bb.20:                              //   in Loop: Header=BB156_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB156_24
// %bb.21:                              //   in Loop: Header=BB156_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB156_24
// %bb.22:                              //   in Loop: Header=BB156_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB156_24
// %bb.23:                              //   in Loop: Header=BB156_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB156_24:                             //   in Loop: Header=BB156_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB156_27
.LBB156_25:                             // %.preheader4
                                        //   in Loop: Header=BB156_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB156_26:                             //   Parent Loop BB156_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB156_26
.LBB156_27:                             //   in Loop: Header=BB156_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB156_16
// %bb.28:                              //   in Loop: Header=BB156_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB156_16
.LBB156_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI156_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI156_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB156_31
.LBB156_30:                             //   in Loop: Header=BB156_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB156_33
.LBB156_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB156_30
// %bb.32:                              //   in Loop: Header=BB156_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB156_30
.LBB156_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB156_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB156_37
.LBB156_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB156_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB156_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB156_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end156:
	.size	_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end156-_Z27test_for_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI157_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI157_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB157_33
// %bb.1:
	subs	w9, w20, #22
	b.lt	.LBB157_14
// %bb.2:
	mov	w8, #35747                      // =0x8ba3
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #47662, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #22                         // =0x16
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI157_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #36
	ldr	d11, [x12, :lo12:.LCPI157_1]
	sub	w27, w20, #21
	add	x28, x21, #88
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI157_0
	sub	w10, w20, w8
	add	w19, w8, #22
	ldr	d12, [x9, :lo12:.LCPI157_0]
	sub	w22, w10, #23
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB157_4
.LBB157_3:                              //   in Loop: Header=BB157_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB157_33
.LBB157_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB157_5 Depth 2
                                        //     Child Loop BB157_8 Depth 2
                                        //     Child Loop BB157_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB157_5:                              //   Parent Loop BB157_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-88]
	add	x8, x8, #22
	ldp	d3, d4, [x9, #-72]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-24]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-8]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #8]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #56]
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d6, d10, d8
	fadd	d6, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d4, d4, d9
	ldp	d7, d5, [x9, #72]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	add	x9, x9, #176
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB157_5
// %bb.6:                               //   in Loop: Header=BB157_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB157_12
// %bb.7:                               //   in Loop: Header=BB157_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB157_10
.LBB157_8:                              //   Parent Loop BB157_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB157_8
// %bb.9:                               //   in Loop: Header=BB157_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB157_12
.LBB157_10:                             // %.preheader
                                        //   in Loop: Header=BB157_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB157_11:                             //   Parent Loop BB157_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB157_11
.LBB157_12:                             //   in Loop: Header=BB157_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB157_3
// %bb.13:                              //   in Loop: Header=BB157_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB157_3
.LBB157_14:
	cmp	w20, #0
	b.le	.LBB157_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI157_1
	ldr	d12, [x9, :lo12:.LCPI157_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI157_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI157_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB157_17
.LBB157_16:                             //   in Loop: Header=BB157_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB157_33
.LBB157_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB157_26 Depth 2
	cmp	w20, #3
	b.hi	.LBB157_19
// %bb.18:                              //   in Loop: Header=BB157_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB157_25
.LBB157_19:                             //   in Loop: Header=BB157_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB157_24
// %bb.20:                              //   in Loop: Header=BB157_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB157_24
// %bb.21:                              //   in Loop: Header=BB157_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB157_24
// %bb.22:                              //   in Loop: Header=BB157_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB157_24
// %bb.23:                              //   in Loop: Header=BB157_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB157_24:                             //   in Loop: Header=BB157_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB157_27
.LBB157_25:                             // %.preheader4
                                        //   in Loop: Header=BB157_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB157_26:                             //   Parent Loop BB157_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB157_26
.LBB157_27:                             //   in Loop: Header=BB157_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB157_16
// %bb.28:                              //   in Loop: Header=BB157_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB157_16
.LBB157_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI157_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI157_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB157_31
.LBB157_30:                             //   in Loop: Header=BB157_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB157_33
.LBB157_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB157_30
// %bb.32:                              //   in Loop: Header=BB157_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB157_30
.LBB157_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB157_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB157_37
.LBB157_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB157_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB157_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB157_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end157:
	.size	_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end157-_Z27test_for_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI158_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI158_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB158_33
// %bb.1:
	subs	w9, w20, #21
	b.lt	.LBB158_14
// %bb.2:
	mov	w8, #24967                      // =0x6187
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #34328, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI158_1
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI158_1]
	mov	w26, wzr
	lsr	x8, x8, #32
	sub	w27, w20, #20
	add	x28, x21, #80
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w9, w9, w8
	add	w8, w8, w9, lsr #1
	mov	w9, #21                         // =0x15
	lsr	w8, w8, #4
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI158_0
	sub	w10, w20, w8
	add	w19, w8, #21
	ldr	d12, [x9, :lo12:.LCPI158_0]
	sub	w22, w10, #22
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB158_4
.LBB158_3:                              //   in Loop: Header=BB158_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB158_33
.LBB158_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB158_5 Depth 2
                                        //     Child Loop BB158_8 Depth 2
                                        //     Child Loop BB158_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB158_5:                              //   Parent Loop BB158_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-80]
	add	x8, x8, #21
	ldp	d3, d4, [x9, #-64]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-48]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-32]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-16]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9]
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d2
	fadd	d4, d4, d9
	ldp	d7, d2, [x9, #16]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #32]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #64]
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fmadd	d1, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #80]
	add	x9, x9, #168
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB158_5
// %bb.6:                               //   in Loop: Header=BB158_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB158_12
// %bb.7:                               //   in Loop: Header=BB158_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB158_10
.LBB158_8:                              //   Parent Loop BB158_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB158_8
// %bb.9:                               //   in Loop: Header=BB158_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB158_12
.LBB158_10:                             // %.preheader
                                        //   in Loop: Header=BB158_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB158_11:                             //   Parent Loop BB158_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB158_11
.LBB158_12:                             //   in Loop: Header=BB158_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB158_3
// %bb.13:                              //   in Loop: Header=BB158_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB158_3
.LBB158_14:
	cmp	w20, #0
	b.le	.LBB158_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI158_1
	ldr	d12, [x9, :lo12:.LCPI158_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI158_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI158_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB158_17
.LBB158_16:                             //   in Loop: Header=BB158_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB158_33
.LBB158_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB158_26 Depth 2
	cmp	w20, #3
	b.hi	.LBB158_19
// %bb.18:                              //   in Loop: Header=BB158_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB158_25
.LBB158_19:                             //   in Loop: Header=BB158_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB158_24
// %bb.20:                              //   in Loop: Header=BB158_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB158_24
// %bb.21:                              //   in Loop: Header=BB158_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB158_24
// %bb.22:                              //   in Loop: Header=BB158_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB158_24
// %bb.23:                              //   in Loop: Header=BB158_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB158_24:                             //   in Loop: Header=BB158_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB158_27
.LBB158_25:                             // %.preheader4
                                        //   in Loop: Header=BB158_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB158_26:                             //   Parent Loop BB158_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB158_26
.LBB158_27:                             //   in Loop: Header=BB158_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB158_16
// %bb.28:                              //   in Loop: Header=BB158_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB158_16
.LBB158_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI158_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI158_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB158_31
.LBB158_30:                             //   in Loop: Header=BB158_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB158_33
.LBB158_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB158_30
// %bb.32:                              //   in Loop: Header=BB158_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB158_30
.LBB158_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB158_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB158_37
.LBB158_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB158_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB158_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB158_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end158:
	.size	_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end158-_Z27test_for_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN14for_loop_testsILi19EdE7do_testEPKdPKc,"axG",@progbits,_ZN14for_loop_testsILi19EdE7do_testEPKdPKc,comdat
	.weak	_ZN14for_loop_testsILi19EdE7do_testEPKdPKc // -- Begin function _ZN14for_loop_testsILi19EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN14for_loop_testsILi19EdE7do_testEPKdPKc,@function
_ZN14for_loop_testsILi19EdE7do_testEPKdPKc: // @_ZN14for_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN14for_loop_testsILi10EdE7do_testEPKdPKc
	adrp	x20, temp_string+1000
	add	x20, x20, :lo12:temp_string+1000
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
.Lfunc_end159:
	.size	_ZN14for_loop_testsILi19EdE7do_testEPKdPKc, .Lfunc_end159-_ZN14for_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI160_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI160_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB160_32
// %bb.1:
	subs	w9, w20, #20
	b.lt	.LBB160_14
// %bb.2:
	mov	w8, #52429                      // =0xcccd
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #52428, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x11, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI160_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #36
	fmov	d10, x10
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI160_1]
	mov	w26, wzr
	sub	w27, w20, #19
	add	w8, w8, w8, lsl #2
	add	x28, x21, #80
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	lsl	w8, w8, #2
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w9, w20, w8
	add	w19, w8, #20
	sub	w22, w9, #21
	add	x8, x21, w19, uxtw #3
	adrp	x9, .LCPI160_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI160_0]
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB160_4
.LBB160_3:                              //   in Loop: Header=BB160_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB160_32
.LBB160_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB160_5 Depth 2
                                        //     Child Loop BB160_8 Depth 2
                                        //     Child Loop BB160_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB160_5:                              //   Parent Loop BB160_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-80]
	add	x8, x8, #20
	ldp	d3, d4, [x9, #-64]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-48]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-32]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-16]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #16]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fmadd	d1, d1, d10, d8
	ldp	d6, d5, [x9, #32]
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d3, d3, d10, d8
	ldp	d6, d7, [x9, #48]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #64]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #160
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB160_5
// %bb.6:                               //   in Loop: Header=BB160_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB160_12
// %bb.7:                               //   in Loop: Header=BB160_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB160_10
.LBB160_8:                              //   Parent Loop BB160_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB160_8
// %bb.9:                               //   in Loop: Header=BB160_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB160_12
.LBB160_10:                             // %.preheader
                                        //   in Loop: Header=BB160_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB160_11:                             //   Parent Loop BB160_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB160_11
.LBB160_12:                             //   in Loop: Header=BB160_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB160_3
// %bb.13:                              //   in Loop: Header=BB160_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB160_3
.LBB160_14:
	cmp	w20, #0
	b.le	.LBB160_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI160_1
	ldr	d12, [x9, :lo12:.LCPI160_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI160_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI160_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB160_17
.LBB160_16:                             //   in Loop: Header=BB160_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB160_32
.LBB160_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB160_25 Depth 2
	cmp	w20, #3
	b.hi	.LBB160_19
// %bb.18:                              //   in Loop: Header=BB160_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB160_24
.LBB160_19:                             //   in Loop: Header=BB160_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB160_23
// %bb.20:                              //   in Loop: Header=BB160_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB160_23
// %bb.21:                              //   in Loop: Header=BB160_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB160_23
// %bb.22:                              //   in Loop: Header=BB160_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB160_23:                             //   in Loop: Header=BB160_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB160_26
.LBB160_24:                             // %.preheader4
                                        //   in Loop: Header=BB160_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB160_25:                             //   Parent Loop BB160_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB160_25
.LBB160_26:                             //   in Loop: Header=BB160_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB160_16
// %bb.27:                              //   in Loop: Header=BB160_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB160_16
.LBB160_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI160_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI160_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB160_30
.LBB160_29:                             //   in Loop: Header=BB160_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB160_32
.LBB160_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB160_29
// %bb.31:                              //   in Loop: Header=BB160_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB160_29
.LBB160_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB160_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB160_36
.LBB160_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB160_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB160_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB160_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end160:
	.size	_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end160-_Z27test_for_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI161_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI161_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB161_32
// %bb.1:
	subs	w9, w20, #19
	b.lt	.LBB161_14
// %bb.2:
	mov	w8, #27595                      // =0x6bcb
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #44840, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI161_1
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI161_1]
	mov	w26, wzr
	lsr	x8, x8, #32
	sub	w27, w20, #18
	add	x28, x21, #72
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w9, w9, w8
	add	w8, w8, w9, lsr #1
	mov	w9, #19                         // =0x13
	lsr	w8, w8, #4
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI161_0
	sub	w10, w20, w8
	add	w19, w8, #19
	ldr	d12, [x9, :lo12:.LCPI161_0]
	sub	w22, w10, #20
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB161_4
.LBB161_3:                              //   in Loop: Header=BB161_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB161_32
.LBB161_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB161_5 Depth 2
                                        //     Child Loop BB161_8 Depth 2
                                        //     Child Loop BB161_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB161_5:                              //   Parent Loop BB161_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-72]
	add	x8, x8, #19
	ldp	d3, d4, [x9, #-56]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-8]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #8]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #56]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d5
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #72]
	add	x9, x9, #152
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB161_5
// %bb.6:                               //   in Loop: Header=BB161_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB161_12
// %bb.7:                               //   in Loop: Header=BB161_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB161_10
.LBB161_8:                              //   Parent Loop BB161_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB161_8
// %bb.9:                               //   in Loop: Header=BB161_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB161_12
.LBB161_10:                             // %.preheader
                                        //   in Loop: Header=BB161_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB161_11:                             //   Parent Loop BB161_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB161_11
.LBB161_12:                             //   in Loop: Header=BB161_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB161_3
// %bb.13:                              //   in Loop: Header=BB161_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB161_3
.LBB161_14:
	cmp	w20, #0
	b.le	.LBB161_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI161_1
	ldr	d12, [x9, :lo12:.LCPI161_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI161_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI161_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB161_17
.LBB161_16:                             //   in Loop: Header=BB161_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB161_32
.LBB161_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB161_25 Depth 2
	cmp	w20, #3
	b.hi	.LBB161_19
// %bb.18:                              //   in Loop: Header=BB161_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB161_24
.LBB161_19:                             //   in Loop: Header=BB161_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB161_23
// %bb.20:                              //   in Loop: Header=BB161_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB161_23
// %bb.21:                              //   in Loop: Header=BB161_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB161_23
// %bb.22:                              //   in Loop: Header=BB161_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB161_23:                             //   in Loop: Header=BB161_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB161_26
.LBB161_24:                             // %.preheader4
                                        //   in Loop: Header=BB161_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB161_25:                             //   Parent Loop BB161_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB161_25
.LBB161_26:                             //   in Loop: Header=BB161_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB161_16
// %bb.27:                              //   in Loop: Header=BB161_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB161_16
.LBB161_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI161_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI161_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB161_30
.LBB161_29:                             //   in Loop: Header=BB161_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB161_32
.LBB161_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB161_29
// %bb.31:                              //   in Loop: Header=BB161_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB161_29
.LBB161_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB161_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB161_36
.LBB161_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB161_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB161_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB161_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end161:
	.size	_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end161-_Z27test_for_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI162_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI162_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB162_32
// %bb.1:
	subs	w9, w20, #18
	b.lt	.LBB162_14
// %bb.2:
	mov	w8, #36409                      // =0x8e39
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #14563, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x11, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI162_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #34
	fmov	d10, x10
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI162_1]
	mov	w26, wzr
	sub	w27, w20, #17
	add	w8, w8, w8, lsl #3
	add	x28, x21, #72
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	lsl	w8, w8, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w9, w20, w8
	add	w19, w8, #18
	sub	w22, w9, #19
	add	x8, x21, w19, uxtw #3
	adrp	x9, .LCPI162_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI162_0]
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB162_4
.LBB162_3:                              //   in Loop: Header=BB162_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB162_32
.LBB162_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB162_5 Depth 2
                                        //     Child Loop BB162_8 Depth 2
                                        //     Child Loop BB162_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB162_5:                              //   Parent Loop BB162_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-72]
	add	x8, x8, #18
	ldp	d3, d4, [x9, #-56]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	ldp	d4, d5, [x9, #8]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #24]
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #40]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #56]
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	add	x9, x9, #144
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB162_5
// %bb.6:                               //   in Loop: Header=BB162_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB162_12
// %bb.7:                               //   in Loop: Header=BB162_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB162_10
.LBB162_8:                              //   Parent Loop BB162_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB162_8
// %bb.9:                               //   in Loop: Header=BB162_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB162_12
.LBB162_10:                             // %.preheader
                                        //   in Loop: Header=BB162_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB162_11:                             //   Parent Loop BB162_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB162_11
.LBB162_12:                             //   in Loop: Header=BB162_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB162_3
// %bb.13:                              //   in Loop: Header=BB162_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB162_3
.LBB162_14:
	cmp	w20, #0
	b.le	.LBB162_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI162_1
	ldr	d12, [x9, :lo12:.LCPI162_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI162_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI162_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB162_17
.LBB162_16:                             //   in Loop: Header=BB162_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB162_32
.LBB162_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB162_25 Depth 2
	cmp	w20, #3
	b.hi	.LBB162_19
// %bb.18:                              //   in Loop: Header=BB162_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB162_24
.LBB162_19:                             //   in Loop: Header=BB162_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB162_23
// %bb.20:                              //   in Loop: Header=BB162_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB162_23
// %bb.21:                              //   in Loop: Header=BB162_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB162_23
// %bb.22:                              //   in Loop: Header=BB162_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB162_23:                             //   in Loop: Header=BB162_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB162_26
.LBB162_24:                             // %.preheader4
                                        //   in Loop: Header=BB162_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB162_25:                             //   Parent Loop BB162_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB162_25
.LBB162_26:                             //   in Loop: Header=BB162_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB162_16
// %bb.27:                              //   in Loop: Header=BB162_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB162_16
.LBB162_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI162_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI162_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB162_30
.LBB162_29:                             //   in Loop: Header=BB162_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB162_32
.LBB162_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB162_29
// %bb.31:                              //   in Loop: Header=BB162_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB162_29
.LBB162_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB162_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB162_36
.LBB162_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB162_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB162_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB162_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end162:
	.size	_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end162-_Z27test_for_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI163_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI163_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB163_32
// %bb.1:
	subs	w9, w20, #17
	b.lt	.LBB163_14
// %bb.2:
	mov	w8, #61681                      // =0xf0f1
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #61680, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x11, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI163_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #36
	fmov	d10, x10
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI163_1]
	mov	w26, wzr
	sub	w27, w20, #16
	add	w8, w8, w8, lsl #4
	add	x28, x21, #64
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w9, w20, w8
	add	w19, w8, #17
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w22, w9, #18
	add	x8, x21, w19, uxtw #3
	adrp	x9, .LCPI163_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI163_0]
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB163_4
.LBB163_3:                              //   in Loop: Header=BB163_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB163_32
.LBB163_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB163_5 Depth 2
                                        //     Child Loop BB163_8 Depth 2
                                        //     Child Loop BB163_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB163_5:                              //   Parent Loop BB163_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-64]
	add	x8, x8, #17
	ldp	d3, d4, [x9, #-48]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-32]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #16]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #32]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #48]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #64]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #136
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB163_5
// %bb.6:                               //   in Loop: Header=BB163_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB163_12
// %bb.7:                               //   in Loop: Header=BB163_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB163_10
.LBB163_8:                              //   Parent Loop BB163_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB163_8
// %bb.9:                               //   in Loop: Header=BB163_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB163_12
.LBB163_10:                             // %.preheader
                                        //   in Loop: Header=BB163_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB163_11:                             //   Parent Loop BB163_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB163_11
.LBB163_12:                             //   in Loop: Header=BB163_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB163_3
// %bb.13:                              //   in Loop: Header=BB163_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB163_3
.LBB163_14:
	cmp	w20, #0
	b.le	.LBB163_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI163_1
	ldr	d12, [x9, :lo12:.LCPI163_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI163_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI163_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB163_17
.LBB163_16:                             //   in Loop: Header=BB163_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB163_32
.LBB163_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB163_25 Depth 2
	cmp	w20, #3
	b.hi	.LBB163_19
// %bb.18:                              //   in Loop: Header=BB163_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB163_24
.LBB163_19:                             //   in Loop: Header=BB163_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB163_23
// %bb.20:                              //   in Loop: Header=BB163_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB163_23
// %bb.21:                              //   in Loop: Header=BB163_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB163_23
// %bb.22:                              //   in Loop: Header=BB163_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB163_23:                             //   in Loop: Header=BB163_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB163_26
.LBB163_24:                             // %.preheader4
                                        //   in Loop: Header=BB163_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB163_25:                             //   Parent Loop BB163_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB163_25
.LBB163_26:                             //   in Loop: Header=BB163_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB163_16
// %bb.27:                              //   in Loop: Header=BB163_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB163_16
.LBB163_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI163_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI163_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB163_30
.LBB163_29:                             //   in Loop: Header=BB163_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB163_32
.LBB163_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB163_29
// %bb.31:                              //   in Loop: Header=BB163_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB163_29
.LBB163_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB163_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB163_36
.LBB163_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB163_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB163_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB163_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end163:
	.size	_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end163-_Z27test_for_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI164_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI164_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB164_25
// %bb.1:
	subs	w9, w21, #16
	b.lt	.LBB164_14
// %bb.2:
	and	w8, w9, #0xfffffff0
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v18.2d, #-13.00000000
	sub	w9, w21, w8
	add	w24, w8, #16
	mov	x8, #253411660398592            // =0xe67a00000000
	sub	w19, w9, #17
	movk	x8, #16683, lsl #48
	movk	x10, #16584, lsl #48
	add	x11, x19, #1
	dup	v17.2d, x8
	fmov	d9, x8
	and	x22, x11, #0x1fffffffc
	add	x9, x20, w24, uxtw #3
	dup	v16.2d, x10
	add	x8, x22, x24
	fmov	d8, x10
	fmov	d10, #-13.00000000
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	adrp	x8, .LCPI164_1
	mov	w26, wzr
	ldr	d11, [x8, :lo12:.LCPI164_1]
	adrp	x8, .LCPI164_0
	sub	w27, w21, #15
	ldr	d12, [x8, :lo12:.LCPI164_0]
	mov	x8, #70368744177664             // =0x400000000000
	add	x28, x20, #64
	movk	x8, #49343, lsl #48
	add	x9, x9, #16
	adrp	x23, init_value
	fmov	d13, x8
	stp	x11, x9, [sp, #16]              // 16-byte Folded Spill
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	b	.LBB164_4
.LBB164_3:                              //   in Loop: Header=BB164_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB164_25
.LBB164_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB164_5 Depth 2
                                        //     Child Loop BB164_8 Depth 2
                                        //     Child Loop BB164_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB164_5:                              //   Parent Loop BB164_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-64]
	add	x8, x8, #16
	ldp	d3, d4, [x9, #-48]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-32]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-16]
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d3
	ldp	d2, d3, [x9]
	fadd	d7, d7, d8
	fadd	d2, d2, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d4
	fadd	d3, d3, d8
	fmadd	d7, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d5
	fmadd	d1, d1, d9, d10
	fmadd	d3, d3, d9, d10
	ldp	d4, d5, [x9, #16]
	fadd	d7, d7, d8
	fadd	d2, d2, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d6
	fadd	d1, d1, d8
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fmadd	d7, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #32]
	fadd	d2, d2, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fadd	d6, d6, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d1, d6, d9, d10
	fadd	d6, d7, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d9, d10
	fadd	d4, d4, d8
	ldp	d7, d5, [x9, #48]
	add	x9, x9, #128
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d7, d7, d8
	fadd	d0, d0, d3
	fadd	d2, d2, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fmadd	d5, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d3
	fmadd	d3, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d1, d1, d9, d10
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB164_5
// %bb.6:                               //   in Loop: Header=BB164_4 Depth=1
	cmp	w24, w21
	b.ge	.LBB164_12
// %bb.7:                               //   in Loop: Header=BB164_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w19, #3
	mov	x10, x24
	mov	x9, x22
	b.lo	.LBB164_10
.LBB164_8:                              //   Parent Loop BB164_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB164_8
// %bb.9:                               //   in Loop: Header=BB164_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x22
	b.eq	.LBB164_12
.LBB164_10:                             // %.preheader
                                        //   in Loop: Header=BB164_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB164_11:                             //   Parent Loop BB164_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.gt	.LBB164_11
.LBB164_12:                             //   in Loop: Header=BB164_4 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB164_3
// %bb.13:                              //   in Loop: Header=BB164_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB164_3
.LBB164_14:
	cmp	w21, #0
	b.le	.LBB164_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI164_1
	adrp	x10, .LCPI164_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI164_1]
	ldr	d12, [x10, :lo12:.LCPI164_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB164_17
.LBB164_16:                             //   in Loop: Header=BB164_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB164_25
.LBB164_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB164_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB164_18:                             //   Parent Loop BB164_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB164_18
// %bb.19:                              //   in Loop: Header=BB164_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB164_16
// %bb.20:                              //   in Loop: Header=BB164_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB164_16
.LBB164_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI164_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI164_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB164_23
.LBB164_22:                             //   in Loop: Header=BB164_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB164_25
.LBB164_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB164_22
// %bb.24:                              //   in Loop: Header=BB164_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB164_22
.LBB164_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB164_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB164_29
.LBB164_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB164_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB164_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB164_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end164:
	.size	_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end164-_Z27test_for_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI165_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI165_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB165_25
// %bb.1:
	subs	w9, w21, #15
	b.lt	.LBB165_14
// %bb.2:
	mov	w8, #34953                      // =0x8889
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w8, #34952, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI165_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #35
	fmov	d10, x10
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI165_1]
	mov	w26, wzr
	sub	w27, w21, #14
	lsl	w11, w8, #4
	add	x28, x20, #56
	adrp	x24, init_value
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	sub	w8, w11, w8
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	sub	w9, w21, w8
	add	w19, w8, #15
	sub	w22, w9, #16
	add	x8, x20, w19, uxtw #3
	adrp	x9, .LCPI165_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI165_0]
	and	x23, x10, #0x1fffffffc
	add	x8, x8, #16
	stp	x10, x8, [sp, #16]              // 16-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB165_4
.LBB165_3:                              //   in Loop: Header=BB165_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB165_25
.LBB165_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB165_5 Depth 2
                                        //     Child Loop BB165_8 Depth 2
                                        //     Child Loop BB165_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB165_5:                              //   Parent Loop BB165_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-56]
	add	x8, x8, #15
	ldp	d3, d4, [x9, #-40]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #8]
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #24]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d7, d7, d9
	ldp	d6, d5, [x9, #40]
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fmadd	d1, d7, d10, d8
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d5, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #56]
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	add	x9, x9, #120
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB165_5
// %bb.6:                               //   in Loop: Header=BB165_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB165_12
// %bb.7:                               //   in Loop: Header=BB165_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w22, #3
	mov	x10, x19
	mov	x9, x23
	b.lo	.LBB165_10
.LBB165_8:                              //   Parent Loop BB165_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB165_8
// %bb.9:                               //   in Loop: Header=BB165_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB165_12
.LBB165_10:                             // %.preheader
                                        //   in Loop: Header=BB165_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB165_11:                             //   Parent Loop BB165_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB165_11
.LBB165_12:                             //   in Loop: Header=BB165_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB165_3
// %bb.13:                              //   in Loop: Header=BB165_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB165_3
.LBB165_14:
	cmp	w21, #0
	b.le	.LBB165_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI165_1
	adrp	x10, .LCPI165_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI165_1]
	ldr	d12, [x10, :lo12:.LCPI165_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB165_17
.LBB165_16:                             //   in Loop: Header=BB165_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB165_25
.LBB165_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB165_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB165_18:                             //   Parent Loop BB165_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB165_18
// %bb.19:                              //   in Loop: Header=BB165_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB165_16
// %bb.20:                              //   in Loop: Header=BB165_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB165_16
.LBB165_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI165_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI165_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB165_23
.LBB165_22:                             //   in Loop: Header=BB165_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB165_25
.LBB165_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB165_22
// %bb.24:                              //   in Loop: Header=BB165_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB165_22
.LBB165_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB165_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB165_29
.LBB165_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB165_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB165_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB165_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end165:
	.size	_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end165-_Z27test_for_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI166_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI166_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x24, iterations
	adrp	x9, start_time
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB166_25
// %bb.1:
	subs	w9, w21, #14
	b.lt	.LBB166_14
// %bb.2:
	lsr	w8, w9, #1
	mov	w9, #9363                       // =0x2493
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w9, #37449, lsl #16
	movk	x10, #16584, lsl #48
	mov	x11, #253411660398592           // =0xe67a00000000
	umull	x8, w8, w9
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI166_1
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #34
	ldr	d11, [x12, :lo12:.LCPI166_1]
	mov	w26, wzr
	sub	w27, w21, #13
	add	x28, x20, #56
	adrp	x13, init_value
	lsl	w9, w8, #4
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	sub	w8, w9, w8, lsl #1
	mov	x9, #70368744177664             // =0x400000000000
	movk	x9, #49343, lsl #48
	sub	w10, w21, w8
	add	w19, w8, #14
	fmov	d13, x9
	sub	w22, w10, #15
	add	x8, x20, w19, uxtw #3
	adrp	x10, .LCPI166_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI166_0]
	and	x23, x11, #0x1fffffffc
	add	x8, x8, #16
	stp	x11, x8, [sp, #16]              // 16-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB166_4
.LBB166_3:                              //   in Loop: Header=BB166_4 Depth=1
	ldr	w8, [x24, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB166_25
.LBB166_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB166_5 Depth 2
                                        //     Child Loop BB166_8 Depth 2
                                        //     Child Loop BB166_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB166_5:                              //   Parent Loop BB166_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-56]
	add	x8, x8, #14
	ldp	d3, d4, [x9, #-40]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d6, d10, d8
	ldp	d7, d6, [x9, #8]
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fadd	d4, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	ldp	d5, d7, [x9, #24]
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d5, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #40]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #112
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB166_5
// %bb.6:                               //   in Loop: Header=BB166_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB166_12
// %bb.7:                               //   in Loop: Header=BB166_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w22, #3
	mov	x10, x19
	mov	x9, x23
	b.lo	.LBB166_10
.LBB166_8:                              //   Parent Loop BB166_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB166_8
// %bb.9:                               //   in Loop: Header=BB166_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB166_12
.LBB166_10:                             // %.preheader
                                        //   in Loop: Header=BB166_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB166_11:                             //   Parent Loop BB166_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB166_11
.LBB166_12:                             //   in Loop: Header=BB166_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB166_3
// %bb.13:                              //   in Loop: Header=BB166_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB166_3
.LBB166_14:
	cmp	w21, #0
	b.le	.LBB166_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI166_1
	adrp	x10, .LCPI166_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI166_1]
	ldr	d12, [x10, :lo12:.LCPI166_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB166_17
.LBB166_16:                             //   in Loop: Header=BB166_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB166_25
.LBB166_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB166_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB166_18:                             //   Parent Loop BB166_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB166_18
// %bb.19:                              //   in Loop: Header=BB166_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB166_16
// %bb.20:                              //   in Loop: Header=BB166_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB166_16
.LBB166_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI166_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI166_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB166_23
.LBB166_22:                             //   in Loop: Header=BB166_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB166_25
.LBB166_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB166_22
// %bb.24:                              //   in Loop: Header=BB166_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB166_22
.LBB166_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB166_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB166_29
.LBB166_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB166_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB166_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB166_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end166:
	.size	_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end166-_Z27test_for_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI167_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI167_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x24, iterations
	adrp	x9, start_time
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB167_25
// %bb.1:
	subs	w9, w21, #13
	b.lt	.LBB167_14
// %bb.2:
	mov	w8, #60495                      // =0xec4f
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #20164, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #13                         // =0xd
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI167_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #34
	ldr	d11, [x12, :lo12:.LCPI167_1]
	sub	w27, w21, #12
	add	x28, x20, #48
	adrp	x13, init_value
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI167_0
	sub	w10, w21, w8
	add	w19, w8, #13
	ldr	d12, [x9, :lo12:.LCPI167_0]
	sub	w22, w10, #14
	add	x8, x20, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x8, x8, #16
	stp	x10, x8, [sp, #16]              // 16-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB167_4
.LBB167_3:                              //   in Loop: Header=BB167_4 Depth=1
	ldr	w8, [x24, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB167_25
.LBB167_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB167_5 Depth 2
                                        //     Child Loop BB167_8 Depth 2
                                        //     Child Loop BB167_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB167_5:                              //   Parent Loop BB167_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-48]
	add	x8, x8, #13
	ldp	d3, d4, [x9, #-32]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #16]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #32]
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d1, d1, d9
	fmadd	d6, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldr	d6, [x9, #48]
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	add	x9, x9, #104
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d3, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d4, d4, d9
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB167_5
// %bb.6:                               //   in Loop: Header=BB167_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB167_12
// %bb.7:                               //   in Loop: Header=BB167_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w22, #3
	mov	x10, x19
	mov	x9, x23
	b.lo	.LBB167_10
.LBB167_8:                              //   Parent Loop BB167_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB167_8
// %bb.9:                               //   in Loop: Header=BB167_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB167_12
.LBB167_10:                             // %.preheader
                                        //   in Loop: Header=BB167_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB167_11:                             //   Parent Loop BB167_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB167_11
.LBB167_12:                             //   in Loop: Header=BB167_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB167_3
// %bb.13:                              //   in Loop: Header=BB167_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB167_3
.LBB167_14:
	cmp	w21, #0
	b.le	.LBB167_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI167_1
	adrp	x10, .LCPI167_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI167_1]
	ldr	d12, [x10, :lo12:.LCPI167_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB167_17
.LBB167_16:                             //   in Loop: Header=BB167_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB167_25
.LBB167_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB167_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB167_18:                             //   Parent Loop BB167_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB167_18
// %bb.19:                              //   in Loop: Header=BB167_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB167_16
// %bb.20:                              //   in Loop: Header=BB167_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB167_16
.LBB167_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI167_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI167_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB167_23
.LBB167_22:                             //   in Loop: Header=BB167_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB167_25
.LBB167_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB167_22
// %bb.24:                              //   in Loop: Header=BB167_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB167_22
.LBB167_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB167_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB167_29
.LBB167_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB167_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB167_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB167_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end167:
	.size	_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end167-_Z27test_for_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI168_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI168_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x24, iterations
	adrp	x9, start_time
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB168_25
// %bb.1:
	subs	w9, w21, #12
	b.lt	.LBB168_14
// %bb.2:
	mov	w8, #43691                      // =0xaaab
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #43690, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x11, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI168_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #35
	fmov	d10, x10
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI168_1]
	mov	w26, wzr
	sub	w27, w21, #11
	add	w8, w8, w8, lsl #1
	add	x28, x20, #48
	adrp	x13, init_value
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	lsl	w8, w8, #2
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	sub	w9, w21, w8
	add	w19, w8, #12
	sub	w22, w9, #13
	add	x8, x20, w19, uxtw #3
	adrp	x9, .LCPI168_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI168_0]
	and	x23, x10, #0x1fffffffc
	add	x8, x8, #16
	stp	x10, x8, [sp, #16]              // 16-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB168_4
.LBB168_3:                              //   in Loop: Header=BB168_4 Depth=1
	ldr	w8, [x24, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB168_25
.LBB168_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB168_5 Depth 2
                                        //     Child Loop BB168_8 Depth 2
                                        //     Child Loop BB168_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB168_5:                              //   Parent Loop BB168_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-48]
	add	x8, x8, #12
	ldp	d3, d4, [x9, #-32]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d6, d10, d8
	ldp	d7, d6, [x9]
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d5, d6, d9
	fadd	d1, d1, d9
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	ldp	d3, d7, [x9, #16]
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #32]
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	add	x9, x9, #96
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB168_5
// %bb.6:                               //   in Loop: Header=BB168_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB168_12
// %bb.7:                               //   in Loop: Header=BB168_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w22, #3
	mov	x10, x19
	mov	x9, x23
	b.lo	.LBB168_10
.LBB168_8:                              //   Parent Loop BB168_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB168_8
// %bb.9:                               //   in Loop: Header=BB168_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB168_12
.LBB168_10:                             // %.preheader
                                        //   in Loop: Header=BB168_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB168_11:                             //   Parent Loop BB168_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB168_11
.LBB168_12:                             //   in Loop: Header=BB168_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB168_3
// %bb.13:                              //   in Loop: Header=BB168_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB168_3
.LBB168_14:
	cmp	w21, #0
	b.le	.LBB168_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI168_1
	adrp	x10, .LCPI168_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI168_1]
	ldr	d12, [x10, :lo12:.LCPI168_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB168_17
.LBB168_16:                             //   in Loop: Header=BB168_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB168_25
.LBB168_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB168_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB168_18:                             //   Parent Loop BB168_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB168_18
// %bb.19:                              //   in Loop: Header=BB168_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB168_16
// %bb.20:                              //   in Loop: Header=BB168_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB168_16
.LBB168_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI168_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI168_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB168_23
.LBB168_22:                             //   in Loop: Header=BB168_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB168_25
.LBB168_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB168_22
// %bb.24:                              //   in Loop: Header=BB168_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB168_22
.LBB168_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB168_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB168_29
.LBB168_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB168_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB168_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB168_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end168:
	.size	_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end168-_Z27test_for_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN14for_loop_testsILi10EdE7do_testEPKdPKc,"axG",@progbits,_ZN14for_loop_testsILi10EdE7do_testEPKdPKc,comdat
	.weak	_ZN14for_loop_testsILi10EdE7do_testEPKdPKc // -- Begin function _ZN14for_loop_testsILi10EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN14for_loop_testsILi10EdE7do_testEPKdPKc,@function
_ZN14for_loop_testsILi10EdE7do_testEPKdPKc: // @_ZN14for_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x20, temp_string
	add	x20, x20, :lo12:temp_string
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	mov	x19, x0
	bl	_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
	add	x2, x20, #900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
.Lfunc_end169:
	.size	_ZN14for_loop_testsILi10EdE7do_testEPKdPKc, .Lfunc_end169-_ZN14for_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI170_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI170_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x24, iterations
	adrp	x9, start_time
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB170_25
// %bb.1:
	subs	w9, w21, #11
	b.lt	.LBB170_14
// %bb.2:
	mov	w8, #35747                      // =0x8ba3
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #47662, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #11                         // =0xb
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI170_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #35
	ldr	d11, [x12, :lo12:.LCPI170_1]
	sub	w27, w21, #10
	add	x28, x20, #40
	adrp	x13, init_value
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI170_0
	sub	w10, w21, w8
	add	w19, w8, #11
	ldr	d12, [x9, :lo12:.LCPI170_0]
	sub	w22, w10, #12
	add	x8, x20, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x8, x8, #16
	stp	x10, x8, [sp, #16]              // 16-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB170_4
.LBB170_3:                              //   in Loop: Header=BB170_4 Depth=1
	ldr	w8, [x24, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB170_25
.LBB170_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB170_5 Depth 2
                                        //     Child Loop BB170_8 Depth 2
                                        //     Child Loop BB170_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB170_5:                              //   Parent Loop BB170_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-40]
	add	x8, x8, #11
	ldp	d3, d4, [x9, #-24]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d6, d10, d8
	ldp	d7, d6, [x9, #24]
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fadd	d3, d3, d9
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d4
	ldr	d4, [x9, #40]
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #88
	fadd	d4, d4, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB170_5
// %bb.6:                               //   in Loop: Header=BB170_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB170_12
// %bb.7:                               //   in Loop: Header=BB170_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w22, #3
	mov	x10, x19
	mov	x9, x23
	b.lo	.LBB170_10
.LBB170_8:                              //   Parent Loop BB170_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB170_8
// %bb.9:                               //   in Loop: Header=BB170_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB170_12
.LBB170_10:                             // %.preheader
                                        //   in Loop: Header=BB170_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB170_11:                             //   Parent Loop BB170_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB170_11
.LBB170_12:                             //   in Loop: Header=BB170_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB170_3
// %bb.13:                              //   in Loop: Header=BB170_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB170_3
.LBB170_14:
	cmp	w21, #0
	b.le	.LBB170_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI170_1
	adrp	x10, .LCPI170_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI170_1]
	ldr	d12, [x10, :lo12:.LCPI170_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB170_17
.LBB170_16:                             //   in Loop: Header=BB170_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB170_25
.LBB170_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB170_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB170_18:                             //   Parent Loop BB170_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB170_18
// %bb.19:                              //   in Loop: Header=BB170_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB170_16
// %bb.20:                              //   in Loop: Header=BB170_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB170_16
.LBB170_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI170_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI170_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB170_23
.LBB170_22:                             //   in Loop: Header=BB170_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB170_25
.LBB170_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB170_22
// %bb.24:                              //   in Loop: Header=BB170_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB170_22
.LBB170_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB170_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB170_29
.LBB170_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB170_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB170_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB170_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end170:
	.size	_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end170-_Z27test_for_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI171_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI171_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB171_25
// %bb.1:
	subs	w9, w21, #10
	b.lt	.LBB171_14
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #52428, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x10, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI171_1
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x9, x9, #35
	fmov	d10, x11
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI171_1]
	mov	w26, wzr
	sub	w27, w21, #9
	add	w9, w9, w9, lsl #2
	add	x28, x20, #40
	adrp	x24, init_value
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	lsl	w9, w9, #1
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	sub	w10, w21, w9
	add	w19, w9, #10
	sub	w22, w10, #11
	add	x9, x20, w19, uxtw #3
	adrp	x10, .LCPI171_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI171_0]
	and	x25, x11, #0x1fffffffc
	add	x23, x9, #16
	add	x9, x25, x19
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB171_4
.LBB171_3:                              //   in Loop: Header=BB171_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB171_25
.LBB171_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB171_5 Depth 2
                                        //     Child Loop BB171_8 Depth 2
                                        //     Child Loop BB171_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB171_5:                              //   Parent Loop BB171_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-40]
	add	x9, x9, #10
	ldp	d3, d4, [x10, #-24]
	cmp	x9, x27
	ldp	d5, d6, [x10, #-8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x10, #8]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d6, d9
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d5, d9
	fmadd	d2, d2, d10, d8
	ldp	d7, d5, [x10, #24]
	fmadd	d6, d6, d10, d8
	add	x10, x10, #80
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d3, d3, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB171_5
// %bb.6:                               //   in Loop: Header=BB171_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB171_12
// %bb.7:                               //   in Loop: Header=BB171_4 Depth=1
	cmp	w22, #3
	mov	x11, x19
	mov	x9, x23
	mov	x10, x25
	b.lo	.LBB171_10
.LBB171_8:                              //   Parent Loop BB171_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB171_8
// %bb.9:                               //   in Loop: Header=BB171_4 Depth=1
	ldp	x11, x9, [sp, #16]              // 16-byte Folded Reload
	cmp	x9, x25
	b.eq	.LBB171_12
.LBB171_10:                             // %.preheader
                                        //   in Loop: Header=BB171_4 Depth=1
	add	x9, x20, x11, lsl #3
.LBB171_11:                             //   Parent Loop BB171_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w21, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB171_11
.LBB171_12:                             //   in Loop: Header=BB171_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB171_3
// %bb.13:                              //   in Loop: Header=BB171_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB171_3
.LBB171_14:
	cmp	w21, #0
	b.le	.LBB171_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI171_1
	adrp	x10, .LCPI171_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI171_1]
	ldr	d12, [x10, :lo12:.LCPI171_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB171_17
.LBB171_16:                             //   in Loop: Header=BB171_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB171_25
.LBB171_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB171_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB171_18:                             //   Parent Loop BB171_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB171_18
// %bb.19:                              //   in Loop: Header=BB171_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB171_16
// %bb.20:                              //   in Loop: Header=BB171_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB171_16
.LBB171_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI171_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI171_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB171_23
.LBB171_22:                             //   in Loop: Header=BB171_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB171_25
.LBB171_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB171_22
// %bb.24:                              //   in Loop: Header=BB171_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB171_22
.LBB171_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB171_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB171_29
.LBB171_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB171_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB171_29:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB171_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end171:
	.size	_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end171-_Z27test_for_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI172_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI172_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB172_31
// %bb.1:
	subs	w9, w20, #9
	b.lt	.LBB172_14
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #14563, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x10, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI172_1
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x9, x9, #33
	fmov	d10, x11
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI172_1]
	mov	w26, wzr
	sub	w27, w20, #8
	add	w9, w9, w9, lsl #3
	add	x28, x21, #32
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w10, w20, w9
	add	w19, w9, #9
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w22, w10, #10
	add	x9, x21, w19, uxtw #3
	adrp	x10, .LCPI172_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI172_0]
	and	x25, x11, #0x1fffffffc
	add	x23, x9, #16
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x9, x25, x19
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB172_4
.LBB172_3:                              //   in Loop: Header=BB172_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB172_31
.LBB172_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB172_5 Depth 2
                                        //     Child Loop BB172_8 Depth 2
                                        //     Child Loop BB172_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB172_5:                              //   Parent Loop BB172_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-32]
	add	x9, x9, #9
	ldp	d3, d4, [x10, #-16]
	cmp	x9, x27
	ldp	d5, d6, [x10]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d6, d10, d8
	ldp	d7, d6, [x10, #16]
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d2
	ldr	d2, [x10, #32]
	fmadd	d1, d1, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	add	x10, x10, #72
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d3
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB172_5
// %bb.6:                               //   in Loop: Header=BB172_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB172_12
// %bb.7:                               //   in Loop: Header=BB172_4 Depth=1
	cmp	w22, #3
	mov	x11, x19
	mov	x9, x23
	mov	x10, x25
	b.lo	.LBB172_10
.LBB172_8:                              //   Parent Loop BB172_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB172_8
// %bb.9:                               //   in Loop: Header=BB172_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x25
	b.eq	.LBB172_12
.LBB172_10:                             // %.preheader
                                        //   in Loop: Header=BB172_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB172_11:                             //   Parent Loop BB172_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB172_11
.LBB172_12:                             //   in Loop: Header=BB172_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB172_3
// %bb.13:                              //   in Loop: Header=BB172_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB172_3
.LBB172_14:
	cmp	w20, #0
	b.le	.LBB172_27
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI172_1
	adrp	x10, .LCPI172_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI172_1]
	ldr	d13, [x10, :lo12:.LCPI172_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB172_17
.LBB172_16:                             //   in Loop: Header=BB172_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB172_31
.LBB172_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB172_25
// %bb.18:                              //   in Loop: Header=BB172_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB172_25
// %bb.19:                              //   in Loop: Header=BB172_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB172_25
// %bb.20:                              //   in Loop: Header=BB172_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB172_25
// %bb.21:                              //   in Loop: Header=BB172_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB172_25
// %bb.22:                              //   in Loop: Header=BB172_17 Depth=1
	ldr	d1, [x21, #40]
	cmp	w20, #6
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB172_25
// %bb.23:                              //   in Loop: Header=BB172_17 Depth=1
	ldr	d1, [x21, #48]
	cmp	w20, #7
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB172_25
// %bb.24:                              //   in Loop: Header=BB172_17 Depth=1
	ldr	d1, [x21, #56]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB172_25:                             //   in Loop: Header=BB172_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB172_16
// %bb.26:                              //   in Loop: Header=BB172_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB172_16
.LBB172_27:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI172_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI172_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB172_29
.LBB172_28:                             //   in Loop: Header=BB172_29 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB172_31
.LBB172_29:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB172_28
// %bb.30:                              //   in Loop: Header=BB172_29 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB172_28
.LBB172_31:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB172_33
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB172_35
.LBB172_33:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB172_36
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
.LBB172_35:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB172_36:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end172:
	.size	_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end172-_Z27test_for_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI173_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI173_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB173_30
// %bb.1:
	subs	w9, w20, #8
	b.lt	.LBB173_14
// %bb.2:
	and	w9, w9, #0xfffffff8
	mov	x11, #31336081391616            // =0x1c8000000000
	fmov	v18.2d, #-13.00000000
	sub	w10, w20, w9
	add	w24, w9, #8
	mov	x9, #253411660398592            // =0xe67a00000000
	sub	w19, w10, #9
	movk	x9, #16683, lsl #48
	movk	x11, #16584, lsl #48
	add	x12, x19, #1
	dup	v17.2d, x9
	fmov	d9, x9
	and	x22, x12, #0x1fffffffc
	add	x10, x21, w24, uxtw #3
	dup	v16.2d, x11
	add	x9, x22, x24
	fmov	d8, x11
	fmov	d10, #-13.00000000
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	adrp	x9, .LCPI173_1
	mov	w26, wzr
	ldr	d11, [x9, :lo12:.LCPI173_1]
	adrp	x9, .LCPI173_0
	sub	w27, w20, #7
	ldr	d12, [x9, :lo12:.LCPI173_0]
	mov	x9, #70368744177664             // =0x400000000000
	add	x28, x21, #32
	movk	x9, #49343, lsl #48
	add	x25, x10, #16
	adrp	x23, init_value
	fmov	d13, x9
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	b	.LBB173_4
.LBB173_3:                              //   in Loop: Header=BB173_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB173_30
.LBB173_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB173_5 Depth 2
                                        //     Child Loop BB173_8 Depth 2
                                        //     Child Loop BB173_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB173_5:                              //   Parent Loop BB173_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-32]
	add	x9, x9, #8
	ldp	d3, d4, [x10, #-16]
	cmp	x9, x27
	ldp	d5, d6, [x10]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d0, d0, d1
	fadd	d1, d5, d8
	ldp	d7, d5, [x10, #16]
	add	x10, x10, #64
	fadd	d7, d7, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d9, d10
	fadd	d2, d4, d8
	fadd	d4, d5, d8
	fmadd	d5, d7, d9, d10
	fadd	d0, d0, d3
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB173_5
// %bb.6:                               //   in Loop: Header=BB173_4 Depth=1
	cmp	w24, w20
	b.ge	.LBB173_12
// %bb.7:                               //   in Loop: Header=BB173_4 Depth=1
	cmp	w19, #3
	mov	x11, x24
	mov	x9, x25
	mov	x10, x22
	b.lo	.LBB173_10
.LBB173_8:                              //   Parent Loop BB173_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB173_8
// %bb.9:                               //   in Loop: Header=BB173_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x22
	b.eq	.LBB173_12
.LBB173_10:                             // %.preheader
                                        //   in Loop: Header=BB173_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB173_11:                             //   Parent Loop BB173_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.gt	.LBB173_11
.LBB173_12:                             //   in Loop: Header=BB173_4 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB173_3
// %bb.13:                              //   in Loop: Header=BB173_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB173_3
.LBB173_14:
	cmp	w20, #0
	b.le	.LBB173_26
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI173_1
	adrp	x10, .LCPI173_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI173_1]
	ldr	d13, [x10, :lo12:.LCPI173_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB173_17
.LBB173_16:                             //   in Loop: Header=BB173_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB173_30
.LBB173_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB173_24
// %bb.18:                              //   in Loop: Header=BB173_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB173_24
// %bb.19:                              //   in Loop: Header=BB173_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB173_24
// %bb.20:                              //   in Loop: Header=BB173_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB173_24
// %bb.21:                              //   in Loop: Header=BB173_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB173_24
// %bb.22:                              //   in Loop: Header=BB173_17 Depth=1
	ldr	d1, [x21, #40]
	cmp	w20, #6
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB173_24
// %bb.23:                              //   in Loop: Header=BB173_17 Depth=1
	ldr	d1, [x21, #48]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB173_24:                             //   in Loop: Header=BB173_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB173_16
// %bb.25:                              //   in Loop: Header=BB173_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB173_16
.LBB173_26:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI173_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI173_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB173_28
.LBB173_27:                             //   in Loop: Header=BB173_28 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB173_30
.LBB173_28:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB173_27
// %bb.29:                              //   in Loop: Header=BB173_28 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB173_27
.LBB173_30:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB173_32
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB173_34
.LBB173_32:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB173_35
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
.LBB173_34:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB173_35:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end173:
	.size	_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end173-_Z27test_for_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI174_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI174_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB174_29
// %bb.1:
	subs	w9, w20, #7
	b.lt	.LBB174_14
// %bb.2:
	mov	w10, #18725                     // =0x4925
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x13, #70368744177664            // =0x400000000000
	movk	w10, #9362, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v7.2d, #-13.00000000
	umull	x10, w9, w10
	movk	x13, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x14, .LCPI174_1
	dup	v17.2d, x11
	fmov	d10, x11
	fmov	d13, x13
	ldr	d11, [x14, :lo12:.LCPI174_1]
	mov	w26, wzr
	lsr	x10, x10, #32
	sub	w27, w20, #6
	add	x28, x21, #24
	adrp	x24, init_value
	str	q17, [sp, #16]                  // 16-byte Folded Spill
	sub	w9, w9, w10
	add	w9, w10, w9, lsr #1
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x10, #16584, lsl #48
	lsr	w9, w9, #2
	dup	v16.2d, x10
	fmov	d9, x10
	lsl	w12, w9, #3
	stp	q16, q7, [sp, #32]              // 32-byte Folded Spill
	sub	w9, w12, w9
	sub	w10, w20, w9
	add	w19, w9, #7
	sub	w22, w10, #8
	add	x9, x21, w19, uxtw #3
	adrp	x10, .LCPI174_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI174_0]
	and	x23, x11, #0x1fffffffc
	add	x25, x9, #16
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x9, x23, x19
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB174_4
.LBB174_3:                              //   in Loop: Header=BB174_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB174_29
.LBB174_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB174_5 Depth 2
                                        //     Child Loop BB174_8 Depth 2
                                        //     Child Loop BB174_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB174_5:                              //   Parent Loop BB174_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-24]
	add	x9, x9, #7
	ldp	d3, d4, [x10, #-8]
	cmp	x9, x27
	ldp	d5, d6, [x10, #8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x10, #24]
	add	x10, x10, #56
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d4, d9
	fadd	d4, d6, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d2, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB174_5
// %bb.6:                               //   in Loop: Header=BB174_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB174_12
// %bb.7:                               //   in Loop: Header=BB174_4 Depth=1
	cmp	w22, #3
	mov	x11, x19
	mov	x9, x25
	mov	x10, x23
	b.lo	.LBB174_10
.LBB174_8:                              //   Parent Loop BB174_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB174_8
// %bb.9:                               //   in Loop: Header=BB174_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x23
	b.eq	.LBB174_12
.LBB174_10:                             // %.preheader
                                        //   in Loop: Header=BB174_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB174_11:                             //   Parent Loop BB174_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB174_11
.LBB174_12:                             //   in Loop: Header=BB174_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB174_3
// %bb.13:                              //   in Loop: Header=BB174_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q17, q16, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB174_3
.LBB174_14:
	cmp	w20, #0
	b.le	.LBB174_25
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI174_1
	adrp	x10, .LCPI174_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI174_1]
	ldr	d13, [x10, :lo12:.LCPI174_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB174_17
.LBB174_16:                             //   in Loop: Header=BB174_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB174_29
.LBB174_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB174_23
// %bb.18:                              //   in Loop: Header=BB174_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB174_23
// %bb.19:                              //   in Loop: Header=BB174_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB174_23
// %bb.20:                              //   in Loop: Header=BB174_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB174_23
// %bb.21:                              //   in Loop: Header=BB174_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB174_23
// %bb.22:                              //   in Loop: Header=BB174_17 Depth=1
	ldr	d1, [x21, #40]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB174_23:                             //   in Loop: Header=BB174_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB174_16
// %bb.24:                              //   in Loop: Header=BB174_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB174_16
.LBB174_25:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI174_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI174_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB174_27
.LBB174_26:                             //   in Loop: Header=BB174_27 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB174_29
.LBB174_27:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB174_26
// %bb.28:                              //   in Loop: Header=BB174_27 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB174_26
.LBB174_29:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB174_31
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB174_33
.LBB174_31:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB174_34
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
.LBB174_33:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB174_34:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end174:
	.size	_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end174-_Z27test_for_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI175_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI175_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB175_28
// %bb.1:
	subs	w9, w20, #6
	b.lt	.LBB175_14
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #43690, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v7.2d, #-13.00000000
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x10, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI175_1
	dup	v16.2d, x10
	fmov	d9, x10
	dup	v17.2d, x11
	lsr	x9, x9, #34
	fmov	d10, x11
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI175_1]
	mov	w26, wzr
	sub	w27, w20, #5
	add	w9, w9, w9, lsl #1
	add	x28, x21, #24
	adrp	x24, init_value
	stp	q16, q7, [sp, #32]              // 32-byte Folded Spill
	lsl	w9, w9, #1
	str	q17, [sp, #16]                  // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w19, w9, #6
	sub	w22, w10, #7
	add	x9, x21, w19, uxtw #3
	adrp	x10, .LCPI175_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI175_0]
	and	x23, x11, #0x1fffffffc
	add	x25, x9, #16
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x9, x23, x19
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB175_4
.LBB175_3:                              //   in Loop: Header=BB175_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB175_28
.LBB175_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB175_5 Depth 2
                                        //     Child Loop BB175_8 Depth 2
                                        //     Child Loop BB175_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB175_5:                              //   Parent Loop BB175_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-24]
	add	x9, x9, #6
	ldp	d3, d4, [x10, #-8]
	cmp	x9, x27
	ldp	d5, d6, [x10, #8]
	add	x10, x10, #48
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB175_5
// %bb.6:                               //   in Loop: Header=BB175_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB175_12
// %bb.7:                               //   in Loop: Header=BB175_4 Depth=1
	cmp	w22, #3
	mov	x11, x19
	mov	x9, x25
	mov	x10, x23
	b.lo	.LBB175_10
.LBB175_8:                              //   Parent Loop BB175_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB175_8
// %bb.9:                               //   in Loop: Header=BB175_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x23
	b.eq	.LBB175_12
.LBB175_10:                             // %.preheader
                                        //   in Loop: Header=BB175_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB175_11:                             //   Parent Loop BB175_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB175_11
.LBB175_12:                             //   in Loop: Header=BB175_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB175_3
// %bb.13:                              //   in Loop: Header=BB175_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q17, q16, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB175_3
.LBB175_14:
	cmp	w20, #0
	b.le	.LBB175_24
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI175_1
	adrp	x10, .LCPI175_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI175_1]
	ldr	d13, [x10, :lo12:.LCPI175_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB175_17
.LBB175_16:                             //   in Loop: Header=BB175_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB175_28
.LBB175_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB175_22
// %bb.18:                              //   in Loop: Header=BB175_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB175_22
// %bb.19:                              //   in Loop: Header=BB175_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB175_22
// %bb.20:                              //   in Loop: Header=BB175_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB175_22
// %bb.21:                              //   in Loop: Header=BB175_17 Depth=1
	ldr	d1, [x21, #32]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB175_22:                             //   in Loop: Header=BB175_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB175_16
// %bb.23:                              //   in Loop: Header=BB175_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB175_16
.LBB175_24:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI175_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI175_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB175_26
.LBB175_25:                             //   in Loop: Header=BB175_26 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB175_28
.LBB175_26:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB175_25
// %bb.27:                              //   in Loop: Header=BB175_26 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB175_25
.LBB175_28:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB175_30
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB175_32
.LBB175_30:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB175_33
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
.LBB175_32:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB175_33:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end175:
	.size	_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end175-_Z27test_for_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI176_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI176_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB176_27
// %bb.1:
	subs	w9, w20, #5
	b.lt	.LBB176_14
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #52428, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v6.2d, #-13.00000000
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x10, #16584, lsl #48
	add	x28, x21, #16
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI176_1
	adrp	x14, .LCPI176_0
	dup	v7.2d, x10
	lsr	x9, x9, #34
	fmov	d9, x10
	dup	v16.2d, x11
	fmov	d10, x11
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI176_1]
	add	w9, w9, w9, lsl #2
	ldr	d12, [x14, :lo12:.LCPI176_0]
	mov	w26, wzr
	sub	w27, w20, #4
	adrp	x24, init_value
	stp	q7, q6, [sp, #32]               // 32-byte Folded Spill
	sub	w15, w20, w9
	add	w23, w9, #5
	str	q16, [sp, #16]                  // 16-byte Folded Spill
	sub	w19, w15, #6
	add	x22, x28, w23, uxtw #3
	add	x10, x19, #1
	and	x25, x10, #0x1fffffffc
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x9, x25, x23
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB176_4
.LBB176_3:                              //   in Loop: Header=BB176_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB176_27
.LBB176_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB176_5 Depth 2
                                        //     Child Loop BB176_8 Depth 2
                                        //     Child Loop BB176_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB176_5:                              //   Parent Loop BB176_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-16]
	add	x9, x9, #5
	ldp	d3, d4, [x10]
	cmp	x9, x27
	ldr	d5, [x10, #16]
	add	x10, x10, #40
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d2, d5, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d3, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB176_5
// %bb.6:                               //   in Loop: Header=BB176_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB176_12
// %bb.7:                               //   in Loop: Header=BB176_4 Depth=1
	cmp	w19, #3
	mov	x11, x23
	mov	x9, x22
	mov	x10, x25
	b.lo	.LBB176_10
.LBB176_8:                              //   Parent Loop BB176_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v6.16b
	mov	v4.16b, v6.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v7.2d
	fmla	v3.2d, v16.2d, v1.2d
	fadd	v1.2d, v2.2d, v7.2d
	fadd	v2.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	fmla	v3.2d, v16.2d, v1.2d
	fmla	v4.2d, v16.2d, v2.2d
	fadd	v1.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	fadd	v2.2d, v4.2d, v7.2d
	mov	v4.16b, v6.16b
	fmla	v3.2d, v16.2d, v1.2d
	fmla	v4.2d, v16.2d, v2.2d
	fadd	v1.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v16.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB176_8
// %bb.9:                               //   in Loop: Header=BB176_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x25
	b.eq	.LBB176_12
.LBB176_10:                             // %.preheader
                                        //   in Loop: Header=BB176_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB176_11:                             //   Parent Loop BB176_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB176_11
.LBB176_12:                             //   in Loop: Header=BB176_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB176_3
// %bb.13:                              //   in Loop: Header=BB176_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q16, q7, [sp, #16]              // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q6, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB176_3
.LBB176_14:
	cmp	w20, #0
	b.le	.LBB176_23
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI176_1
	adrp	x10, .LCPI176_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI176_1]
	ldr	d13, [x10, :lo12:.LCPI176_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB176_17
.LBB176_16:                             //   in Loop: Header=BB176_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB176_27
.LBB176_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB176_21
// %bb.18:                              //   in Loop: Header=BB176_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB176_21
// %bb.19:                              //   in Loop: Header=BB176_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB176_21
// %bb.20:                              //   in Loop: Header=BB176_17 Depth=1
	ldr	d1, [x21, #24]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB176_21:                             //   in Loop: Header=BB176_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB176_16
// %bb.22:                              //   in Loop: Header=BB176_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB176_16
.LBB176_23:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI176_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI176_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB176_25
.LBB176_24:                             //   in Loop: Header=BB176_25 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB176_27
.LBB176_25:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB176_24
// %bb.26:                              //   in Loop: Header=BB176_25 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB176_24
.LBB176_27:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB176_29
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB176_31
.LBB176_29:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB176_32
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
.LBB176_31:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB176_32:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end176:
	.size	_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end176-_Z27test_for_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI177_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI177_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB177_26
// %bb.1:
	subs	w9, w20, #4
	b.lt	.LBB177_14
// %bb.2:
	and	w9, w9, #0xfffffffc
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x12, #253411660398592           // =0xe67a00000000
	sub	w11, w20, w9
	add	w24, w9, #4
	movk	x10, #16584, lsl #48
	sub	w19, w11, #5
	movk	x12, #16683, lsl #48
	fmov	v7.2d, #-13.00000000
	add	x9, x19, #1
	add	x28, x21, #16
	dup	v5.2d, x10
	and	x22, x9, #0x1fffffffc
	stur	x9, [x29, #-56]                 // 8-byte Folded Spill
	fmov	d8, x10
	add	x9, x22, x24
	dup	v6.2d, x12
	fmov	d9, x12
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	adrp	x9, .LCPI177_1
	fmov	d10, #-13.00000000
	ldr	d11, [x9, :lo12:.LCPI177_1]
	adrp	x9, .LCPI177_0
	add	x23, x28, w24, uxtw #3
	ldr	d12, [x9, :lo12:.LCPI177_0]
	mov	x9, #70368744177664             // =0x400000000000
	mov	w26, wzr
	movk	x9, #49343, lsl #48
	sub	w27, w20, #3
	adrp	x25, init_value
	fmov	d13, x9
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB177_4
.LBB177_3:                              //   in Loop: Header=BB177_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB177_26
.LBB177_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB177_5 Depth 2
                                        //     Child Loop BB177_8 Depth 2
                                        //     Child Loop BB177_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x28
	mov	w10, #1                         // =0x1
.LBB177_5:                              //   Parent Loop BB177_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-16]
	add	x11, x10, #3
	ldp	d3, d4, [x9], #32
	add	x10, x10, #4
	cmp	x11, x27
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB177_5
// %bb.6:                               //   in Loop: Header=BB177_4 Depth=1
	cmp	w24, w20
	b.ge	.LBB177_12
// %bb.7:                               //   in Loop: Header=BB177_4 Depth=1
	cmp	w19, #3
	mov	x11, x24
	mov	x9, x23
	mov	x10, x22
	b.lo	.LBB177_10
.LBB177_8:                              //   Parent Loop BB177_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB177_8
// %bb.9:                               //   in Loop: Header=BB177_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x22
	b.eq	.LBB177_12
.LBB177_10:                             // %.preheader
                                        //   in Loop: Header=BB177_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB177_11:                             //   Parent Loop BB177_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.gt	.LBB177_11
.LBB177_12:                             //   in Loop: Header=BB177_4 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB177_3
// %bb.13:                              //   in Loop: Header=BB177_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB177_3
.LBB177_14:
	cmp	w20, #0
	b.le	.LBB177_22
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI177_1
	adrp	x10, .LCPI177_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI177_1]
	ldr	d13, [x10, :lo12:.LCPI177_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB177_17
.LBB177_16:                             //   in Loop: Header=BB177_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB177_26
.LBB177_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB177_20
// %bb.18:                              //   in Loop: Header=BB177_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB177_20
// %bb.19:                              //   in Loop: Header=BB177_17 Depth=1
	ldr	d1, [x21, #16]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB177_20:                             //   in Loop: Header=BB177_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB177_16
// %bb.21:                              //   in Loop: Header=BB177_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB177_16
.LBB177_22:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI177_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI177_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB177_24
.LBB177_23:                             //   in Loop: Header=BB177_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB177_26
.LBB177_24:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB177_23
// %bb.25:                              //   in Loop: Header=BB177_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB177_23
.LBB177_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB177_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB177_30
.LBB177_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB177_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB177_30:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB177_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end177:
	.size	_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end177-_Z27test_for_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI178_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI178_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB178_25
// %bb.1:
	subs	w9, w20, #3
	b.lt	.LBB178_14
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #43690, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v5.2d, #-13.00000000
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x10, #16584, lsl #48
	add	x28, x21, #16
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI178_1
	adrp	x14, .LCPI178_0
	dup	v6.2d, x10
	lsr	x9, x9, #33
	fmov	d9, x10
	dup	v7.2d, x11
	fmov	d10, x11
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI178_1]
	add	w9, w9, w9, lsl #1
	ldr	d12, [x14, :lo12:.LCPI178_0]
	mov	w26, wzr
	sub	w27, w20, #2
	adrp	x24, init_value
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	sub	w15, w20, w9
	add	w23, w9, #3
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	sub	w19, w15, #4
	add	x25, x28, w23, uxtw #3
	add	x10, x19, #1
	and	x22, x10, #0x1fffffffc
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x9, x22, x23
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB178_4
.LBB178_3:                              //   in Loop: Header=BB178_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB178_25
.LBB178_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB178_5 Depth 2
                                        //     Child Loop BB178_8 Depth 2
                                        //     Child Loop BB178_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x28
	mov	w10, #1                         // =0x1
.LBB178_5:                              //   Parent Loop BB178_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-16]
	add	x11, x10, #2
	ldr	d3, [x9], #24
	add	x10, x10, #3
	cmp	x11, x27
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB178_5
// %bb.6:                               //   in Loop: Header=BB178_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB178_12
// %bb.7:                               //   in Loop: Header=BB178_4 Depth=1
	cmp	w19, #3
	mov	x11, x23
	mov	x9, x25
	mov	x10, x22
	b.lo	.LBB178_10
.LBB178_8:                              //   Parent Loop BB178_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v5.16b
	mov	v4.16b, v5.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v6.2d
	fmla	v3.2d, v7.2d, v1.2d
	fadd	v1.2d, v2.2d, v6.2d
	fadd	v2.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	fmla	v3.2d, v7.2d, v1.2d
	fmla	v4.2d, v7.2d, v2.2d
	fadd	v1.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	fadd	v2.2d, v4.2d, v6.2d
	mov	v4.16b, v5.16b
	fmla	v3.2d, v7.2d, v1.2d
	fmla	v4.2d, v7.2d, v2.2d
	fadd	v1.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v7.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB178_8
// %bb.9:                               //   in Loop: Header=BB178_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x22
	b.eq	.LBB178_12
.LBB178_10:                             // %.preheader
                                        //   in Loop: Header=BB178_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB178_11:                             //   Parent Loop BB178_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB178_11
.LBB178_12:                             //   in Loop: Header=BB178_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB178_3
// %bb.13:                              //   in Loop: Header=BB178_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB178_3
.LBB178_14:
	cmp	w20, #0
	b.le	.LBB178_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI178_1
	adrp	x10, .LCPI178_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI178_1]
	ldr	d13, [x10, :lo12:.LCPI178_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB178_17
.LBB178_16:                             //   in Loop: Header=BB178_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB178_25
.LBB178_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB178_19
// %bb.18:                              //   in Loop: Header=BB178_17 Depth=1
	ldr	d1, [x21, #8]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB178_19:                             //   in Loop: Header=BB178_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB178_16
// %bb.20:                              //   in Loop: Header=BB178_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB178_16
.LBB178_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI178_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI178_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB178_23
.LBB178_22:                             //   in Loop: Header=BB178_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB178_25
.LBB178_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB178_22
// %bb.24:                              //   in Loop: Header=BB178_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB178_22
.LBB178_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB178_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB178_29
.LBB178_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB178_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB178_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB178_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end178:
	.size	_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end178-_Z27test_for_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI179_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI179_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB179_23
// %bb.1:
	subs	w9, w21, #2
	b.lt	.LBB179_14
// %bb.2:
	and	w9, w9, #0xfffffffe
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v7.2d, #-13.00000000
	add	w28, w9, #2
	sub	w9, w21, w9
	movk	x10, #16584, lsl #48
	sub	w24, w9, #3
	mov	x9, #253411660398592            // =0xe67a00000000
	dup	v5.2d, x10
	add	x11, x24, #1
	movk	x9, #16683, lsl #48
	fmov	d8, x10
	and	x22, x11, #0x1fffffffc
	dup	v6.2d, x9
	fmov	d9, x9
	add	x9, x22, x28
	add	x10, x20, w28, uxtw #3
	fmov	d10, #-13.00000000
	stp	x9, x11, [sp, #8]               // 16-byte Folded Spill
	adrp	x9, .LCPI179_1
	mov	w26, wzr
	ldr	d11, [x9, :lo12:.LCPI179_1]
	adrp	x9, .LCPI179_0
	sub	w27, w21, #1
	ldr	d12, [x9, :lo12:.LCPI179_0]
	mov	x9, #70368744177664             // =0x400000000000
	add	x19, x10, #16
	movk	x9, #49343, lsl #48
	adrp	x23, init_value
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	fmov	d13, x9
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB179_4
.LBB179_3:                              //   in Loop: Header=BB179_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB179_23
.LBB179_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB179_5 Depth 2
                                        //     Child Loop BB179_8 Depth 2
                                        //     Child Loop BB179_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
.LBB179_5:                              //   Parent Loop BB179_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x10, x20, x9, lsl #3
	add	x9, x9, #2
	cmp	x9, x27
	ldp	d1, d2, [x10]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB179_5
// %bb.6:                               //   in Loop: Header=BB179_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB179_12
// %bb.7:                               //   in Loop: Header=BB179_4 Depth=1
	cmp	w24, #3
	mov	x11, x28
	mov	x9, x19
	mov	x10, x22
	b.lo	.LBB179_10
.LBB179_8:                              //   Parent Loop BB179_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB179_8
// %bb.9:                               //   in Loop: Header=BB179_4 Depth=1
	ldp	x11, x9, [sp, #8]               // 16-byte Folded Reload
	cmp	x9, x22
	b.eq	.LBB179_12
.LBB179_10:                             // %.preheader
                                        //   in Loop: Header=BB179_4 Depth=1
	add	x9, x20, x11, lsl #3
.LBB179_11:                             //   Parent Loop BB179_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w21, w11
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.gt	.LBB179_11
.LBB179_12:                             //   in Loop: Header=BB179_4 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB179_3
// %bb.13:                              //   in Loop: Header=BB179_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB179_3
.LBB179_14:
	cmp	w21, #1
	b.ne	.LBB179_19
// %bb.15:                              // %.preheader4
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v5.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	mov	w19, wzr
	dup	v3.2d, x9
	mov	x9, #70368744177664             // =0x400000000000
	dup	v4.2d, x10
	movk	x9, #16575, lsl #48
	adrp	x10, .LCPI179_0
	adrp	x22, init_value
	add	x22, x22, :lo12:init_value
	dup	v7.2d, x9
	adrp	x9, .LCPI179_1
	ldr	d8, [x9, :lo12:.LCPI179_1]
	ldr	d9, [x10, :lo12:.LCPI179_0]
	movi	v6.2d, #0000000000000000
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	stp	q4, q3, [sp, #48]               // 32-byte Folded Spill
	stp	q7, q5, [sp, #16]               // 32-byte Folded Spill
	b	.LBB179_17
.LBB179_16:                             //   in Loop: Header=BB179_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB179_23
.LBB179_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x20]
	mov	v1.16b, v5.16b
	ld1	{ v0.d }[1], [x22]
	fadd	v0.2d, v0.2d, v3.2d
	fmla	v1.2d, v4.2d, v0.2d
	fadd	v0.2d, v1.2d, v3.2d
	mov	v1.16b, v5.16b
	fmla	v1.2d, v4.2d, v0.2d
	fadd	v0.2d, v1.2d, v3.2d
	mov	v1.16b, v5.16b
	fmla	v1.2d, v4.2d, v0.2d
	fadd	v0.2d, v1.2d, v6.2d
	fmul	v1.2d, v1.2d, v7.2d
	mov	v2.16b, v0.16b
	mov	v2.d[1], v1.d[1]
	dup	v1.2d, v1.d[1]
	fsub	v1.2d, v2.2d, v1.2d
	fdiv	v2.2d, v1.2d, v0.2d
	fabs	d0, d0
	fcmp	d0, d8
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d9
	b.mi	.LBB179_16
// %bb.18:                              //   in Loop: Header=BB179_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v6.2d, #0000000000000000
	ldp	q7, q5, [sp, #16]               // 32-byte Folded Reload
	ldp	q4, q3, [sp, #48]               // 32-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB179_16
.LBB179_19:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI179_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI179_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB179_21
.LBB179_20:                             //   in Loop: Header=BB179_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB179_23
.LBB179_21:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB179_20
// %bb.22:                              //   in Loop: Header=BB179_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB179_20
.LBB179_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB179_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB179_27
.LBB179_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB179_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB179_27:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB179_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end179:
	.size	_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end179-_Z27test_for_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI180_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI180_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	2
	.type	_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc: // @_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	stp	d13, d12, [sp, #64]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #80]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #96]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB180_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB180_13
// %bb.2:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	fmov	d10, #-13.00000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI180_1
	ldr	d11, [x9, :lo12:.LCPI180_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	adrp	x10, .LCPI180_0
	fmov	d13, x9
	mov	w27, w20
	ldr	d12, [x10, :lo12:.LCPI180_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB180_4
.LBB180_3:                              //   in Loop: Header=BB180_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB180_17
.LBB180_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB180_7 Depth 2
                                        //     Child Loop BB180_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB180_6
// %bb.5:                               //   in Loop: Header=BB180_4 Depth=1
	mov	x10, xzr
	b	.LBB180_9
.LBB180_6:                              // %.preheader2
                                        //   in Loop: Header=BB180_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB180_7:                              //   Parent Loop BB180_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB180_7
// %bb.8:                               //   in Loop: Header=BB180_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB180_11
.LBB180_9:                              // %.preheader
                                        //   in Loop: Header=BB180_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB180_10:                             //   Parent Loop BB180_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB180_10
.LBB180_11:                             //   in Loop: Header=BB180_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB180_3
// %bb.12:                              //   in Loop: Header=BB180_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB180_3
.LBB180_13:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI180_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI180_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB180_15
.LBB180_14:                             //   in Loop: Header=BB180_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB180_17
.LBB180_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB180_14
// %bb.16:                              //   in Loop: Header=BB180_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB180_14
.LBB180_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB180_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB180_21
.LBB180_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB180_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB180_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #96]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #80]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB180_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end180:
	.size	_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end180-_Z27test_for_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI181_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI181_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB181_35
// %bb.1:
	subs	w9, w20, #32
	b.lt	.LBB181_14
// %bb.2:
	and	w8, w9, #0xffffffe0
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v18.2d, #-13.00000000
	sub	w9, w20, w8
	add	w24, w8, #32
	mov	x8, #253411660398592            // =0xe67a00000000
	sub	w19, w9, #33
	movk	x8, #16683, lsl #48
	movk	x10, #16584, lsl #48
	add	x11, x19, #1
	dup	v17.2d, x8
	fmov	d9, x8
	and	x22, x11, #0x1fffffffc
	add	x9, x21, w24, uxtw #3
	dup	v16.2d, x10
	add	x8, x22, x24
	fmov	d8, x10
	fmov	d10, #-13.00000000
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	adrp	x8, .LCPI181_1
	mov	w26, wzr
	ldr	d11, [x8, :lo12:.LCPI181_1]
	adrp	x8, .LCPI181_0
	sub	w27, w20, #31
	ldr	d12, [x8, :lo12:.LCPI181_0]
	mov	x8, #70368744177664             // =0x400000000000
	add	x28, x21, #128
	movk	x8, #49343, lsl #48
	add	x23, x9, #16
	adrp	x25, init_value
	fmov	d13, x8
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	b	.LBB181_4
.LBB181_3:                              //   in Loop: Header=BB181_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB181_35
.LBB181_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB181_5 Depth 2
                                        //     Child Loop BB181_8 Depth 2
                                        //     Child Loop BB181_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB181_5:                              //   Parent Loop BB181_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-128]
	add	x8, x8, #32
	ldp	d3, d4, [x9, #-112]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-96]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-80]
	fadd	d1, d1, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-64]
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fadd	d3, d3, d8
	fadd	d0, d0, d4
	fadd	d2, d2, d8
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-48]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d6, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-32]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d3, d3, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #-16]
	fmadd	d2, d2, d9, d10
	fadd	d5, d5, d8
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d2, d2, d8
	fmadd	d5, d5, d9, d10
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d6
	ldp	d7, d6, [x9]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d6, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #16]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d3, d3, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #32]
	fmadd	d2, d2, d9, d10
	fadd	d5, d5, d8
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d2, d2, d8
	fmadd	d5, d5, d9, d10
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #48]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #64]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d1, d1, d8
	fmadd	d3, d3, d9, d10
	fmadd	d2, d6, d9, d10
	fadd	d7, d7, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d9, d10
	fmadd	d1, d1, d9, d10
	ldp	d6, d5, [x9, #80]
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d4, d5, d8
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d5, d6, d9, d10
	fadd	d0, d0, d7
	fmadd	d3, d3, d9, d10
	ldp	d6, d7, [x9, #96]
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d2, d2, d8
	fadd	d6, d6, d8
	fadd	d5, d5, d8
	fadd	d0, d0, d3
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d3, d6, d9, d10
	fmadd	d5, d5, d9, d10
	fadd	d6, d7, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	ldp	d7, d5, [x9, #112]
	fmadd	d6, d6, d9, d10
	add	x9, x9, #256
	fadd	d0, d0, d1
	fadd	d7, d7, d8
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d6, d6, d8
	fmadd	d5, d7, d9, d10
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d3
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB181_5
// %bb.6:                               //   in Loop: Header=BB181_4 Depth=1
	cmp	w24, w20
	b.ge	.LBB181_12
// %bb.7:                               //   in Loop: Header=BB181_4 Depth=1
	cmp	w19, #3
	mov	x10, x24
	mov	x8, x23
	mov	x9, x22
	b.lo	.LBB181_10
.LBB181_8:                              //   Parent Loop BB181_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB181_8
// %bb.9:                               //   in Loop: Header=BB181_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x22
	b.eq	.LBB181_12
.LBB181_10:                             // %.preheader
                                        //   in Loop: Header=BB181_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB181_11:                             //   Parent Loop BB181_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.gt	.LBB181_11
.LBB181_12:                             //   in Loop: Header=BB181_4 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB181_3
// %bb.13:                              //   in Loop: Header=BB181_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB181_3
.LBB181_14:
	cmp	w20, #0
	b.le	.LBB181_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI181_1
	ldr	d12, [x9, :lo12:.LCPI181_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI181_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI181_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB181_17
.LBB181_16:                             //   in Loop: Header=BB181_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB181_35
.LBB181_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB181_28 Depth 2
	cmp	w20, #3
	b.hi	.LBB181_19
// %bb.18:                              //   in Loop: Header=BB181_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB181_27
.LBB181_19:                             //   in Loop: Header=BB181_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB181_26
// %bb.20:                              //   in Loop: Header=BB181_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB181_26
// %bb.21:                              //   in Loop: Header=BB181_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB181_26
// %bb.22:                              //   in Loop: Header=BB181_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB181_26
// %bb.23:                              //   in Loop: Header=BB181_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB181_26
// %bb.24:                              //   in Loop: Header=BB181_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB181_26
// %bb.25:                              //   in Loop: Header=BB181_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB181_26:                             //   in Loop: Header=BB181_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB181_29
.LBB181_27:                             // %.preheader4
                                        //   in Loop: Header=BB181_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB181_28:                             //   Parent Loop BB181_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB181_28
.LBB181_29:                             //   in Loop: Header=BB181_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB181_16
// %bb.30:                              //   in Loop: Header=BB181_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB181_16
.LBB181_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI181_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI181_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB181_33
.LBB181_32:                             //   in Loop: Header=BB181_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB181_35
.LBB181_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB181_32
// %bb.34:                              //   in Loop: Header=BB181_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB181_32
.LBB181_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB181_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB181_39
.LBB181_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB181_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB181_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB181_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end181:
	.size	_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end181-_Z29test_while_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI182_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI182_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB182_35
// %bb.1:
	subs	w9, w20, #31
	b.lt	.LBB182_14
// %bb.2:
	mov	w8, #4229                       // =0x1085
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w8, #2114, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	movk	x12, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI182_1
	dup	v18.2d, x10
	fmov	d10, x10
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI182_1]
	mov	w26, wzr
	lsr	x8, x8, #32
	sub	w27, w20, #30
	add	x28, x21, #120
	adrp	x24, init_value
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w9, w9, w8
	add	w8, w8, w9, lsr #1
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x9, #16584, lsl #48
	lsr	w8, w8, #4
	dup	v17.2d, x9
	fmov	d9, x9
	lsl	w11, w8, #5
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w8, w11, w8
	sub	w9, w20, w8
	add	w19, w8, #31
	sub	w22, w9, #32
	add	x8, x21, w19, uxtw #3
	adrp	x9, .LCPI182_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI182_0]
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB182_4
.LBB182_3:                              //   in Loop: Header=BB182_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB182_35
.LBB182_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB182_5 Depth 2
                                        //     Child Loop BB182_8 Depth 2
                                        //     Child Loop BB182_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB182_5:                              //   Parent Loop BB182_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-120]
	add	x8, x8, #31
	ldp	d3, d4, [x9, #-104]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-88]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-56]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-40]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-24]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #-8]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #8]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d7, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #40]
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #56]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #72]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #88]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #104]
	fadd	d7, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d5
	fmadd	d5, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #120]
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	add	x9, x9, #248
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB182_5
// %bb.6:                               //   in Loop: Header=BB182_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB182_12
// %bb.7:                               //   in Loop: Header=BB182_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB182_10
.LBB182_8:                              //   Parent Loop BB182_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB182_8
// %bb.9:                               //   in Loop: Header=BB182_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB182_12
.LBB182_10:                             // %.preheader
                                        //   in Loop: Header=BB182_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB182_11:                             //   Parent Loop BB182_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB182_11
.LBB182_12:                             //   in Loop: Header=BB182_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB182_3
// %bb.13:                              //   in Loop: Header=BB182_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB182_3
.LBB182_14:
	cmp	w20, #0
	b.le	.LBB182_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI182_1
	ldr	d12, [x9, :lo12:.LCPI182_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI182_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI182_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB182_17
.LBB182_16:                             //   in Loop: Header=BB182_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB182_35
.LBB182_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB182_28 Depth 2
	cmp	w20, #3
	b.hi	.LBB182_19
// %bb.18:                              //   in Loop: Header=BB182_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB182_27
.LBB182_19:                             //   in Loop: Header=BB182_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB182_26
// %bb.20:                              //   in Loop: Header=BB182_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB182_26
// %bb.21:                              //   in Loop: Header=BB182_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB182_26
// %bb.22:                              //   in Loop: Header=BB182_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB182_26
// %bb.23:                              //   in Loop: Header=BB182_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB182_26
// %bb.24:                              //   in Loop: Header=BB182_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB182_26
// %bb.25:                              //   in Loop: Header=BB182_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB182_26:                             //   in Loop: Header=BB182_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB182_29
.LBB182_27:                             // %.preheader4
                                        //   in Loop: Header=BB182_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB182_28:                             //   Parent Loop BB182_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB182_28
.LBB182_29:                             //   in Loop: Header=BB182_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB182_16
// %bb.30:                              //   in Loop: Header=BB182_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB182_16
.LBB182_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI182_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI182_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB182_33
.LBB182_32:                             //   in Loop: Header=BB182_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB182_35
.LBB182_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB182_32
// %bb.34:                              //   in Loop: Header=BB182_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB182_32
.LBB182_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB182_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB182_39
.LBB182_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB182_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB182_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB182_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end182:
	.size	_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end182-_Z29test_while_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI183_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI183_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB183_35
// %bb.1:
	subs	w9, w20, #30
	b.lt	.LBB183_14
// %bb.2:
	mov	w8, #34953                      // =0x8889
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #34952, lsl #16
	movk	x10, #16584, lsl #48
	movk	x11, #16683, lsl #48
	umull	x8, w9, w8
	dup	v17.2d, x10
	fmov	d9, x10
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI183_1
	dup	v18.2d, x11
	fmov	d10, x11
	ldr	d11, [x12, :lo12:.LCPI183_1]
	lsr	x8, x8, #36
	mov	w26, wzr
	sub	w27, w20, #29
	add	x28, x21, #120
	adrp	x24, init_value
	lsl	w9, w8, #5
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w8, w9, w8, lsl #1
	mov	x9, #70368744177664             // =0x400000000000
	movk	x9, #49343, lsl #48
	sub	w10, w20, w8
	add	w19, w8, #30
	fmov	d13, x9
	sub	w22, w10, #31
	add	x8, x21, w19, uxtw #3
	adrp	x10, .LCPI183_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI183_0]
	and	x23, x11, #0x1fffffffc
	add	x25, x8, #16
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB183_4
.LBB183_3:                              //   in Loop: Header=BB183_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB183_35
.LBB183_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB183_5 Depth 2
                                        //     Child Loop BB183_8 Depth 2
                                        //     Child Loop BB183_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB183_5:                              //   Parent Loop BB183_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-120]
	add	x8, x8, #30
	ldp	d3, d4, [x9, #-104]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-88]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-56]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-24]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #-8]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d5, d7, [x9, #8]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #40]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #56]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #72]
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d1, d1, d10, d8
	ldp	d6, d7, [x9, #88]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #104]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #240
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB183_5
// %bb.6:                               //   in Loop: Header=BB183_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB183_12
// %bb.7:                               //   in Loop: Header=BB183_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB183_10
.LBB183_8:                              //   Parent Loop BB183_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB183_8
// %bb.9:                               //   in Loop: Header=BB183_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB183_12
.LBB183_10:                             // %.preheader
                                        //   in Loop: Header=BB183_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB183_11:                             //   Parent Loop BB183_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB183_11
.LBB183_12:                             //   in Loop: Header=BB183_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB183_3
// %bb.13:                              //   in Loop: Header=BB183_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB183_3
.LBB183_14:
	cmp	w20, #0
	b.le	.LBB183_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI183_1
	ldr	d12, [x9, :lo12:.LCPI183_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI183_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI183_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB183_17
.LBB183_16:                             //   in Loop: Header=BB183_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB183_35
.LBB183_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB183_28 Depth 2
	cmp	w20, #3
	b.hi	.LBB183_19
// %bb.18:                              //   in Loop: Header=BB183_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB183_27
.LBB183_19:                             //   in Loop: Header=BB183_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB183_26
// %bb.20:                              //   in Loop: Header=BB183_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB183_26
// %bb.21:                              //   in Loop: Header=BB183_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB183_26
// %bb.22:                              //   in Loop: Header=BB183_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB183_26
// %bb.23:                              //   in Loop: Header=BB183_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB183_26
// %bb.24:                              //   in Loop: Header=BB183_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB183_26
// %bb.25:                              //   in Loop: Header=BB183_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB183_26:                             //   in Loop: Header=BB183_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB183_29
.LBB183_27:                             // %.preheader4
                                        //   in Loop: Header=BB183_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB183_28:                             //   Parent Loop BB183_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB183_28
.LBB183_29:                             //   in Loop: Header=BB183_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB183_16
// %bb.30:                              //   in Loop: Header=BB183_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB183_16
.LBB183_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI183_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI183_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB183_33
.LBB183_32:                             //   in Loop: Header=BB183_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB183_35
.LBB183_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB183_32
// %bb.34:                              //   in Loop: Header=BB183_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB183_32
.LBB183_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB183_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB183_39
.LBB183_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB183_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB183_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB183_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end183:
	.size	_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end183-_Z29test_while_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN16while_loop_testsILi28EdE7do_testEPKdPKc,"axG",@progbits,_ZN16while_loop_testsILi28EdE7do_testEPKdPKc,comdat
	.weak	_ZN16while_loop_testsILi28EdE7do_testEPKdPKc // -- Begin function _ZN16while_loop_testsILi28EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN16while_loop_testsILi28EdE7do_testEPKdPKc,@function
_ZN16while_loop_testsILi28EdE7do_testEPKdPKc: // @_ZN16while_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN16while_loop_testsILi19EdE7do_testEPKdPKc
	adrp	x20, temp_string+1900
	add	x20, x20, :lo12:temp_string+1900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
.Lfunc_end184:
	.size	_ZN16while_loop_testsILi28EdE7do_testEPKdPKc, .Lfunc_end184-_ZN16while_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI185_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI185_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB185_35
// %bb.1:
	subs	w9, w20, #29
	b.lt	.LBB185_14
// %bb.2:
	mov	w8, #51977                      // =0xcb09
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #36157, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #29                         // =0x1d
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI185_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #36
	ldr	d11, [x12, :lo12:.LCPI185_1]
	sub	w27, w20, #28
	add	x28, x21, #112
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI185_0
	sub	w10, w20, w8
	add	w19, w8, #29
	ldr	d12, [x9, :lo12:.LCPI185_0]
	sub	w22, w10, #30
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB185_4
.LBB185_3:                              //   in Loop: Header=BB185_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB185_35
.LBB185_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB185_5 Depth 2
                                        //     Child Loop BB185_8 Depth 2
                                        //     Child Loop BB185_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB185_5:                              //   Parent Loop BB185_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-112]
	add	x8, x8, #29
	ldp	d3, d4, [x9, #-96]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-80]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-48]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-32]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-16]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #16]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #32]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #48]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #64]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #80]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #96]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #112]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #232
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB185_5
// %bb.6:                               //   in Loop: Header=BB185_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB185_12
// %bb.7:                               //   in Loop: Header=BB185_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB185_10
.LBB185_8:                              //   Parent Loop BB185_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB185_8
// %bb.9:                               //   in Loop: Header=BB185_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB185_12
.LBB185_10:                             // %.preheader
                                        //   in Loop: Header=BB185_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB185_11:                             //   Parent Loop BB185_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB185_11
.LBB185_12:                             //   in Loop: Header=BB185_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB185_3
// %bb.13:                              //   in Loop: Header=BB185_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB185_3
.LBB185_14:
	cmp	w20, #0
	b.le	.LBB185_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI185_1
	ldr	d12, [x9, :lo12:.LCPI185_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI185_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI185_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB185_17
.LBB185_16:                             //   in Loop: Header=BB185_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB185_35
.LBB185_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB185_28 Depth 2
	cmp	w20, #3
	b.hi	.LBB185_19
// %bb.18:                              //   in Loop: Header=BB185_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB185_27
.LBB185_19:                             //   in Loop: Header=BB185_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB185_26
// %bb.20:                              //   in Loop: Header=BB185_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB185_26
// %bb.21:                              //   in Loop: Header=BB185_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB185_26
// %bb.22:                              //   in Loop: Header=BB185_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB185_26
// %bb.23:                              //   in Loop: Header=BB185_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB185_26
// %bb.24:                              //   in Loop: Header=BB185_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB185_26
// %bb.25:                              //   in Loop: Header=BB185_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB185_26:                             //   in Loop: Header=BB185_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB185_29
.LBB185_27:                             // %.preheader4
                                        //   in Loop: Header=BB185_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB185_28:                             //   Parent Loop BB185_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB185_28
.LBB185_29:                             //   in Loop: Header=BB185_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB185_16
// %bb.30:                              //   in Loop: Header=BB185_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB185_16
.LBB185_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI185_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI185_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB185_33
.LBB185_32:                             //   in Loop: Header=BB185_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB185_35
.LBB185_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB185_32
// %bb.34:                              //   in Loop: Header=BB185_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB185_32
.LBB185_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB185_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB185_39
.LBB185_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB185_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB185_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB185_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end185:
	.size	_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end185-_Z29test_while_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI186_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI186_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB186_34
// %bb.1:
	subs	w9, w20, #28
	b.lt	.LBB186_14
// %bb.2:
	lsr	w8, w9, #2
	mov	w9, #18725                      // =0x4925
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w9, #9362, lsl #16
	movk	x10, #16584, lsl #48
	mov	x11, #253411660398592           // =0xe67a00000000
	umull	x8, w8, w9
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI186_1
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #32
	ldr	d11, [x12, :lo12:.LCPI186_1]
	mov	w26, wzr
	sub	w27, w20, #27
	add	x28, x21, #112
	adrp	x24, init_value
	lsl	w9, w8, #5
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w8, w9, w8, lsl #2
	mov	x9, #70368744177664             // =0x400000000000
	movk	x9, #49343, lsl #48
	sub	w10, w20, w8
	add	w19, w8, #28
	fmov	d13, x9
	sub	w22, w10, #29
	add	x8, x21, w19, uxtw #3
	adrp	x10, .LCPI186_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI186_0]
	and	x23, x11, #0x1fffffffc
	add	x25, x8, #16
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB186_4
.LBB186_3:                              //   in Loop: Header=BB186_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB186_34
.LBB186_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB186_5 Depth 2
                                        //     Child Loop BB186_8 Depth 2
                                        //     Child Loop BB186_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB186_5:                              //   Parent Loop BB186_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-112]
	add	x8, x8, #28
	ldp	d3, d4, [x9, #-96]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-80]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-64]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-48]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-32]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-16]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #16]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #32]
	fmadd	d5, d5, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d5, d5, d9
	fadd	d4, d4, d9
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #48]
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #80]
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d7, d5, [x9, #96]
	add	x9, x9, #224
	fadd	d1, d1, d9
	fadd	d4, d4, d9
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB186_5
// %bb.6:                               //   in Loop: Header=BB186_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB186_12
// %bb.7:                               //   in Loop: Header=BB186_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB186_10
.LBB186_8:                              //   Parent Loop BB186_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB186_8
// %bb.9:                               //   in Loop: Header=BB186_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB186_12
.LBB186_10:                             // %.preheader
                                        //   in Loop: Header=BB186_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB186_11:                             //   Parent Loop BB186_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB186_11
.LBB186_12:                             //   in Loop: Header=BB186_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB186_3
// %bb.13:                              //   in Loop: Header=BB186_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB186_3
.LBB186_14:
	cmp	w20, #0
	b.le	.LBB186_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI186_1
	ldr	d12, [x9, :lo12:.LCPI186_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI186_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI186_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB186_17
.LBB186_16:                             //   in Loop: Header=BB186_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB186_34
.LBB186_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB186_27 Depth 2
	cmp	w20, #3
	b.hi	.LBB186_19
// %bb.18:                              //   in Loop: Header=BB186_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB186_26
.LBB186_19:                             //   in Loop: Header=BB186_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB186_25
// %bb.20:                              //   in Loop: Header=BB186_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB186_25
// %bb.21:                              //   in Loop: Header=BB186_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB186_25
// %bb.22:                              //   in Loop: Header=BB186_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB186_25
// %bb.23:                              //   in Loop: Header=BB186_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB186_25
// %bb.24:                              //   in Loop: Header=BB186_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB186_25:                             //   in Loop: Header=BB186_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB186_28
.LBB186_26:                             // %.preheader4
                                        //   in Loop: Header=BB186_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB186_27:                             //   Parent Loop BB186_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB186_27
.LBB186_28:                             //   in Loop: Header=BB186_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB186_16
// %bb.29:                              //   in Loop: Header=BB186_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB186_16
.LBB186_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI186_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI186_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB186_32
.LBB186_31:                             //   in Loop: Header=BB186_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB186_34
.LBB186_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB186_31
// %bb.33:                              //   in Loop: Header=BB186_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB186_31
.LBB186_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB186_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB186_38
.LBB186_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB186_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB186_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB186_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end186:
	.size	_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end186-_Z29test_while_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI187_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI187_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB187_34
// %bb.1:
	subs	w9, w20, #27
	b.lt	.LBB187_14
// %bb.2:
	mov	w8, #19419                      // =0x4bdb
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #12136, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI187_1
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI187_1]
	mov	w26, wzr
	lsr	x8, x8, #32
	sub	w27, w20, #26
	add	x28, x21, #104
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w9, w9, w8
	add	w8, w8, w9, lsr #1
	mov	w9, #27                         // =0x1b
	lsr	w8, w8, #4
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI187_0
	sub	w10, w20, w8
	add	w19, w8, #27
	ldr	d12, [x9, :lo12:.LCPI187_0]
	sub	w22, w10, #28
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB187_4
.LBB187_3:                              //   in Loop: Header=BB187_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB187_34
.LBB187_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB187_5 Depth 2
                                        //     Child Loop BB187_8 Depth 2
                                        //     Child Loop BB187_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB187_5:                              //   Parent Loop BB187_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-104]
	add	x8, x8, #27
	ldp	d3, d4, [x9, #-88]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-72]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-56]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-40]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-8]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #8]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d5, d7, [x9, #24]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d6
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #40]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #56]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #88]
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fmadd	d1, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #104]
	add	x9, x9, #216
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB187_5
// %bb.6:                               //   in Loop: Header=BB187_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB187_12
// %bb.7:                               //   in Loop: Header=BB187_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB187_10
.LBB187_8:                              //   Parent Loop BB187_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB187_8
// %bb.9:                               //   in Loop: Header=BB187_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB187_12
.LBB187_10:                             // %.preheader
                                        //   in Loop: Header=BB187_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB187_11:                             //   Parent Loop BB187_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB187_11
.LBB187_12:                             //   in Loop: Header=BB187_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB187_3
// %bb.13:                              //   in Loop: Header=BB187_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB187_3
.LBB187_14:
	cmp	w20, #0
	b.le	.LBB187_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI187_1
	ldr	d12, [x9, :lo12:.LCPI187_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI187_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI187_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB187_17
.LBB187_16:                             //   in Loop: Header=BB187_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB187_34
.LBB187_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB187_27 Depth 2
	cmp	w20, #3
	b.hi	.LBB187_19
// %bb.18:                              //   in Loop: Header=BB187_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB187_26
.LBB187_19:                             //   in Loop: Header=BB187_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB187_25
// %bb.20:                              //   in Loop: Header=BB187_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB187_25
// %bb.21:                              //   in Loop: Header=BB187_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB187_25
// %bb.22:                              //   in Loop: Header=BB187_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB187_25
// %bb.23:                              //   in Loop: Header=BB187_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB187_25
// %bb.24:                              //   in Loop: Header=BB187_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB187_25:                             //   in Loop: Header=BB187_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB187_28
.LBB187_26:                             // %.preheader4
                                        //   in Loop: Header=BB187_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB187_27:                             //   Parent Loop BB187_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB187_27
.LBB187_28:                             //   in Loop: Header=BB187_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB187_16
// %bb.29:                              //   in Loop: Header=BB187_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB187_16
.LBB187_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI187_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI187_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB187_32
.LBB187_31:                             //   in Loop: Header=BB187_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB187_34
.LBB187_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB187_31
// %bb.33:                              //   in Loop: Header=BB187_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB187_31
.LBB187_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB187_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB187_38
.LBB187_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB187_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB187_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB187_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end187:
	.size	_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end187-_Z29test_while_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI188_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI188_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB188_34
// %bb.1:
	subs	w9, w20, #26
	b.lt	.LBB188_14
// %bb.2:
	mov	w8, #60495                      // =0xec4f
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #20164, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #26                         // =0x1a
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI188_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #35
	ldr	d11, [x12, :lo12:.LCPI188_1]
	sub	w27, w20, #25
	add	x28, x21, #104
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI188_0
	sub	w10, w20, w8
	add	w19, w8, #26
	ldr	d12, [x9, :lo12:.LCPI188_0]
	sub	w22, w10, #27
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB188_4
.LBB188_3:                              //   in Loop: Header=BB188_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB188_34
.LBB188_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB188_5 Depth 2
                                        //     Child Loop BB188_8 Depth 2
                                        //     Child Loop BB188_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB188_5:                              //   Parent Loop BB188_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-104]
	add	x8, x8, #26
	ldp	d3, d4, [x9, #-88]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-72]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-40]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-24]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-8]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #8]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #24]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #40]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fmadd	d1, d1, d10, d8
	ldp	d6, d5, [x9, #56]
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d3, d3, d10, d8
	ldp	d6, d7, [x9, #72]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #88]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #208
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB188_5
// %bb.6:                               //   in Loop: Header=BB188_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB188_12
// %bb.7:                               //   in Loop: Header=BB188_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB188_10
.LBB188_8:                              //   Parent Loop BB188_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB188_8
// %bb.9:                               //   in Loop: Header=BB188_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB188_12
.LBB188_10:                             // %.preheader
                                        //   in Loop: Header=BB188_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB188_11:                             //   Parent Loop BB188_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB188_11
.LBB188_12:                             //   in Loop: Header=BB188_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB188_3
// %bb.13:                              //   in Loop: Header=BB188_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB188_3
.LBB188_14:
	cmp	w20, #0
	b.le	.LBB188_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI188_1
	ldr	d12, [x9, :lo12:.LCPI188_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI188_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI188_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB188_17
.LBB188_16:                             //   in Loop: Header=BB188_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB188_34
.LBB188_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB188_27 Depth 2
	cmp	w20, #3
	b.hi	.LBB188_19
// %bb.18:                              //   in Loop: Header=BB188_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB188_26
.LBB188_19:                             //   in Loop: Header=BB188_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB188_25
// %bb.20:                              //   in Loop: Header=BB188_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB188_25
// %bb.21:                              //   in Loop: Header=BB188_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB188_25
// %bb.22:                              //   in Loop: Header=BB188_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB188_25
// %bb.23:                              //   in Loop: Header=BB188_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB188_25
// %bb.24:                              //   in Loop: Header=BB188_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB188_25:                             //   in Loop: Header=BB188_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB188_28
.LBB188_26:                             // %.preheader4
                                        //   in Loop: Header=BB188_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB188_27:                             //   Parent Loop BB188_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB188_27
.LBB188_28:                             //   in Loop: Header=BB188_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB188_16
// %bb.29:                              //   in Loop: Header=BB188_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB188_16
.LBB188_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI188_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI188_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB188_32
.LBB188_31:                             //   in Loop: Header=BB188_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB188_34
.LBB188_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB188_31
// %bb.33:                              //   in Loop: Header=BB188_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB188_31
.LBB188_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB188_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB188_38
.LBB188_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB188_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB188_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB188_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end188:
	.size	_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end188-_Z29test_while_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI189_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI189_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB189_34
// %bb.1:
	subs	w9, w20, #25
	b.lt	.LBB189_14
// %bb.2:
	mov	w8, #34079                      // =0x851f
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #20971, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #25                         // =0x19
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI189_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #35
	ldr	d11, [x12, :lo12:.LCPI189_1]
	sub	w27, w20, #24
	add	x28, x21, #96
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI189_0
	sub	w10, w20, w8
	add	w19, w8, #25
	ldr	d12, [x9, :lo12:.LCPI189_0]
	sub	w22, w10, #26
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB189_4
.LBB189_3:                              //   in Loop: Header=BB189_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB189_34
.LBB189_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB189_5 Depth 2
                                        //     Child Loop BB189_8 Depth 2
                                        //     Child Loop BB189_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB189_5:                              //   Parent Loop BB189_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-96]
	add	x8, x8, #25
	ldp	d3, d4, [x9, #-80]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-32]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-16]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #16]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d2, d2, d10, d8
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	fadd	d2, d2, d9
	ldp	d7, d6, [x9, #32]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #48]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #64]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #80]
	fadd	d7, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d5
	fmadd	d5, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #96]
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	add	x9, x9, #200
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB189_5
// %bb.6:                               //   in Loop: Header=BB189_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB189_12
// %bb.7:                               //   in Loop: Header=BB189_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB189_10
.LBB189_8:                              //   Parent Loop BB189_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB189_8
// %bb.9:                               //   in Loop: Header=BB189_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB189_12
.LBB189_10:                             // %.preheader
                                        //   in Loop: Header=BB189_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB189_11:                             //   Parent Loop BB189_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB189_11
.LBB189_12:                             //   in Loop: Header=BB189_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB189_3
// %bb.13:                              //   in Loop: Header=BB189_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB189_3
.LBB189_14:
	cmp	w20, #0
	b.le	.LBB189_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI189_1
	ldr	d12, [x9, :lo12:.LCPI189_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI189_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI189_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB189_17
.LBB189_16:                             //   in Loop: Header=BB189_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB189_34
.LBB189_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB189_27 Depth 2
	cmp	w20, #3
	b.hi	.LBB189_19
// %bb.18:                              //   in Loop: Header=BB189_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB189_26
.LBB189_19:                             //   in Loop: Header=BB189_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB189_25
// %bb.20:                              //   in Loop: Header=BB189_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB189_25
// %bb.21:                              //   in Loop: Header=BB189_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB189_25
// %bb.22:                              //   in Loop: Header=BB189_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB189_25
// %bb.23:                              //   in Loop: Header=BB189_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB189_25
// %bb.24:                              //   in Loop: Header=BB189_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB189_25:                             //   in Loop: Header=BB189_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB189_28
.LBB189_26:                             // %.preheader4
                                        //   in Loop: Header=BB189_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB189_27:                             //   Parent Loop BB189_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB189_27
.LBB189_28:                             //   in Loop: Header=BB189_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB189_16
// %bb.29:                              //   in Loop: Header=BB189_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB189_16
.LBB189_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI189_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI189_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB189_32
.LBB189_31:                             //   in Loop: Header=BB189_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB189_34
.LBB189_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB189_31
// %bb.33:                              //   in Loop: Header=BB189_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB189_31
.LBB189_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB189_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB189_38
.LBB189_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB189_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB189_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB189_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end189:
	.size	_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end189-_Z29test_while_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI190_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI190_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB190_33
// %bb.1:
	subs	w9, w20, #24
	b.lt	.LBB190_14
// %bb.2:
	mov	w8, #43691                      // =0xaaab
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #43690, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x11, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI190_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #36
	fmov	d10, x10
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI190_1]
	mov	w26, wzr
	sub	w27, w20, #23
	add	w8, w8, w8, lsl #1
	add	x28, x21, #96
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	lsl	w8, w8, #3
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w9, w20, w8
	add	w19, w8, #24
	sub	w22, w9, #25
	add	x8, x21, w19, uxtw #3
	adrp	x9, .LCPI190_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI190_0]
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB190_4
.LBB190_3:                              //   in Loop: Header=BB190_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB190_33
.LBB190_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB190_5 Depth 2
                                        //     Child Loop BB190_8 Depth 2
                                        //     Child Loop BB190_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB190_5:                              //   Parent Loop BB190_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-96]
	add	x8, x8, #24
	ldp	d3, d4, [x9, #-80]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-32]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #16]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #32]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #48]
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d1, d1, d10, d8
	ldp	d6, d7, [x9, #64]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #80]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #192
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB190_5
// %bb.6:                               //   in Loop: Header=BB190_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB190_12
// %bb.7:                               //   in Loop: Header=BB190_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB190_10
.LBB190_8:                              //   Parent Loop BB190_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB190_8
// %bb.9:                               //   in Loop: Header=BB190_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB190_12
.LBB190_10:                             // %.preheader
                                        //   in Loop: Header=BB190_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB190_11:                             //   Parent Loop BB190_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB190_11
.LBB190_12:                             //   in Loop: Header=BB190_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB190_3
// %bb.13:                              //   in Loop: Header=BB190_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB190_3
.LBB190_14:
	cmp	w20, #0
	b.le	.LBB190_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI190_1
	ldr	d12, [x9, :lo12:.LCPI190_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI190_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI190_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB190_17
.LBB190_16:                             //   in Loop: Header=BB190_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB190_33
.LBB190_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB190_26 Depth 2
	cmp	w20, #3
	b.hi	.LBB190_19
// %bb.18:                              //   in Loop: Header=BB190_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB190_25
.LBB190_19:                             //   in Loop: Header=BB190_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB190_24
// %bb.20:                              //   in Loop: Header=BB190_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB190_24
// %bb.21:                              //   in Loop: Header=BB190_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB190_24
// %bb.22:                              //   in Loop: Header=BB190_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB190_24
// %bb.23:                              //   in Loop: Header=BB190_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB190_24:                             //   in Loop: Header=BB190_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB190_27
.LBB190_25:                             // %.preheader4
                                        //   in Loop: Header=BB190_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB190_26:                             //   Parent Loop BB190_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB190_26
.LBB190_27:                             //   in Loop: Header=BB190_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB190_16
// %bb.28:                              //   in Loop: Header=BB190_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB190_16
.LBB190_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI190_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI190_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB190_31
.LBB190_30:                             //   in Loop: Header=BB190_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB190_33
.LBB190_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB190_30
// %bb.32:                              //   in Loop: Header=BB190_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB190_30
.LBB190_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB190_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB190_37
.LBB190_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB190_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB190_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB190_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end190:
	.size	_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end190-_Z29test_while_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI191_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI191_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB191_33
// %bb.1:
	subs	w9, w20, #23
	b.lt	.LBB191_14
// %bb.2:
	mov	w8, #17097                      // =0x42c9
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #45590, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #23                         // =0x17
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI191_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #36
	ldr	d11, [x12, :lo12:.LCPI191_1]
	sub	w27, w20, #22
	add	x28, x21, #88
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI191_0
	sub	w10, w20, w8
	add	w19, w8, #23
	ldr	d12, [x9, :lo12:.LCPI191_0]
	sub	w22, w10, #24
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB191_4
.LBB191_3:                              //   in Loop: Header=BB191_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB191_33
.LBB191_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB191_5 Depth 2
                                        //     Child Loop BB191_8 Depth 2
                                        //     Child Loop BB191_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB191_5:                              //   Parent Loop BB191_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-88]
	add	x8, x8, #23
	ldp	d3, d4, [x9, #-72]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-24]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-8]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #8]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #24]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #40]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #56]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #72]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #88]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #184
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB191_5
// %bb.6:                               //   in Loop: Header=BB191_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB191_12
// %bb.7:                               //   in Loop: Header=BB191_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB191_10
.LBB191_8:                              //   Parent Loop BB191_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB191_8
// %bb.9:                               //   in Loop: Header=BB191_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB191_12
.LBB191_10:                             // %.preheader
                                        //   in Loop: Header=BB191_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB191_11:                             //   Parent Loop BB191_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB191_11
.LBB191_12:                             //   in Loop: Header=BB191_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB191_3
// %bb.13:                              //   in Loop: Header=BB191_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB191_3
.LBB191_14:
	cmp	w20, #0
	b.le	.LBB191_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI191_1
	ldr	d12, [x9, :lo12:.LCPI191_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI191_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI191_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB191_17
.LBB191_16:                             //   in Loop: Header=BB191_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB191_33
.LBB191_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB191_26 Depth 2
	cmp	w20, #3
	b.hi	.LBB191_19
// %bb.18:                              //   in Loop: Header=BB191_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB191_25
.LBB191_19:                             //   in Loop: Header=BB191_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB191_24
// %bb.20:                              //   in Loop: Header=BB191_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB191_24
// %bb.21:                              //   in Loop: Header=BB191_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB191_24
// %bb.22:                              //   in Loop: Header=BB191_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB191_24
// %bb.23:                              //   in Loop: Header=BB191_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB191_24:                             //   in Loop: Header=BB191_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB191_27
.LBB191_25:                             // %.preheader4
                                        //   in Loop: Header=BB191_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB191_26:                             //   Parent Loop BB191_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB191_26
.LBB191_27:                             //   in Loop: Header=BB191_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB191_16
// %bb.28:                              //   in Loop: Header=BB191_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB191_16
.LBB191_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI191_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI191_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB191_31
.LBB191_30:                             //   in Loop: Header=BB191_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB191_33
.LBB191_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB191_30
// %bb.32:                              //   in Loop: Header=BB191_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB191_30
.LBB191_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB191_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB191_37
.LBB191_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB191_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB191_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB191_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end191:
	.size	_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end191-_Z29test_while_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI192_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI192_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB192_33
// %bb.1:
	subs	w9, w20, #22
	b.lt	.LBB192_14
// %bb.2:
	mov	w8, #35747                      // =0x8ba3
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #47662, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #22                         // =0x16
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI192_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #36
	ldr	d11, [x12, :lo12:.LCPI192_1]
	sub	w27, w20, #21
	add	x28, x21, #88
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI192_0
	sub	w10, w20, w8
	add	w19, w8, #22
	ldr	d12, [x9, :lo12:.LCPI192_0]
	sub	w22, w10, #23
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB192_4
.LBB192_3:                              //   in Loop: Header=BB192_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB192_33
.LBB192_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB192_5 Depth 2
                                        //     Child Loop BB192_8 Depth 2
                                        //     Child Loop BB192_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB192_5:                              //   Parent Loop BB192_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-88]
	add	x8, x8, #22
	ldp	d3, d4, [x9, #-72]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-24]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-8]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #8]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #56]
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d6, d10, d8
	fadd	d6, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d4, d4, d9
	ldp	d7, d5, [x9, #72]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	add	x9, x9, #176
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB192_5
// %bb.6:                               //   in Loop: Header=BB192_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB192_12
// %bb.7:                               //   in Loop: Header=BB192_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB192_10
.LBB192_8:                              //   Parent Loop BB192_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB192_8
// %bb.9:                               //   in Loop: Header=BB192_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB192_12
.LBB192_10:                             // %.preheader
                                        //   in Loop: Header=BB192_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB192_11:                             //   Parent Loop BB192_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB192_11
.LBB192_12:                             //   in Loop: Header=BB192_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB192_3
// %bb.13:                              //   in Loop: Header=BB192_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB192_3
.LBB192_14:
	cmp	w20, #0
	b.le	.LBB192_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI192_1
	ldr	d12, [x9, :lo12:.LCPI192_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI192_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI192_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB192_17
.LBB192_16:                             //   in Loop: Header=BB192_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB192_33
.LBB192_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB192_26 Depth 2
	cmp	w20, #3
	b.hi	.LBB192_19
// %bb.18:                              //   in Loop: Header=BB192_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB192_25
.LBB192_19:                             //   in Loop: Header=BB192_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB192_24
// %bb.20:                              //   in Loop: Header=BB192_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB192_24
// %bb.21:                              //   in Loop: Header=BB192_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB192_24
// %bb.22:                              //   in Loop: Header=BB192_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB192_24
// %bb.23:                              //   in Loop: Header=BB192_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB192_24:                             //   in Loop: Header=BB192_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB192_27
.LBB192_25:                             // %.preheader4
                                        //   in Loop: Header=BB192_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB192_26:                             //   Parent Loop BB192_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB192_26
.LBB192_27:                             //   in Loop: Header=BB192_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB192_16
// %bb.28:                              //   in Loop: Header=BB192_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB192_16
.LBB192_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI192_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI192_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB192_31
.LBB192_30:                             //   in Loop: Header=BB192_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB192_33
.LBB192_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB192_30
// %bb.32:                              //   in Loop: Header=BB192_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB192_30
.LBB192_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB192_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB192_37
.LBB192_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB192_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB192_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB192_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end192:
	.size	_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end192-_Z29test_while_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI193_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI193_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB193_33
// %bb.1:
	subs	w9, w20, #21
	b.lt	.LBB193_14
// %bb.2:
	mov	w8, #24967                      // =0x6187
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #34328, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI193_1
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI193_1]
	mov	w26, wzr
	lsr	x8, x8, #32
	sub	w27, w20, #20
	add	x28, x21, #80
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w9, w9, w8
	add	w8, w8, w9, lsr #1
	mov	w9, #21                         // =0x15
	lsr	w8, w8, #4
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI193_0
	sub	w10, w20, w8
	add	w19, w8, #21
	ldr	d12, [x9, :lo12:.LCPI193_0]
	sub	w22, w10, #22
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB193_4
.LBB193_3:                              //   in Loop: Header=BB193_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB193_33
.LBB193_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB193_5 Depth 2
                                        //     Child Loop BB193_8 Depth 2
                                        //     Child Loop BB193_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB193_5:                              //   Parent Loop BB193_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-80]
	add	x8, x8, #21
	ldp	d3, d4, [x9, #-64]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-48]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-32]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-16]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9]
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d2
	fadd	d4, d4, d9
	ldp	d7, d2, [x9, #16]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #32]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #64]
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fmadd	d1, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #80]
	add	x9, x9, #168
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB193_5
// %bb.6:                               //   in Loop: Header=BB193_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB193_12
// %bb.7:                               //   in Loop: Header=BB193_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB193_10
.LBB193_8:                              //   Parent Loop BB193_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB193_8
// %bb.9:                               //   in Loop: Header=BB193_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB193_12
.LBB193_10:                             // %.preheader
                                        //   in Loop: Header=BB193_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB193_11:                             //   Parent Loop BB193_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB193_11
.LBB193_12:                             //   in Loop: Header=BB193_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB193_3
// %bb.13:                              //   in Loop: Header=BB193_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB193_3
.LBB193_14:
	cmp	w20, #0
	b.le	.LBB193_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI193_1
	ldr	d12, [x9, :lo12:.LCPI193_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI193_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI193_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB193_17
.LBB193_16:                             //   in Loop: Header=BB193_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB193_33
.LBB193_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB193_26 Depth 2
	cmp	w20, #3
	b.hi	.LBB193_19
// %bb.18:                              //   in Loop: Header=BB193_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB193_25
.LBB193_19:                             //   in Loop: Header=BB193_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB193_24
// %bb.20:                              //   in Loop: Header=BB193_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB193_24
// %bb.21:                              //   in Loop: Header=BB193_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB193_24
// %bb.22:                              //   in Loop: Header=BB193_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB193_24
// %bb.23:                              //   in Loop: Header=BB193_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB193_24:                             //   in Loop: Header=BB193_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB193_27
.LBB193_25:                             // %.preheader4
                                        //   in Loop: Header=BB193_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB193_26:                             //   Parent Loop BB193_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB193_26
.LBB193_27:                             //   in Loop: Header=BB193_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB193_16
// %bb.28:                              //   in Loop: Header=BB193_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB193_16
.LBB193_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI193_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI193_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB193_31
.LBB193_30:                             //   in Loop: Header=BB193_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB193_33
.LBB193_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB193_30
// %bb.32:                              //   in Loop: Header=BB193_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB193_30
.LBB193_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB193_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB193_37
.LBB193_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB193_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB193_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB193_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end193:
	.size	_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end193-_Z29test_while_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN16while_loop_testsILi19EdE7do_testEPKdPKc,"axG",@progbits,_ZN16while_loop_testsILi19EdE7do_testEPKdPKc,comdat
	.weak	_ZN16while_loop_testsILi19EdE7do_testEPKdPKc // -- Begin function _ZN16while_loop_testsILi19EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN16while_loop_testsILi19EdE7do_testEPKdPKc,@function
_ZN16while_loop_testsILi19EdE7do_testEPKdPKc: // @_ZN16while_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN16while_loop_testsILi10EdE7do_testEPKdPKc
	adrp	x20, temp_string+1000
	add	x20, x20, :lo12:temp_string+1000
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
.Lfunc_end194:
	.size	_ZN16while_loop_testsILi19EdE7do_testEPKdPKc, .Lfunc_end194-_ZN16while_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI195_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI195_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB195_32
// %bb.1:
	subs	w9, w20, #20
	b.lt	.LBB195_14
// %bb.2:
	mov	w8, #52429                      // =0xcccd
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #52428, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x11, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI195_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #36
	fmov	d10, x10
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI195_1]
	mov	w26, wzr
	sub	w27, w20, #19
	add	w8, w8, w8, lsl #2
	add	x28, x21, #80
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	lsl	w8, w8, #2
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w9, w20, w8
	add	w19, w8, #20
	sub	w22, w9, #21
	add	x8, x21, w19, uxtw #3
	adrp	x9, .LCPI195_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI195_0]
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB195_4
.LBB195_3:                              //   in Loop: Header=BB195_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB195_32
.LBB195_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB195_5 Depth 2
                                        //     Child Loop BB195_8 Depth 2
                                        //     Child Loop BB195_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB195_5:                              //   Parent Loop BB195_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-80]
	add	x8, x8, #20
	ldp	d3, d4, [x9, #-64]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-48]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-32]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-16]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #16]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fmadd	d1, d1, d10, d8
	ldp	d6, d5, [x9, #32]
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d3, d3, d10, d8
	ldp	d6, d7, [x9, #48]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #64]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #160
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB195_5
// %bb.6:                               //   in Loop: Header=BB195_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB195_12
// %bb.7:                               //   in Loop: Header=BB195_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB195_10
.LBB195_8:                              //   Parent Loop BB195_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB195_8
// %bb.9:                               //   in Loop: Header=BB195_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB195_12
.LBB195_10:                             // %.preheader
                                        //   in Loop: Header=BB195_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB195_11:                             //   Parent Loop BB195_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB195_11
.LBB195_12:                             //   in Loop: Header=BB195_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB195_3
// %bb.13:                              //   in Loop: Header=BB195_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB195_3
.LBB195_14:
	cmp	w20, #0
	b.le	.LBB195_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI195_1
	ldr	d12, [x9, :lo12:.LCPI195_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI195_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI195_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB195_17
.LBB195_16:                             //   in Loop: Header=BB195_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB195_32
.LBB195_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB195_25 Depth 2
	cmp	w20, #3
	b.hi	.LBB195_19
// %bb.18:                              //   in Loop: Header=BB195_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB195_24
.LBB195_19:                             //   in Loop: Header=BB195_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB195_23
// %bb.20:                              //   in Loop: Header=BB195_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB195_23
// %bb.21:                              //   in Loop: Header=BB195_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB195_23
// %bb.22:                              //   in Loop: Header=BB195_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB195_23:                             //   in Loop: Header=BB195_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB195_26
.LBB195_24:                             // %.preheader4
                                        //   in Loop: Header=BB195_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB195_25:                             //   Parent Loop BB195_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB195_25
.LBB195_26:                             //   in Loop: Header=BB195_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB195_16
// %bb.27:                              //   in Loop: Header=BB195_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB195_16
.LBB195_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI195_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI195_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB195_30
.LBB195_29:                             //   in Loop: Header=BB195_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB195_32
.LBB195_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB195_29
// %bb.31:                              //   in Loop: Header=BB195_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB195_29
.LBB195_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB195_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB195_36
.LBB195_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB195_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB195_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB195_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end195:
	.size	_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end195-_Z29test_while_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI196_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI196_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB196_32
// %bb.1:
	subs	w9, w20, #19
	b.lt	.LBB196_14
// %bb.2:
	mov	w8, #27595                      // =0x6bcb
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #44840, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI196_1
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI196_1]
	mov	w26, wzr
	lsr	x8, x8, #32
	sub	w27, w20, #18
	add	x28, x21, #72
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w9, w9, w8
	add	w8, w8, w9, lsr #1
	mov	w9, #19                         // =0x13
	lsr	w8, w8, #4
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI196_0
	sub	w10, w20, w8
	add	w19, w8, #19
	ldr	d12, [x9, :lo12:.LCPI196_0]
	sub	w22, w10, #20
	add	x8, x21, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB196_4
.LBB196_3:                              //   in Loop: Header=BB196_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB196_32
.LBB196_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB196_5 Depth 2
                                        //     Child Loop BB196_8 Depth 2
                                        //     Child Loop BB196_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB196_5:                              //   Parent Loop BB196_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-72]
	add	x8, x8, #19
	ldp	d3, d4, [x9, #-56]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-8]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #8]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #56]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d5
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #72]
	add	x9, x9, #152
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB196_5
// %bb.6:                               //   in Loop: Header=BB196_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB196_12
// %bb.7:                               //   in Loop: Header=BB196_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB196_10
.LBB196_8:                              //   Parent Loop BB196_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB196_8
// %bb.9:                               //   in Loop: Header=BB196_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB196_12
.LBB196_10:                             // %.preheader
                                        //   in Loop: Header=BB196_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB196_11:                             //   Parent Loop BB196_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB196_11
.LBB196_12:                             //   in Loop: Header=BB196_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB196_3
// %bb.13:                              //   in Loop: Header=BB196_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB196_3
.LBB196_14:
	cmp	w20, #0
	b.le	.LBB196_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI196_1
	ldr	d12, [x9, :lo12:.LCPI196_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI196_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI196_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB196_17
.LBB196_16:                             //   in Loop: Header=BB196_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB196_32
.LBB196_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB196_25 Depth 2
	cmp	w20, #3
	b.hi	.LBB196_19
// %bb.18:                              //   in Loop: Header=BB196_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB196_24
.LBB196_19:                             //   in Loop: Header=BB196_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB196_23
// %bb.20:                              //   in Loop: Header=BB196_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB196_23
// %bb.21:                              //   in Loop: Header=BB196_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB196_23
// %bb.22:                              //   in Loop: Header=BB196_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB196_23:                             //   in Loop: Header=BB196_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB196_26
.LBB196_24:                             // %.preheader4
                                        //   in Loop: Header=BB196_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB196_25:                             //   Parent Loop BB196_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB196_25
.LBB196_26:                             //   in Loop: Header=BB196_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB196_16
// %bb.27:                              //   in Loop: Header=BB196_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB196_16
.LBB196_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI196_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI196_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB196_30
.LBB196_29:                             //   in Loop: Header=BB196_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB196_32
.LBB196_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB196_29
// %bb.31:                              //   in Loop: Header=BB196_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB196_29
.LBB196_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB196_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB196_36
.LBB196_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB196_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB196_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB196_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end196:
	.size	_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end196-_Z29test_while_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI197_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI197_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB197_32
// %bb.1:
	subs	w9, w20, #18
	b.lt	.LBB197_14
// %bb.2:
	mov	w8, #36409                      // =0x8e39
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #14563, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x11, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI197_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #34
	fmov	d10, x10
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI197_1]
	mov	w26, wzr
	sub	w27, w20, #17
	add	w8, w8, w8, lsl #3
	add	x28, x21, #72
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	lsl	w8, w8, #1
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w9, w20, w8
	add	w19, w8, #18
	sub	w22, w9, #19
	add	x8, x21, w19, uxtw #3
	adrp	x9, .LCPI197_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI197_0]
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB197_4
.LBB197_3:                              //   in Loop: Header=BB197_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB197_32
.LBB197_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB197_5 Depth 2
                                        //     Child Loop BB197_8 Depth 2
                                        //     Child Loop BB197_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB197_5:                              //   Parent Loop BB197_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-72]
	add	x8, x8, #18
	ldp	d3, d4, [x9, #-56]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	ldp	d4, d5, [x9, #8]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #24]
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #40]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #56]
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	add	x9, x9, #144
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB197_5
// %bb.6:                               //   in Loop: Header=BB197_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB197_12
// %bb.7:                               //   in Loop: Header=BB197_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB197_10
.LBB197_8:                              //   Parent Loop BB197_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB197_8
// %bb.9:                               //   in Loop: Header=BB197_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB197_12
.LBB197_10:                             // %.preheader
                                        //   in Loop: Header=BB197_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB197_11:                             //   Parent Loop BB197_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB197_11
.LBB197_12:                             //   in Loop: Header=BB197_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB197_3
// %bb.13:                              //   in Loop: Header=BB197_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB197_3
.LBB197_14:
	cmp	w20, #0
	b.le	.LBB197_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI197_1
	ldr	d12, [x9, :lo12:.LCPI197_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI197_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI197_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB197_17
.LBB197_16:                             //   in Loop: Header=BB197_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB197_32
.LBB197_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB197_25 Depth 2
	cmp	w20, #3
	b.hi	.LBB197_19
// %bb.18:                              //   in Loop: Header=BB197_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB197_24
.LBB197_19:                             //   in Loop: Header=BB197_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB197_23
// %bb.20:                              //   in Loop: Header=BB197_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB197_23
// %bb.21:                              //   in Loop: Header=BB197_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB197_23
// %bb.22:                              //   in Loop: Header=BB197_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB197_23:                             //   in Loop: Header=BB197_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB197_26
.LBB197_24:                             // %.preheader4
                                        //   in Loop: Header=BB197_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB197_25:                             //   Parent Loop BB197_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB197_25
.LBB197_26:                             //   in Loop: Header=BB197_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB197_16
// %bb.27:                              //   in Loop: Header=BB197_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB197_16
.LBB197_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI197_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI197_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB197_30
.LBB197_29:                             //   in Loop: Header=BB197_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB197_32
.LBB197_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB197_29
// %bb.31:                              //   in Loop: Header=BB197_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB197_29
.LBB197_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB197_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB197_36
.LBB197_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB197_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB197_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB197_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end197:
	.size	_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end197-_Z29test_while_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI198_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI198_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB198_32
// %bb.1:
	subs	w9, w20, #17
	b.lt	.LBB198_14
// %bb.2:
	mov	w8, #61681                      // =0xf0f1
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #61680, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x11, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI198_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #36
	fmov	d10, x10
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI198_1]
	mov	w26, wzr
	sub	w27, w20, #16
	add	w8, w8, w8, lsl #4
	add	x28, x21, #64
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w9, w20, w8
	add	w19, w8, #17
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w22, w9, #18
	add	x8, x21, w19, uxtw #3
	adrp	x9, .LCPI198_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI198_0]
	and	x23, x10, #0x1fffffffc
	add	x25, x8, #16
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB198_4
.LBB198_3:                              //   in Loop: Header=BB198_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB198_32
.LBB198_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB198_5 Depth 2
                                        //     Child Loop BB198_8 Depth 2
                                        //     Child Loop BB198_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB198_5:                              //   Parent Loop BB198_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-64]
	add	x8, x8, #17
	ldp	d3, d4, [x9, #-48]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-32]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #16]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #32]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #48]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #64]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #136
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB198_5
// %bb.6:                               //   in Loop: Header=BB198_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB198_12
// %bb.7:                               //   in Loop: Header=BB198_4 Depth=1
	cmp	w22, #3
	mov	x10, x19
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB198_10
.LBB198_8:                              //   Parent Loop BB198_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB198_8
// %bb.9:                               //   in Loop: Header=BB198_4 Depth=1
	ldur	x8, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB198_12
.LBB198_10:                             // %.preheader
                                        //   in Loop: Header=BB198_4 Depth=1
	add	x8, x21, x10, lsl #3
.LBB198_11:                             //   Parent Loop BB198_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w20, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB198_11
.LBB198_12:                             //   in Loop: Header=BB198_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB198_3
// %bb.13:                              //   in Loop: Header=BB198_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB198_3
.LBB198_14:
	cmp	w20, #0
	b.le	.LBB198_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI198_1
	ldr	d12, [x9, :lo12:.LCPI198_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI198_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI198_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB198_17
.LBB198_16:                             //   in Loop: Header=BB198_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB198_32
.LBB198_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB198_25 Depth 2
	cmp	w20, #3
	b.hi	.LBB198_19
// %bb.18:                              //   in Loop: Header=BB198_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB198_24
.LBB198_19:                             //   in Loop: Header=BB198_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB198_23
// %bb.20:                              //   in Loop: Header=BB198_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB198_23
// %bb.21:                              //   in Loop: Header=BB198_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB198_23
// %bb.22:                              //   in Loop: Header=BB198_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB198_23:                             //   in Loop: Header=BB198_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB198_26
.LBB198_24:                             // %.preheader4
                                        //   in Loop: Header=BB198_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB198_25:                             //   Parent Loop BB198_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB198_25
.LBB198_26:                             //   in Loop: Header=BB198_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB198_16
// %bb.27:                              //   in Loop: Header=BB198_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB198_16
.LBB198_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI198_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI198_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB198_30
.LBB198_29:                             //   in Loop: Header=BB198_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB198_32
.LBB198_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB198_29
// %bb.31:                              //   in Loop: Header=BB198_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB198_29
.LBB198_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB198_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB198_36
.LBB198_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB198_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB198_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB198_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end198:
	.size	_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end198-_Z29test_while_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI199_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI199_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB199_25
// %bb.1:
	subs	w9, w21, #16
	b.lt	.LBB199_14
// %bb.2:
	and	w8, w9, #0xfffffff0
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v18.2d, #-13.00000000
	sub	w9, w21, w8
	add	w24, w8, #16
	mov	x8, #253411660398592            // =0xe67a00000000
	sub	w19, w9, #17
	movk	x8, #16683, lsl #48
	movk	x10, #16584, lsl #48
	add	x11, x19, #1
	dup	v17.2d, x8
	fmov	d9, x8
	and	x22, x11, #0x1fffffffc
	add	x9, x20, w24, uxtw #3
	dup	v16.2d, x10
	add	x8, x22, x24
	fmov	d8, x10
	fmov	d10, #-13.00000000
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	adrp	x8, .LCPI199_1
	mov	w26, wzr
	ldr	d11, [x8, :lo12:.LCPI199_1]
	adrp	x8, .LCPI199_0
	sub	w27, w21, #15
	ldr	d12, [x8, :lo12:.LCPI199_0]
	mov	x8, #70368744177664             // =0x400000000000
	add	x28, x20, #64
	movk	x8, #49343, lsl #48
	add	x9, x9, #16
	adrp	x23, init_value
	fmov	d13, x8
	stp	x11, x9, [sp, #16]              // 16-byte Folded Spill
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	b	.LBB199_4
.LBB199_3:                              //   in Loop: Header=BB199_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB199_25
.LBB199_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB199_5 Depth 2
                                        //     Child Loop BB199_8 Depth 2
                                        //     Child Loop BB199_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB199_5:                              //   Parent Loop BB199_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-64]
	add	x8, x8, #16
	ldp	d3, d4, [x9, #-48]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-32]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-16]
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d3
	ldp	d2, d3, [x9]
	fadd	d7, d7, d8
	fadd	d2, d2, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d4
	fadd	d3, d3, d8
	fmadd	d7, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d5
	fmadd	d1, d1, d9, d10
	fmadd	d3, d3, d9, d10
	ldp	d4, d5, [x9, #16]
	fadd	d7, d7, d8
	fadd	d2, d2, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d6
	fadd	d1, d1, d8
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fmadd	d7, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #32]
	fadd	d2, d2, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fadd	d6, d6, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d1, d6, d9, d10
	fadd	d6, d7, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d9, d10
	fadd	d4, d4, d8
	ldp	d7, d5, [x9, #48]
	add	x9, x9, #128
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d7, d7, d8
	fadd	d0, d0, d3
	fadd	d2, d2, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fmadd	d5, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d3
	fmadd	d3, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d1, d1, d9, d10
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB199_5
// %bb.6:                               //   in Loop: Header=BB199_4 Depth=1
	cmp	w24, w21
	b.ge	.LBB199_12
// %bb.7:                               //   in Loop: Header=BB199_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w19, #3
	mov	x10, x24
	mov	x9, x22
	b.lo	.LBB199_10
.LBB199_8:                              //   Parent Loop BB199_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB199_8
// %bb.9:                               //   in Loop: Header=BB199_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x22
	b.eq	.LBB199_12
.LBB199_10:                             // %.preheader
                                        //   in Loop: Header=BB199_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB199_11:                             //   Parent Loop BB199_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.gt	.LBB199_11
.LBB199_12:                             //   in Loop: Header=BB199_4 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB199_3
// %bb.13:                              //   in Loop: Header=BB199_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB199_3
.LBB199_14:
	cmp	w21, #0
	b.le	.LBB199_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI199_1
	adrp	x10, .LCPI199_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI199_1]
	ldr	d12, [x10, :lo12:.LCPI199_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB199_17
.LBB199_16:                             //   in Loop: Header=BB199_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB199_25
.LBB199_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB199_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB199_18:                             //   Parent Loop BB199_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB199_18
// %bb.19:                              //   in Loop: Header=BB199_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB199_16
// %bb.20:                              //   in Loop: Header=BB199_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB199_16
.LBB199_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI199_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI199_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB199_23
.LBB199_22:                             //   in Loop: Header=BB199_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB199_25
.LBB199_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB199_22
// %bb.24:                              //   in Loop: Header=BB199_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB199_22
.LBB199_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB199_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB199_29
.LBB199_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB199_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB199_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB199_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end199:
	.size	_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end199-_Z29test_while_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI200_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI200_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB200_25
// %bb.1:
	subs	w9, w21, #15
	b.lt	.LBB200_14
// %bb.2:
	mov	w8, #34953                      // =0x8889
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w8, #34952, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI200_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #35
	fmov	d10, x10
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI200_1]
	mov	w26, wzr
	sub	w27, w21, #14
	lsl	w11, w8, #4
	add	x28, x20, #56
	adrp	x24, init_value
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	sub	w8, w11, w8
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	sub	w9, w21, w8
	add	w19, w8, #15
	sub	w22, w9, #16
	add	x8, x20, w19, uxtw #3
	adrp	x9, .LCPI200_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI200_0]
	and	x23, x10, #0x1fffffffc
	add	x8, x8, #16
	stp	x10, x8, [sp, #16]              // 16-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB200_4
.LBB200_3:                              //   in Loop: Header=BB200_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB200_25
.LBB200_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB200_5 Depth 2
                                        //     Child Loop BB200_8 Depth 2
                                        //     Child Loop BB200_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB200_5:                              //   Parent Loop BB200_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-56]
	add	x8, x8, #15
	ldp	d3, d4, [x9, #-40]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #8]
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #24]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d7, d7, d9
	ldp	d6, d5, [x9, #40]
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fmadd	d1, d7, d10, d8
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d5, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #56]
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	add	x9, x9, #120
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB200_5
// %bb.6:                               //   in Loop: Header=BB200_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB200_12
// %bb.7:                               //   in Loop: Header=BB200_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w22, #3
	mov	x10, x19
	mov	x9, x23
	b.lo	.LBB200_10
.LBB200_8:                              //   Parent Loop BB200_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB200_8
// %bb.9:                               //   in Loop: Header=BB200_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB200_12
.LBB200_10:                             // %.preheader
                                        //   in Loop: Header=BB200_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB200_11:                             //   Parent Loop BB200_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB200_11
.LBB200_12:                             //   in Loop: Header=BB200_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB200_3
// %bb.13:                              //   in Loop: Header=BB200_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB200_3
.LBB200_14:
	cmp	w21, #0
	b.le	.LBB200_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI200_1
	adrp	x10, .LCPI200_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI200_1]
	ldr	d12, [x10, :lo12:.LCPI200_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB200_17
.LBB200_16:                             //   in Loop: Header=BB200_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB200_25
.LBB200_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB200_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB200_18:                             //   Parent Loop BB200_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB200_18
// %bb.19:                              //   in Loop: Header=BB200_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB200_16
// %bb.20:                              //   in Loop: Header=BB200_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB200_16
.LBB200_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI200_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI200_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB200_23
.LBB200_22:                             //   in Loop: Header=BB200_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB200_25
.LBB200_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB200_22
// %bb.24:                              //   in Loop: Header=BB200_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB200_22
.LBB200_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB200_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB200_29
.LBB200_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB200_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB200_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB200_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end200:
	.size	_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end200-_Z29test_while_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI201_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI201_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x24, iterations
	adrp	x9, start_time
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB201_25
// %bb.1:
	subs	w9, w21, #14
	b.lt	.LBB201_14
// %bb.2:
	lsr	w8, w9, #1
	mov	w9, #9363                       // =0x2493
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w9, #37449, lsl #16
	movk	x10, #16584, lsl #48
	mov	x11, #253411660398592           // =0xe67a00000000
	umull	x8, w8, w9
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI201_1
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #34
	ldr	d11, [x12, :lo12:.LCPI201_1]
	mov	w26, wzr
	sub	w27, w21, #13
	add	x28, x20, #56
	adrp	x13, init_value
	lsl	w9, w8, #4
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	sub	w8, w9, w8, lsl #1
	mov	x9, #70368744177664             // =0x400000000000
	movk	x9, #49343, lsl #48
	sub	w10, w21, w8
	add	w19, w8, #14
	fmov	d13, x9
	sub	w22, w10, #15
	add	x8, x20, w19, uxtw #3
	adrp	x10, .LCPI201_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI201_0]
	and	x23, x11, #0x1fffffffc
	add	x8, x8, #16
	stp	x11, x8, [sp, #16]              // 16-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB201_4
.LBB201_3:                              //   in Loop: Header=BB201_4 Depth=1
	ldr	w8, [x24, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB201_25
.LBB201_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB201_5 Depth 2
                                        //     Child Loop BB201_8 Depth 2
                                        //     Child Loop BB201_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB201_5:                              //   Parent Loop BB201_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-56]
	add	x8, x8, #14
	ldp	d3, d4, [x9, #-40]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d6, d10, d8
	ldp	d7, d6, [x9, #8]
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fadd	d4, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	ldp	d5, d7, [x9, #24]
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d5, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #40]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #112
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB201_5
// %bb.6:                               //   in Loop: Header=BB201_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB201_12
// %bb.7:                               //   in Loop: Header=BB201_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w22, #3
	mov	x10, x19
	mov	x9, x23
	b.lo	.LBB201_10
.LBB201_8:                              //   Parent Loop BB201_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB201_8
// %bb.9:                               //   in Loop: Header=BB201_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB201_12
.LBB201_10:                             // %.preheader
                                        //   in Loop: Header=BB201_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB201_11:                             //   Parent Loop BB201_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB201_11
.LBB201_12:                             //   in Loop: Header=BB201_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB201_3
// %bb.13:                              //   in Loop: Header=BB201_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB201_3
.LBB201_14:
	cmp	w21, #0
	b.le	.LBB201_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI201_1
	adrp	x10, .LCPI201_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI201_1]
	ldr	d12, [x10, :lo12:.LCPI201_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB201_17
.LBB201_16:                             //   in Loop: Header=BB201_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB201_25
.LBB201_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB201_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB201_18:                             //   Parent Loop BB201_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB201_18
// %bb.19:                              //   in Loop: Header=BB201_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB201_16
// %bb.20:                              //   in Loop: Header=BB201_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB201_16
.LBB201_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI201_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI201_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB201_23
.LBB201_22:                             //   in Loop: Header=BB201_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB201_25
.LBB201_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB201_22
// %bb.24:                              //   in Loop: Header=BB201_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB201_22
.LBB201_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB201_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB201_29
.LBB201_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB201_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB201_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB201_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end201:
	.size	_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end201-_Z29test_while_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI202_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI202_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x24, iterations
	adrp	x9, start_time
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB202_25
// %bb.1:
	subs	w9, w21, #13
	b.lt	.LBB202_14
// %bb.2:
	mov	w8, #60495                      // =0xec4f
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #20164, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #13                         // =0xd
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI202_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #34
	ldr	d11, [x12, :lo12:.LCPI202_1]
	sub	w27, w21, #12
	add	x28, x20, #48
	adrp	x13, init_value
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI202_0
	sub	w10, w21, w8
	add	w19, w8, #13
	ldr	d12, [x9, :lo12:.LCPI202_0]
	sub	w22, w10, #14
	add	x8, x20, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x8, x8, #16
	stp	x10, x8, [sp, #16]              // 16-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB202_4
.LBB202_3:                              //   in Loop: Header=BB202_4 Depth=1
	ldr	w8, [x24, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB202_25
.LBB202_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB202_5 Depth 2
                                        //     Child Loop BB202_8 Depth 2
                                        //     Child Loop BB202_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB202_5:                              //   Parent Loop BB202_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-48]
	add	x8, x8, #13
	ldp	d3, d4, [x9, #-32]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #16]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #32]
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d1, d1, d9
	fmadd	d6, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldr	d6, [x9, #48]
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	add	x9, x9, #104
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d3, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d4, d4, d9
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB202_5
// %bb.6:                               //   in Loop: Header=BB202_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB202_12
// %bb.7:                               //   in Loop: Header=BB202_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w22, #3
	mov	x10, x19
	mov	x9, x23
	b.lo	.LBB202_10
.LBB202_8:                              //   Parent Loop BB202_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB202_8
// %bb.9:                               //   in Loop: Header=BB202_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB202_12
.LBB202_10:                             // %.preheader
                                        //   in Loop: Header=BB202_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB202_11:                             //   Parent Loop BB202_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB202_11
.LBB202_12:                             //   in Loop: Header=BB202_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB202_3
// %bb.13:                              //   in Loop: Header=BB202_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB202_3
.LBB202_14:
	cmp	w21, #0
	b.le	.LBB202_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI202_1
	adrp	x10, .LCPI202_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI202_1]
	ldr	d12, [x10, :lo12:.LCPI202_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB202_17
.LBB202_16:                             //   in Loop: Header=BB202_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB202_25
.LBB202_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB202_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB202_18:                             //   Parent Loop BB202_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB202_18
// %bb.19:                              //   in Loop: Header=BB202_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB202_16
// %bb.20:                              //   in Loop: Header=BB202_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB202_16
.LBB202_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI202_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI202_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB202_23
.LBB202_22:                             //   in Loop: Header=BB202_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB202_25
.LBB202_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB202_22
// %bb.24:                              //   in Loop: Header=BB202_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB202_22
.LBB202_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB202_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB202_29
.LBB202_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB202_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB202_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB202_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end202:
	.size	_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end202-_Z29test_while_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI203_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI203_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x24, iterations
	adrp	x9, start_time
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB203_25
// %bb.1:
	subs	w9, w21, #12
	b.lt	.LBB203_14
// %bb.2:
	mov	w8, #43691                      // =0xaaab
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #43690, lsl #16
	movk	x10, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x11, #49343, lsl #48
	movk	x9, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI203_1
	dup	v17.2d, x9
	fmov	d9, x9
	dup	v18.2d, x10
	lsr	x8, x8, #35
	fmov	d10, x10
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI203_1]
	mov	w26, wzr
	sub	w27, w21, #11
	add	w8, w8, w8, lsl #1
	add	x28, x20, #48
	adrp	x13, init_value
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	lsl	w8, w8, #2
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	sub	w9, w21, w8
	add	w19, w8, #12
	sub	w22, w9, #13
	add	x8, x20, w19, uxtw #3
	adrp	x9, .LCPI203_0
	add	x10, x22, #1
	ldr	d12, [x9, :lo12:.LCPI203_0]
	and	x23, x10, #0x1fffffffc
	add	x8, x8, #16
	stp	x10, x8, [sp, #16]              // 16-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB203_4
.LBB203_3:                              //   in Loop: Header=BB203_4 Depth=1
	ldr	w8, [x24, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB203_25
.LBB203_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB203_5 Depth 2
                                        //     Child Loop BB203_8 Depth 2
                                        //     Child Loop BB203_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB203_5:                              //   Parent Loop BB203_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-48]
	add	x8, x8, #12
	ldp	d3, d4, [x9, #-32]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d6, d10, d8
	ldp	d7, d6, [x9]
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d5, d6, d9
	fadd	d1, d1, d9
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	ldp	d3, d7, [x9, #16]
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #32]
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	add	x9, x9, #96
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB203_5
// %bb.6:                               //   in Loop: Header=BB203_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB203_12
// %bb.7:                               //   in Loop: Header=BB203_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w22, #3
	mov	x10, x19
	mov	x9, x23
	b.lo	.LBB203_10
.LBB203_8:                              //   Parent Loop BB203_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB203_8
// %bb.9:                               //   in Loop: Header=BB203_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB203_12
.LBB203_10:                             // %.preheader
                                        //   in Loop: Header=BB203_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB203_11:                             //   Parent Loop BB203_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB203_11
.LBB203_12:                             //   in Loop: Header=BB203_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB203_3
// %bb.13:                              //   in Loop: Header=BB203_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB203_3
.LBB203_14:
	cmp	w21, #0
	b.le	.LBB203_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI203_1
	adrp	x10, .LCPI203_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI203_1]
	ldr	d12, [x10, :lo12:.LCPI203_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB203_17
.LBB203_16:                             //   in Loop: Header=BB203_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB203_25
.LBB203_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB203_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB203_18:                             //   Parent Loop BB203_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB203_18
// %bb.19:                              //   in Loop: Header=BB203_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB203_16
// %bb.20:                              //   in Loop: Header=BB203_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB203_16
.LBB203_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI203_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI203_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB203_23
.LBB203_22:                             //   in Loop: Header=BB203_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB203_25
.LBB203_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB203_22
// %bb.24:                              //   in Loop: Header=BB203_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB203_22
.LBB203_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB203_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB203_29
.LBB203_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB203_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB203_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB203_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end203:
	.size	_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end203-_Z29test_while_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN16while_loop_testsILi10EdE7do_testEPKdPKc,"axG",@progbits,_ZN16while_loop_testsILi10EdE7do_testEPKdPKc,comdat
	.weak	_ZN16while_loop_testsILi10EdE7do_testEPKdPKc // -- Begin function _ZN16while_loop_testsILi10EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN16while_loop_testsILi10EdE7do_testEPKdPKc,@function
_ZN16while_loop_testsILi10EdE7do_testEPKdPKc: // @_ZN16while_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x20, temp_string
	add	x20, x20, :lo12:temp_string
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	mov	x19, x0
	bl	_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
	add	x2, x20, #900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
.Lfunc_end204:
	.size	_ZN16while_loop_testsILi10EdE7do_testEPKdPKc, .Lfunc_end204-_ZN16while_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI205_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI205_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x24, iterations
	adrp	x9, start_time
	ldr	w8, [x24, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB205_25
// %bb.1:
	subs	w9, w21, #11
	b.lt	.LBB205_14
// %bb.2:
	mov	w8, #35747                      // =0x8ba3
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #47662, lsl #16
	movk	x10, #16584, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x8, w9, w8
	mov	w9, #11                         // =0xb
	dup	v17.2d, x10
	fmov	d9, x10
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI205_1
	fmov	d13, x11
	mov	w26, wzr
	lsr	x8, x8, #35
	ldr	d11, [x12, :lo12:.LCPI205_1]
	sub	w27, w21, #10
	add	x28, x20, #40
	adrp	x13, init_value
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	mul	w8, w8, w9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	dup	v18.2d, x9
	fmov	d10, x9
	adrp	x9, .LCPI205_0
	sub	w10, w21, w8
	add	w19, w8, #11
	ldr	d12, [x9, :lo12:.LCPI205_0]
	sub	w22, w10, #12
	add	x8, x20, w19, uxtw #3
	add	x10, x22, #1
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	and	x23, x10, #0x1fffffffc
	add	x8, x8, #16
	stp	x10, x8, [sp, #16]              // 16-byte Folded Spill
	add	x8, x23, x19
	str	x8, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB205_4
.LBB205_3:                              //   in Loop: Header=BB205_4 Depth=1
	ldr	w8, [x24, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB205_25
.LBB205_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB205_5 Depth 2
                                        //     Child Loop BB205_8 Depth 2
                                        //     Child Loop BB205_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x28
.LBB205_5:                              //   Parent Loop BB205_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-40]
	add	x8, x8, #11
	ldp	d3, d4, [x9, #-24]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d6, d10, d8
	ldp	d7, d6, [x9, #24]
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fadd	d3, d3, d9
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d4
	ldr	d4, [x9, #40]
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #88
	fadd	d4, d4, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB205_5
// %bb.6:                               //   in Loop: Header=BB205_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB205_12
// %bb.7:                               //   in Loop: Header=BB205_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	w22, #3
	mov	x10, x19
	mov	x9, x23
	b.lo	.LBB205_10
.LBB205_8:                              //   Parent Loop BB205_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB205_8
// %bb.9:                               //   in Loop: Header=BB205_4 Depth=1
	ldp	x10, x8, [sp, #8]               // 16-byte Folded Reload
	cmp	x8, x23
	b.eq	.LBB205_12
.LBB205_10:                             // %.preheader
                                        //   in Loop: Header=BB205_4 Depth=1
	add	x8, x20, x10, lsl #3
.LBB205_11:                             //   Parent Loop BB205_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	add	w10, w10, #1
	cmp	w21, w10
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB205_11
.LBB205_12:                             //   in Loop: Header=BB205_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB205_3
// %bb.13:                              //   in Loop: Header=BB205_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB205_3
.LBB205_14:
	cmp	w21, #0
	b.le	.LBB205_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI205_1
	adrp	x10, .LCPI205_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI205_1]
	ldr	d12, [x10, :lo12:.LCPI205_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB205_17
.LBB205_16:                             //   in Loop: Header=BB205_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB205_25
.LBB205_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB205_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB205_18:                             //   Parent Loop BB205_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB205_18
// %bb.19:                              //   in Loop: Header=BB205_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB205_16
// %bb.20:                              //   in Loop: Header=BB205_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB205_16
.LBB205_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI205_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI205_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB205_23
.LBB205_22:                             //   in Loop: Header=BB205_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB205_25
.LBB205_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB205_22
// %bb.24:                              //   in Loop: Header=BB205_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x24, :lo12:iterations]
	b	.LBB205_22
.LBB205_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB205_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB205_29
.LBB205_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB205_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB205_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB205_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end205:
	.size	_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end205-_Z29test_while_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI206_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI206_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB206_25
// %bb.1:
	subs	w9, w21, #10
	b.lt	.LBB206_14
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #52428, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x10, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI206_1
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x9, x9, #35
	fmov	d10, x11
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI206_1]
	mov	w26, wzr
	sub	w27, w21, #9
	add	w9, w9, w9, lsl #2
	add	x28, x20, #40
	adrp	x24, init_value
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	lsl	w9, w9, #1
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	sub	w10, w21, w9
	add	w19, w9, #10
	sub	w22, w10, #11
	add	x9, x20, w19, uxtw #3
	adrp	x10, .LCPI206_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI206_0]
	and	x25, x11, #0x1fffffffc
	add	x23, x9, #16
	add	x9, x25, x19
	stp	x9, x11, [sp, #16]              // 16-byte Folded Spill
	b	.LBB206_4
.LBB206_3:                              //   in Loop: Header=BB206_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB206_25
.LBB206_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB206_5 Depth 2
                                        //     Child Loop BB206_8 Depth 2
                                        //     Child Loop BB206_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB206_5:                              //   Parent Loop BB206_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-40]
	add	x9, x9, #10
	ldp	d3, d4, [x10, #-24]
	cmp	x9, x27
	ldp	d5, d6, [x10, #-8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x10, #8]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d6, d9
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d5, d9
	fmadd	d2, d2, d10, d8
	ldp	d7, d5, [x10, #24]
	fmadd	d6, d6, d10, d8
	add	x10, x10, #80
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d3, d3, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB206_5
// %bb.6:                               //   in Loop: Header=BB206_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB206_12
// %bb.7:                               //   in Loop: Header=BB206_4 Depth=1
	cmp	w22, #3
	mov	x11, x19
	mov	x9, x23
	mov	x10, x25
	b.lo	.LBB206_10
.LBB206_8:                              //   Parent Loop BB206_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB206_8
// %bb.9:                               //   in Loop: Header=BB206_4 Depth=1
	ldp	x11, x9, [sp, #16]              // 16-byte Folded Reload
	cmp	x9, x25
	b.eq	.LBB206_12
.LBB206_10:                             // %.preheader
                                        //   in Loop: Header=BB206_4 Depth=1
	add	x9, x20, x11, lsl #3
.LBB206_11:                             //   Parent Loop BB206_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w21, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB206_11
.LBB206_12:                             //   in Loop: Header=BB206_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB206_3
// %bb.13:                              //   in Loop: Header=BB206_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB206_3
.LBB206_14:
	cmp	w21, #0
	b.le	.LBB206_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI206_1
	adrp	x10, .LCPI206_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI206_1]
	ldr	d12, [x10, :lo12:.LCPI206_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB206_17
.LBB206_16:                             //   in Loop: Header=BB206_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB206_25
.LBB206_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB206_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB206_18:                             //   Parent Loop BB206_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB206_18
// %bb.19:                              //   in Loop: Header=BB206_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB206_16
// %bb.20:                              //   in Loop: Header=BB206_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB206_16
.LBB206_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI206_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI206_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB206_23
.LBB206_22:                             //   in Loop: Header=BB206_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB206_25
.LBB206_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB206_22
// %bb.24:                              //   in Loop: Header=BB206_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB206_22
.LBB206_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB206_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB206_29
.LBB206_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB206_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB206_29:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB206_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end206:
	.size	_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end206-_Z29test_while_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI207_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI207_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB207_31
// %bb.1:
	subs	w9, w20, #9
	b.lt	.LBB207_14
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #14563, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x10, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI207_1
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x9, x9, #33
	fmov	d10, x11
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI207_1]
	mov	w26, wzr
	sub	w27, w20, #8
	add	w9, w9, w9, lsl #3
	add	x28, x21, #32
	adrp	x24, init_value
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w10, w20, w9
	add	w19, w9, #9
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	sub	w22, w10, #10
	add	x9, x21, w19, uxtw #3
	adrp	x10, .LCPI207_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI207_0]
	and	x25, x11, #0x1fffffffc
	add	x23, x9, #16
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x9, x25, x19
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB207_4
.LBB207_3:                              //   in Loop: Header=BB207_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB207_31
.LBB207_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB207_5 Depth 2
                                        //     Child Loop BB207_8 Depth 2
                                        //     Child Loop BB207_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB207_5:                              //   Parent Loop BB207_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-32]
	add	x9, x9, #9
	ldp	d3, d4, [x10, #-16]
	cmp	x9, x27
	ldp	d5, d6, [x10]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d6, d10, d8
	ldp	d7, d6, [x10, #16]
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d2
	ldr	d2, [x10, #32]
	fmadd	d1, d1, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	add	x10, x10, #72
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d3
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB207_5
// %bb.6:                               //   in Loop: Header=BB207_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB207_12
// %bb.7:                               //   in Loop: Header=BB207_4 Depth=1
	cmp	w22, #3
	mov	x11, x19
	mov	x9, x23
	mov	x10, x25
	b.lo	.LBB207_10
.LBB207_8:                              //   Parent Loop BB207_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB207_8
// %bb.9:                               //   in Loop: Header=BB207_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x25
	b.eq	.LBB207_12
.LBB207_10:                             // %.preheader
                                        //   in Loop: Header=BB207_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB207_11:                             //   Parent Loop BB207_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB207_11
.LBB207_12:                             //   in Loop: Header=BB207_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB207_3
// %bb.13:                              //   in Loop: Header=BB207_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB207_3
.LBB207_14:
	cmp	w20, #0
	b.le	.LBB207_27
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI207_1
	adrp	x10, .LCPI207_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI207_1]
	ldr	d13, [x10, :lo12:.LCPI207_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB207_17
.LBB207_16:                             //   in Loop: Header=BB207_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB207_31
.LBB207_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB207_25
// %bb.18:                              //   in Loop: Header=BB207_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB207_25
// %bb.19:                              //   in Loop: Header=BB207_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB207_25
// %bb.20:                              //   in Loop: Header=BB207_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB207_25
// %bb.21:                              //   in Loop: Header=BB207_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB207_25
// %bb.22:                              //   in Loop: Header=BB207_17 Depth=1
	ldr	d1, [x21, #40]
	cmp	w20, #6
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB207_25
// %bb.23:                              //   in Loop: Header=BB207_17 Depth=1
	ldr	d1, [x21, #48]
	cmp	w20, #7
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB207_25
// %bb.24:                              //   in Loop: Header=BB207_17 Depth=1
	ldr	d1, [x21, #56]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB207_25:                             //   in Loop: Header=BB207_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB207_16
// %bb.26:                              //   in Loop: Header=BB207_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB207_16
.LBB207_27:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI207_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI207_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB207_29
.LBB207_28:                             //   in Loop: Header=BB207_29 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB207_31
.LBB207_29:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB207_28
// %bb.30:                              //   in Loop: Header=BB207_29 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB207_28
.LBB207_31:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB207_33
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB207_35
.LBB207_33:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB207_36
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
.LBB207_35:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB207_36:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end207:
	.size	_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end207-_Z29test_while_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI208_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI208_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB208_30
// %bb.1:
	subs	w9, w20, #8
	b.lt	.LBB208_14
// %bb.2:
	and	w9, w9, #0xfffffff8
	mov	x11, #31336081391616            // =0x1c8000000000
	fmov	v18.2d, #-13.00000000
	sub	w10, w20, w9
	add	w24, w9, #8
	mov	x9, #253411660398592            // =0xe67a00000000
	sub	w19, w10, #9
	movk	x9, #16683, lsl #48
	movk	x11, #16584, lsl #48
	add	x12, x19, #1
	dup	v17.2d, x9
	fmov	d9, x9
	and	x22, x12, #0x1fffffffc
	add	x10, x21, w24, uxtw #3
	dup	v16.2d, x11
	add	x9, x22, x24
	fmov	d8, x11
	fmov	d10, #-13.00000000
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	adrp	x9, .LCPI208_1
	mov	w26, wzr
	ldr	d11, [x9, :lo12:.LCPI208_1]
	adrp	x9, .LCPI208_0
	sub	w27, w20, #7
	ldr	d12, [x9, :lo12:.LCPI208_0]
	mov	x9, #70368744177664             // =0x400000000000
	add	x28, x21, #32
	movk	x9, #49343, lsl #48
	add	x25, x10, #16
	adrp	x23, init_value
	fmov	d13, x9
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	b	.LBB208_4
.LBB208_3:                              //   in Loop: Header=BB208_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB208_30
.LBB208_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB208_5 Depth 2
                                        //     Child Loop BB208_8 Depth 2
                                        //     Child Loop BB208_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB208_5:                              //   Parent Loop BB208_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-32]
	add	x9, x9, #8
	ldp	d3, d4, [x10, #-16]
	cmp	x9, x27
	ldp	d5, d6, [x10]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d0, d0, d1
	fadd	d1, d5, d8
	ldp	d7, d5, [x10, #16]
	add	x10, x10, #64
	fadd	d7, d7, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d9, d10
	fadd	d2, d4, d8
	fadd	d4, d5, d8
	fmadd	d5, d7, d9, d10
	fadd	d0, d0, d3
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB208_5
// %bb.6:                               //   in Loop: Header=BB208_4 Depth=1
	cmp	w24, w20
	b.ge	.LBB208_12
// %bb.7:                               //   in Loop: Header=BB208_4 Depth=1
	cmp	w19, #3
	mov	x11, x24
	mov	x9, x25
	mov	x10, x22
	b.lo	.LBB208_10
.LBB208_8:                              //   Parent Loop BB208_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB208_8
// %bb.9:                               //   in Loop: Header=BB208_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x22
	b.eq	.LBB208_12
.LBB208_10:                             // %.preheader
                                        //   in Loop: Header=BB208_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB208_11:                             //   Parent Loop BB208_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.gt	.LBB208_11
.LBB208_12:                             //   in Loop: Header=BB208_4 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB208_3
// %bb.13:                              //   in Loop: Header=BB208_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB208_3
.LBB208_14:
	cmp	w20, #0
	b.le	.LBB208_26
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI208_1
	adrp	x10, .LCPI208_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI208_1]
	ldr	d13, [x10, :lo12:.LCPI208_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB208_17
.LBB208_16:                             //   in Loop: Header=BB208_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB208_30
.LBB208_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB208_24
// %bb.18:                              //   in Loop: Header=BB208_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB208_24
// %bb.19:                              //   in Loop: Header=BB208_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB208_24
// %bb.20:                              //   in Loop: Header=BB208_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB208_24
// %bb.21:                              //   in Loop: Header=BB208_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB208_24
// %bb.22:                              //   in Loop: Header=BB208_17 Depth=1
	ldr	d1, [x21, #40]
	cmp	w20, #6
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB208_24
// %bb.23:                              //   in Loop: Header=BB208_17 Depth=1
	ldr	d1, [x21, #48]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB208_24:                             //   in Loop: Header=BB208_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB208_16
// %bb.25:                              //   in Loop: Header=BB208_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB208_16
.LBB208_26:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI208_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI208_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB208_28
.LBB208_27:                             //   in Loop: Header=BB208_28 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB208_30
.LBB208_28:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB208_27
// %bb.29:                              //   in Loop: Header=BB208_28 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB208_27
.LBB208_30:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB208_32
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB208_34
.LBB208_32:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB208_35
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
.LBB208_34:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB208_35:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end208:
	.size	_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end208-_Z29test_while_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI209_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI209_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB209_29
// %bb.1:
	subs	w9, w20, #7
	b.lt	.LBB209_14
// %bb.2:
	mov	w10, #18725                     // =0x4925
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x13, #70368744177664            // =0x400000000000
	movk	w10, #9362, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v7.2d, #-13.00000000
	umull	x10, w9, w10
	movk	x13, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x14, .LCPI209_1
	dup	v17.2d, x11
	fmov	d10, x11
	fmov	d13, x13
	ldr	d11, [x14, :lo12:.LCPI209_1]
	mov	w26, wzr
	lsr	x10, x10, #32
	sub	w27, w20, #6
	add	x28, x21, #24
	adrp	x24, init_value
	str	q17, [sp, #16]                  // 16-byte Folded Spill
	sub	w9, w9, w10
	add	w9, w10, w9, lsr #1
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x10, #16584, lsl #48
	lsr	w9, w9, #2
	dup	v16.2d, x10
	fmov	d9, x10
	lsl	w12, w9, #3
	stp	q16, q7, [sp, #32]              // 32-byte Folded Spill
	sub	w9, w12, w9
	sub	w10, w20, w9
	add	w19, w9, #7
	sub	w22, w10, #8
	add	x9, x21, w19, uxtw #3
	adrp	x10, .LCPI209_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI209_0]
	and	x23, x11, #0x1fffffffc
	add	x25, x9, #16
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x9, x23, x19
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB209_4
.LBB209_3:                              //   in Loop: Header=BB209_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB209_29
.LBB209_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB209_5 Depth 2
                                        //     Child Loop BB209_8 Depth 2
                                        //     Child Loop BB209_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB209_5:                              //   Parent Loop BB209_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-24]
	add	x9, x9, #7
	ldp	d3, d4, [x10, #-8]
	cmp	x9, x27
	ldp	d5, d6, [x10, #8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x10, #24]
	add	x10, x10, #56
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d4, d9
	fadd	d4, d6, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d2, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB209_5
// %bb.6:                               //   in Loop: Header=BB209_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB209_12
// %bb.7:                               //   in Loop: Header=BB209_4 Depth=1
	cmp	w22, #3
	mov	x11, x19
	mov	x9, x25
	mov	x10, x23
	b.lo	.LBB209_10
.LBB209_8:                              //   Parent Loop BB209_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB209_8
// %bb.9:                               //   in Loop: Header=BB209_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x23
	b.eq	.LBB209_12
.LBB209_10:                             // %.preheader
                                        //   in Loop: Header=BB209_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB209_11:                             //   Parent Loop BB209_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB209_11
.LBB209_12:                             //   in Loop: Header=BB209_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB209_3
// %bb.13:                              //   in Loop: Header=BB209_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q17, q16, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB209_3
.LBB209_14:
	cmp	w20, #0
	b.le	.LBB209_25
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI209_1
	adrp	x10, .LCPI209_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI209_1]
	ldr	d13, [x10, :lo12:.LCPI209_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB209_17
.LBB209_16:                             //   in Loop: Header=BB209_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB209_29
.LBB209_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB209_23
// %bb.18:                              //   in Loop: Header=BB209_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB209_23
// %bb.19:                              //   in Loop: Header=BB209_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB209_23
// %bb.20:                              //   in Loop: Header=BB209_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB209_23
// %bb.21:                              //   in Loop: Header=BB209_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB209_23
// %bb.22:                              //   in Loop: Header=BB209_17 Depth=1
	ldr	d1, [x21, #40]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB209_23:                             //   in Loop: Header=BB209_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB209_16
// %bb.24:                              //   in Loop: Header=BB209_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB209_16
.LBB209_25:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI209_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI209_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB209_27
.LBB209_26:                             //   in Loop: Header=BB209_27 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB209_29
.LBB209_27:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB209_26
// %bb.28:                              //   in Loop: Header=BB209_27 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB209_26
.LBB209_29:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB209_31
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB209_33
.LBB209_31:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB209_34
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
.LBB209_33:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB209_34:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end209:
	.size	_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end209-_Z29test_while_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI210_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI210_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB210_28
// %bb.1:
	subs	w9, w20, #6
	b.lt	.LBB210_14
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #43690, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v7.2d, #-13.00000000
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x10, #16584, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI210_1
	dup	v16.2d, x10
	fmov	d9, x10
	dup	v17.2d, x11
	lsr	x9, x9, #34
	fmov	d10, x11
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI210_1]
	mov	w26, wzr
	sub	w27, w20, #5
	add	w9, w9, w9, lsl #1
	add	x28, x21, #24
	adrp	x24, init_value
	stp	q16, q7, [sp, #32]              // 32-byte Folded Spill
	lsl	w9, w9, #1
	str	q17, [sp, #16]                  // 16-byte Folded Spill
	sub	w10, w20, w9
	add	w19, w9, #6
	sub	w22, w10, #7
	add	x9, x21, w19, uxtw #3
	adrp	x10, .LCPI210_0
	add	x11, x22, #1
	ldr	d12, [x10, :lo12:.LCPI210_0]
	and	x23, x11, #0x1fffffffc
	add	x25, x9, #16
	stur	x11, [x29, #-56]                // 8-byte Folded Spill
	add	x9, x23, x19
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB210_4
.LBB210_3:                              //   in Loop: Header=BB210_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB210_28
.LBB210_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB210_5 Depth 2
                                        //     Child Loop BB210_8 Depth 2
                                        //     Child Loop BB210_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB210_5:                              //   Parent Loop BB210_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-24]
	add	x9, x9, #6
	ldp	d3, d4, [x10, #-8]
	cmp	x9, x27
	ldp	d5, d6, [x10, #8]
	add	x10, x10, #48
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB210_5
// %bb.6:                               //   in Loop: Header=BB210_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB210_12
// %bb.7:                               //   in Loop: Header=BB210_4 Depth=1
	cmp	w22, #3
	mov	x11, x19
	mov	x9, x25
	mov	x10, x23
	b.lo	.LBB210_10
.LBB210_8:                              //   Parent Loop BB210_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB210_8
// %bb.9:                               //   in Loop: Header=BB210_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x23
	b.eq	.LBB210_12
.LBB210_10:                             // %.preheader
                                        //   in Loop: Header=BB210_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB210_11:                             //   Parent Loop BB210_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB210_11
.LBB210_12:                             //   in Loop: Header=BB210_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB210_3
// %bb.13:                              //   in Loop: Header=BB210_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q17, q16, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB210_3
.LBB210_14:
	cmp	w20, #0
	b.le	.LBB210_24
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI210_1
	adrp	x10, .LCPI210_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI210_1]
	ldr	d13, [x10, :lo12:.LCPI210_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB210_17
.LBB210_16:                             //   in Loop: Header=BB210_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB210_28
.LBB210_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB210_22
// %bb.18:                              //   in Loop: Header=BB210_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB210_22
// %bb.19:                              //   in Loop: Header=BB210_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB210_22
// %bb.20:                              //   in Loop: Header=BB210_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB210_22
// %bb.21:                              //   in Loop: Header=BB210_17 Depth=1
	ldr	d1, [x21, #32]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB210_22:                             //   in Loop: Header=BB210_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB210_16
// %bb.23:                              //   in Loop: Header=BB210_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB210_16
.LBB210_24:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI210_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI210_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB210_26
.LBB210_25:                             //   in Loop: Header=BB210_26 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB210_28
.LBB210_26:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB210_25
// %bb.27:                              //   in Loop: Header=BB210_26 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB210_25
.LBB210_28:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB210_30
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB210_32
.LBB210_30:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB210_33
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
.LBB210_32:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB210_33:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end210:
	.size	_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end210-_Z29test_while_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI211_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI211_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB211_27
// %bb.1:
	subs	w9, w20, #5
	b.lt	.LBB211_14
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #52428, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v6.2d, #-13.00000000
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x10, #16584, lsl #48
	add	x28, x21, #16
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI211_1
	adrp	x14, .LCPI211_0
	dup	v7.2d, x10
	lsr	x9, x9, #34
	fmov	d9, x10
	dup	v16.2d, x11
	fmov	d10, x11
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI211_1]
	add	w9, w9, w9, lsl #2
	ldr	d12, [x14, :lo12:.LCPI211_0]
	mov	w26, wzr
	sub	w27, w20, #4
	adrp	x24, init_value
	stp	q7, q6, [sp, #32]               // 32-byte Folded Spill
	sub	w15, w20, w9
	add	w23, w9, #5
	str	q16, [sp, #16]                  // 16-byte Folded Spill
	sub	w19, w15, #6
	add	x22, x28, w23, uxtw #3
	add	x10, x19, #1
	and	x25, x10, #0x1fffffffc
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x9, x25, x23
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB211_4
.LBB211_3:                              //   in Loop: Header=BB211_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB211_27
.LBB211_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB211_5 Depth 2
                                        //     Child Loop BB211_8 Depth 2
                                        //     Child Loop BB211_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x28
.LBB211_5:                              //   Parent Loop BB211_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-16]
	add	x9, x9, #5
	ldp	d3, d4, [x10]
	cmp	x9, x27
	ldr	d5, [x10, #16]
	add	x10, x10, #40
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d2, d5, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d3, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB211_5
// %bb.6:                               //   in Loop: Header=BB211_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB211_12
// %bb.7:                               //   in Loop: Header=BB211_4 Depth=1
	cmp	w19, #3
	mov	x11, x23
	mov	x9, x22
	mov	x10, x25
	b.lo	.LBB211_10
.LBB211_8:                              //   Parent Loop BB211_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v6.16b
	mov	v4.16b, v6.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v7.2d
	fmla	v3.2d, v16.2d, v1.2d
	fadd	v1.2d, v2.2d, v7.2d
	fadd	v2.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	fmla	v3.2d, v16.2d, v1.2d
	fmla	v4.2d, v16.2d, v2.2d
	fadd	v1.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	fadd	v2.2d, v4.2d, v7.2d
	mov	v4.16b, v6.16b
	fmla	v3.2d, v16.2d, v1.2d
	fmla	v4.2d, v16.2d, v2.2d
	fadd	v1.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v16.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB211_8
// %bb.9:                               //   in Loop: Header=BB211_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x25
	b.eq	.LBB211_12
.LBB211_10:                             // %.preheader
                                        //   in Loop: Header=BB211_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB211_11:                             //   Parent Loop BB211_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB211_11
.LBB211_12:                             //   in Loop: Header=BB211_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB211_3
// %bb.13:                              //   in Loop: Header=BB211_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q16, q7, [sp, #16]              // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q6, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB211_3
.LBB211_14:
	cmp	w20, #0
	b.le	.LBB211_23
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI211_1
	adrp	x10, .LCPI211_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI211_1]
	ldr	d13, [x10, :lo12:.LCPI211_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB211_17
.LBB211_16:                             //   in Loop: Header=BB211_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB211_27
.LBB211_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB211_21
// %bb.18:                              //   in Loop: Header=BB211_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB211_21
// %bb.19:                              //   in Loop: Header=BB211_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB211_21
// %bb.20:                              //   in Loop: Header=BB211_17 Depth=1
	ldr	d1, [x21, #24]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB211_21:                             //   in Loop: Header=BB211_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB211_16
// %bb.22:                              //   in Loop: Header=BB211_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB211_16
.LBB211_23:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI211_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI211_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB211_25
.LBB211_24:                             //   in Loop: Header=BB211_25 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB211_27
.LBB211_25:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB211_24
// %bb.26:                              //   in Loop: Header=BB211_25 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB211_24
.LBB211_27:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB211_29
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB211_31
.LBB211_29:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB211_32
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
.LBB211_31:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB211_32:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end211:
	.size	_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end211-_Z29test_while_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI212_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI212_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB212_26
// %bb.1:
	subs	w9, w20, #4
	b.lt	.LBB212_14
// %bb.2:
	and	w9, w9, #0xfffffffc
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x12, #253411660398592           // =0xe67a00000000
	sub	w11, w20, w9
	add	w24, w9, #4
	movk	x10, #16584, lsl #48
	sub	w19, w11, #5
	movk	x12, #16683, lsl #48
	fmov	v7.2d, #-13.00000000
	add	x9, x19, #1
	add	x28, x21, #16
	dup	v5.2d, x10
	and	x22, x9, #0x1fffffffc
	stur	x9, [x29, #-56]                 // 8-byte Folded Spill
	fmov	d8, x10
	add	x9, x22, x24
	dup	v6.2d, x12
	fmov	d9, x12
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	adrp	x9, .LCPI212_1
	fmov	d10, #-13.00000000
	ldr	d11, [x9, :lo12:.LCPI212_1]
	adrp	x9, .LCPI212_0
	add	x23, x28, w24, uxtw #3
	ldr	d12, [x9, :lo12:.LCPI212_0]
	mov	x9, #70368744177664             // =0x400000000000
	mov	w26, wzr
	movk	x9, #49343, lsl #48
	sub	w27, w20, #3
	adrp	x25, init_value
	fmov	d13, x9
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB212_4
.LBB212_3:                              //   in Loop: Header=BB212_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB212_26
.LBB212_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB212_5 Depth 2
                                        //     Child Loop BB212_8 Depth 2
                                        //     Child Loop BB212_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x28
	mov	w10, #1                         // =0x1
.LBB212_5:                              //   Parent Loop BB212_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-16]
	add	x11, x10, #3
	ldp	d3, d4, [x9], #32
	add	x10, x10, #4
	cmp	x11, x27
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB212_5
// %bb.6:                               //   in Loop: Header=BB212_4 Depth=1
	cmp	w24, w20
	b.ge	.LBB212_12
// %bb.7:                               //   in Loop: Header=BB212_4 Depth=1
	cmp	w19, #3
	mov	x11, x24
	mov	x9, x23
	mov	x10, x22
	b.lo	.LBB212_10
.LBB212_8:                              //   Parent Loop BB212_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB212_8
// %bb.9:                               //   in Loop: Header=BB212_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x22
	b.eq	.LBB212_12
.LBB212_10:                             // %.preheader
                                        //   in Loop: Header=BB212_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB212_11:                             //   Parent Loop BB212_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.gt	.LBB212_11
.LBB212_12:                             //   in Loop: Header=BB212_4 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB212_3
// %bb.13:                              //   in Loop: Header=BB212_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB212_3
.LBB212_14:
	cmp	w20, #0
	b.le	.LBB212_22
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI212_1
	adrp	x10, .LCPI212_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI212_1]
	ldr	d13, [x10, :lo12:.LCPI212_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB212_17
.LBB212_16:                             //   in Loop: Header=BB212_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB212_26
.LBB212_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB212_20
// %bb.18:                              //   in Loop: Header=BB212_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB212_20
// %bb.19:                              //   in Loop: Header=BB212_17 Depth=1
	ldr	d1, [x21, #16]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB212_20:                             //   in Loop: Header=BB212_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB212_16
// %bb.21:                              //   in Loop: Header=BB212_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB212_16
.LBB212_22:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI212_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI212_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB212_24
.LBB212_23:                             //   in Loop: Header=BB212_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB212_26
.LBB212_24:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB212_23
// %bb.25:                              //   in Loop: Header=BB212_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB212_23
.LBB212_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB212_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB212_30
.LBB212_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB212_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB212_30:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB212_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end212:
	.size	_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end212-_Z29test_while_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI213_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI213_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB213_25
// %bb.1:
	subs	w9, w20, #3
	b.lt	.LBB213_14
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #43690, lsl #16
	movk	x11, #16683, lsl #48
	fmov	v5.2d, #-13.00000000
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x12, #49343, lsl #48
	movk	x10, #16584, lsl #48
	add	x28, x21, #16
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI213_1
	adrp	x14, .LCPI213_0
	dup	v6.2d, x10
	lsr	x9, x9, #33
	fmov	d9, x10
	dup	v7.2d, x11
	fmov	d10, x11
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI213_1]
	add	w9, w9, w9, lsl #1
	ldr	d12, [x14, :lo12:.LCPI213_0]
	mov	w26, wzr
	sub	w27, w20, #2
	adrp	x24, init_value
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	sub	w15, w20, w9
	add	w23, w9, #3
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	sub	w19, w15, #4
	add	x25, x28, w23, uxtw #3
	add	x10, x19, #1
	and	x22, x10, #0x1fffffffc
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x9, x22, x23
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB213_4
.LBB213_3:                              //   in Loop: Header=BB213_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB213_25
.LBB213_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB213_5 Depth 2
                                        //     Child Loop BB213_8 Depth 2
                                        //     Child Loop BB213_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x28
	mov	w10, #1                         // =0x1
.LBB213_5:                              //   Parent Loop BB213_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-16]
	add	x11, x10, #2
	ldr	d3, [x9], #24
	add	x10, x10, #3
	cmp	x11, x27
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB213_5
// %bb.6:                               //   in Loop: Header=BB213_4 Depth=1
	cmp	w23, w20
	b.ge	.LBB213_12
// %bb.7:                               //   in Loop: Header=BB213_4 Depth=1
	cmp	w19, #3
	mov	x11, x23
	mov	x9, x25
	mov	x10, x22
	b.lo	.LBB213_10
.LBB213_8:                              //   Parent Loop BB213_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v5.16b
	mov	v4.16b, v5.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v6.2d
	fmla	v3.2d, v7.2d, v1.2d
	fadd	v1.2d, v2.2d, v6.2d
	fadd	v2.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	fmla	v3.2d, v7.2d, v1.2d
	fmla	v4.2d, v7.2d, v2.2d
	fadd	v1.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	fadd	v2.2d, v4.2d, v6.2d
	mov	v4.16b, v5.16b
	fmla	v3.2d, v7.2d, v1.2d
	fmla	v4.2d, v7.2d, v2.2d
	fadd	v1.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v7.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB213_8
// %bb.9:                               //   in Loop: Header=BB213_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x9, x22
	b.eq	.LBB213_12
.LBB213_10:                             // %.preheader
                                        //   in Loop: Header=BB213_4 Depth=1
	add	x9, x21, x11, lsl #3
.LBB213_11:                             //   Parent Loop BB213_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w20, w11
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.gt	.LBB213_11
.LBB213_12:                             //   in Loop: Header=BB213_4 Depth=1
	ldr	d1, [x24, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB213_3
// %bb.13:                              //   in Loop: Header=BB213_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB213_3
.LBB213_14:
	cmp	w20, #0
	b.le	.LBB213_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI213_1
	adrp	x10, .LCPI213_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI213_1]
	ldr	d13, [x10, :lo12:.LCPI213_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB213_17
.LBB213_16:                             //   in Loop: Header=BB213_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB213_25
.LBB213_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB213_19
// %bb.18:                              //   in Loop: Header=BB213_17 Depth=1
	ldr	d1, [x21, #8]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB213_19:                             //   in Loop: Header=BB213_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB213_16
// %bb.20:                              //   in Loop: Header=BB213_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB213_16
.LBB213_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI213_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI213_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB213_23
.LBB213_22:                             //   in Loop: Header=BB213_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB213_25
.LBB213_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB213_22
// %bb.24:                              //   in Loop: Header=BB213_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB213_22
.LBB213_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB213_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB213_29
.LBB213_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB213_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB213_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB213_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end213:
	.size	_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end213-_Z29test_while_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI214_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI214_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB214_23
// %bb.1:
	subs	w9, w21, #2
	b.lt	.LBB214_14
// %bb.2:
	and	w9, w9, #0xfffffffe
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v7.2d, #-13.00000000
	add	w28, w9, #2
	sub	w9, w21, w9
	movk	x10, #16584, lsl #48
	sub	w24, w9, #3
	mov	x9, #253411660398592            // =0xe67a00000000
	dup	v5.2d, x10
	add	x11, x24, #1
	movk	x9, #16683, lsl #48
	fmov	d8, x10
	and	x22, x11, #0x1fffffffc
	dup	v6.2d, x9
	fmov	d9, x9
	add	x9, x22, x28
	add	x10, x20, w28, uxtw #3
	fmov	d10, #-13.00000000
	stp	x9, x11, [sp, #8]               // 16-byte Folded Spill
	adrp	x9, .LCPI214_1
	mov	w26, wzr
	ldr	d11, [x9, :lo12:.LCPI214_1]
	adrp	x9, .LCPI214_0
	sub	w27, w21, #1
	ldr	d12, [x9, :lo12:.LCPI214_0]
	mov	x9, #70368744177664             // =0x400000000000
	add	x19, x10, #16
	movk	x9, #49343, lsl #48
	adrp	x23, init_value
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	fmov	d13, x9
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB214_4
.LBB214_3:                              //   in Loop: Header=BB214_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB214_23
.LBB214_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB214_5 Depth 2
                                        //     Child Loop BB214_8 Depth 2
                                        //     Child Loop BB214_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
.LBB214_5:                              //   Parent Loop BB214_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x10, x20, x9, lsl #3
	add	x9, x9, #2
	cmp	x9, x27
	ldp	d1, d2, [x10]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB214_5
// %bb.6:                               //   in Loop: Header=BB214_4 Depth=1
	cmp	w28, w21
	b.ge	.LBB214_12
// %bb.7:                               //   in Loop: Header=BB214_4 Depth=1
	cmp	w24, #3
	mov	x11, x28
	mov	x9, x19
	mov	x10, x22
	b.lo	.LBB214_10
.LBB214_8:                              //   Parent Loop BB214_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB214_8
// %bb.9:                               //   in Loop: Header=BB214_4 Depth=1
	ldp	x11, x9, [sp, #8]               // 16-byte Folded Reload
	cmp	x9, x22
	b.eq	.LBB214_12
.LBB214_10:                             // %.preheader
                                        //   in Loop: Header=BB214_4 Depth=1
	add	x9, x20, x11, lsl #3
.LBB214_11:                             //   Parent Loop BB214_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	add	w11, w11, #1
	cmp	w21, w11
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.gt	.LBB214_11
.LBB214_12:                             //   in Loop: Header=BB214_4 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB214_3
// %bb.13:                              //   in Loop: Header=BB214_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB214_3
.LBB214_14:
	cmp	w21, #1
	b.ne	.LBB214_19
// %bb.15:                              // %.preheader4
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v5.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	mov	w19, wzr
	dup	v3.2d, x9
	mov	x9, #70368744177664             // =0x400000000000
	dup	v4.2d, x10
	movk	x9, #16575, lsl #48
	adrp	x10, .LCPI214_0
	adrp	x22, init_value
	add	x22, x22, :lo12:init_value
	dup	v7.2d, x9
	adrp	x9, .LCPI214_1
	ldr	d8, [x9, :lo12:.LCPI214_1]
	ldr	d9, [x10, :lo12:.LCPI214_0]
	movi	v6.2d, #0000000000000000
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	stp	q4, q3, [sp, #48]               // 32-byte Folded Spill
	stp	q7, q5, [sp, #16]               // 32-byte Folded Spill
	b	.LBB214_17
.LBB214_16:                             //   in Loop: Header=BB214_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB214_23
.LBB214_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x20]
	mov	v1.16b, v5.16b
	ld1	{ v0.d }[1], [x22]
	fadd	v0.2d, v0.2d, v3.2d
	fmla	v1.2d, v4.2d, v0.2d
	fadd	v0.2d, v1.2d, v3.2d
	mov	v1.16b, v5.16b
	fmla	v1.2d, v4.2d, v0.2d
	fadd	v0.2d, v1.2d, v3.2d
	mov	v1.16b, v5.16b
	fmla	v1.2d, v4.2d, v0.2d
	fadd	v0.2d, v1.2d, v6.2d
	fmul	v1.2d, v1.2d, v7.2d
	mov	v2.16b, v0.16b
	mov	v2.d[1], v1.d[1]
	dup	v1.2d, v1.d[1]
	fsub	v1.2d, v2.2d, v1.2d
	fdiv	v2.2d, v1.2d, v0.2d
	fabs	d0, d0
	fcmp	d0, d8
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d9
	b.mi	.LBB214_16
// %bb.18:                              //   in Loop: Header=BB214_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v6.2d, #0000000000000000
	ldp	q7, q5, [sp, #16]               // 32-byte Folded Reload
	ldp	q4, q3, [sp, #48]               // 32-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB214_16
.LBB214_19:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI214_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI214_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB214_21
.LBB214_20:                             //   in Loop: Header=BB214_21 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB214_23
.LBB214_21:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB214_20
// %bb.22:                              //   in Loop: Header=BB214_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB214_20
.LBB214_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB214_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB214_27
.LBB214_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB214_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB214_27:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB214_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end214:
	.size	_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end214-_Z29test_while_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI215_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI215_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	2
	.type	_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc: // @_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	stp	d13, d12, [sp, #64]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #80]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #96]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB215_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB215_13
// %bb.2:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	fmov	d10, #-13.00000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI215_1
	ldr	d11, [x9, :lo12:.LCPI215_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	adrp	x10, .LCPI215_0
	fmov	d13, x9
	mov	w27, w20
	ldr	d12, [x10, :lo12:.LCPI215_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB215_4
.LBB215_3:                              //   in Loop: Header=BB215_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB215_17
.LBB215_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB215_7 Depth 2
                                        //     Child Loop BB215_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB215_6
// %bb.5:                               //   in Loop: Header=BB215_4 Depth=1
	mov	x10, xzr
	b	.LBB215_9
.LBB215_6:                              // %.preheader2
                                        //   in Loop: Header=BB215_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB215_7:                              //   Parent Loop BB215_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB215_7
// %bb.8:                               //   in Loop: Header=BB215_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB215_11
.LBB215_9:                              // %.preheader
                                        //   in Loop: Header=BB215_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB215_10:                             //   Parent Loop BB215_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB215_10
.LBB215_11:                             //   in Loop: Header=BB215_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB215_3
// %bb.12:                              //   in Loop: Header=BB215_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB215_3
.LBB215_13:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI215_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI215_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB215_15
.LBB215_14:                             //   in Loop: Header=BB215_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB215_17
.LBB215_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB215_14
// %bb.16:                              //   in Loop: Header=BB215_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB215_14
.LBB215_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB215_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB215_21
.LBB215_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB215_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB215_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #96]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #80]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB215_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end215:
	.size	_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end215-_Z29test_while_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI216_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI216_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB216_35
// %bb.1:
	subs	w9, w20, #32
	b.lt	.LBB216_14
// %bb.2:
	and	w8, w9, #0xffffffe0
	mov	w9, w20
	fmov	v18.2d, #-13.00000000
	add	w24, w8, #32
	mov	x8, #31336081391616             // =0x1c8000000000
	and	x10, x9, #0x3
	movk	x8, #16584, lsl #48
	sub	x22, x9, x24
	str	x10, [sp, #24]                  // 8-byte Folded Spill
	dup	v16.2d, x8
	fmov	d8, x8
	adrp	x8, .LCPI216_1
	ldr	d11, [x8, :lo12:.LCPI216_1]
	adrp	x8, .LCPI216_0
	sub	x23, x22, x10
	mov	x10, #253411660398592           // =0xe67a00000000
	ldr	d12, [x8, :lo12:.LCPI216_0]
	mov	x8, #70368744177664             // =0x400000000000
	movk	x10, #16683, lsl #48
	movk	x8, #49343, lsl #48
	stur	x9, [x29, #-56]                 // 8-byte Folded Spill
	add	x9, x21, w24, uxtw #3
	dup	v17.2d, x10
	fmov	d9, x10
	fmov	d10, #-13.00000000
	fmov	d13, x8
	mov	w26, wzr
	sub	w27, w20, #31
	add	x19, x21, #128
	add	x11, x23, x24
	add	x25, x9, #16
	adrp	x28, init_value
	str	x11, [sp, #16]                  // 8-byte Folded Spill
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	b	.LBB216_4
.LBB216_3:                              //   in Loop: Header=BB216_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB216_35
.LBB216_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB216_5 Depth 2
                                        //     Child Loop BB216_8 Depth 2
                                        //     Child Loop BB216_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x19
.LBB216_5:                              //   Parent Loop BB216_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-128]
	add	x8, x8, #32
	ldp	d3, d4, [x9, #-112]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-96]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-80]
	fadd	d1, d1, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-64]
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fadd	d3, d3, d8
	fadd	d0, d0, d4
	fadd	d2, d2, d8
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-48]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d6, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-32]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d3, d3, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #-16]
	fmadd	d2, d2, d9, d10
	fadd	d5, d5, d8
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d2, d2, d8
	fmadd	d5, d5, d9, d10
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d6
	ldp	d7, d6, [x9]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d6, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #16]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d3, d3, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #32]
	fmadd	d2, d2, d9, d10
	fadd	d5, d5, d8
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d2, d2, d8
	fmadd	d5, d5, d9, d10
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #48]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #64]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d1, d1, d8
	fmadd	d3, d3, d9, d10
	fmadd	d2, d6, d9, d10
	fadd	d7, d7, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d9, d10
	fmadd	d1, d1, d9, d10
	ldp	d6, d5, [x9, #80]
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d4, d5, d8
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d5, d6, d9, d10
	fadd	d0, d0, d7
	fmadd	d3, d3, d9, d10
	ldp	d6, d7, [x9, #96]
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d2, d2, d8
	fadd	d6, d6, d8
	fadd	d5, d5, d8
	fadd	d0, d0, d3
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d3, d6, d9, d10
	fmadd	d5, d5, d9, d10
	fadd	d6, d7, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	ldp	d7, d5, [x9, #112]
	fmadd	d6, d6, d9, d10
	add	x9, x9, #256
	fadd	d0, d0, d1
	fadd	d7, d7, d8
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d6, d6, d8
	fmadd	d5, d7, d9, d10
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d3
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB216_5
// %bb.6:                               //   in Loop: Header=BB216_4 Depth=1
	cmp	w24, w20
	b.ge	.LBB216_12
// %bb.7:                               //   in Loop: Header=BB216_4 Depth=1
	cmp	x22, #4
	mov	x10, x24
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB216_10
.LBB216_8:                              //   Parent Loop BB216_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB216_8
// %bb.9:                               //   in Loop: Header=BB216_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB216_12
.LBB216_10:                             // %.preheader
                                        //   in Loop: Header=BB216_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB216_11:                             //   Parent Loop BB216_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB216_11
.LBB216_12:                             //   in Loop: Header=BB216_4 Depth=1
	ldr	d1, [x28, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB216_3
// %bb.13:                              //   in Loop: Header=BB216_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB216_3
.LBB216_14:
	cmp	w20, #0
	b.le	.LBB216_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI216_1
	ldr	d12, [x9, :lo12:.LCPI216_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI216_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI216_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB216_17
.LBB216_16:                             //   in Loop: Header=BB216_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB216_35
.LBB216_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB216_28 Depth 2
	cmp	w20, #4
	b.hs	.LBB216_19
// %bb.18:                              //   in Loop: Header=BB216_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB216_27
.LBB216_19:                             //   in Loop: Header=BB216_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB216_26
// %bb.20:                              //   in Loop: Header=BB216_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB216_26
// %bb.21:                              //   in Loop: Header=BB216_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB216_26
// %bb.22:                              //   in Loop: Header=BB216_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB216_26
// %bb.23:                              //   in Loop: Header=BB216_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB216_26
// %bb.24:                              //   in Loop: Header=BB216_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB216_26
// %bb.25:                              //   in Loop: Header=BB216_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB216_26:                             //   in Loop: Header=BB216_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB216_29
.LBB216_27:                             // %.preheader4
                                        //   in Loop: Header=BB216_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB216_28:                             //   Parent Loop BB216_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB216_28
.LBB216_29:                             //   in Loop: Header=BB216_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB216_16
// %bb.30:                              //   in Loop: Header=BB216_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB216_16
.LBB216_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI216_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI216_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB216_33
.LBB216_32:                             //   in Loop: Header=BB216_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB216_35
.LBB216_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB216_32
// %bb.34:                              //   in Loop: Header=BB216_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB216_32
.LBB216_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB216_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB216_39
.LBB216_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB216_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB216_39:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB216_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end216:
	.size	_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end216-_Z26test_do_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI217_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI217_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB217_35
// %bb.1:
	subs	w9, w20, #31
	b.lt	.LBB217_14
// %bb.2:
	mov	w8, #4229                       // =0x1085
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w8, #2114, lsl #16
	mov	w14, w20
	movk	x10, #16683, lsl #48
	umull	x8, w9, w8
	fmov	v16.2d, #-13.00000000
	movk	x12, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI217_1
	dup	v18.2d, x10
	fmov	d10, x10
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI217_1]
	lsr	x8, x8, #32
	mov	w26, wzr
	sub	w27, w20, #30
	add	x24, x21, #120
	adrp	x19, init_value
	stur	x14, [x29, #-56]                // 8-byte Folded Spill
	sub	w9, w9, w8
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	w8, w8, w9, lsr #1
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x9, #16584, lsl #48
	lsr	w8, w8, #4
	dup	v17.2d, x9
	fmov	d9, x9
	adrp	x9, .LCPI217_0
	lsl	w11, w8, #5
	ldr	d12, [x9, :lo12:.LCPI217_0]
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w8, w11, w8
	add	w22, w8, #31
	sub	x23, x14, x22
	add	x8, x21, w22, uxtw #3
	and	x28, x23, #0xfffffffffffffffc
	add	x9, x28, x22
	add	x25, x8, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB217_4
.LBB217_3:                              //   in Loop: Header=BB217_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB217_35
.LBB217_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB217_5 Depth 2
                                        //     Child Loop BB217_8 Depth 2
                                        //     Child Loop BB217_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB217_5:                              //   Parent Loop BB217_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-120]
	add	x8, x8, #31
	ldp	d3, d4, [x9, #-104]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-88]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-56]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-40]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-24]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #-8]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #8]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d7, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #40]
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #56]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #72]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #88]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #104]
	fadd	d7, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d5
	fmadd	d5, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #120]
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	add	x9, x9, #248
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB217_5
// %bb.6:                               //   in Loop: Header=BB217_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB217_12
// %bb.7:                               //   in Loop: Header=BB217_4 Depth=1
	cmp	x23, #4
	mov	x10, x22
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB217_10
.LBB217_8:                              //   Parent Loop BB217_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB217_8
// %bb.9:                               //   in Loop: Header=BB217_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB217_12
.LBB217_10:                             // %.preheader
                                        //   in Loop: Header=BB217_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB217_11:                             //   Parent Loop BB217_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB217_11
.LBB217_12:                             //   in Loop: Header=BB217_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB217_3
// %bb.13:                              //   in Loop: Header=BB217_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB217_3
.LBB217_14:
	cmp	w20, #0
	b.le	.LBB217_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI217_1
	ldr	d12, [x9, :lo12:.LCPI217_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI217_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI217_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB217_17
.LBB217_16:                             //   in Loop: Header=BB217_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB217_35
.LBB217_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB217_28 Depth 2
	cmp	w20, #4
	b.hs	.LBB217_19
// %bb.18:                              //   in Loop: Header=BB217_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB217_27
.LBB217_19:                             //   in Loop: Header=BB217_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB217_26
// %bb.20:                              //   in Loop: Header=BB217_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB217_26
// %bb.21:                              //   in Loop: Header=BB217_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB217_26
// %bb.22:                              //   in Loop: Header=BB217_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB217_26
// %bb.23:                              //   in Loop: Header=BB217_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB217_26
// %bb.24:                              //   in Loop: Header=BB217_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB217_26
// %bb.25:                              //   in Loop: Header=BB217_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB217_26:                             //   in Loop: Header=BB217_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB217_29
.LBB217_27:                             // %.preheader4
                                        //   in Loop: Header=BB217_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB217_28:                             //   Parent Loop BB217_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB217_28
.LBB217_29:                             //   in Loop: Header=BB217_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB217_16
// %bb.30:                              //   in Loop: Header=BB217_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB217_16
.LBB217_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI217_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI217_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB217_33
.LBB217_32:                             //   in Loop: Header=BB217_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB217_35
.LBB217_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB217_32
// %bb.34:                              //   in Loop: Header=BB217_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB217_32
.LBB217_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB217_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB217_39
.LBB217_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB217_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB217_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB217_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end217:
	.size	_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end217-_Z26test_do_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI218_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI218_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB218_35
// %bb.1:
	subs	w9, w20, #30
	b.lt	.LBB218_14
// %bb.2:
	mov	w8, #34953                      // =0x8889
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #34952, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #30                         // =0x1e
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #36
	adrp	x11, .LCPI218_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI218_0]
	sub	w27, w20, #29
	add	x24, x21, #120
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI218_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI218_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB218_4
.LBB218_3:                              //   in Loop: Header=BB218_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB218_35
.LBB218_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB218_5 Depth 2
                                        //     Child Loop BB218_8 Depth 2
                                        //     Child Loop BB218_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB218_5:                              //   Parent Loop BB218_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-120]
	add	x8, x8, #30
	ldp	d3, d4, [x9, #-104]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-88]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-56]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-24]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #-8]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d5, d7, [x9, #8]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #40]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #56]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #72]
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d1, d1, d10, d8
	ldp	d6, d7, [x9, #88]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #104]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #240
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB218_5
// %bb.6:                               //   in Loop: Header=BB218_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB218_12
// %bb.7:                               //   in Loop: Header=BB218_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB218_10
.LBB218_8:                              //   Parent Loop BB218_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB218_8
// %bb.9:                               //   in Loop: Header=BB218_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB218_12
.LBB218_10:                             // %.preheader
                                        //   in Loop: Header=BB218_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB218_11:                             //   Parent Loop BB218_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB218_11
.LBB218_12:                             //   in Loop: Header=BB218_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB218_3
// %bb.13:                              //   in Loop: Header=BB218_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB218_3
.LBB218_14:
	cmp	w20, #0
	b.le	.LBB218_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI218_1
	ldr	d12, [x9, :lo12:.LCPI218_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI218_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI218_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB218_17
.LBB218_16:                             //   in Loop: Header=BB218_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB218_35
.LBB218_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB218_28 Depth 2
	cmp	w20, #4
	b.hs	.LBB218_19
// %bb.18:                              //   in Loop: Header=BB218_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB218_27
.LBB218_19:                             //   in Loop: Header=BB218_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB218_26
// %bb.20:                              //   in Loop: Header=BB218_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB218_26
// %bb.21:                              //   in Loop: Header=BB218_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB218_26
// %bb.22:                              //   in Loop: Header=BB218_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB218_26
// %bb.23:                              //   in Loop: Header=BB218_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB218_26
// %bb.24:                              //   in Loop: Header=BB218_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB218_26
// %bb.25:                              //   in Loop: Header=BB218_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB218_26:                             //   in Loop: Header=BB218_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB218_29
.LBB218_27:                             // %.preheader4
                                        //   in Loop: Header=BB218_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB218_28:                             //   Parent Loop BB218_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB218_28
.LBB218_29:                             //   in Loop: Header=BB218_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB218_16
// %bb.30:                              //   in Loop: Header=BB218_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB218_16
.LBB218_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI218_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI218_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB218_33
.LBB218_32:                             //   in Loop: Header=BB218_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB218_35
.LBB218_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB218_32
// %bb.34:                              //   in Loop: Header=BB218_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB218_32
.LBB218_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB218_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB218_39
.LBB218_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB218_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB218_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB218_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end218:
	.size	_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end218-_Z26test_do_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN13do_loop_testsILi28EdE7do_testEPKdPKc,"axG",@progbits,_ZN13do_loop_testsILi28EdE7do_testEPKdPKc,comdat
	.weak	_ZN13do_loop_testsILi28EdE7do_testEPKdPKc // -- Begin function _ZN13do_loop_testsILi28EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN13do_loop_testsILi28EdE7do_testEPKdPKc,@function
_ZN13do_loop_testsILi28EdE7do_testEPKdPKc: // @_ZN13do_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN13do_loop_testsILi19EdE7do_testEPKdPKc
	adrp	x20, temp_string+1900
	add	x20, x20, :lo12:temp_string+1900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
.Lfunc_end219:
	.size	_ZN13do_loop_testsILi28EdE7do_testEPKdPKc, .Lfunc_end219-_ZN13do_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI220_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI220_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB220_35
// %bb.1:
	subs	w9, w20, #29
	b.lt	.LBB220_14
// %bb.2:
	mov	w8, #51977                      // =0xcb09
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #36157, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #29                         // =0x1d
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #36
	adrp	x11, .LCPI220_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI220_0]
	sub	w27, w20, #28
	add	x24, x21, #112
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI220_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI220_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB220_4
.LBB220_3:                              //   in Loop: Header=BB220_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB220_35
.LBB220_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB220_5 Depth 2
                                        //     Child Loop BB220_8 Depth 2
                                        //     Child Loop BB220_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB220_5:                              //   Parent Loop BB220_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-112]
	add	x8, x8, #29
	ldp	d3, d4, [x9, #-96]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-80]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-48]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-32]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-16]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #16]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #32]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #48]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #64]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #80]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #96]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #112]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #232
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB220_5
// %bb.6:                               //   in Loop: Header=BB220_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB220_12
// %bb.7:                               //   in Loop: Header=BB220_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB220_10
.LBB220_8:                              //   Parent Loop BB220_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB220_8
// %bb.9:                               //   in Loop: Header=BB220_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB220_12
.LBB220_10:                             // %.preheader
                                        //   in Loop: Header=BB220_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB220_11:                             //   Parent Loop BB220_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB220_11
.LBB220_12:                             //   in Loop: Header=BB220_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB220_3
// %bb.13:                              //   in Loop: Header=BB220_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB220_3
.LBB220_14:
	cmp	w20, #0
	b.le	.LBB220_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI220_1
	ldr	d12, [x9, :lo12:.LCPI220_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI220_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI220_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB220_17
.LBB220_16:                             //   in Loop: Header=BB220_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB220_35
.LBB220_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB220_28 Depth 2
	cmp	w20, #4
	b.hs	.LBB220_19
// %bb.18:                              //   in Loop: Header=BB220_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB220_27
.LBB220_19:                             //   in Loop: Header=BB220_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB220_26
// %bb.20:                              //   in Loop: Header=BB220_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB220_26
// %bb.21:                              //   in Loop: Header=BB220_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB220_26
// %bb.22:                              //   in Loop: Header=BB220_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB220_26
// %bb.23:                              //   in Loop: Header=BB220_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB220_26
// %bb.24:                              //   in Loop: Header=BB220_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB220_26
// %bb.25:                              //   in Loop: Header=BB220_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB220_26:                             //   in Loop: Header=BB220_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB220_29
.LBB220_27:                             // %.preheader4
                                        //   in Loop: Header=BB220_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB220_28:                             //   Parent Loop BB220_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB220_28
.LBB220_29:                             //   in Loop: Header=BB220_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB220_16
// %bb.30:                              //   in Loop: Header=BB220_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB220_16
.LBB220_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI220_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI220_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB220_33
.LBB220_32:                             //   in Loop: Header=BB220_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB220_35
.LBB220_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB220_32
// %bb.34:                              //   in Loop: Header=BB220_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB220_32
.LBB220_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB220_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB220_39
.LBB220_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB220_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB220_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB220_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end220:
	.size	_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end220-_Z26test_do_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI221_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI221_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB221_34
// %bb.1:
	subs	w9, w20, #28
	b.lt	.LBB221_14
// %bb.2:
	lsr	w8, w9, #2
	mov	w9, #18725                      // =0x4925
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w9, #9362, lsl #16
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	w12, w20
	umull	x8, w8, w9
	mov	w9, #28                         // =0x1c
	movk	x10, #16584, lsl #48
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	and	x13, x12, #0x3
	dup	v17.2d, x10
	fmov	d9, x10
	lsr	x8, x8, #32
	dup	v18.2d, x11
	fmov	d10, x11
	adrp	x11, .LCPI221_0
	mov	w26, wzr
	sub	w27, w20, #27
	madd	w22, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI221_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI221_1]
	ldr	d12, [x11, :lo12:.LCPI221_0]
	fmov	d13, x8
	add	x24, x21, #112
	adrp	x19, init_value
	sub	x23, x12, x22
	add	x10, x21, w22, uxtw #3
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x25, x23, x13
	add	x9, x25, x22
	add	x28, x10, #16
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	stp	x9, x13, [sp, #16]              // 16-byte Folded Spill
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	b	.LBB221_4
.LBB221_3:                              //   in Loop: Header=BB221_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB221_34
.LBB221_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB221_5 Depth 2
                                        //     Child Loop BB221_8 Depth 2
                                        //     Child Loop BB221_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB221_5:                              //   Parent Loop BB221_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-112]
	add	x8, x8, #28
	ldp	d3, d4, [x9, #-96]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-80]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-64]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-48]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-32]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-16]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #16]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #32]
	fmadd	d5, d5, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d5, d5, d9
	fadd	d4, d4, d9
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #48]
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #80]
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d7, d5, [x9, #96]
	add	x9, x9, #224
	fadd	d1, d1, d9
	fadd	d4, d4, d9
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB221_5
// %bb.6:                               //   in Loop: Header=BB221_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB221_12
// %bb.7:                               //   in Loop: Header=BB221_4 Depth=1
	cmp	x23, #4
	mov	x10, x22
	mov	x8, x28
	mov	x9, x25
	b.lo	.LBB221_10
.LBB221_8:                              //   Parent Loop BB221_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB221_8
// %bb.9:                               //   in Loop: Header=BB221_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB221_12
.LBB221_10:                             // %.preheader
                                        //   in Loop: Header=BB221_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB221_11:                             //   Parent Loop BB221_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB221_11
.LBB221_12:                             //   in Loop: Header=BB221_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB221_3
// %bb.13:                              //   in Loop: Header=BB221_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB221_3
.LBB221_14:
	cmp	w20, #0
	b.le	.LBB221_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI221_1
	ldr	d12, [x9, :lo12:.LCPI221_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI221_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI221_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB221_17
.LBB221_16:                             //   in Loop: Header=BB221_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB221_34
.LBB221_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB221_27 Depth 2
	cmp	w20, #4
	b.hs	.LBB221_19
// %bb.18:                              //   in Loop: Header=BB221_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB221_26
.LBB221_19:                             //   in Loop: Header=BB221_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB221_25
// %bb.20:                              //   in Loop: Header=BB221_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB221_25
// %bb.21:                              //   in Loop: Header=BB221_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB221_25
// %bb.22:                              //   in Loop: Header=BB221_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB221_25
// %bb.23:                              //   in Loop: Header=BB221_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB221_25
// %bb.24:                              //   in Loop: Header=BB221_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB221_25:                             //   in Loop: Header=BB221_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB221_28
.LBB221_26:                             // %.preheader4
                                        //   in Loop: Header=BB221_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB221_27:                             //   Parent Loop BB221_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB221_27
.LBB221_28:                             //   in Loop: Header=BB221_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB221_16
// %bb.29:                              //   in Loop: Header=BB221_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB221_16
.LBB221_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI221_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI221_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB221_32
.LBB221_31:                             //   in Loop: Header=BB221_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB221_34
.LBB221_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB221_31
// %bb.33:                              //   in Loop: Header=BB221_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB221_31
.LBB221_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB221_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB221_38
.LBB221_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB221_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB221_38:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB221_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end221:
	.size	_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end221-_Z26test_do_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI222_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI222_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB222_34
// %bb.1:
	subs	w9, w20, #27
	b.lt	.LBB222_14
// %bb.2:
	mov	w8, #19419                      // =0x4bdb
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #12136, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	adrp	x11, .LCPI222_0
	lsr	x8, x8, #32
	ldr	d12, [x11, :lo12:.LCPI222_0]
	mov	w26, wzr
	sub	w27, w20, #26
	add	x24, x21, #104
	adrp	x22, init_value
	sub	w9, w9, w8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	add	w8, w8, w9, lsr #1
	mov	w9, #27                         // =0x1b
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	lsr	w8, w8, #4
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI222_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI222_1]
	fmov	d13, x8
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	and	x28, x23, #0xfffffffffffffffc
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB222_4
.LBB222_3:                              //   in Loop: Header=BB222_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB222_34
.LBB222_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB222_5 Depth 2
                                        //     Child Loop BB222_8 Depth 2
                                        //     Child Loop BB222_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB222_5:                              //   Parent Loop BB222_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-104]
	add	x8, x8, #27
	ldp	d3, d4, [x9, #-88]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-72]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-56]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-40]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-8]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #8]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d5, d7, [x9, #24]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d6
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #40]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #56]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #88]
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fmadd	d1, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #104]
	add	x9, x9, #216
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB222_5
// %bb.6:                               //   in Loop: Header=BB222_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB222_12
// %bb.7:                               //   in Loop: Header=BB222_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB222_10
.LBB222_8:                              //   Parent Loop BB222_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB222_8
// %bb.9:                               //   in Loop: Header=BB222_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB222_12
.LBB222_10:                             // %.preheader
                                        //   in Loop: Header=BB222_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB222_11:                             //   Parent Loop BB222_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB222_11
.LBB222_12:                             //   in Loop: Header=BB222_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB222_3
// %bb.13:                              //   in Loop: Header=BB222_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB222_3
.LBB222_14:
	cmp	w20, #0
	b.le	.LBB222_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI222_1
	ldr	d12, [x9, :lo12:.LCPI222_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI222_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI222_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB222_17
.LBB222_16:                             //   in Loop: Header=BB222_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB222_34
.LBB222_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB222_27 Depth 2
	cmp	w20, #4
	b.hs	.LBB222_19
// %bb.18:                              //   in Loop: Header=BB222_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB222_26
.LBB222_19:                             //   in Loop: Header=BB222_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB222_25
// %bb.20:                              //   in Loop: Header=BB222_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB222_25
// %bb.21:                              //   in Loop: Header=BB222_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB222_25
// %bb.22:                              //   in Loop: Header=BB222_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB222_25
// %bb.23:                              //   in Loop: Header=BB222_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB222_25
// %bb.24:                              //   in Loop: Header=BB222_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB222_25:                             //   in Loop: Header=BB222_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB222_28
.LBB222_26:                             // %.preheader4
                                        //   in Loop: Header=BB222_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB222_27:                             //   Parent Loop BB222_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB222_27
.LBB222_28:                             //   in Loop: Header=BB222_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB222_16
// %bb.29:                              //   in Loop: Header=BB222_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB222_16
.LBB222_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI222_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI222_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB222_32
.LBB222_31:                             //   in Loop: Header=BB222_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB222_34
.LBB222_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB222_31
// %bb.33:                              //   in Loop: Header=BB222_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB222_31
.LBB222_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB222_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB222_38
.LBB222_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB222_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB222_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB222_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end222:
	.size	_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end222-_Z26test_do_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI223_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI223_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB223_34
// %bb.1:
	subs	w9, w20, #26
	b.lt	.LBB223_14
// %bb.2:
	mov	w8, #60495                      // =0xec4f
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #20164, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #26                         // =0x1a
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #35
	adrp	x11, .LCPI223_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI223_0]
	sub	w27, w20, #25
	add	x24, x21, #104
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI223_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI223_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB223_4
.LBB223_3:                              //   in Loop: Header=BB223_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB223_34
.LBB223_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB223_5 Depth 2
                                        //     Child Loop BB223_8 Depth 2
                                        //     Child Loop BB223_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB223_5:                              //   Parent Loop BB223_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-104]
	add	x8, x8, #26
	ldp	d3, d4, [x9, #-88]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-72]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-40]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-24]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-8]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #8]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #24]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #40]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fmadd	d1, d1, d10, d8
	ldp	d6, d5, [x9, #56]
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d3, d3, d10, d8
	ldp	d6, d7, [x9, #72]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #88]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #208
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB223_5
// %bb.6:                               //   in Loop: Header=BB223_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB223_12
// %bb.7:                               //   in Loop: Header=BB223_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB223_10
.LBB223_8:                              //   Parent Loop BB223_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB223_8
// %bb.9:                               //   in Loop: Header=BB223_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB223_12
.LBB223_10:                             // %.preheader
                                        //   in Loop: Header=BB223_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB223_11:                             //   Parent Loop BB223_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB223_11
.LBB223_12:                             //   in Loop: Header=BB223_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB223_3
// %bb.13:                              //   in Loop: Header=BB223_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB223_3
.LBB223_14:
	cmp	w20, #0
	b.le	.LBB223_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI223_1
	ldr	d12, [x9, :lo12:.LCPI223_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI223_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI223_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB223_17
.LBB223_16:                             //   in Loop: Header=BB223_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB223_34
.LBB223_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB223_27 Depth 2
	cmp	w20, #4
	b.hs	.LBB223_19
// %bb.18:                              //   in Loop: Header=BB223_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB223_26
.LBB223_19:                             //   in Loop: Header=BB223_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB223_25
// %bb.20:                              //   in Loop: Header=BB223_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB223_25
// %bb.21:                              //   in Loop: Header=BB223_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB223_25
// %bb.22:                              //   in Loop: Header=BB223_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB223_25
// %bb.23:                              //   in Loop: Header=BB223_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB223_25
// %bb.24:                              //   in Loop: Header=BB223_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB223_25:                             //   in Loop: Header=BB223_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB223_28
.LBB223_26:                             // %.preheader4
                                        //   in Loop: Header=BB223_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB223_27:                             //   Parent Loop BB223_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB223_27
.LBB223_28:                             //   in Loop: Header=BB223_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB223_16
// %bb.29:                              //   in Loop: Header=BB223_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB223_16
.LBB223_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI223_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI223_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB223_32
.LBB223_31:                             //   in Loop: Header=BB223_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB223_34
.LBB223_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB223_31
// %bb.33:                              //   in Loop: Header=BB223_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB223_31
.LBB223_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB223_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB223_38
.LBB223_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB223_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB223_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB223_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end223:
	.size	_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end223-_Z26test_do_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI224_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI224_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB224_34
// %bb.1:
	subs	w9, w20, #25
	b.lt	.LBB224_14
// %bb.2:
	mov	w8, #34079                      // =0x851f
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #20971, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #25                         // =0x19
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #35
	adrp	x11, .LCPI224_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI224_0]
	sub	w27, w20, #24
	add	x24, x21, #96
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI224_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI224_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB224_4
.LBB224_3:                              //   in Loop: Header=BB224_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB224_34
.LBB224_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB224_5 Depth 2
                                        //     Child Loop BB224_8 Depth 2
                                        //     Child Loop BB224_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB224_5:                              //   Parent Loop BB224_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-96]
	add	x8, x8, #25
	ldp	d3, d4, [x9, #-80]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-32]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-16]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #16]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d2, d2, d10, d8
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	fadd	d2, d2, d9
	ldp	d7, d6, [x9, #32]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #48]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #64]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #80]
	fadd	d7, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d5
	fmadd	d5, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #96]
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	add	x9, x9, #200
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB224_5
// %bb.6:                               //   in Loop: Header=BB224_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB224_12
// %bb.7:                               //   in Loop: Header=BB224_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB224_10
.LBB224_8:                              //   Parent Loop BB224_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB224_8
// %bb.9:                               //   in Loop: Header=BB224_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB224_12
.LBB224_10:                             // %.preheader
                                        //   in Loop: Header=BB224_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB224_11:                             //   Parent Loop BB224_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB224_11
.LBB224_12:                             //   in Loop: Header=BB224_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB224_3
// %bb.13:                              //   in Loop: Header=BB224_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB224_3
.LBB224_14:
	cmp	w20, #0
	b.le	.LBB224_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI224_1
	ldr	d12, [x9, :lo12:.LCPI224_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI224_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI224_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB224_17
.LBB224_16:                             //   in Loop: Header=BB224_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB224_34
.LBB224_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB224_27 Depth 2
	cmp	w20, #4
	b.hs	.LBB224_19
// %bb.18:                              //   in Loop: Header=BB224_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB224_26
.LBB224_19:                             //   in Loop: Header=BB224_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB224_25
// %bb.20:                              //   in Loop: Header=BB224_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB224_25
// %bb.21:                              //   in Loop: Header=BB224_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB224_25
// %bb.22:                              //   in Loop: Header=BB224_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB224_25
// %bb.23:                              //   in Loop: Header=BB224_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB224_25
// %bb.24:                              //   in Loop: Header=BB224_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB224_25:                             //   in Loop: Header=BB224_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB224_28
.LBB224_26:                             // %.preheader4
                                        //   in Loop: Header=BB224_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB224_27:                             //   Parent Loop BB224_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB224_27
.LBB224_28:                             //   in Loop: Header=BB224_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB224_16
// %bb.29:                              //   in Loop: Header=BB224_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB224_16
.LBB224_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI224_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI224_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB224_32
.LBB224_31:                             //   in Loop: Header=BB224_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB224_34
.LBB224_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB224_31
// %bb.33:                              //   in Loop: Header=BB224_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB224_31
.LBB224_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB224_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB224_38
.LBB224_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB224_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB224_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB224_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end224:
	.size	_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end224-_Z26test_do_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI225_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI225_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB225_33
// %bb.1:
	subs	w9, w20, #24
	b.lt	.LBB225_14
// %bb.2:
	mov	w8, #43691                      // =0xaaab
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #43690, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #24                         // =0x18
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	and	x13, x12, #0x3
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x8, x8, #36
	fmov	d10, x11
	adrp	x11, .LCPI225_0
	ldr	d12, [x11, :lo12:.LCPI225_0]
	mov	w26, wzr
	sub	w27, w20, #23
	madd	w22, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI225_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI225_1]
	add	x24, x21, #96
	fmov	d13, x8
	adrp	x19, init_value
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x22
	add	x10, x21, w22, uxtw #3
	sub	x25, x23, x13
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	add	x9, x25, x22
	add	x28, x10, #16
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	stp	x9, x13, [sp, #16]              // 16-byte Folded Spill
	b	.LBB225_4
.LBB225_3:                              //   in Loop: Header=BB225_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB225_33
.LBB225_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB225_5 Depth 2
                                        //     Child Loop BB225_8 Depth 2
                                        //     Child Loop BB225_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB225_5:                              //   Parent Loop BB225_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-96]
	add	x8, x8, #24
	ldp	d3, d4, [x9, #-80]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-32]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #16]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #32]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #48]
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d1, d1, d10, d8
	ldp	d6, d7, [x9, #64]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #80]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #192
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB225_5
// %bb.6:                               //   in Loop: Header=BB225_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB225_12
// %bb.7:                               //   in Loop: Header=BB225_4 Depth=1
	cmp	x23, #4
	mov	x10, x22
	mov	x8, x28
	mov	x9, x25
	b.lo	.LBB225_10
.LBB225_8:                              //   Parent Loop BB225_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB225_8
// %bb.9:                               //   in Loop: Header=BB225_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB225_12
.LBB225_10:                             // %.preheader
                                        //   in Loop: Header=BB225_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB225_11:                             //   Parent Loop BB225_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB225_11
.LBB225_12:                             //   in Loop: Header=BB225_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB225_3
// %bb.13:                              //   in Loop: Header=BB225_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB225_3
.LBB225_14:
	cmp	w20, #0
	b.le	.LBB225_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI225_1
	ldr	d12, [x9, :lo12:.LCPI225_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI225_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI225_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB225_17
.LBB225_16:                             //   in Loop: Header=BB225_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB225_33
.LBB225_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB225_26 Depth 2
	cmp	w20, #4
	b.hs	.LBB225_19
// %bb.18:                              //   in Loop: Header=BB225_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB225_25
.LBB225_19:                             //   in Loop: Header=BB225_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB225_24
// %bb.20:                              //   in Loop: Header=BB225_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB225_24
// %bb.21:                              //   in Loop: Header=BB225_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB225_24
// %bb.22:                              //   in Loop: Header=BB225_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB225_24
// %bb.23:                              //   in Loop: Header=BB225_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB225_24:                             //   in Loop: Header=BB225_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB225_27
.LBB225_25:                             // %.preheader4
                                        //   in Loop: Header=BB225_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB225_26:                             //   Parent Loop BB225_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB225_26
.LBB225_27:                             //   in Loop: Header=BB225_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB225_16
// %bb.28:                              //   in Loop: Header=BB225_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB225_16
.LBB225_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI225_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI225_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB225_31
.LBB225_30:                             //   in Loop: Header=BB225_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB225_33
.LBB225_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB225_30
// %bb.32:                              //   in Loop: Header=BB225_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB225_30
.LBB225_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB225_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB225_37
.LBB225_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB225_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB225_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB225_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end225:
	.size	_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end225-_Z26test_do_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI226_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI226_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB226_33
// %bb.1:
	subs	w9, w20, #23
	b.lt	.LBB226_14
// %bb.2:
	mov	w8, #17097                      // =0x42c9
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #45590, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #23                         // =0x17
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #36
	adrp	x11, .LCPI226_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI226_0]
	sub	w27, w20, #22
	add	x24, x21, #88
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI226_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI226_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB226_4
.LBB226_3:                              //   in Loop: Header=BB226_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB226_33
.LBB226_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB226_5 Depth 2
                                        //     Child Loop BB226_8 Depth 2
                                        //     Child Loop BB226_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB226_5:                              //   Parent Loop BB226_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-88]
	add	x8, x8, #23
	ldp	d3, d4, [x9, #-72]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-24]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-8]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #8]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #24]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #40]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #56]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #72]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #88]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #184
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB226_5
// %bb.6:                               //   in Loop: Header=BB226_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB226_12
// %bb.7:                               //   in Loop: Header=BB226_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB226_10
.LBB226_8:                              //   Parent Loop BB226_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB226_8
// %bb.9:                               //   in Loop: Header=BB226_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB226_12
.LBB226_10:                             // %.preheader
                                        //   in Loop: Header=BB226_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB226_11:                             //   Parent Loop BB226_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB226_11
.LBB226_12:                             //   in Loop: Header=BB226_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB226_3
// %bb.13:                              //   in Loop: Header=BB226_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB226_3
.LBB226_14:
	cmp	w20, #0
	b.le	.LBB226_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI226_1
	ldr	d12, [x9, :lo12:.LCPI226_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI226_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI226_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB226_17
.LBB226_16:                             //   in Loop: Header=BB226_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB226_33
.LBB226_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB226_26 Depth 2
	cmp	w20, #4
	b.hs	.LBB226_19
// %bb.18:                              //   in Loop: Header=BB226_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB226_25
.LBB226_19:                             //   in Loop: Header=BB226_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB226_24
// %bb.20:                              //   in Loop: Header=BB226_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB226_24
// %bb.21:                              //   in Loop: Header=BB226_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB226_24
// %bb.22:                              //   in Loop: Header=BB226_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB226_24
// %bb.23:                              //   in Loop: Header=BB226_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB226_24:                             //   in Loop: Header=BB226_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB226_27
.LBB226_25:                             // %.preheader4
                                        //   in Loop: Header=BB226_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB226_26:                             //   Parent Loop BB226_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB226_26
.LBB226_27:                             //   in Loop: Header=BB226_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB226_16
// %bb.28:                              //   in Loop: Header=BB226_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB226_16
.LBB226_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI226_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI226_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB226_31
.LBB226_30:                             //   in Loop: Header=BB226_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB226_33
.LBB226_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB226_30
// %bb.32:                              //   in Loop: Header=BB226_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB226_30
.LBB226_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB226_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB226_37
.LBB226_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB226_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB226_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB226_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end226:
	.size	_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end226-_Z26test_do_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI227_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI227_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB227_33
// %bb.1:
	subs	w9, w20, #22
	b.lt	.LBB227_14
// %bb.2:
	mov	w8, #35747                      // =0x8ba3
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #47662, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #22                         // =0x16
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #36
	adrp	x11, .LCPI227_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI227_0]
	sub	w27, w20, #21
	add	x24, x21, #88
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI227_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI227_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB227_4
.LBB227_3:                              //   in Loop: Header=BB227_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB227_33
.LBB227_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB227_5 Depth 2
                                        //     Child Loop BB227_8 Depth 2
                                        //     Child Loop BB227_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB227_5:                              //   Parent Loop BB227_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-88]
	add	x8, x8, #22
	ldp	d3, d4, [x9, #-72]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-24]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-8]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #8]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #56]
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d6, d10, d8
	fadd	d6, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d4, d4, d9
	ldp	d7, d5, [x9, #72]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	add	x9, x9, #176
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB227_5
// %bb.6:                               //   in Loop: Header=BB227_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB227_12
// %bb.7:                               //   in Loop: Header=BB227_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB227_10
.LBB227_8:                              //   Parent Loop BB227_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB227_8
// %bb.9:                               //   in Loop: Header=BB227_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB227_12
.LBB227_10:                             // %.preheader
                                        //   in Loop: Header=BB227_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB227_11:                             //   Parent Loop BB227_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB227_11
.LBB227_12:                             //   in Loop: Header=BB227_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB227_3
// %bb.13:                              //   in Loop: Header=BB227_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB227_3
.LBB227_14:
	cmp	w20, #0
	b.le	.LBB227_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI227_1
	ldr	d12, [x9, :lo12:.LCPI227_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI227_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI227_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB227_17
.LBB227_16:                             //   in Loop: Header=BB227_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB227_33
.LBB227_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB227_26 Depth 2
	cmp	w20, #4
	b.hs	.LBB227_19
// %bb.18:                              //   in Loop: Header=BB227_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB227_25
.LBB227_19:                             //   in Loop: Header=BB227_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB227_24
// %bb.20:                              //   in Loop: Header=BB227_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB227_24
// %bb.21:                              //   in Loop: Header=BB227_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB227_24
// %bb.22:                              //   in Loop: Header=BB227_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB227_24
// %bb.23:                              //   in Loop: Header=BB227_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB227_24:                             //   in Loop: Header=BB227_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB227_27
.LBB227_25:                             // %.preheader4
                                        //   in Loop: Header=BB227_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB227_26:                             //   Parent Loop BB227_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB227_26
.LBB227_27:                             //   in Loop: Header=BB227_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB227_16
// %bb.28:                              //   in Loop: Header=BB227_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB227_16
.LBB227_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI227_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI227_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB227_31
.LBB227_30:                             //   in Loop: Header=BB227_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB227_33
.LBB227_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB227_30
// %bb.32:                              //   in Loop: Header=BB227_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB227_30
.LBB227_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB227_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB227_37
.LBB227_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB227_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB227_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB227_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end227:
	.size	_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end227-_Z26test_do_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI228_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI228_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB228_33
// %bb.1:
	subs	w9, w20, #21
	b.lt	.LBB228_14
// %bb.2:
	mov	w8, #24967                      // =0x6187
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #34328, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	adrp	x11, .LCPI228_0
	lsr	x8, x8, #32
	ldr	d12, [x11, :lo12:.LCPI228_0]
	mov	w26, wzr
	sub	w27, w20, #20
	add	x24, x21, #80
	adrp	x22, init_value
	sub	w9, w9, w8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	add	w8, w8, w9, lsr #1
	mov	w9, #21                         // =0x15
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	lsr	w8, w8, #4
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI228_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI228_1]
	fmov	d13, x8
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	and	x28, x23, #0xfffffffffffffffc
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB228_4
.LBB228_3:                              //   in Loop: Header=BB228_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB228_33
.LBB228_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB228_5 Depth 2
                                        //     Child Loop BB228_8 Depth 2
                                        //     Child Loop BB228_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB228_5:                              //   Parent Loop BB228_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-80]
	add	x8, x8, #21
	ldp	d3, d4, [x9, #-64]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-48]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-32]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-16]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9]
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d2
	fadd	d4, d4, d9
	ldp	d7, d2, [x9, #16]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #32]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #64]
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fmadd	d1, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #80]
	add	x9, x9, #168
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB228_5
// %bb.6:                               //   in Loop: Header=BB228_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB228_12
// %bb.7:                               //   in Loop: Header=BB228_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB228_10
.LBB228_8:                              //   Parent Loop BB228_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB228_8
// %bb.9:                               //   in Loop: Header=BB228_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB228_12
.LBB228_10:                             // %.preheader
                                        //   in Loop: Header=BB228_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB228_11:                             //   Parent Loop BB228_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB228_11
.LBB228_12:                             //   in Loop: Header=BB228_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB228_3
// %bb.13:                              //   in Loop: Header=BB228_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB228_3
.LBB228_14:
	cmp	w20, #0
	b.le	.LBB228_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI228_1
	ldr	d12, [x9, :lo12:.LCPI228_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI228_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI228_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB228_17
.LBB228_16:                             //   in Loop: Header=BB228_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB228_33
.LBB228_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB228_26 Depth 2
	cmp	w20, #4
	b.hs	.LBB228_19
// %bb.18:                              //   in Loop: Header=BB228_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB228_25
.LBB228_19:                             //   in Loop: Header=BB228_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB228_24
// %bb.20:                              //   in Loop: Header=BB228_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB228_24
// %bb.21:                              //   in Loop: Header=BB228_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB228_24
// %bb.22:                              //   in Loop: Header=BB228_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB228_24
// %bb.23:                              //   in Loop: Header=BB228_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB228_24:                             //   in Loop: Header=BB228_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB228_27
.LBB228_25:                             // %.preheader4
                                        //   in Loop: Header=BB228_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB228_26:                             //   Parent Loop BB228_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB228_26
.LBB228_27:                             //   in Loop: Header=BB228_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB228_16
// %bb.28:                              //   in Loop: Header=BB228_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB228_16
.LBB228_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI228_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI228_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB228_31
.LBB228_30:                             //   in Loop: Header=BB228_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB228_33
.LBB228_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB228_30
// %bb.32:                              //   in Loop: Header=BB228_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB228_30
.LBB228_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB228_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB228_37
.LBB228_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB228_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB228_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB228_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end228:
	.size	_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end228-_Z26test_do_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN13do_loop_testsILi19EdE7do_testEPKdPKc,"axG",@progbits,_ZN13do_loop_testsILi19EdE7do_testEPKdPKc,comdat
	.weak	_ZN13do_loop_testsILi19EdE7do_testEPKdPKc // -- Begin function _ZN13do_loop_testsILi19EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN13do_loop_testsILi19EdE7do_testEPKdPKc,@function
_ZN13do_loop_testsILi19EdE7do_testEPKdPKc: // @_ZN13do_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN13do_loop_testsILi10EdE7do_testEPKdPKc
	adrp	x20, temp_string+1000
	add	x20, x20, :lo12:temp_string+1000
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
.Lfunc_end229:
	.size	_ZN13do_loop_testsILi19EdE7do_testEPKdPKc, .Lfunc_end229-_ZN13do_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI230_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI230_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB230_32
// %bb.1:
	subs	w9, w20, #20
	b.lt	.LBB230_14
// %bb.2:
	mov	w8, #52429                      // =0xcccd
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #52428, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #20                         // =0x14
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	and	x13, x12, #0x3
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x8, x8, #36
	fmov	d10, x11
	adrp	x11, .LCPI230_0
	ldr	d12, [x11, :lo12:.LCPI230_0]
	mov	w26, wzr
	sub	w27, w20, #19
	madd	w22, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI230_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI230_1]
	add	x24, x21, #80
	fmov	d13, x8
	adrp	x19, init_value
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x22
	add	x10, x21, w22, uxtw #3
	sub	x25, x23, x13
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	add	x9, x25, x22
	add	x28, x10, #16
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	stp	x9, x13, [sp, #16]              // 16-byte Folded Spill
	b	.LBB230_4
.LBB230_3:                              //   in Loop: Header=BB230_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB230_32
.LBB230_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB230_5 Depth 2
                                        //     Child Loop BB230_8 Depth 2
                                        //     Child Loop BB230_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB230_5:                              //   Parent Loop BB230_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-80]
	add	x8, x8, #20
	ldp	d3, d4, [x9, #-64]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-48]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-32]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-16]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #16]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fmadd	d1, d1, d10, d8
	ldp	d6, d5, [x9, #32]
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d3, d3, d10, d8
	ldp	d6, d7, [x9, #48]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #64]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #160
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB230_5
// %bb.6:                               //   in Loop: Header=BB230_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB230_12
// %bb.7:                               //   in Loop: Header=BB230_4 Depth=1
	cmp	x23, #4
	mov	x10, x22
	mov	x8, x28
	mov	x9, x25
	b.lo	.LBB230_10
.LBB230_8:                              //   Parent Loop BB230_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB230_8
// %bb.9:                               //   in Loop: Header=BB230_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB230_12
.LBB230_10:                             // %.preheader
                                        //   in Loop: Header=BB230_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB230_11:                             //   Parent Loop BB230_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB230_11
.LBB230_12:                             //   in Loop: Header=BB230_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB230_3
// %bb.13:                              //   in Loop: Header=BB230_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB230_3
.LBB230_14:
	cmp	w20, #0
	b.le	.LBB230_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI230_1
	ldr	d12, [x9, :lo12:.LCPI230_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI230_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI230_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB230_17
.LBB230_16:                             //   in Loop: Header=BB230_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB230_32
.LBB230_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB230_25 Depth 2
	cmp	w20, #4
	b.hs	.LBB230_19
// %bb.18:                              //   in Loop: Header=BB230_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB230_24
.LBB230_19:                             //   in Loop: Header=BB230_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB230_23
// %bb.20:                              //   in Loop: Header=BB230_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB230_23
// %bb.21:                              //   in Loop: Header=BB230_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB230_23
// %bb.22:                              //   in Loop: Header=BB230_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB230_23:                             //   in Loop: Header=BB230_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB230_26
.LBB230_24:                             // %.preheader4
                                        //   in Loop: Header=BB230_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB230_25:                             //   Parent Loop BB230_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB230_25
.LBB230_26:                             //   in Loop: Header=BB230_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB230_16
// %bb.27:                              //   in Loop: Header=BB230_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB230_16
.LBB230_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI230_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI230_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB230_30
.LBB230_29:                             //   in Loop: Header=BB230_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB230_32
.LBB230_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB230_29
// %bb.31:                              //   in Loop: Header=BB230_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB230_29
.LBB230_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB230_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB230_36
.LBB230_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB230_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB230_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB230_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end230:
	.size	_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end230-_Z26test_do_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI231_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI231_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB231_32
// %bb.1:
	subs	w9, w20, #19
	b.lt	.LBB231_14
// %bb.2:
	mov	w8, #27595                      // =0x6bcb
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #44840, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	adrp	x11, .LCPI231_0
	lsr	x8, x8, #32
	ldr	d12, [x11, :lo12:.LCPI231_0]
	mov	w26, wzr
	sub	w27, w20, #18
	add	x24, x21, #72
	adrp	x22, init_value
	sub	w9, w9, w8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	add	w8, w8, w9, lsr #1
	mov	w9, #19                         // =0x13
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	lsr	w8, w8, #4
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI231_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI231_1]
	fmov	d13, x8
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	and	x28, x23, #0xfffffffffffffffc
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB231_4
.LBB231_3:                              //   in Loop: Header=BB231_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB231_32
.LBB231_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB231_5 Depth 2
                                        //     Child Loop BB231_8 Depth 2
                                        //     Child Loop BB231_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB231_5:                              //   Parent Loop BB231_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-72]
	add	x8, x8, #19
	ldp	d3, d4, [x9, #-56]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-8]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #8]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #56]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d5
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #72]
	add	x9, x9, #152
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB231_5
// %bb.6:                               //   in Loop: Header=BB231_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB231_12
// %bb.7:                               //   in Loop: Header=BB231_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB231_10
.LBB231_8:                              //   Parent Loop BB231_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB231_8
// %bb.9:                               //   in Loop: Header=BB231_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB231_12
.LBB231_10:                             // %.preheader
                                        //   in Loop: Header=BB231_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB231_11:                             //   Parent Loop BB231_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB231_11
.LBB231_12:                             //   in Loop: Header=BB231_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB231_3
// %bb.13:                              //   in Loop: Header=BB231_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB231_3
.LBB231_14:
	cmp	w20, #0
	b.le	.LBB231_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI231_1
	ldr	d12, [x9, :lo12:.LCPI231_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI231_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI231_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB231_17
.LBB231_16:                             //   in Loop: Header=BB231_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB231_32
.LBB231_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB231_25 Depth 2
	cmp	w20, #4
	b.hs	.LBB231_19
// %bb.18:                              //   in Loop: Header=BB231_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB231_24
.LBB231_19:                             //   in Loop: Header=BB231_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB231_23
// %bb.20:                              //   in Loop: Header=BB231_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB231_23
// %bb.21:                              //   in Loop: Header=BB231_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB231_23
// %bb.22:                              //   in Loop: Header=BB231_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB231_23:                             //   in Loop: Header=BB231_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB231_26
.LBB231_24:                             // %.preheader4
                                        //   in Loop: Header=BB231_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB231_25:                             //   Parent Loop BB231_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB231_25
.LBB231_26:                             //   in Loop: Header=BB231_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB231_16
// %bb.27:                              //   in Loop: Header=BB231_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB231_16
.LBB231_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI231_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI231_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB231_30
.LBB231_29:                             //   in Loop: Header=BB231_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB231_32
.LBB231_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB231_29
// %bb.31:                              //   in Loop: Header=BB231_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB231_29
.LBB231_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB231_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB231_36
.LBB231_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB231_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB231_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB231_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end231:
	.size	_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end231-_Z26test_do_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI232_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI232_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB232_32
// %bb.1:
	subs	w9, w20, #18
	b.lt	.LBB232_14
// %bb.2:
	mov	w8, #36409                      // =0x8e39
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #14563, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #18                         // =0x12
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #34
	adrp	x11, .LCPI232_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI232_0]
	sub	w27, w20, #17
	add	x24, x21, #72
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI232_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI232_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB232_4
.LBB232_3:                              //   in Loop: Header=BB232_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB232_32
.LBB232_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB232_5 Depth 2
                                        //     Child Loop BB232_8 Depth 2
                                        //     Child Loop BB232_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB232_5:                              //   Parent Loop BB232_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-72]
	add	x8, x8, #18
	ldp	d3, d4, [x9, #-56]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	ldp	d4, d5, [x9, #8]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #24]
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #40]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #56]
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	add	x9, x9, #144
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB232_5
// %bb.6:                               //   in Loop: Header=BB232_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB232_12
// %bb.7:                               //   in Loop: Header=BB232_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB232_10
.LBB232_8:                              //   Parent Loop BB232_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB232_8
// %bb.9:                               //   in Loop: Header=BB232_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB232_12
.LBB232_10:                             // %.preheader
                                        //   in Loop: Header=BB232_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB232_11:                             //   Parent Loop BB232_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB232_11
.LBB232_12:                             //   in Loop: Header=BB232_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB232_3
// %bb.13:                              //   in Loop: Header=BB232_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB232_3
.LBB232_14:
	cmp	w20, #0
	b.le	.LBB232_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI232_1
	ldr	d12, [x9, :lo12:.LCPI232_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI232_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI232_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB232_17
.LBB232_16:                             //   in Loop: Header=BB232_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB232_32
.LBB232_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB232_25 Depth 2
	cmp	w20, #4
	b.hs	.LBB232_19
// %bb.18:                              //   in Loop: Header=BB232_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB232_24
.LBB232_19:                             //   in Loop: Header=BB232_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB232_23
// %bb.20:                              //   in Loop: Header=BB232_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB232_23
// %bb.21:                              //   in Loop: Header=BB232_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB232_23
// %bb.22:                              //   in Loop: Header=BB232_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB232_23:                             //   in Loop: Header=BB232_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB232_26
.LBB232_24:                             // %.preheader4
                                        //   in Loop: Header=BB232_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB232_25:                             //   Parent Loop BB232_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB232_25
.LBB232_26:                             //   in Loop: Header=BB232_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB232_16
// %bb.27:                              //   in Loop: Header=BB232_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB232_16
.LBB232_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI232_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI232_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB232_30
.LBB232_29:                             //   in Loop: Header=BB232_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB232_32
.LBB232_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB232_29
// %bb.31:                              //   in Loop: Header=BB232_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB232_29
.LBB232_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB232_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB232_36
.LBB232_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB232_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB232_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB232_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end232:
	.size	_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end232-_Z26test_do_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI233_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI233_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB233_32
// %bb.1:
	subs	w9, w20, #17
	b.lt	.LBB233_14
// %bb.2:
	mov	w8, #61681                      // =0xf0f1
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #61680, lsl #16
	mov	w13, w20
	movk	x10, #16683, lsl #48
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	fmov	v16.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI233_1
	dup	v17.2d, x9
	fmov	d9, x9
	lsr	x8, x8, #36
	dup	v18.2d, x10
	fmov	d10, x10
	adrp	x9, .LCPI233_0
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI233_1]
	add	w8, w8, w8, lsl #4
	ldr	d12, [x9, :lo12:.LCPI233_0]
	mov	w26, wzr
	sub	w27, w20, #16
	add	x24, x21, #64
	adrp	x19, init_value
	add	w22, w8, #17
	stur	x13, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x13, x22
	add	x8, x21, w22, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x22
	add	x25, x8, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB233_4
.LBB233_3:                              //   in Loop: Header=BB233_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB233_32
.LBB233_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB233_5 Depth 2
                                        //     Child Loop BB233_8 Depth 2
                                        //     Child Loop BB233_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB233_5:                              //   Parent Loop BB233_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-64]
	add	x8, x8, #17
	ldp	d3, d4, [x9, #-48]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-32]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #16]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #32]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #48]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #64]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #136
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB233_5
// %bb.6:                               //   in Loop: Header=BB233_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB233_12
// %bb.7:                               //   in Loop: Header=BB233_4 Depth=1
	cmp	x23, #4
	mov	x10, x22
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB233_10
.LBB233_8:                              //   Parent Loop BB233_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB233_8
// %bb.9:                               //   in Loop: Header=BB233_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB233_12
.LBB233_10:                             // %.preheader
                                        //   in Loop: Header=BB233_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB233_11:                             //   Parent Loop BB233_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB233_11
.LBB233_12:                             //   in Loop: Header=BB233_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB233_3
// %bb.13:                              //   in Loop: Header=BB233_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB233_3
.LBB233_14:
	cmp	w20, #0
	b.le	.LBB233_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI233_1
	ldr	d12, [x9, :lo12:.LCPI233_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI233_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI233_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB233_17
.LBB233_16:                             //   in Loop: Header=BB233_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB233_32
.LBB233_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB233_25 Depth 2
	cmp	w20, #4
	b.hs	.LBB233_19
// %bb.18:                              //   in Loop: Header=BB233_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB233_24
.LBB233_19:                             //   in Loop: Header=BB233_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB233_23
// %bb.20:                              //   in Loop: Header=BB233_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB233_23
// %bb.21:                              //   in Loop: Header=BB233_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB233_23
// %bb.22:                              //   in Loop: Header=BB233_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB233_23:                             //   in Loop: Header=BB233_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB233_26
.LBB233_24:                             // %.preheader4
                                        //   in Loop: Header=BB233_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB233_25:                             //   Parent Loop BB233_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB233_25
.LBB233_26:                             //   in Loop: Header=BB233_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB233_16
// %bb.27:                              //   in Loop: Header=BB233_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB233_16
.LBB233_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI233_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI233_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB233_30
.LBB233_29:                             //   in Loop: Header=BB233_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB233_32
.LBB233_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB233_29
// %bb.31:                              //   in Loop: Header=BB233_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB233_29
.LBB233_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB233_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB233_36
.LBB233_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB233_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB233_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB233_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end233:
	.size	_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end233-_Z26test_do_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI234_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI234_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB234_25
// %bb.1:
	subs	w9, w21, #16
	b.lt	.LBB234_14
// %bb.2:
	and	w8, w9, #0xfffffff0
	mov	w9, w21
	fmov	v18.2d, #-13.00000000
	add	w24, w8, #16
	mov	x8, #31336081391616             // =0x1c8000000000
	and	x10, x9, #0x3
	movk	x8, #16584, lsl #48
	sub	x22, x9, x24
	stp	x10, x9, [sp, #24]              // 16-byte Folded Spill
	dup	v16.2d, x8
	fmov	d8, x8
	adrp	x8, .LCPI234_1
	ldr	d11, [x8, :lo12:.LCPI234_1]
	adrp	x8, .LCPI234_0
	sub	x23, x22, x10
	mov	x10, #253411660398592           // =0xe67a00000000
	ldr	d12, [x8, :lo12:.LCPI234_0]
	mov	x8, #70368744177664             // =0x400000000000
	movk	x10, #16683, lsl #48
	movk	x8, #49343, lsl #48
	add	x9, x20, w24, uxtw #3
	dup	v17.2d, x10
	fmov	d9, x10
	fmov	d10, #-13.00000000
	fmov	d13, x8
	mov	w26, wzr
	sub	w27, w21, #15
	add	x19, x20, #64
	add	x11, x23, x24
	add	x9, x9, #16
	adrp	x28, init_value
	str	x11, [sp, #16]                  // 8-byte Folded Spill
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	stur	q16, [x29, #-64]                // 16-byte Folded Spill
	stp	q18, q17, [sp, #48]             // 32-byte Folded Spill
	b	.LBB234_4
.LBB234_3:                              //   in Loop: Header=BB234_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB234_25
.LBB234_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB234_5 Depth 2
                                        //     Child Loop BB234_8 Depth 2
                                        //     Child Loop BB234_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x19
.LBB234_5:                              //   Parent Loop BB234_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-64]
	add	x8, x8, #16
	ldp	d3, d4, [x9, #-48]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-32]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-16]
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d3
	ldp	d2, d3, [x9]
	fadd	d7, d7, d8
	fadd	d2, d2, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d4
	fadd	d3, d3, d8
	fmadd	d7, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d5
	fmadd	d1, d1, d9, d10
	fmadd	d3, d3, d9, d10
	ldp	d4, d5, [x9, #16]
	fadd	d7, d7, d8
	fadd	d2, d2, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d6
	fadd	d1, d1, d8
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fmadd	d7, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #32]
	fadd	d2, d2, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fadd	d6, d6, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d1, d6, d9, d10
	fadd	d6, d7, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d9, d10
	fadd	d4, d4, d8
	ldp	d7, d5, [x9, #48]
	add	x9, x9, #128
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d7, d7, d8
	fadd	d0, d0, d3
	fadd	d2, d2, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fmadd	d5, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d3
	fmadd	d3, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d1, d1, d9, d10
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB234_5
// %bb.6:                               //   in Loop: Header=BB234_4 Depth=1
	cmp	w24, w21
	b.ge	.LBB234_12
// %bb.7:                               //   in Loop: Header=BB234_4 Depth=1
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	cmp	x22, #4
	mov	x10, x24
	mov	x9, x23
	b.lo	.LBB234_10
.LBB234_8:                              //   Parent Loop BB234_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB234_8
// %bb.9:                               //   in Loop: Header=BB234_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB234_12
.LBB234_10:                             // %.preheader
                                        //   in Loop: Header=BB234_4 Depth=1
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB234_11:                             //   Parent Loop BB234_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB234_11
.LBB234_12:                             //   in Loop: Header=BB234_4 Depth=1
	ldr	d1, [x28, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB234_3
// %bb.13:                              //   in Loop: Header=BB234_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #48]             // 32-byte Folded Reload
	ldur	q16, [x29, #-64]                // 16-byte Folded Reload
	b	.LBB234_3
.LBB234_14:
	cmp	w21, #0
	b.le	.LBB234_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI234_1
	adrp	x10, .LCPI234_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI234_1]
	ldr	d12, [x10, :lo12:.LCPI234_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB234_17
.LBB234_16:                             //   in Loop: Header=BB234_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB234_25
.LBB234_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB234_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB234_18:                             //   Parent Loop BB234_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB234_18
// %bb.19:                              //   in Loop: Header=BB234_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB234_16
// %bb.20:                              //   in Loop: Header=BB234_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB234_16
.LBB234_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI234_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI234_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB234_23
.LBB234_22:                             //   in Loop: Header=BB234_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB234_25
.LBB234_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB234_22
// %bb.24:                              //   in Loop: Header=BB234_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB234_22
.LBB234_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB234_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB234_29
.LBB234_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB234_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB234_29:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB234_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end234:
	.size	_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end234-_Z26test_do_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI235_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI235_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB235_25
// %bb.1:
	subs	w9, w21, #15
	b.lt	.LBB235_14
// %bb.2:
	mov	w8, #34953                      // =0x8889
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w8, #34952, lsl #16
	mov	w14, w21
	movk	x10, #16683, lsl #48
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	fmov	v16.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x12, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI235_1
	dup	v17.2d, x9
	fmov	d9, x9
	lsr	x8, x8, #35
	dup	v18.2d, x10
	fmov	d10, x10
	adrp	x9, .LCPI235_0
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI235_1]
	lsl	w11, w8, #4
	ldr	d12, [x9, :lo12:.LCPI235_0]
	mov	w26, wzr
	sub	w27, w21, #14
	add	x24, x20, #56
	adrp	x19, init_value
	sub	w8, w11, w8
	add	w22, w8, #15
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	sub	x23, x14, x22
	add	x8, x20, w22, uxtw #3
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	add	x9, x28, x22
	add	x8, x8, #16
	stp	x9, x14, [sp, #8]               // 16-byte Folded Spill
	str	x8, [sp, #24]                   // 8-byte Folded Spill
	b	.LBB235_4
.LBB235_3:                              //   in Loop: Header=BB235_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB235_25
.LBB235_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB235_5 Depth 2
                                        //     Child Loop BB235_8 Depth 2
                                        //     Child Loop BB235_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB235_5:                              //   Parent Loop BB235_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-56]
	add	x8, x8, #15
	ldp	d3, d4, [x9, #-40]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #8]
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #24]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d7, d7, d9
	ldp	d6, d5, [x9, #40]
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fmadd	d1, d7, d10, d8
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d5, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #56]
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	add	x9, x9, #120
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB235_5
// %bb.6:                               //   in Loop: Header=BB235_4 Depth=1
	cmp	w22, w21
	b.ge	.LBB235_12
// %bb.7:                               //   in Loop: Header=BB235_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x23, #4
	mov	x10, x22
	mov	x9, x28
	b.lo	.LBB235_10
.LBB235_8:                              //   Parent Loop BB235_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB235_8
// %bb.9:                               //   in Loop: Header=BB235_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB235_12
.LBB235_10:                             // %.preheader
                                        //   in Loop: Header=BB235_4 Depth=1
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB235_11:                             //   Parent Loop BB235_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB235_11
.LBB235_12:                             //   in Loop: Header=BB235_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB235_3
// %bb.13:                              //   in Loop: Header=BB235_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB235_3
.LBB235_14:
	cmp	w21, #0
	b.le	.LBB235_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI235_1
	adrp	x10, .LCPI235_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI235_1]
	ldr	d12, [x10, :lo12:.LCPI235_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB235_17
.LBB235_16:                             //   in Loop: Header=BB235_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB235_25
.LBB235_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB235_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB235_18:                             //   Parent Loop BB235_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB235_18
// %bb.19:                              //   in Loop: Header=BB235_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB235_16
// %bb.20:                              //   in Loop: Header=BB235_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB235_16
.LBB235_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI235_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI235_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB235_23
.LBB235_22:                             //   in Loop: Header=BB235_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB235_25
.LBB235_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB235_22
// %bb.24:                              //   in Loop: Header=BB235_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB235_22
.LBB235_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB235_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB235_29
.LBB235_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB235_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB235_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB235_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end235:
	.size	_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end235-_Z26test_do_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI236_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI236_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB236_25
// %bb.1:
	subs	w9, w21, #14
	b.lt	.LBB236_14
// %bb.2:
	lsr	w8, w9, #1
	mov	w9, #9363                       // =0x2493
	mov	w12, w21
	movk	w9, #37449, lsl #16
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	umull	x8, w8, w9
	mov	w9, #14                         // =0xe
	movk	x10, #16584, lsl #48
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x8, x8, #34
	fmov	d10, x11
	adrp	x11, .LCPI236_0
	ldr	d12, [x11, :lo12:.LCPI236_0]
	mov	w26, wzr
	sub	w27, w21, #13
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI236_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI236_1]
	add	x24, x20, #56
	fmov	d13, x8
	adrp	x13, init_value
	sub	x23, x12, x19
	add	x10, x20, w19, uxtw #3
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	add	x9, x28, x19
	stp	x9, x12, [sp, #8]               // 16-byte Folded Spill
	add	x9, x10, #16
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	b	.LBB236_4
.LBB236_3:                              //   in Loop: Header=BB236_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB236_25
.LBB236_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB236_5 Depth 2
                                        //     Child Loop BB236_8 Depth 2
                                        //     Child Loop BB236_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB236_5:                              //   Parent Loop BB236_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-56]
	add	x8, x8, #14
	ldp	d3, d4, [x9, #-40]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d6, d10, d8
	ldp	d7, d6, [x9, #8]
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fadd	d4, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	ldp	d5, d7, [x9, #24]
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d5, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #40]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #112
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB236_5
// %bb.6:                               //   in Loop: Header=BB236_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB236_12
// %bb.7:                               //   in Loop: Header=BB236_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x23, #4
	mov	x10, x19
	mov	x9, x28
	b.lo	.LBB236_10
.LBB236_8:                              //   Parent Loop BB236_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB236_8
// %bb.9:                               //   in Loop: Header=BB236_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB236_12
.LBB236_10:                             // %.preheader
                                        //   in Loop: Header=BB236_4 Depth=1
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB236_11:                             //   Parent Loop BB236_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB236_11
.LBB236_12:                             //   in Loop: Header=BB236_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB236_3
// %bb.13:                              //   in Loop: Header=BB236_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x22, x25
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	mov	x25, x22
	b	.LBB236_3
.LBB236_14:
	cmp	w21, #0
	b.le	.LBB236_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI236_1
	adrp	x10, .LCPI236_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI236_1]
	ldr	d12, [x10, :lo12:.LCPI236_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB236_17
.LBB236_16:                             //   in Loop: Header=BB236_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB236_25
.LBB236_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB236_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB236_18:                             //   Parent Loop BB236_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB236_18
// %bb.19:                              //   in Loop: Header=BB236_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB236_16
// %bb.20:                              //   in Loop: Header=BB236_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB236_16
.LBB236_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI236_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI236_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB236_23
.LBB236_22:                             //   in Loop: Header=BB236_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB236_25
.LBB236_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB236_22
// %bb.24:                              //   in Loop: Header=BB236_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB236_22
.LBB236_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB236_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB236_29
.LBB236_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB236_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB236_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB236_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end236:
	.size	_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end236-_Z26test_do_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI237_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI237_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB237_25
// %bb.1:
	subs	w9, w21, #13
	b.lt	.LBB237_14
// %bb.2:
	mov	w8, #60495                      // =0xec4f
	mov	w12, w21
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w8, #20164, lsl #16
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #13                         // =0xd
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #34
	adrp	x11, .LCPI237_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI237_0]
	sub	w27, w21, #12
	add	x24, x20, #48
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI237_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI237_1]
	adrp	x13, init_value
	fmov	d13, x8
	sub	x23, x12, x19
	add	x10, x20, w19, uxtw #3
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	add	x9, x28, x19
	stp	x9, x12, [sp, #8]               // 16-byte Folded Spill
	add	x9, x10, #16
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	b	.LBB237_4
.LBB237_3:                              //   in Loop: Header=BB237_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB237_25
.LBB237_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB237_5 Depth 2
                                        //     Child Loop BB237_8 Depth 2
                                        //     Child Loop BB237_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB237_5:                              //   Parent Loop BB237_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-48]
	add	x8, x8, #13
	ldp	d3, d4, [x9, #-32]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #16]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #32]
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d1, d1, d9
	fmadd	d6, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldr	d6, [x9, #48]
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	add	x9, x9, #104
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d3, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d4, d4, d9
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB237_5
// %bb.6:                               //   in Loop: Header=BB237_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB237_12
// %bb.7:                               //   in Loop: Header=BB237_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x23, #4
	mov	x10, x19
	mov	x9, x28
	b.lo	.LBB237_10
.LBB237_8:                              //   Parent Loop BB237_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB237_8
// %bb.9:                               //   in Loop: Header=BB237_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB237_12
.LBB237_10:                             // %.preheader
                                        //   in Loop: Header=BB237_4 Depth=1
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB237_11:                             //   Parent Loop BB237_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB237_11
.LBB237_12:                             //   in Loop: Header=BB237_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB237_3
// %bb.13:                              //   in Loop: Header=BB237_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x22, x25
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	mov	x25, x22
	b	.LBB237_3
.LBB237_14:
	cmp	w21, #0
	b.le	.LBB237_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI237_1
	adrp	x10, .LCPI237_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI237_1]
	ldr	d12, [x10, :lo12:.LCPI237_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB237_17
.LBB237_16:                             //   in Loop: Header=BB237_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB237_25
.LBB237_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB237_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB237_18:                             //   Parent Loop BB237_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB237_18
// %bb.19:                              //   in Loop: Header=BB237_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB237_16
// %bb.20:                              //   in Loop: Header=BB237_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB237_16
.LBB237_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI237_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI237_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB237_23
.LBB237_22:                             //   in Loop: Header=BB237_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB237_25
.LBB237_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB237_22
// %bb.24:                              //   in Loop: Header=BB237_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB237_22
.LBB237_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB237_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB237_29
.LBB237_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB237_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB237_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB237_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end237:
	.size	_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end237-_Z26test_do_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI238_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI238_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB238_25
// %bb.1:
	subs	w9, w21, #12
	b.lt	.LBB238_14
// %bb.2:
	mov	w8, #43691                      // =0xaaab
	mov	w12, w21
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w8, #43690, lsl #16
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #12                         // =0xc
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	and	x14, x12, #0x3
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x8, x8, #35
	fmov	d10, x11
	adrp	x11, .LCPI238_0
	ldr	d12, [x11, :lo12:.LCPI238_0]
	mov	w26, wzr
	sub	w27, w21, #11
	madd	w22, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI238_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI238_1]
	add	x24, x20, #48
	fmov	d13, x8
	adrp	x13, init_value
	stp	x14, x12, [sp, #24]             // 16-byte Folded Spill
	sub	x23, x12, x22
	add	x10, x20, w22, uxtw #3
	sub	x28, x23, x14
	stur	q16, [x29, #-64]                // 16-byte Folded Spill
	add	x9, x28, x22
	stp	q18, q17, [sp, #48]             // 32-byte Folded Spill
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	add	x9, x10, #16
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	b	.LBB238_4
.LBB238_3:                              //   in Loop: Header=BB238_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB238_25
.LBB238_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB238_5 Depth 2
                                        //     Child Loop BB238_8 Depth 2
                                        //     Child Loop BB238_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB238_5:                              //   Parent Loop BB238_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-48]
	add	x8, x8, #12
	ldp	d3, d4, [x9, #-32]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d6, d10, d8
	ldp	d7, d6, [x9]
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d5, d6, d9
	fadd	d1, d1, d9
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	ldp	d3, d7, [x9, #16]
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #32]
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	add	x9, x9, #96
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB238_5
// %bb.6:                               //   in Loop: Header=BB238_4 Depth=1
	cmp	w22, w21
	b.ge	.LBB238_12
// %bb.7:                               //   in Loop: Header=BB238_4 Depth=1
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	cmp	x23, #4
	mov	x10, x22
	mov	x9, x28
	b.lo	.LBB238_10
.LBB238_8:                              //   Parent Loop BB238_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB238_8
// %bb.9:                               //   in Loop: Header=BB238_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB238_12
.LBB238_10:                             // %.preheader
                                        //   in Loop: Header=BB238_4 Depth=1
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB238_11:                             //   Parent Loop BB238_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB238_11
.LBB238_12:                             //   in Loop: Header=BB238_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB238_3
// %bb.13:                              //   in Loop: Header=BB238_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x19, x25
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #48]             // 32-byte Folded Reload
	mov	x13, x25
	ldur	q16, [x29, #-64]                // 16-byte Folded Reload
	mov	x25, x19
	b	.LBB238_3
.LBB238_14:
	cmp	w21, #0
	b.le	.LBB238_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI238_1
	adrp	x10, .LCPI238_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI238_1]
	ldr	d12, [x10, :lo12:.LCPI238_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB238_17
.LBB238_16:                             //   in Loop: Header=BB238_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB238_25
.LBB238_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB238_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB238_18:                             //   Parent Loop BB238_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB238_18
// %bb.19:                              //   in Loop: Header=BB238_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB238_16
// %bb.20:                              //   in Loop: Header=BB238_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB238_16
.LBB238_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI238_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI238_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB238_23
.LBB238_22:                             //   in Loop: Header=BB238_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB238_25
.LBB238_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB238_22
// %bb.24:                              //   in Loop: Header=BB238_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB238_22
.LBB238_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB238_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB238_29
.LBB238_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB238_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB238_29:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB238_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end238:
	.size	_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end238-_Z26test_do_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN13do_loop_testsILi10EdE7do_testEPKdPKc,"axG",@progbits,_ZN13do_loop_testsILi10EdE7do_testEPKdPKc,comdat
	.weak	_ZN13do_loop_testsILi10EdE7do_testEPKdPKc // -- Begin function _ZN13do_loop_testsILi10EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN13do_loop_testsILi10EdE7do_testEPKdPKc,@function
_ZN13do_loop_testsILi10EdE7do_testEPKdPKc: // @_ZN13do_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x20, temp_string
	add	x20, x20, :lo12:temp_string
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	mov	x19, x0
	bl	_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
	add	x2, x20, #900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
.Lfunc_end239:
	.size	_ZN13do_loop_testsILi10EdE7do_testEPKdPKc, .Lfunc_end239-_ZN13do_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI240_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI240_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB240_25
// %bb.1:
	subs	w9, w21, #11
	b.lt	.LBB240_14
// %bb.2:
	mov	w8, #35747                      // =0x8ba3
	mov	w12, w21
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w8, #47662, lsl #16
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #11                         // =0xb
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #35
	adrp	x11, .LCPI240_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI240_0]
	sub	w27, w21, #10
	add	x24, x20, #40
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI240_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI240_1]
	adrp	x13, init_value
	fmov	d13, x8
	sub	x23, x12, x19
	add	x10, x20, w19, uxtw #3
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	add	x9, x28, x19
	stp	x9, x12, [sp, #8]               // 16-byte Folded Spill
	add	x9, x10, #16
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	b	.LBB240_4
.LBB240_3:                              //   in Loop: Header=BB240_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB240_25
.LBB240_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB240_5 Depth 2
                                        //     Child Loop BB240_8 Depth 2
                                        //     Child Loop BB240_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB240_5:                              //   Parent Loop BB240_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-40]
	add	x8, x8, #11
	ldp	d3, d4, [x9, #-24]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d6, d10, d8
	ldp	d7, d6, [x9, #24]
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fadd	d3, d3, d9
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d4
	ldr	d4, [x9, #40]
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #88
	fadd	d4, d4, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB240_5
// %bb.6:                               //   in Loop: Header=BB240_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB240_12
// %bb.7:                               //   in Loop: Header=BB240_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x23, #4
	mov	x10, x19
	mov	x9, x28
	b.lo	.LBB240_10
.LBB240_8:                              //   Parent Loop BB240_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB240_8
// %bb.9:                               //   in Loop: Header=BB240_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB240_12
.LBB240_10:                             // %.preheader
                                        //   in Loop: Header=BB240_4 Depth=1
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB240_11:                             //   Parent Loop BB240_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB240_11
.LBB240_12:                             //   in Loop: Header=BB240_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB240_3
// %bb.13:                              //   in Loop: Header=BB240_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x22, x25
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	mov	x25, x22
	b	.LBB240_3
.LBB240_14:
	cmp	w21, #0
	b.le	.LBB240_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI240_1
	adrp	x10, .LCPI240_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI240_1]
	ldr	d12, [x10, :lo12:.LCPI240_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB240_17
.LBB240_16:                             //   in Loop: Header=BB240_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB240_25
.LBB240_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB240_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB240_18:                             //   Parent Loop BB240_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB240_18
// %bb.19:                              //   in Loop: Header=BB240_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB240_16
// %bb.20:                              //   in Loop: Header=BB240_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB240_16
.LBB240_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI240_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI240_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB240_23
.LBB240_22:                             //   in Loop: Header=BB240_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB240_25
.LBB240_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB240_22
// %bb.24:                              //   in Loop: Header=BB240_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB240_22
.LBB240_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB240_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB240_29
.LBB240_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB240_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB240_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB240_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end240:
	.size	_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end240-_Z26test_do_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI241_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI241_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB241_25
// %bb.1:
	subs	w9, w21, #10
	b.lt	.LBB241_14
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	x11, #31336081391616            // =0x1c8000000000
	mov	x12, #253411660398592           // =0xe67a00000000
	movk	w10, #52428, lsl #16
	mov	w13, w21
	movk	x11, #16584, lsl #48
	umull	x9, w9, w10
	mov	w10, #10                        // =0xa
	movk	x12, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x11
	fmov	d9, x11
	dup	v18.2d, x12
	fmov	d10, x12
	lsr	x9, x9, #35
	adrp	x12, .LCPI241_0
	mov	w26, wzr
	ldr	d12, [x12, :lo12:.LCPI241_0]
	sub	w27, w21, #9
	add	x24, x20, #40
	madd	w19, w9, w10, w10
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x10, .LCPI241_1
	movk	x9, #49343, lsl #48
	ldr	d11, [x10, :lo12:.LCPI241_1]
	adrp	x22, init_value
	fmov	d13, x9
	sub	x25, x13, x19
	add	x11, x20, w19, uxtw #3
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	and	x23, x25, #0xfffffffffffffffc
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	add	x10, x23, x19
	add	x28, x11, #16
	stp	x10, x13, [sp, #16]             // 16-byte Folded Spill
	b	.LBB241_4
.LBB241_3:                              //   in Loop: Header=BB241_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB241_25
.LBB241_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB241_5 Depth 2
                                        //     Child Loop BB241_8 Depth 2
                                        //     Child Loop BB241_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x24
.LBB241_5:                              //   Parent Loop BB241_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-40]
	add	x9, x9, #10
	ldp	d3, d4, [x10, #-24]
	cmp	x9, x27
	ldp	d5, d6, [x10, #-8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x10, #8]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d6, d9
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d5, d9
	fmadd	d2, d2, d10, d8
	ldp	d7, d5, [x10, #24]
	fmadd	d6, d6, d10, d8
	add	x10, x10, #80
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d3, d3, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB241_5
// %bb.6:                               //   in Loop: Header=BB241_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB241_12
// %bb.7:                               //   in Loop: Header=BB241_4 Depth=1
	cmp	x25, #4
	mov	x11, x19
	mov	x9, x28
	mov	x10, x23
	b.lo	.LBB241_10
.LBB241_8:                              //   Parent Loop BB241_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB241_8
// %bb.9:                               //   in Loop: Header=BB241_4 Depth=1
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x25, x23
	b.eq	.LBB241_12
.LBB241_10:                             // %.preheader
                                        //   in Loop: Header=BB241_4 Depth=1
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	add	x9, x20, x11, lsl #3
	sub	x10, x10, x11
.LBB241_11:                             //   Parent Loop BB241_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB241_11
.LBB241_12:                             //   in Loop: Header=BB241_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB241_3
// %bb.13:                              //   in Loop: Header=BB241_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB241_3
.LBB241_14:
	cmp	w21, #0
	b.le	.LBB241_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI241_1
	adrp	x10, .LCPI241_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI241_1]
	ldr	d12, [x10, :lo12:.LCPI241_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB241_17
.LBB241_16:                             //   in Loop: Header=BB241_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB241_25
.LBB241_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB241_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB241_18:                             //   Parent Loop BB241_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB241_18
// %bb.19:                              //   in Loop: Header=BB241_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB241_16
// %bb.20:                              //   in Loop: Header=BB241_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB241_16
.LBB241_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI241_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI241_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB241_23
.LBB241_22:                             //   in Loop: Header=BB241_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB241_25
.LBB241_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB241_22
// %bb.24:                              //   in Loop: Header=BB241_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB241_22
.LBB241_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB241_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB241_29
.LBB241_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB241_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB241_29:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB241_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end241:
	.size	_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end241-_Z26test_do_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI242_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI242_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB242_31
// %bb.1:
	subs	w9, w20, #9
	b.lt	.LBB242_14
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #14563, lsl #16
	mov	w14, w20
	movk	x11, #16683, lsl #48
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v16.2d, #-13.00000000
	movk	x10, #16584, lsl #48
	movk	x12, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI242_1
	dup	v17.2d, x10
	fmov	d9, x10
	lsr	x9, x9, #33
	dup	v18.2d, x11
	fmov	d10, x11
	adrp	x10, .LCPI242_0
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI242_1]
	add	w9, w9, w9, lsl #3
	ldr	d12, [x10, :lo12:.LCPI242_0]
	mov	w26, wzr
	sub	w27, w20, #8
	add	x24, x21, #32
	adrp	x19, init_value
	add	w22, w9, #9
	stur	x14, [x29, #-56]                // 8-byte Folded Spill
	sub	x25, x14, x22
	add	x9, x21, w22, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x23, x25, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x10, x23, x22
	add	x28, x9, #16
	str	x10, [sp, #8]                   // 8-byte Folded Spill
	b	.LBB242_4
.LBB242_3:                              //   in Loop: Header=BB242_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB242_31
.LBB242_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB242_5 Depth 2
                                        //     Child Loop BB242_8 Depth 2
                                        //     Child Loop BB242_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x24
.LBB242_5:                              //   Parent Loop BB242_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-32]
	add	x9, x9, #9
	ldp	d3, d4, [x10, #-16]
	cmp	x9, x27
	ldp	d5, d6, [x10]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d6, d10, d8
	ldp	d7, d6, [x10, #16]
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d2
	ldr	d2, [x10, #32]
	fmadd	d1, d1, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	add	x10, x10, #72
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d3
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB242_5
// %bb.6:                               //   in Loop: Header=BB242_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB242_12
// %bb.7:                               //   in Loop: Header=BB242_4 Depth=1
	cmp	x25, #4
	mov	x11, x22
	mov	x9, x28
	mov	x10, x23
	b.lo	.LBB242_10
.LBB242_8:                              //   Parent Loop BB242_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB242_8
// %bb.9:                               //   in Loop: Header=BB242_4 Depth=1
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x25, x23
	b.eq	.LBB242_12
.LBB242_10:                             // %.preheader
                                        //   in Loop: Header=BB242_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB242_11:                             //   Parent Loop BB242_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB242_11
.LBB242_12:                             //   in Loop: Header=BB242_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB242_3
// %bb.13:                              //   in Loop: Header=BB242_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB242_3
.LBB242_14:
	cmp	w20, #0
	b.le	.LBB242_27
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI242_1
	adrp	x10, .LCPI242_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI242_1]
	ldr	d13, [x10, :lo12:.LCPI242_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB242_17
.LBB242_16:                             //   in Loop: Header=BB242_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB242_31
.LBB242_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB242_25
// %bb.18:                              //   in Loop: Header=BB242_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB242_25
// %bb.19:                              //   in Loop: Header=BB242_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB242_25
// %bb.20:                              //   in Loop: Header=BB242_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB242_25
// %bb.21:                              //   in Loop: Header=BB242_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB242_25
// %bb.22:                              //   in Loop: Header=BB242_17 Depth=1
	ldr	d1, [x21, #40]
	cmp	w20, #6
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB242_25
// %bb.23:                              //   in Loop: Header=BB242_17 Depth=1
	ldr	d1, [x21, #48]
	cmp	w20, #7
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB242_25
// %bb.24:                              //   in Loop: Header=BB242_17 Depth=1
	ldr	d1, [x21, #56]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB242_25:                             //   in Loop: Header=BB242_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB242_16
// %bb.26:                              //   in Loop: Header=BB242_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB242_16
.LBB242_27:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI242_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI242_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB242_29
.LBB242_28:                             //   in Loop: Header=BB242_29 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB242_31
.LBB242_29:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB242_28
// %bb.30:                              //   in Loop: Header=BB242_29 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB242_28
.LBB242_31:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB242_33
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB242_35
.LBB242_33:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB242_36
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
.LBB242_35:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB242_36:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end242:
	.size	_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end242-_Z26test_do_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI243_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI243_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB243_30
// %bb.1:
	subs	w9, w20, #8
	b.lt	.LBB243_14
// %bb.2:
	and	w9, w9, #0xfffffff8
	mov	w10, w20
	fmov	v18.2d, #-13.00000000
	add	w24, w9, #8
	mov	x9, #31336081391616             // =0x1c8000000000
	and	x11, x10, #0x3
	movk	x9, #16584, lsl #48
	sub	x22, x10, x24
	str	x11, [sp, #24]                  // 8-byte Folded Spill
	dup	v16.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI243_1
	ldr	d11, [x9, :lo12:.LCPI243_1]
	adrp	x9, .LCPI243_0
	sub	x25, x22, x11
	mov	x11, #253411660398592           // =0xe67a00000000
	ldr	d12, [x9, :lo12:.LCPI243_0]
	mov	x9, #70368744177664             // =0x400000000000
	movk	x11, #16683, lsl #48
	movk	x9, #49343, lsl #48
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x10, x21, w24, uxtw #3
	dup	v17.2d, x11
	fmov	d9, x11
	fmov	d10, #-13.00000000
	fmov	d13, x9
	mov	w26, wzr
	sub	w27, w20, #7
	add	x19, x21, #32
	add	x12, x25, x24
	add	x23, x10, #16
	adrp	x28, init_value
	str	x12, [sp, #16]                  // 8-byte Folded Spill
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	b	.LBB243_4
.LBB243_3:                              //   in Loop: Header=BB243_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB243_30
.LBB243_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB243_5 Depth 2
                                        //     Child Loop BB243_8 Depth 2
                                        //     Child Loop BB243_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x19
.LBB243_5:                              //   Parent Loop BB243_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-32]
	add	x9, x9, #8
	ldp	d3, d4, [x10, #-16]
	cmp	x9, x27
	ldp	d5, d6, [x10]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d0, d0, d1
	fadd	d1, d5, d8
	ldp	d7, d5, [x10, #16]
	add	x10, x10, #64
	fadd	d7, d7, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d9, d10
	fadd	d2, d4, d8
	fadd	d4, d5, d8
	fmadd	d5, d7, d9, d10
	fadd	d0, d0, d3
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB243_5
// %bb.6:                               //   in Loop: Header=BB243_4 Depth=1
	cmp	w24, w20
	b.ge	.LBB243_12
// %bb.7:                               //   in Loop: Header=BB243_4 Depth=1
	cmp	x22, #4
	mov	x11, x24
	mov	x9, x23
	mov	x10, x25
	b.lo	.LBB243_10
.LBB243_8:                              //   Parent Loop BB243_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB243_8
// %bb.9:                               //   in Loop: Header=BB243_4 Depth=1
	ldp	x11, x9, [sp, #16]              // 16-byte Folded Reload
	cbz	x9, .LBB243_12
.LBB243_10:                             // %.preheader
                                        //   in Loop: Header=BB243_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB243_11:                             //   Parent Loop BB243_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB243_11
.LBB243_12:                             //   in Loop: Header=BB243_4 Depth=1
	ldr	d1, [x28, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB243_3
// %bb.13:                              //   in Loop: Header=BB243_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB243_3
.LBB243_14:
	cmp	w20, #0
	b.le	.LBB243_26
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI243_1
	adrp	x10, .LCPI243_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI243_1]
	ldr	d13, [x10, :lo12:.LCPI243_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB243_17
.LBB243_16:                             //   in Loop: Header=BB243_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB243_30
.LBB243_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB243_24
// %bb.18:                              //   in Loop: Header=BB243_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB243_24
// %bb.19:                              //   in Loop: Header=BB243_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB243_24
// %bb.20:                              //   in Loop: Header=BB243_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB243_24
// %bb.21:                              //   in Loop: Header=BB243_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB243_24
// %bb.22:                              //   in Loop: Header=BB243_17 Depth=1
	ldr	d1, [x21, #40]
	cmp	w20, #6
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB243_24
// %bb.23:                              //   in Loop: Header=BB243_17 Depth=1
	ldr	d1, [x21, #48]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB243_24:                             //   in Loop: Header=BB243_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB243_16
// %bb.25:                              //   in Loop: Header=BB243_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB243_16
.LBB243_26:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI243_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI243_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB243_28
.LBB243_27:                             //   in Loop: Header=BB243_28 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB243_30
.LBB243_28:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB243_27
// %bb.29:                              //   in Loop: Header=BB243_28 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB243_27
.LBB243_30:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB243_32
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB243_34
.LBB243_32:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB243_35
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
.LBB243_34:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB243_35:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end243:
	.size	_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end243-_Z26test_do_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI244_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI244_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB244_29
// %bb.1:
	subs	w9, w20, #7
	b.lt	.LBB244_14
// %bb.2:
	mov	w10, #18725                     // =0x4925
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x13, #70368744177664            // =0x400000000000
	movk	w10, #9362, lsl #16
	mov	w15, w20
	movk	x11, #16683, lsl #48
	umull	x10, w9, w10
	fmov	v7.2d, #-13.00000000
	movk	x13, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x14, .LCPI244_1
	dup	v17.2d, x11
	fmov	d10, x11
	fmov	d13, x13
	ldr	d11, [x14, :lo12:.LCPI244_1]
	lsr	x10, x10, #32
	mov	w26, wzr
	sub	w27, w20, #6
	add	x24, x21, #24
	adrp	x19, init_value
	stur	x15, [x29, #-56]                // 8-byte Folded Spill
	sub	w9, w9, w10
	str	q17, [sp, #16]                  // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x10, #16584, lsl #48
	lsr	w9, w9, #2
	dup	v16.2d, x10
	fmov	d9, x10
	adrp	x10, .LCPI244_0
	lsl	w12, w9, #3
	ldr	d12, [x10, :lo12:.LCPI244_0]
	stp	q16, q7, [sp, #32]              // 32-byte Folded Spill
	sub	w9, w12, w9
	add	w22, w9, #7
	sub	x25, x15, x22
	add	x9, x21, w22, uxtw #3
	and	x23, x25, #0xfffffffffffffffc
	add	x10, x23, x22
	add	x28, x9, #16
	str	x10, [sp, #8]                   // 8-byte Folded Spill
	b	.LBB244_4
.LBB244_3:                              //   in Loop: Header=BB244_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB244_29
.LBB244_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB244_5 Depth 2
                                        //     Child Loop BB244_8 Depth 2
                                        //     Child Loop BB244_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x24
.LBB244_5:                              //   Parent Loop BB244_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-24]
	add	x9, x9, #7
	ldp	d3, d4, [x10, #-8]
	cmp	x9, x27
	ldp	d5, d6, [x10, #8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x10, #24]
	add	x10, x10, #56
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d4, d9
	fadd	d4, d6, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d2, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB244_5
// %bb.6:                               //   in Loop: Header=BB244_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB244_12
// %bb.7:                               //   in Loop: Header=BB244_4 Depth=1
	cmp	x25, #4
	mov	x11, x22
	mov	x9, x28
	mov	x10, x23
	b.lo	.LBB244_10
.LBB244_8:                              //   Parent Loop BB244_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB244_8
// %bb.9:                               //   in Loop: Header=BB244_4 Depth=1
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x25, x23
	b.eq	.LBB244_12
.LBB244_10:                             // %.preheader
                                        //   in Loop: Header=BB244_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB244_11:                             //   Parent Loop BB244_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB244_11
.LBB244_12:                             //   in Loop: Header=BB244_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB244_3
// %bb.13:                              //   in Loop: Header=BB244_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q17, q16, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB244_3
.LBB244_14:
	cmp	w20, #0
	b.le	.LBB244_25
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI244_1
	adrp	x10, .LCPI244_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI244_1]
	ldr	d13, [x10, :lo12:.LCPI244_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB244_17
.LBB244_16:                             //   in Loop: Header=BB244_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB244_29
.LBB244_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB244_23
// %bb.18:                              //   in Loop: Header=BB244_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB244_23
// %bb.19:                              //   in Loop: Header=BB244_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB244_23
// %bb.20:                              //   in Loop: Header=BB244_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB244_23
// %bb.21:                              //   in Loop: Header=BB244_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB244_23
// %bb.22:                              //   in Loop: Header=BB244_17 Depth=1
	ldr	d1, [x21, #40]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB244_23:                             //   in Loop: Header=BB244_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB244_16
// %bb.24:                              //   in Loop: Header=BB244_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB244_16
.LBB244_25:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI244_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI244_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB244_27
.LBB244_26:                             //   in Loop: Header=BB244_27 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB244_29
.LBB244_27:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB244_26
// %bb.28:                              //   in Loop: Header=BB244_27 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB244_26
.LBB244_29:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB244_31
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB244_33
.LBB244_31:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB244_34
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
.LBB244_33:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB244_34:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end244:
	.size	_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end244-_Z26test_do_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI245_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI245_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB245_28
// %bb.1:
	subs	w9, w20, #6
	b.lt	.LBB245_14
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	x11, #31336081391616            // =0x1c8000000000
	mov	x12, #253411660398592           // =0xe67a00000000
	movk	w10, #43690, lsl #16
	mov	w13, w20
	movk	x11, #16584, lsl #48
	umull	x9, w9, w10
	mov	w10, #6                         // =0x6
	movk	x12, #16683, lsl #48
	fmov	v7.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v16.2d, x11
	fmov	d9, x11
	dup	v17.2d, x12
	fmov	d10, x12
	lsr	x9, x9, #34
	adrp	x12, .LCPI245_0
	mov	w26, wzr
	ldr	d12, [x12, :lo12:.LCPI245_0]
	sub	w27, w20, #5
	add	x24, x21, #24
	madd	w19, w9, w10, w10
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x10, .LCPI245_1
	movk	x9, #49343, lsl #48
	ldr	d11, [x10, :lo12:.LCPI245_1]
	adrp	x22, init_value
	fmov	d13, x9
	stur	x13, [x29, #-56]                // 8-byte Folded Spill
	sub	x25, x13, x19
	add	x11, x21, w19, uxtw #3
	stp	q16, q7, [sp, #32]              // 32-byte Folded Spill
	and	x23, x25, #0xfffffffffffffffc
	str	q17, [sp, #16]                  // 16-byte Folded Spill
	add	x10, x23, x19
	add	x28, x11, #16
	str	x10, [sp, #8]                   // 8-byte Folded Spill
	b	.LBB245_4
.LBB245_3:                              //   in Loop: Header=BB245_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB245_28
.LBB245_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB245_5 Depth 2
                                        //     Child Loop BB245_8 Depth 2
                                        //     Child Loop BB245_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x24
.LBB245_5:                              //   Parent Loop BB245_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-24]
	add	x9, x9, #6
	ldp	d3, d4, [x10, #-8]
	cmp	x9, x27
	ldp	d5, d6, [x10, #8]
	add	x10, x10, #48
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB245_5
// %bb.6:                               //   in Loop: Header=BB245_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB245_12
// %bb.7:                               //   in Loop: Header=BB245_4 Depth=1
	cmp	x25, #4
	mov	x11, x19
	mov	x9, x28
	mov	x10, x23
	b.lo	.LBB245_10
.LBB245_8:                              //   Parent Loop BB245_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB245_8
// %bb.9:                               //   in Loop: Header=BB245_4 Depth=1
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x25, x23
	b.eq	.LBB245_12
.LBB245_10:                             // %.preheader
                                        //   in Loop: Header=BB245_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB245_11:                             //   Parent Loop BB245_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB245_11
.LBB245_12:                             //   in Loop: Header=BB245_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB245_3
// %bb.13:                              //   in Loop: Header=BB245_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q17, q16, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB245_3
.LBB245_14:
	cmp	w20, #0
	b.le	.LBB245_24
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI245_1
	adrp	x10, .LCPI245_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI245_1]
	ldr	d13, [x10, :lo12:.LCPI245_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB245_17
.LBB245_16:                             //   in Loop: Header=BB245_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB245_28
.LBB245_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB245_22
// %bb.18:                              //   in Loop: Header=BB245_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB245_22
// %bb.19:                              //   in Loop: Header=BB245_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB245_22
// %bb.20:                              //   in Loop: Header=BB245_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB245_22
// %bb.21:                              //   in Loop: Header=BB245_17 Depth=1
	ldr	d1, [x21, #32]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB245_22:                             //   in Loop: Header=BB245_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB245_16
// %bb.23:                              //   in Loop: Header=BB245_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB245_16
.LBB245_24:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI245_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI245_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB245_26
.LBB245_25:                             //   in Loop: Header=BB245_26 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB245_28
.LBB245_26:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB245_25
// %bb.27:                              //   in Loop: Header=BB245_26 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB245_25
.LBB245_28:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB245_30
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB245_32
.LBB245_30:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB245_33
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
.LBB245_32:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB245_33:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end245:
	.size	_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end245-_Z26test_do_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI246_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI246_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB246_27
// %bb.1:
	subs	w9, w20, #5
	b.lt	.LBB246_14
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #52428, lsl #16
	mov	w15, w20
	movk	x11, #16683, lsl #48
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v6.2d, #-13.00000000
	movk	x10, #16584, lsl #48
	movk	x12, #49343, lsl #48
	add	x24, x21, #16
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI246_1
	adrp	x14, .LCPI246_0
	lsr	x9, x9, #34
	dup	v7.2d, x10
	fmov	d9, x10
	dup	v16.2d, x11
	fmov	d10, x11
	fmov	d13, x12
	add	w9, w9, w9, lsl #2
	ldr	d11, [x13, :lo12:.LCPI246_1]
	ldr	d12, [x14, :lo12:.LCPI246_0]
	mov	w26, wzr
	sub	w27, w20, #4
	adrp	x19, init_value
	add	w22, w9, #5
	stur	x15, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x15, x22
	add	x28, x24, w22, uxtw #3
	stp	q7, q6, [sp, #32]               // 32-byte Folded Spill
	and	x25, x23, #0xfffffffffffffffc
	str	q16, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x25, x22
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB246_4
.LBB246_3:                              //   in Loop: Header=BB246_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB246_27
.LBB246_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB246_5 Depth 2
                                        //     Child Loop BB246_8 Depth 2
                                        //     Child Loop BB246_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x24
.LBB246_5:                              //   Parent Loop BB246_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-16]
	add	x9, x9, #5
	ldp	d3, d4, [x10]
	cmp	x9, x27
	ldr	d5, [x10, #16]
	add	x10, x10, #40
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d2, d5, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d3, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB246_5
// %bb.6:                               //   in Loop: Header=BB246_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB246_12
// %bb.7:                               //   in Loop: Header=BB246_4 Depth=1
	cmp	x23, #4
	mov	x11, x22
	mov	x9, x28
	mov	x10, x25
	b.lo	.LBB246_10
.LBB246_8:                              //   Parent Loop BB246_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v6.16b
	mov	v4.16b, v6.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v7.2d
	fmla	v3.2d, v16.2d, v1.2d
	fadd	v1.2d, v2.2d, v7.2d
	fadd	v2.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	fmla	v3.2d, v16.2d, v1.2d
	fmla	v4.2d, v16.2d, v2.2d
	fadd	v1.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	fadd	v2.2d, v4.2d, v7.2d
	mov	v4.16b, v6.16b
	fmla	v3.2d, v16.2d, v1.2d
	fmla	v4.2d, v16.2d, v2.2d
	fadd	v1.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v16.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB246_8
// %bb.9:                               //   in Loop: Header=BB246_4 Depth=1
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x25
	b.eq	.LBB246_12
.LBB246_10:                             // %.preheader
                                        //   in Loop: Header=BB246_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB246_11:                             //   Parent Loop BB246_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB246_11
.LBB246_12:                             //   in Loop: Header=BB246_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB246_3
// %bb.13:                              //   in Loop: Header=BB246_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q16, q7, [sp, #16]              // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q6, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB246_3
.LBB246_14:
	cmp	w20, #0
	b.le	.LBB246_23
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI246_1
	adrp	x10, .LCPI246_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI246_1]
	ldr	d13, [x10, :lo12:.LCPI246_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB246_17
.LBB246_16:                             //   in Loop: Header=BB246_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB246_27
.LBB246_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB246_21
// %bb.18:                              //   in Loop: Header=BB246_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB246_21
// %bb.19:                              //   in Loop: Header=BB246_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB246_21
// %bb.20:                              //   in Loop: Header=BB246_17 Depth=1
	ldr	d1, [x21, #24]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB246_21:                             //   in Loop: Header=BB246_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB246_16
// %bb.22:                              //   in Loop: Header=BB246_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB246_16
.LBB246_23:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI246_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI246_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB246_25
.LBB246_24:                             //   in Loop: Header=BB246_25 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB246_27
.LBB246_25:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB246_24
// %bb.26:                              //   in Loop: Header=BB246_25 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB246_24
.LBB246_27:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB246_29
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB246_31
.LBB246_29:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB246_32
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
.LBB246_31:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB246_32:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end246:
	.size	_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end246-_Z26test_do_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI247_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI247_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB247_26
// %bb.1:
	subs	w9, w20, #4
	b.lt	.LBB247_14
// %bb.2:
	and	w9, w9, #0xfffffffc
	mov	w10, w20
	fmov	v7.2d, #-13.00000000
	add	w19, w9, #4
	mov	x9, #31336081391616             // =0x1c8000000000
	add	x24, x21, #16
	movk	x9, #16584, lsl #48
	and	x11, x10, #0x3
	sub	x22, x10, x19
	dup	v5.2d, x9
	fmov	d8, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	fmov	d10, #-13.00000000
	sub	x23, x22, x11
	dup	v6.2d, x9
	fmov	d9, x9
	adrp	x9, .LCPI247_1
	ldr	d11, [x9, :lo12:.LCPI247_1]
	adrp	x9, .LCPI247_0
	add	x25, x24, w19, uxtw #3
	ldr	d12, [x9, :lo12:.LCPI247_0]
	mov	x9, #70368744177664             // =0x400000000000
	mov	w26, wzr
	movk	x9, #49343, lsl #48
	sub	w27, w20, #3
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	fmov	d13, x9
	add	x10, x23, x19
	adrp	x28, init_value
	stp	x10, x11, [sp, #16]             // 16-byte Folded Spill
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB247_4
.LBB247_3:                              //   in Loop: Header=BB247_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB247_26
.LBB247_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB247_5 Depth 2
                                        //     Child Loop BB247_8 Depth 2
                                        //     Child Loop BB247_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x24
	mov	w10, #1                         // =0x1
.LBB247_5:                              //   Parent Loop BB247_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-16]
	add	x11, x10, #3
	ldp	d3, d4, [x9], #32
	add	x10, x10, #4
	cmp	x11, x27
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB247_5
// %bb.6:                               //   in Loop: Header=BB247_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB247_12
// %bb.7:                               //   in Loop: Header=BB247_4 Depth=1
	cmp	x22, #4
	mov	x11, x19
	mov	x9, x25
	mov	x10, x23
	b.lo	.LBB247_10
.LBB247_8:                              //   Parent Loop BB247_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB247_8
// %bb.9:                               //   in Loop: Header=BB247_4 Depth=1
	ldp	x11, x9, [sp, #16]              // 16-byte Folded Reload
	cbz	x9, .LBB247_12
.LBB247_10:                             // %.preheader
                                        //   in Loop: Header=BB247_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB247_11:                             //   Parent Loop BB247_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB247_11
.LBB247_12:                             //   in Loop: Header=BB247_4 Depth=1
	ldr	d1, [x28, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB247_3
// %bb.13:                              //   in Loop: Header=BB247_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB247_3
.LBB247_14:
	cmp	w20, #0
	b.le	.LBB247_22
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI247_1
	adrp	x10, .LCPI247_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI247_1]
	ldr	d13, [x10, :lo12:.LCPI247_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB247_17
.LBB247_16:                             //   in Loop: Header=BB247_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB247_26
.LBB247_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB247_20
// %bb.18:                              //   in Loop: Header=BB247_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB247_20
// %bb.19:                              //   in Loop: Header=BB247_17 Depth=1
	ldr	d1, [x21, #16]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB247_20:                             //   in Loop: Header=BB247_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB247_16
// %bb.21:                              //   in Loop: Header=BB247_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB247_16
.LBB247_22:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI247_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI247_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB247_24
.LBB247_23:                             //   in Loop: Header=BB247_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB247_26
.LBB247_24:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB247_23
// %bb.25:                              //   in Loop: Header=BB247_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB247_23
.LBB247_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB247_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB247_30
.LBB247_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB247_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB247_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB247_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end247:
	.size	_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end247-_Z26test_do_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI248_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI248_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB248_25
// %bb.1:
	subs	w9, w20, #3
	b.lt	.LBB248_14
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #43690, lsl #16
	mov	w15, w20
	movk	x11, #16683, lsl #48
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v5.2d, #-13.00000000
	movk	x10, #16584, lsl #48
	movk	x12, #49343, lsl #48
	add	x24, x21, #16
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI248_1
	adrp	x14, .LCPI248_0
	lsr	x9, x9, #33
	dup	v6.2d, x10
	fmov	d9, x10
	dup	v7.2d, x11
	fmov	d10, x11
	fmov	d13, x12
	add	w9, w9, w9, lsl #1
	ldr	d11, [x13, :lo12:.LCPI248_1]
	ldr	d12, [x14, :lo12:.LCPI248_0]
	mov	w26, wzr
	sub	w27, w20, #2
	adrp	x19, init_value
	add	w22, w9, #3
	stur	x15, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x15, x22
	add	x28, x24, w22, uxtw #3
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	and	x25, x23, #0xfffffffffffffffc
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	add	x9, x25, x22
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB248_4
.LBB248_3:                              //   in Loop: Header=BB248_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB248_25
.LBB248_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB248_5 Depth 2
                                        //     Child Loop BB248_8 Depth 2
                                        //     Child Loop BB248_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x24
	mov	w10, #1                         // =0x1
.LBB248_5:                              //   Parent Loop BB248_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-16]
	add	x11, x10, #2
	ldr	d3, [x9], #24
	add	x10, x10, #3
	cmp	x11, x27
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB248_5
// %bb.6:                               //   in Loop: Header=BB248_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB248_12
// %bb.7:                               //   in Loop: Header=BB248_4 Depth=1
	cmp	x23, #4
	mov	x11, x22
	mov	x9, x28
	mov	x10, x25
	b.lo	.LBB248_10
.LBB248_8:                              //   Parent Loop BB248_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v5.16b
	mov	v4.16b, v5.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v6.2d
	fmla	v3.2d, v7.2d, v1.2d
	fadd	v1.2d, v2.2d, v6.2d
	fadd	v2.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	fmla	v3.2d, v7.2d, v1.2d
	fmla	v4.2d, v7.2d, v2.2d
	fadd	v1.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	fadd	v2.2d, v4.2d, v6.2d
	mov	v4.16b, v5.16b
	fmla	v3.2d, v7.2d, v1.2d
	fmla	v4.2d, v7.2d, v2.2d
	fadd	v1.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v7.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB248_8
// %bb.9:                               //   in Loop: Header=BB248_4 Depth=1
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x25
	b.eq	.LBB248_12
.LBB248_10:                             // %.preheader
                                        //   in Loop: Header=BB248_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB248_11:                             //   Parent Loop BB248_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB248_11
.LBB248_12:                             //   in Loop: Header=BB248_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB248_3
// %bb.13:                              //   in Loop: Header=BB248_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB248_3
.LBB248_14:
	cmp	w20, #0
	b.le	.LBB248_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI248_1
	adrp	x10, .LCPI248_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI248_1]
	ldr	d13, [x10, :lo12:.LCPI248_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB248_17
.LBB248_16:                             //   in Loop: Header=BB248_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB248_25
.LBB248_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB248_19
// %bb.18:                              //   in Loop: Header=BB248_17 Depth=1
	ldr	d1, [x21, #8]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB248_19:                             //   in Loop: Header=BB248_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB248_16
// %bb.20:                              //   in Loop: Header=BB248_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB248_16
.LBB248_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI248_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI248_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB248_23
.LBB248_22:                             //   in Loop: Header=BB248_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB248_25
.LBB248_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB248_22
// %bb.24:                              //   in Loop: Header=BB248_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB248_22
.LBB248_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB248_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB248_29
.LBB248_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB248_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB248_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB248_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end248:
	.size	_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end248-_Z26test_do_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI249_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI249_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB249_23
// %bb.1:
	subs	w9, w21, #2
	b.lt	.LBB249_14
// %bb.2:
	and	w9, w9, #0xfffffffe
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	w28, w21
	add	w24, w9, #2
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x10, #16584, lsl #48
	movk	x9, #16683, lsl #48
	fmov	v7.2d, #-13.00000000
	sub	x19, x28, x24
	dup	v6.2d, x9
	fmov	d9, x9
	adrp	x9, .LCPI249_1
	ldr	d11, [x9, :lo12:.LCPI249_1]
	adrp	x9, .LCPI249_0
	add	x11, x20, w24, uxtw #3
	ldr	d12, [x9, :lo12:.LCPI249_0]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v5.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d8, x10
	fmov	d10, #-13.00000000
	fmov	d13, x9
	and	x22, x19, #0xfffffffffffffffc
	mov	w26, wzr
	sub	w27, w21, #1
	add	x10, x22, x24
	add	x23, x11, #16
	adrp	x25, init_value
	str	x10, [sp, #16]                  // 8-byte Folded Spill
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB249_4
.LBB249_3:                              //   in Loop: Header=BB249_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB249_23
.LBB249_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB249_5 Depth 2
                                        //     Child Loop BB249_8 Depth 2
                                        //     Child Loop BB249_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
.LBB249_5:                              //   Parent Loop BB249_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x10, x20, x9, lsl #3
	add	x9, x9, #2
	cmp	x9, x27
	ldp	d1, d2, [x10]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB249_5
// %bb.6:                               //   in Loop: Header=BB249_4 Depth=1
	cmp	w24, w21
	b.ge	.LBB249_12
// %bb.7:                               //   in Loop: Header=BB249_4 Depth=1
	cmp	x19, #4
	mov	x11, x24
	mov	x9, x23
	mov	x10, x22
	b.lo	.LBB249_10
.LBB249_8:                              //   Parent Loop BB249_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB249_8
// %bb.9:                               //   in Loop: Header=BB249_4 Depth=1
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x19, x22
	b.eq	.LBB249_12
.LBB249_10:                             // %.preheader
                                        //   in Loop: Header=BB249_4 Depth=1
	add	x9, x20, x11, lsl #3
	sub	x10, x28, x11
.LBB249_11:                             //   Parent Loop BB249_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB249_11
.LBB249_12:                             //   in Loop: Header=BB249_4 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB249_3
// %bb.13:                              //   in Loop: Header=BB249_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB249_3
.LBB249_14:
	adrp	x19, init_value
	cmp	w21, #1
	ldr	d0, [x19, :lo12:init_value]
	b.ne	.LBB249_19
// %bb.15:                              // %.preheader4
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v4.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	v7.2d, #0000000000000000
	dup	v5.2d, x9
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #16575, lsl #48
	adrp	x10, .LCPI249_0
	mov	w22, wzr
	dup	v16.2d, x9
	adrp	x9, .LCPI249_1
	ldr	d9, [x10, :lo12:.LCPI249_0]
	ldr	d8, [x9, :lo12:.LCPI249_1]
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	stp	q5, q4, [sp, #48]               // 32-byte Folded Spill
	stp	q16, q6, [sp, #16]              // 32-byte Folded Spill
	b	.LBB249_17
.LBB249_16:                             //   in Loop: Header=BB249_17 Depth=1
	add	w22, w22, #1
	cmp	w22, w8
	b.ge	.LBB249_23
.LBB249_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d1, [x20]
	mov	v2.16b, v4.16b
	mov	v1.d[1], v0.d[0]
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v2.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v4.16b
	fmla	v2.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v4.16b
	fmla	v2.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v7.2d
	fmul	v2.2d, v2.2d, v16.2d
	mov	v3.16b, v1.16b
	mov	v3.d[1], v2.d[1]
	dup	v2.2d, v2.d[1]
	fsub	v2.2d, v3.2d, v2.2d
	fdiv	v3.2d, v2.2d, v1.2d
	fabs	d1, d1
	fcmp	d1, d8
	fcsel	d1, d3, d2, gt
	fabs	d1, d1
	fcmp	d1, d9
	b.mi	.LBB249_16
// %bb.18:                              //   in Loop: Header=BB249_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v7.2d, #0000000000000000
	ldp	q16, q6, [sp, #16]              // 32-byte Folded Reload
	ldp	q5, q4, [sp, #48]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	d0, [x19, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB249_16
.LBB249_19:                             // %.preheader6
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	fmov	d10, #-13.00000000
	movk	x9, #16584, lsl #48
	adrp	x10, .LCPI249_0
	mov	w21, wzr
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d12, [x10, :lo12:.LCPI249_0]
	movk	x9, #16683, lsl #48
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB249_21
.LBB249_20:                             //   in Loop: Header=BB249_21 Depth=1
	add	w21, w21, #1
	cmp	w21, w8
	b.ge	.LBB249_23
.LBB249_21:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB249_20
// %bb.22:                              //   in Loop: Header=BB249_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x19, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB249_20
.LBB249_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB249_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB249_27
.LBB249_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB249_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB249_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB249_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end249:
	.size	_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end249-_Z26test_do_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI250_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI250_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	2
	.type	_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc: // @_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	stp	d13, d12, [sp, #64]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #80]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #96]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB250_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB250_13
// %bb.2:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	fmov	d10, #-13.00000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI250_1
	ldr	d11, [x9, :lo12:.LCPI250_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	adrp	x10, .LCPI250_0
	fmov	d13, x9
	mov	w27, w20
	ldr	d12, [x10, :lo12:.LCPI250_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB250_4
.LBB250_3:                              //   in Loop: Header=BB250_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB250_17
.LBB250_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB250_7 Depth 2
                                        //     Child Loop BB250_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB250_6
// %bb.5:                               //   in Loop: Header=BB250_4 Depth=1
	mov	x10, xzr
	b	.LBB250_9
.LBB250_6:                              // %.preheader2
                                        //   in Loop: Header=BB250_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB250_7:                              //   Parent Loop BB250_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB250_7
// %bb.8:                               //   in Loop: Header=BB250_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB250_11
.LBB250_9:                              // %.preheader
                                        //   in Loop: Header=BB250_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB250_10:                             //   Parent Loop BB250_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB250_10
.LBB250_11:                             //   in Loop: Header=BB250_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB250_3
// %bb.12:                              //   in Loop: Header=BB250_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB250_3
.LBB250_13:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI250_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI250_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB250_15
.LBB250_14:                             //   in Loop: Header=BB250_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB250_17
.LBB250_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB250_14
// %bb.16:                              //   in Loop: Header=BB250_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB250_14
.LBB250_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB250_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB250_21
.LBB250_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB250_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB250_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #96]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #80]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB250_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end250:
	.size	_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end250-_Z26test_do_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
.LCPI251_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI251_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB251_35
// %bb.1:
	subs	w9, w20, #32
	b.lt	.LBB251_14
// %bb.2:
	and	w8, w9, #0xffffffe0
	mov	w9, w20
	fmov	v18.2d, #-13.00000000
	add	w24, w8, #32
	mov	x8, #31336081391616             // =0x1c8000000000
	and	x10, x9, #0x3
	movk	x8, #16584, lsl #48
	sub	x22, x9, x24
	str	x10, [sp, #24]                  // 8-byte Folded Spill
	dup	v16.2d, x8
	fmov	d8, x8
	adrp	x8, .LCPI251_1
	ldr	d11, [x8, :lo12:.LCPI251_1]
	adrp	x8, .LCPI251_0
	sub	x23, x22, x10
	mov	x10, #253411660398592           // =0xe67a00000000
	ldr	d12, [x8, :lo12:.LCPI251_0]
	mov	x8, #70368744177664             // =0x400000000000
	movk	x10, #16683, lsl #48
	movk	x8, #49343, lsl #48
	stur	x9, [x29, #-56]                 // 8-byte Folded Spill
	add	x9, x21, w24, uxtw #3
	dup	v17.2d, x10
	fmov	d9, x10
	fmov	d10, #-13.00000000
	fmov	d13, x8
	mov	w26, wzr
	sub	w27, w20, #31
	add	x19, x21, #128
	add	x11, x23, x24
	add	x25, x9, #16
	adrp	x28, init_value
	str	x11, [sp, #16]                  // 8-byte Folded Spill
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	b	.LBB251_4
.LBB251_3:                              //   in Loop: Header=BB251_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB251_35
.LBB251_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB251_5 Depth 2
                                        //     Child Loop BB251_8 Depth 2
                                        //     Child Loop BB251_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x19
.LBB251_5:                              //   Parent Loop BB251_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-128]
	add	x8, x8, #32
	ldp	d3, d4, [x9, #-112]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-96]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-80]
	fadd	d1, d1, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-64]
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fadd	d3, d3, d8
	fadd	d0, d0, d4
	fadd	d2, d2, d8
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-48]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d6, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-32]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d3, d3, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #-16]
	fmadd	d2, d2, d9, d10
	fadd	d5, d5, d8
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d2, d2, d8
	fmadd	d5, d5, d9, d10
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d6
	ldp	d7, d6, [x9]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d6, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #16]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d7, d8
	fmadd	d3, d3, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #32]
	fmadd	d2, d2, d9, d10
	fadd	d5, d5, d8
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d2, d2, d8
	fmadd	d5, d5, d9, d10
	fmadd	d4, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #48]
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d8
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d7, d7, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #64]
	fadd	d3, d3, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d7, d7, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d0, d0, d2
	fadd	d1, d1, d8
	fmadd	d3, d3, d9, d10
	fmadd	d2, d6, d9, d10
	fadd	d7, d7, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d9, d10
	fmadd	d1, d1, d9, d10
	ldp	d6, d5, [x9, #80]
	fadd	d2, d2, d8
	fmadd	d7, d7, d9, d10
	fadd	d6, d6, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d8
	fadd	d4, d5, d8
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d5, d6, d9, d10
	fadd	d0, d0, d7
	fmadd	d3, d3, d9, d10
	ldp	d6, d7, [x9, #96]
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d2, d2, d8
	fadd	d6, d6, d8
	fadd	d5, d5, d8
	fadd	d0, d0, d3
	fadd	d4, d4, d8
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d3, d6, d9, d10
	fmadd	d5, d5, d9, d10
	fadd	d6, d7, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	ldp	d7, d5, [x9, #112]
	fmadd	d6, d6, d9, d10
	add	x9, x9, #256
	fadd	d0, d0, d1
	fadd	d7, d7, d8
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d6, d6, d8
	fmadd	d5, d7, d9, d10
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d3
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB251_5
// %bb.6:                               //   in Loop: Header=BB251_4 Depth=1
	cmp	w24, w20
	b.ge	.LBB251_12
// %bb.7:                               //   in Loop: Header=BB251_4 Depth=1
	cmp	x22, #4
	mov	x10, x24
	mov	x8, x25
	mov	x9, x23
	b.lo	.LBB251_10
.LBB251_8:                              //   Parent Loop BB251_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB251_8
// %bb.9:                               //   in Loop: Header=BB251_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB251_12
.LBB251_10:                             // %.preheader
                                        //   in Loop: Header=BB251_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB251_11:                             //   Parent Loop BB251_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB251_11
.LBB251_12:                             //   in Loop: Header=BB251_4 Depth=1
	ldr	d1, [x28, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB251_3
// %bb.13:                              //   in Loop: Header=BB251_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB251_3
.LBB251_14:
	cmp	w20, #0
	b.le	.LBB251_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI251_1
	ldr	d12, [x9, :lo12:.LCPI251_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI251_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI251_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB251_17
.LBB251_16:                             //   in Loop: Header=BB251_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB251_35
.LBB251_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB251_28 Depth 2
	cmp	w20, #4
	b.hs	.LBB251_19
// %bb.18:                              //   in Loop: Header=BB251_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB251_27
.LBB251_19:                             //   in Loop: Header=BB251_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB251_26
// %bb.20:                              //   in Loop: Header=BB251_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB251_26
// %bb.21:                              //   in Loop: Header=BB251_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB251_26
// %bb.22:                              //   in Loop: Header=BB251_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB251_26
// %bb.23:                              //   in Loop: Header=BB251_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB251_26
// %bb.24:                              //   in Loop: Header=BB251_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB251_26
// %bb.25:                              //   in Loop: Header=BB251_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB251_26:                             //   in Loop: Header=BB251_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB251_29
.LBB251_27:                             // %.preheader4
                                        //   in Loop: Header=BB251_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB251_28:                             //   Parent Loop BB251_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB251_28
.LBB251_29:                             //   in Loop: Header=BB251_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB251_16
// %bb.30:                              //   in Loop: Header=BB251_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB251_16
.LBB251_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI251_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI251_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB251_33
.LBB251_32:                             //   in Loop: Header=BB251_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB251_35
.LBB251_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB251_32
// %bb.34:                              //   in Loop: Header=BB251_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB251_32
.LBB251_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB251_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB251_39
.LBB251_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB251_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB251_39:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB251_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end251:
	.size	_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc, .Lfunc_end251-_Z28test_goto_loop_unroll_factorILi32EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
.LCPI252_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI252_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB252_35
// %bb.1:
	subs	w9, w20, #31
	b.lt	.LBB252_14
// %bb.2:
	mov	w8, #4229                       // =0x1085
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w8, #2114, lsl #16
	mov	w14, w20
	movk	x10, #16683, lsl #48
	umull	x8, w9, w8
	fmov	v16.2d, #-13.00000000
	movk	x12, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI252_1
	dup	v18.2d, x10
	fmov	d10, x10
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI252_1]
	lsr	x8, x8, #32
	mov	w26, wzr
	sub	w27, w20, #30
	add	x24, x21, #120
	adrp	x19, init_value
	stur	x14, [x29, #-56]                // 8-byte Folded Spill
	sub	w9, w9, w8
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	w8, w8, w9, lsr #1
	mov	x9, #31336081391616             // =0x1c8000000000
	movk	x9, #16584, lsl #48
	lsr	w8, w8, #4
	dup	v17.2d, x9
	fmov	d9, x9
	adrp	x9, .LCPI252_0
	lsl	w11, w8, #5
	ldr	d12, [x9, :lo12:.LCPI252_0]
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	sub	w8, w11, w8
	add	w22, w8, #31
	sub	x23, x14, x22
	add	x8, x21, w22, uxtw #3
	and	x28, x23, #0xfffffffffffffffc
	add	x9, x28, x22
	add	x25, x8, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB252_4
.LBB252_3:                              //   in Loop: Header=BB252_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB252_35
.LBB252_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB252_5 Depth 2
                                        //     Child Loop BB252_8 Depth 2
                                        //     Child Loop BB252_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB252_5:                              //   Parent Loop BB252_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-120]
	add	x8, x8, #31
	ldp	d3, d4, [x9, #-104]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-88]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-56]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-40]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-24]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #-8]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #8]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d7, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #40]
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #56]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #72]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #88]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #104]
	fadd	d7, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d5
	fmadd	d5, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #120]
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	add	x9, x9, #248
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB252_5
// %bb.6:                               //   in Loop: Header=BB252_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB252_12
// %bb.7:                               //   in Loop: Header=BB252_4 Depth=1
	cmp	x23, #4
	mov	x10, x22
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB252_10
.LBB252_8:                              //   Parent Loop BB252_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB252_8
// %bb.9:                               //   in Loop: Header=BB252_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB252_12
.LBB252_10:                             // %.preheader
                                        //   in Loop: Header=BB252_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB252_11:                             //   Parent Loop BB252_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB252_11
.LBB252_12:                             //   in Loop: Header=BB252_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB252_3
// %bb.13:                              //   in Loop: Header=BB252_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB252_3
.LBB252_14:
	cmp	w20, #0
	b.le	.LBB252_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI252_1
	ldr	d12, [x9, :lo12:.LCPI252_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI252_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI252_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB252_17
.LBB252_16:                             //   in Loop: Header=BB252_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB252_35
.LBB252_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB252_28 Depth 2
	cmp	w20, #4
	b.hs	.LBB252_19
// %bb.18:                              //   in Loop: Header=BB252_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB252_27
.LBB252_19:                             //   in Loop: Header=BB252_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB252_26
// %bb.20:                              //   in Loop: Header=BB252_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB252_26
// %bb.21:                              //   in Loop: Header=BB252_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB252_26
// %bb.22:                              //   in Loop: Header=BB252_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB252_26
// %bb.23:                              //   in Loop: Header=BB252_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB252_26
// %bb.24:                              //   in Loop: Header=BB252_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB252_26
// %bb.25:                              //   in Loop: Header=BB252_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB252_26:                             //   in Loop: Header=BB252_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB252_29
.LBB252_27:                             // %.preheader4
                                        //   in Loop: Header=BB252_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB252_28:                             //   Parent Loop BB252_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB252_28
.LBB252_29:                             //   in Loop: Header=BB252_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB252_16
// %bb.30:                              //   in Loop: Header=BB252_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB252_16
.LBB252_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI252_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI252_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB252_33
.LBB252_32:                             //   in Loop: Header=BB252_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB252_35
.LBB252_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB252_32
// %bb.34:                              //   in Loop: Header=BB252_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB252_32
.LBB252_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB252_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB252_39
.LBB252_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB252_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB252_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB252_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end252:
	.size	_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc, .Lfunc_end252-_Z28test_goto_loop_unroll_factorILi31EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
.LCPI253_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI253_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB253_35
// %bb.1:
	subs	w9, w20, #30
	b.lt	.LBB253_14
// %bb.2:
	mov	w8, #34953                      // =0x8889
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #34952, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #30                         // =0x1e
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #36
	adrp	x11, .LCPI253_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI253_0]
	sub	w27, w20, #29
	add	x24, x21, #120
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI253_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI253_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB253_4
.LBB253_3:                              //   in Loop: Header=BB253_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB253_35
.LBB253_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB253_5 Depth 2
                                        //     Child Loop BB253_8 Depth 2
                                        //     Child Loop BB253_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB253_5:                              //   Parent Loop BB253_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-120]
	add	x8, x8, #30
	ldp	d3, d4, [x9, #-104]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-88]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-56]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-24]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #-8]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d5, d7, [x9, #8]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #40]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #56]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #72]
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d1, d1, d10, d8
	ldp	d6, d7, [x9, #88]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #104]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #240
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB253_5
// %bb.6:                               //   in Loop: Header=BB253_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB253_12
// %bb.7:                               //   in Loop: Header=BB253_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB253_10
.LBB253_8:                              //   Parent Loop BB253_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB253_8
// %bb.9:                               //   in Loop: Header=BB253_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB253_12
.LBB253_10:                             // %.preheader
                                        //   in Loop: Header=BB253_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB253_11:                             //   Parent Loop BB253_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB253_11
.LBB253_12:                             //   in Loop: Header=BB253_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB253_3
// %bb.13:                              //   in Loop: Header=BB253_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB253_3
.LBB253_14:
	cmp	w20, #0
	b.le	.LBB253_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI253_1
	ldr	d12, [x9, :lo12:.LCPI253_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI253_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI253_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB253_17
.LBB253_16:                             //   in Loop: Header=BB253_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB253_35
.LBB253_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB253_28 Depth 2
	cmp	w20, #4
	b.hs	.LBB253_19
// %bb.18:                              //   in Loop: Header=BB253_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB253_27
.LBB253_19:                             //   in Loop: Header=BB253_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB253_26
// %bb.20:                              //   in Loop: Header=BB253_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB253_26
// %bb.21:                              //   in Loop: Header=BB253_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB253_26
// %bb.22:                              //   in Loop: Header=BB253_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB253_26
// %bb.23:                              //   in Loop: Header=BB253_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB253_26
// %bb.24:                              //   in Loop: Header=BB253_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB253_26
// %bb.25:                              //   in Loop: Header=BB253_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB253_26:                             //   in Loop: Header=BB253_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB253_29
.LBB253_27:                             // %.preheader4
                                        //   in Loop: Header=BB253_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB253_28:                             //   Parent Loop BB253_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB253_28
.LBB253_29:                             //   in Loop: Header=BB253_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB253_16
// %bb.30:                              //   in Loop: Header=BB253_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB253_16
.LBB253_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI253_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI253_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB253_33
.LBB253_32:                             //   in Loop: Header=BB253_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB253_35
.LBB253_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB253_32
// %bb.34:                              //   in Loop: Header=BB253_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB253_32
.LBB253_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB253_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB253_39
.LBB253_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB253_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB253_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB253_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end253:
	.size	_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc, .Lfunc_end253-_Z28test_goto_loop_unroll_factorILi30EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN15goto_loop_testsILi28EdE7do_testEPKdPKc,"axG",@progbits,_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc,comdat
	.weak	_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc // -- Begin function _ZN15goto_loop_testsILi28EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc,@function
_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc: // @_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc
	adrp	x20, temp_string+1900
	add	x20, x20, :lo12:temp_string+1900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
.Lfunc_end254:
	.size	_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc, .Lfunc_end254-_ZN15goto_loop_testsILi28EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
.LCPI255_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI255_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB255_35
// %bb.1:
	subs	w9, w20, #29
	b.lt	.LBB255_14
// %bb.2:
	mov	w8, #51977                      // =0xcb09
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #36157, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #29                         // =0x1d
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #36
	adrp	x11, .LCPI255_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI255_0]
	sub	w27, w20, #28
	add	x24, x21, #112
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI255_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI255_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB255_4
.LBB255_3:                              //   in Loop: Header=BB255_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB255_35
.LBB255_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB255_5 Depth 2
                                        //     Child Loop BB255_8 Depth 2
                                        //     Child Loop BB255_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB255_5:                              //   Parent Loop BB255_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-112]
	add	x8, x8, #29
	ldp	d3, d4, [x9, #-96]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-80]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-48]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-32]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-16]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #16]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #32]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #48]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #64]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #80]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #96]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #112]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #232
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB255_5
// %bb.6:                               //   in Loop: Header=BB255_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB255_12
// %bb.7:                               //   in Loop: Header=BB255_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB255_10
.LBB255_8:                              //   Parent Loop BB255_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB255_8
// %bb.9:                               //   in Loop: Header=BB255_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB255_12
.LBB255_10:                             // %.preheader
                                        //   in Loop: Header=BB255_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB255_11:                             //   Parent Loop BB255_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB255_11
.LBB255_12:                             //   in Loop: Header=BB255_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB255_3
// %bb.13:                              //   in Loop: Header=BB255_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB255_3
.LBB255_14:
	cmp	w20, #0
	b.le	.LBB255_31
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI255_1
	ldr	d12, [x9, :lo12:.LCPI255_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI255_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI255_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB255_17
.LBB255_16:                             //   in Loop: Header=BB255_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB255_35
.LBB255_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB255_28 Depth 2
	cmp	w20, #4
	b.hs	.LBB255_19
// %bb.18:                              //   in Loop: Header=BB255_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB255_27
.LBB255_19:                             //   in Loop: Header=BB255_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB255_26
// %bb.20:                              //   in Loop: Header=BB255_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB255_26
// %bb.21:                              //   in Loop: Header=BB255_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB255_26
// %bb.22:                              //   in Loop: Header=BB255_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB255_26
// %bb.23:                              //   in Loop: Header=BB255_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB255_26
// %bb.24:                              //   in Loop: Header=BB255_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #24
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB255_26
// %bb.25:                              //   in Loop: Header=BB255_17 Depth=1
	ldp	q1, q2, [x21, #192]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB255_26:                             //   in Loop: Header=BB255_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB255_29
.LBB255_27:                             // %.preheader4
                                        //   in Loop: Header=BB255_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB255_28:                             //   Parent Loop BB255_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB255_28
.LBB255_29:                             //   in Loop: Header=BB255_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB255_16
// %bb.30:                              //   in Loop: Header=BB255_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB255_16
.LBB255_31:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI255_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI255_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB255_33
.LBB255_32:                             //   in Loop: Header=BB255_33 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB255_35
.LBB255_33:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB255_32
// %bb.34:                              //   in Loop: Header=BB255_33 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB255_32
.LBB255_35:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB255_37
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB255_39
.LBB255_37:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB255_40
// %bb.38:
	ldr	w8, [x23, :lo12:current_test]
.LBB255_39:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB255_40:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end255:
	.size	_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc, .Lfunc_end255-_Z28test_goto_loop_unroll_factorILi29EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
.LCPI256_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI256_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB256_34
// %bb.1:
	subs	w9, w20, #28
	b.lt	.LBB256_14
// %bb.2:
	lsr	w8, w9, #2
	mov	w9, #18725                      // =0x4925
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w9, #9362, lsl #16
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	w12, w20
	umull	x8, w8, w9
	mov	w9, #28                         // =0x1c
	movk	x10, #16584, lsl #48
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	and	x13, x12, #0x3
	dup	v17.2d, x10
	fmov	d9, x10
	lsr	x8, x8, #32
	dup	v18.2d, x11
	fmov	d10, x11
	adrp	x11, .LCPI256_0
	mov	w26, wzr
	sub	w27, w20, #27
	madd	w22, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI256_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI256_1]
	ldr	d12, [x11, :lo12:.LCPI256_0]
	fmov	d13, x8
	add	x24, x21, #112
	adrp	x19, init_value
	sub	x23, x12, x22
	add	x10, x21, w22, uxtw #3
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x25, x23, x13
	add	x9, x25, x22
	add	x28, x10, #16
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	stp	x9, x13, [sp, #16]              // 16-byte Folded Spill
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	b	.LBB256_4
.LBB256_3:                              //   in Loop: Header=BB256_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB256_34
.LBB256_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB256_5 Depth 2
                                        //     Child Loop BB256_8 Depth 2
                                        //     Child Loop BB256_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB256_5:                              //   Parent Loop BB256_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-112]
	add	x8, x8, #28
	ldp	d3, d4, [x9, #-96]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-80]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-64]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-48]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-32]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-16]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #16]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #32]
	fmadd	d5, d5, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d5, d5, d9
	fadd	d4, d4, d9
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #48]
	fadd	d7, d7, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #80]
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d7, d5, [x9, #96]
	add	x9, x9, #224
	fadd	d1, d1, d9
	fadd	d4, d4, d9
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB256_5
// %bb.6:                               //   in Loop: Header=BB256_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB256_12
// %bb.7:                               //   in Loop: Header=BB256_4 Depth=1
	cmp	x23, #4
	mov	x10, x22
	mov	x8, x28
	mov	x9, x25
	b.lo	.LBB256_10
.LBB256_8:                              //   Parent Loop BB256_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB256_8
// %bb.9:                               //   in Loop: Header=BB256_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB256_12
.LBB256_10:                             // %.preheader
                                        //   in Loop: Header=BB256_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB256_11:                             //   Parent Loop BB256_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB256_11
.LBB256_12:                             //   in Loop: Header=BB256_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB256_3
// %bb.13:                              //   in Loop: Header=BB256_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB256_3
.LBB256_14:
	cmp	w20, #0
	b.le	.LBB256_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI256_1
	ldr	d12, [x9, :lo12:.LCPI256_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI256_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI256_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB256_17
.LBB256_16:                             //   in Loop: Header=BB256_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB256_34
.LBB256_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB256_27 Depth 2
	cmp	w20, #4
	b.hs	.LBB256_19
// %bb.18:                              //   in Loop: Header=BB256_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB256_26
.LBB256_19:                             //   in Loop: Header=BB256_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB256_25
// %bb.20:                              //   in Loop: Header=BB256_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB256_25
// %bb.21:                              //   in Loop: Header=BB256_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB256_25
// %bb.22:                              //   in Loop: Header=BB256_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB256_25
// %bb.23:                              //   in Loop: Header=BB256_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB256_25
// %bb.24:                              //   in Loop: Header=BB256_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB256_25:                             //   in Loop: Header=BB256_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB256_28
.LBB256_26:                             // %.preheader4
                                        //   in Loop: Header=BB256_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB256_27:                             //   Parent Loop BB256_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB256_27
.LBB256_28:                             //   in Loop: Header=BB256_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB256_16
// %bb.29:                              //   in Loop: Header=BB256_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB256_16
.LBB256_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI256_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI256_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB256_32
.LBB256_31:                             //   in Loop: Header=BB256_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB256_34
.LBB256_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB256_31
// %bb.33:                              //   in Loop: Header=BB256_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB256_31
.LBB256_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB256_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB256_38
.LBB256_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB256_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB256_38:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB256_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end256:
	.size	_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc, .Lfunc_end256-_Z28test_goto_loop_unroll_factorILi28EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
.LCPI257_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI257_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB257_34
// %bb.1:
	subs	w9, w20, #27
	b.lt	.LBB257_14
// %bb.2:
	mov	w8, #19419                      // =0x4bdb
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #12136, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	adrp	x11, .LCPI257_0
	lsr	x8, x8, #32
	ldr	d12, [x11, :lo12:.LCPI257_0]
	mov	w26, wzr
	sub	w27, w20, #26
	add	x24, x21, #104
	adrp	x22, init_value
	sub	w9, w9, w8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	add	w8, w8, w9, lsr #1
	mov	w9, #27                         // =0x1b
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	lsr	w8, w8, #4
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI257_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI257_1]
	fmov	d13, x8
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	and	x28, x23, #0xfffffffffffffffc
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB257_4
.LBB257_3:                              //   in Loop: Header=BB257_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB257_34
.LBB257_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB257_5 Depth 2
                                        //     Child Loop BB257_8 Depth 2
                                        //     Child Loop BB257_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB257_5:                              //   Parent Loop BB257_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-104]
	add	x8, x8, #27
	ldp	d3, d4, [x9, #-88]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-72]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-56]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-40]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #-8]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #8]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d5, d7, [x9, #24]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d6
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #40]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #56]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #72]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #88]
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fmadd	d1, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #104]
	add	x9, x9, #216
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB257_5
// %bb.6:                               //   in Loop: Header=BB257_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB257_12
// %bb.7:                               //   in Loop: Header=BB257_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB257_10
.LBB257_8:                              //   Parent Loop BB257_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB257_8
// %bb.9:                               //   in Loop: Header=BB257_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB257_12
.LBB257_10:                             // %.preheader
                                        //   in Loop: Header=BB257_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB257_11:                             //   Parent Loop BB257_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB257_11
.LBB257_12:                             //   in Loop: Header=BB257_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB257_3
// %bb.13:                              //   in Loop: Header=BB257_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB257_3
.LBB257_14:
	cmp	w20, #0
	b.le	.LBB257_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI257_1
	ldr	d12, [x9, :lo12:.LCPI257_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI257_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI257_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB257_17
.LBB257_16:                             //   in Loop: Header=BB257_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB257_34
.LBB257_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB257_27 Depth 2
	cmp	w20, #4
	b.hs	.LBB257_19
// %bb.18:                              //   in Loop: Header=BB257_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB257_26
.LBB257_19:                             //   in Loop: Header=BB257_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB257_25
// %bb.20:                              //   in Loop: Header=BB257_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB257_25
// %bb.21:                              //   in Loop: Header=BB257_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB257_25
// %bb.22:                              //   in Loop: Header=BB257_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB257_25
// %bb.23:                              //   in Loop: Header=BB257_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB257_25
// %bb.24:                              //   in Loop: Header=BB257_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB257_25:                             //   in Loop: Header=BB257_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB257_28
.LBB257_26:                             // %.preheader4
                                        //   in Loop: Header=BB257_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB257_27:                             //   Parent Loop BB257_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB257_27
.LBB257_28:                             //   in Loop: Header=BB257_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB257_16
// %bb.29:                              //   in Loop: Header=BB257_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB257_16
.LBB257_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI257_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI257_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB257_32
.LBB257_31:                             //   in Loop: Header=BB257_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB257_34
.LBB257_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB257_31
// %bb.33:                              //   in Loop: Header=BB257_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB257_31
.LBB257_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB257_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB257_38
.LBB257_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB257_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB257_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB257_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end257:
	.size	_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc, .Lfunc_end257-_Z28test_goto_loop_unroll_factorILi27EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
.LCPI258_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI258_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB258_34
// %bb.1:
	subs	w9, w20, #26
	b.lt	.LBB258_14
// %bb.2:
	mov	w8, #60495                      // =0xec4f
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #20164, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #26                         // =0x1a
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #35
	adrp	x11, .LCPI258_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI258_0]
	sub	w27, w20, #25
	add	x24, x21, #104
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI258_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI258_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB258_4
.LBB258_3:                              //   in Loop: Header=BB258_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB258_34
.LBB258_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB258_5 Depth 2
                                        //     Child Loop BB258_8 Depth 2
                                        //     Child Loop BB258_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB258_5:                              //   Parent Loop BB258_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-104]
	add	x8, x8, #26
	ldp	d3, d4, [x9, #-88]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-72]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-40]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-24]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-8]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #8]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #24]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #40]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fmadd	d1, d1, d10, d8
	ldp	d6, d5, [x9, #56]
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d3, d3, d10, d8
	ldp	d6, d7, [x9, #72]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #88]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #208
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB258_5
// %bb.6:                               //   in Loop: Header=BB258_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB258_12
// %bb.7:                               //   in Loop: Header=BB258_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB258_10
.LBB258_8:                              //   Parent Loop BB258_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB258_8
// %bb.9:                               //   in Loop: Header=BB258_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB258_12
.LBB258_10:                             // %.preheader
                                        //   in Loop: Header=BB258_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB258_11:                             //   Parent Loop BB258_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB258_11
.LBB258_12:                             //   in Loop: Header=BB258_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB258_3
// %bb.13:                              //   in Loop: Header=BB258_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB258_3
.LBB258_14:
	cmp	w20, #0
	b.le	.LBB258_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI258_1
	ldr	d12, [x9, :lo12:.LCPI258_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI258_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI258_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB258_17
.LBB258_16:                             //   in Loop: Header=BB258_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB258_34
.LBB258_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB258_27 Depth 2
	cmp	w20, #4
	b.hs	.LBB258_19
// %bb.18:                              //   in Loop: Header=BB258_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB258_26
.LBB258_19:                             //   in Loop: Header=BB258_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB258_25
// %bb.20:                              //   in Loop: Header=BB258_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB258_25
// %bb.21:                              //   in Loop: Header=BB258_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB258_25
// %bb.22:                              //   in Loop: Header=BB258_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB258_25
// %bb.23:                              //   in Loop: Header=BB258_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB258_25
// %bb.24:                              //   in Loop: Header=BB258_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB258_25:                             //   in Loop: Header=BB258_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB258_28
.LBB258_26:                             // %.preheader4
                                        //   in Loop: Header=BB258_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB258_27:                             //   Parent Loop BB258_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB258_27
.LBB258_28:                             //   in Loop: Header=BB258_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB258_16
// %bb.29:                              //   in Loop: Header=BB258_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB258_16
.LBB258_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI258_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI258_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB258_32
.LBB258_31:                             //   in Loop: Header=BB258_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB258_34
.LBB258_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB258_31
// %bb.33:                              //   in Loop: Header=BB258_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB258_31
.LBB258_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB258_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB258_38
.LBB258_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB258_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB258_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB258_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end258:
	.size	_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc, .Lfunc_end258-_Z28test_goto_loop_unroll_factorILi26EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
.LCPI259_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI259_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB259_34
// %bb.1:
	subs	w9, w20, #25
	b.lt	.LBB259_14
// %bb.2:
	mov	w8, #34079                      // =0x851f
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #20971, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #25                         // =0x19
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #35
	adrp	x11, .LCPI259_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI259_0]
	sub	w27, w20, #24
	add	x24, x21, #96
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI259_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI259_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB259_4
.LBB259_3:                              //   in Loop: Header=BB259_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB259_34
.LBB259_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB259_5 Depth 2
                                        //     Child Loop BB259_8 Depth 2
                                        //     Child Loop BB259_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB259_5:                              //   Parent Loop BB259_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-96]
	add	x8, x8, #25
	ldp	d3, d4, [x9, #-80]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-32]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-16]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d2, d7, d9
	fadd	d0, d0, d3
	ldp	d3, d7, [x9, #16]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d2, d2, d10, d8
	fadd	d4, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	fadd	d2, d2, d9
	ldp	d7, d6, [x9, #32]
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #48]
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #64]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #80]
	fadd	d7, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d5
	fmadd	d5, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #96]
	fmadd	d6, d6, d10, d8
	fmadd	d3, d3, d10, d8
	add	x9, x9, #200
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB259_5
// %bb.6:                               //   in Loop: Header=BB259_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB259_12
// %bb.7:                               //   in Loop: Header=BB259_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB259_10
.LBB259_8:                              //   Parent Loop BB259_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB259_8
// %bb.9:                               //   in Loop: Header=BB259_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB259_12
.LBB259_10:                             // %.preheader
                                        //   in Loop: Header=BB259_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB259_11:                             //   Parent Loop BB259_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB259_11
.LBB259_12:                             //   in Loop: Header=BB259_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB259_3
// %bb.13:                              //   in Loop: Header=BB259_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB259_3
.LBB259_14:
	cmp	w20, #0
	b.le	.LBB259_30
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI259_1
	ldr	d12, [x9, :lo12:.LCPI259_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI259_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI259_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB259_17
.LBB259_16:                             //   in Loop: Header=BB259_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB259_34
.LBB259_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB259_27 Depth 2
	cmp	w20, #4
	b.hs	.LBB259_19
// %bb.18:                              //   in Loop: Header=BB259_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB259_26
.LBB259_19:                             //   in Loop: Header=BB259_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB259_25
// %bb.20:                              //   in Loop: Header=BB259_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB259_25
// %bb.21:                              //   in Loop: Header=BB259_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB259_25
// %bb.22:                              //   in Loop: Header=BB259_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB259_25
// %bb.23:                              //   in Loop: Header=BB259_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #20
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB259_25
// %bb.24:                              //   in Loop: Header=BB259_17 Depth=1
	ldp	q1, q2, [x21, #160]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB259_25:                             //   in Loop: Header=BB259_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB259_28
.LBB259_26:                             // %.preheader4
                                        //   in Loop: Header=BB259_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB259_27:                             //   Parent Loop BB259_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB259_27
.LBB259_28:                             //   in Loop: Header=BB259_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB259_16
// %bb.29:                              //   in Loop: Header=BB259_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB259_16
.LBB259_30:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI259_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI259_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB259_32
.LBB259_31:                             //   in Loop: Header=BB259_32 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB259_34
.LBB259_32:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB259_31
// %bb.33:                              //   in Loop: Header=BB259_32 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB259_31
.LBB259_34:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB259_36
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB259_38
.LBB259_36:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB259_39
// %bb.37:
	ldr	w8, [x23, :lo12:current_test]
.LBB259_38:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB259_39:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end259:
	.size	_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc, .Lfunc_end259-_Z28test_goto_loop_unroll_factorILi25EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
.LCPI260_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI260_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB260_33
// %bb.1:
	subs	w9, w20, #24
	b.lt	.LBB260_14
// %bb.2:
	mov	w8, #43691                      // =0xaaab
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #43690, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #24                         // =0x18
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	and	x13, x12, #0x3
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x8, x8, #36
	fmov	d10, x11
	adrp	x11, .LCPI260_0
	ldr	d12, [x11, :lo12:.LCPI260_0]
	mov	w26, wzr
	sub	w27, w20, #23
	madd	w22, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI260_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI260_1]
	add	x24, x21, #96
	fmov	d13, x8
	adrp	x19, init_value
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x22
	add	x10, x21, w22, uxtw #3
	sub	x25, x23, x13
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	add	x9, x25, x22
	add	x28, x10, #16
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	stp	x9, x13, [sp, #16]              // 16-byte Folded Spill
	b	.LBB260_4
.LBB260_3:                              //   in Loop: Header=BB260_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB260_33
.LBB260_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB260_5 Depth 2
                                        //     Child Loop BB260_8 Depth 2
                                        //     Child Loop BB260_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB260_5:                              //   Parent Loop BB260_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-96]
	add	x8, x8, #24
	ldp	d3, d4, [x9, #-80]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-64]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-32]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d2
	ldp	d7, d2, [x9]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #16]
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #32]
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #48]
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d1, d1, d10, d8
	ldp	d6, d7, [x9, #64]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #80]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #192
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB260_5
// %bb.6:                               //   in Loop: Header=BB260_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB260_12
// %bb.7:                               //   in Loop: Header=BB260_4 Depth=1
	cmp	x23, #4
	mov	x10, x22
	mov	x8, x28
	mov	x9, x25
	b.lo	.LBB260_10
.LBB260_8:                              //   Parent Loop BB260_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB260_8
// %bb.9:                               //   in Loop: Header=BB260_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB260_12
.LBB260_10:                             // %.preheader
                                        //   in Loop: Header=BB260_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB260_11:                             //   Parent Loop BB260_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB260_11
.LBB260_12:                             //   in Loop: Header=BB260_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB260_3
// %bb.13:                              //   in Loop: Header=BB260_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB260_3
.LBB260_14:
	cmp	w20, #0
	b.le	.LBB260_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI260_1
	ldr	d12, [x9, :lo12:.LCPI260_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI260_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI260_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB260_17
.LBB260_16:                             //   in Loop: Header=BB260_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB260_33
.LBB260_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB260_26 Depth 2
	cmp	w20, #4
	b.hs	.LBB260_19
// %bb.18:                              //   in Loop: Header=BB260_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB260_25
.LBB260_19:                             //   in Loop: Header=BB260_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB260_24
// %bb.20:                              //   in Loop: Header=BB260_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB260_24
// %bb.21:                              //   in Loop: Header=BB260_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB260_24
// %bb.22:                              //   in Loop: Header=BB260_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB260_24
// %bb.23:                              //   in Loop: Header=BB260_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB260_24:                             //   in Loop: Header=BB260_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB260_27
.LBB260_25:                             // %.preheader4
                                        //   in Loop: Header=BB260_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB260_26:                             //   Parent Loop BB260_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB260_26
.LBB260_27:                             //   in Loop: Header=BB260_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB260_16
// %bb.28:                              //   in Loop: Header=BB260_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB260_16
.LBB260_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI260_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI260_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB260_31
.LBB260_30:                             //   in Loop: Header=BB260_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB260_33
.LBB260_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB260_30
// %bb.32:                              //   in Loop: Header=BB260_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB260_30
.LBB260_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB260_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB260_37
.LBB260_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB260_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB260_37:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB260_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end260:
	.size	_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc, .Lfunc_end260-_Z28test_goto_loop_unroll_factorILi24EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
.LCPI261_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI261_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB261_33
// %bb.1:
	subs	w9, w20, #23
	b.lt	.LBB261_14
// %bb.2:
	mov	w8, #17097                      // =0x42c9
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #45590, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #23                         // =0x17
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #36
	adrp	x11, .LCPI261_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI261_0]
	sub	w27, w20, #22
	add	x24, x21, #88
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI261_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI261_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB261_4
.LBB261_3:                              //   in Loop: Header=BB261_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB261_33
.LBB261_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB261_5 Depth 2
                                        //     Child Loop BB261_8 Depth 2
                                        //     Child Loop BB261_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB261_5:                              //   Parent Loop BB261_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-88]
	add	x8, x8, #23
	ldp	d3, d4, [x9, #-72]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-24]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-8]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d6, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #8]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #24]
	fmadd	d2, d2, d10, d8
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d2, d2, d9
	fmadd	d5, d5, d10, d8
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldp	d7, d6, [x9, #40]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #56]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #72]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #88]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #184
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB261_5
// %bb.6:                               //   in Loop: Header=BB261_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB261_12
// %bb.7:                               //   in Loop: Header=BB261_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB261_10
.LBB261_8:                              //   Parent Loop BB261_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB261_8
// %bb.9:                               //   in Loop: Header=BB261_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB261_12
.LBB261_10:                             // %.preheader
                                        //   in Loop: Header=BB261_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB261_11:                             //   Parent Loop BB261_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB261_11
.LBB261_12:                             //   in Loop: Header=BB261_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB261_3
// %bb.13:                              //   in Loop: Header=BB261_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB261_3
.LBB261_14:
	cmp	w20, #0
	b.le	.LBB261_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI261_1
	ldr	d12, [x9, :lo12:.LCPI261_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI261_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI261_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB261_17
.LBB261_16:                             //   in Loop: Header=BB261_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB261_33
.LBB261_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB261_26 Depth 2
	cmp	w20, #4
	b.hs	.LBB261_19
// %bb.18:                              //   in Loop: Header=BB261_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB261_25
.LBB261_19:                             //   in Loop: Header=BB261_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB261_24
// %bb.20:                              //   in Loop: Header=BB261_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB261_24
// %bb.21:                              //   in Loop: Header=BB261_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB261_24
// %bb.22:                              //   in Loop: Header=BB261_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB261_24
// %bb.23:                              //   in Loop: Header=BB261_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB261_24:                             //   in Loop: Header=BB261_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB261_27
.LBB261_25:                             // %.preheader4
                                        //   in Loop: Header=BB261_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB261_26:                             //   Parent Loop BB261_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB261_26
.LBB261_27:                             //   in Loop: Header=BB261_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB261_16
// %bb.28:                              //   in Loop: Header=BB261_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB261_16
.LBB261_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI261_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI261_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB261_31
.LBB261_30:                             //   in Loop: Header=BB261_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB261_33
.LBB261_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB261_30
// %bb.32:                              //   in Loop: Header=BB261_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB261_30
.LBB261_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB261_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB261_37
.LBB261_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB261_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB261_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB261_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end261:
	.size	_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc, .Lfunc_end261-_Z28test_goto_loop_unroll_factorILi23EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
.LCPI262_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI262_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB262_33
// %bb.1:
	subs	w9, w20, #22
	b.lt	.LBB262_14
// %bb.2:
	mov	w8, #35747                      // =0x8ba3
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #47662, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #22                         // =0x16
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #36
	adrp	x11, .LCPI262_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI262_0]
	sub	w27, w20, #21
	add	x24, x21, #88
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI262_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI262_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB262_4
.LBB262_3:                              //   in Loop: Header=BB262_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB262_33
.LBB262_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB262_5 Depth 2
                                        //     Child Loop BB262_8 Depth 2
                                        //     Child Loop BB262_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB262_5:                              //   Parent Loop BB262_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-88]
	add	x8, x8, #22
	ldp	d3, d4, [x9, #-72]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-56]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-24]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #-8]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #8]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d5
	fadd	d5, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #56]
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d6, d10, d8
	fadd	d6, d7, d9
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d4, d4, d9
	ldp	d7, d5, [x9, #72]
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	add	x9, x9, #176
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB262_5
// %bb.6:                               //   in Loop: Header=BB262_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB262_12
// %bb.7:                               //   in Loop: Header=BB262_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB262_10
.LBB262_8:                              //   Parent Loop BB262_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB262_8
// %bb.9:                               //   in Loop: Header=BB262_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB262_12
.LBB262_10:                             // %.preheader
                                        //   in Loop: Header=BB262_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB262_11:                             //   Parent Loop BB262_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB262_11
.LBB262_12:                             //   in Loop: Header=BB262_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB262_3
// %bb.13:                              //   in Loop: Header=BB262_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB262_3
.LBB262_14:
	cmp	w20, #0
	b.le	.LBB262_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI262_1
	ldr	d12, [x9, :lo12:.LCPI262_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI262_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI262_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB262_17
.LBB262_16:                             //   in Loop: Header=BB262_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB262_33
.LBB262_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB262_26 Depth 2
	cmp	w20, #4
	b.hs	.LBB262_19
// %bb.18:                              //   in Loop: Header=BB262_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB262_25
.LBB262_19:                             //   in Loop: Header=BB262_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB262_24
// %bb.20:                              //   in Loop: Header=BB262_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB262_24
// %bb.21:                              //   in Loop: Header=BB262_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB262_24
// %bb.22:                              //   in Loop: Header=BB262_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB262_24
// %bb.23:                              //   in Loop: Header=BB262_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB262_24:                             //   in Loop: Header=BB262_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB262_27
.LBB262_25:                             // %.preheader4
                                        //   in Loop: Header=BB262_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB262_26:                             //   Parent Loop BB262_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB262_26
.LBB262_27:                             //   in Loop: Header=BB262_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB262_16
// %bb.28:                              //   in Loop: Header=BB262_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB262_16
.LBB262_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI262_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI262_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB262_31
.LBB262_30:                             //   in Loop: Header=BB262_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB262_33
.LBB262_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB262_30
// %bb.32:                              //   in Loop: Header=BB262_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB262_30
.LBB262_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB262_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB262_37
.LBB262_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB262_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB262_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB262_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end262:
	.size	_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc, .Lfunc_end262-_Z28test_goto_loop_unroll_factorILi22EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
.LCPI263_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI263_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB263_33
// %bb.1:
	subs	w9, w20, #21
	b.lt	.LBB263_14
// %bb.2:
	mov	w8, #24967                      // =0x6187
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #34328, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	adrp	x11, .LCPI263_0
	lsr	x8, x8, #32
	ldr	d12, [x11, :lo12:.LCPI263_0]
	mov	w26, wzr
	sub	w27, w20, #20
	add	x24, x21, #80
	adrp	x22, init_value
	sub	w9, w9, w8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	add	w8, w8, w9, lsr #1
	mov	w9, #21                         // =0x15
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	lsr	w8, w8, #4
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI263_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI263_1]
	fmov	d13, x8
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	and	x28, x23, #0xfffffffffffffffc
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB263_4
.LBB263_3:                              //   in Loop: Header=BB263_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB263_33
.LBB263_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB263_5 Depth 2
                                        //     Child Loop BB263_8 Depth 2
                                        //     Child Loop BB263_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB263_5:                              //   Parent Loop BB263_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-80]
	add	x8, x8, #21
	ldp	d3, d4, [x9, #-64]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-48]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-32]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-16]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d7, d9
	fadd	d2, d2, d9
	ldp	d5, d7, [x9]
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d2
	fadd	d4, d4, d9
	ldp	d7, d2, [x9, #16]
	fmadd	d6, d6, d10, d8
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fadd	d6, d6, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d4
	ldp	d7, d4, [x9, #32]
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d6, d6, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #48]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #64]
	fadd	d7, d7, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fmadd	d1, d7, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d6, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #80]
	add	x9, x9, #168
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fadd	d1, d1, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB263_5
// %bb.6:                               //   in Loop: Header=BB263_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB263_12
// %bb.7:                               //   in Loop: Header=BB263_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB263_10
.LBB263_8:                              //   Parent Loop BB263_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB263_8
// %bb.9:                               //   in Loop: Header=BB263_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB263_12
.LBB263_10:                             // %.preheader
                                        //   in Loop: Header=BB263_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB263_11:                             //   Parent Loop BB263_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB263_11
.LBB263_12:                             //   in Loop: Header=BB263_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB263_3
// %bb.13:                              //   in Loop: Header=BB263_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB263_3
.LBB263_14:
	cmp	w20, #0
	b.le	.LBB263_29
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI263_1
	ldr	d12, [x9, :lo12:.LCPI263_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI263_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI263_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB263_17
.LBB263_16:                             //   in Loop: Header=BB263_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB263_33
.LBB263_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB263_26 Depth 2
	cmp	w20, #4
	b.hs	.LBB263_19
// %bb.18:                              //   in Loop: Header=BB263_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB263_25
.LBB263_19:                             //   in Loop: Header=BB263_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB263_24
// %bb.20:                              //   in Loop: Header=BB263_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB263_24
// %bb.21:                              //   in Loop: Header=BB263_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB263_24
// %bb.22:                              //   in Loop: Header=BB263_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #16
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB263_24
// %bb.23:                              //   in Loop: Header=BB263_17 Depth=1
	ldp	q1, q2, [x21, #128]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB263_24:                             //   in Loop: Header=BB263_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB263_27
.LBB263_25:                             // %.preheader4
                                        //   in Loop: Header=BB263_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB263_26:                             //   Parent Loop BB263_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB263_26
.LBB263_27:                             //   in Loop: Header=BB263_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB263_16
// %bb.28:                              //   in Loop: Header=BB263_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB263_16
.LBB263_29:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI263_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI263_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB263_31
.LBB263_30:                             //   in Loop: Header=BB263_31 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB263_33
.LBB263_31:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB263_30
// %bb.32:                              //   in Loop: Header=BB263_31 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB263_30
.LBB263_33:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB263_35
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB263_37
.LBB263_35:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB263_38
// %bb.36:
	ldr	w8, [x23, :lo12:current_test]
.LBB263_37:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB263_38:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end263:
	.size	_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc, .Lfunc_end263-_Z28test_goto_loop_unroll_factorILi21EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN15goto_loop_testsILi19EdE7do_testEPKdPKc,"axG",@progbits,_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc,comdat
	.weak	_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc // -- Begin function _ZN15goto_loop_testsILi19EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc,@function
_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc: // @_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	mov	x19, x0
	bl	_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc
	adrp	x20, temp_string+1000
	add	x20, x20, :lo12:temp_string+1000
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	bl	_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
.Lfunc_end264:
	.size	_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc, .Lfunc_end264-_ZN15goto_loop_testsILi19EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
.LCPI265_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI265_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB265_32
// %bb.1:
	subs	w9, w20, #20
	b.lt	.LBB265_14
// %bb.2:
	mov	w8, #52429                      // =0xcccd
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #52428, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #20                         // =0x14
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	and	x13, x12, #0x3
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x8, x8, #36
	fmov	d10, x11
	adrp	x11, .LCPI265_0
	ldr	d12, [x11, :lo12:.LCPI265_0]
	mov	w26, wzr
	sub	w27, w20, #19
	madd	w22, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI265_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI265_1]
	add	x24, x21, #80
	fmov	d13, x8
	adrp	x19, init_value
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x22
	add	x10, x21, w22, uxtw #3
	sub	x25, x23, x13
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	add	x9, x25, x22
	add	x28, x10, #16
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	stp	x9, x13, [sp, #16]              // 16-byte Folded Spill
	b	.LBB265_4
.LBB265_3:                              //   in Loop: Header=BB265_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB265_32
.LBB265_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB265_5 Depth 2
                                        //     Child Loop BB265_8 Depth 2
                                        //     Child Loop BB265_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB265_5:                              //   Parent Loop BB265_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-80]
	add	x8, x8, #20
	ldp	d3, d4, [x9, #-64]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-48]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-32]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-16]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9]
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #16]
	fadd	d3, d3, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fmadd	d1, d1, d10, d8
	ldp	d6, d5, [x9, #32]
	fadd	d2, d2, d9
	fmadd	d7, d7, d10, d8
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d3, d4, d9
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	fmadd	d3, d3, d10, d8
	ldp	d6, d7, [x9, #48]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #64]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #160
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB265_5
// %bb.6:                               //   in Loop: Header=BB265_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB265_12
// %bb.7:                               //   in Loop: Header=BB265_4 Depth=1
	cmp	x23, #4
	mov	x10, x22
	mov	x8, x28
	mov	x9, x25
	b.lo	.LBB265_10
.LBB265_8:                              //   Parent Loop BB265_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB265_8
// %bb.9:                               //   in Loop: Header=BB265_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB265_12
.LBB265_10:                             // %.preheader
                                        //   in Loop: Header=BB265_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB265_11:                             //   Parent Loop BB265_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB265_11
.LBB265_12:                             //   in Loop: Header=BB265_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB265_3
// %bb.13:                              //   in Loop: Header=BB265_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB265_3
.LBB265_14:
	cmp	w20, #0
	b.le	.LBB265_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI265_1
	ldr	d12, [x9, :lo12:.LCPI265_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI265_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI265_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB265_17
.LBB265_16:                             //   in Loop: Header=BB265_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB265_32
.LBB265_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB265_25 Depth 2
	cmp	w20, #4
	b.hs	.LBB265_19
// %bb.18:                              //   in Loop: Header=BB265_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB265_24
.LBB265_19:                             //   in Loop: Header=BB265_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB265_23
// %bb.20:                              //   in Loop: Header=BB265_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB265_23
// %bb.21:                              //   in Loop: Header=BB265_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB265_23
// %bb.22:                              //   in Loop: Header=BB265_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB265_23:                             //   in Loop: Header=BB265_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB265_26
.LBB265_24:                             // %.preheader4
                                        //   in Loop: Header=BB265_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB265_25:                             //   Parent Loop BB265_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB265_25
.LBB265_26:                             //   in Loop: Header=BB265_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB265_16
// %bb.27:                              //   in Loop: Header=BB265_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB265_16
.LBB265_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI265_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI265_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB265_30
.LBB265_29:                             //   in Loop: Header=BB265_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB265_32
.LBB265_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB265_29
// %bb.31:                              //   in Loop: Header=BB265_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB265_29
.LBB265_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB265_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB265_36
.LBB265_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB265_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB265_36:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB265_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end265:
	.size	_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc, .Lfunc_end265-_Z28test_goto_loop_unroll_factorILi20EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
.LCPI266_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI266_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB266_32
// %bb.1:
	subs	w9, w20, #19
	b.lt	.LBB266_14
// %bb.2:
	mov	w8, #27595                      // =0x6bcb
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #44840, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	adrp	x11, .LCPI266_0
	lsr	x8, x8, #32
	ldr	d12, [x11, :lo12:.LCPI266_0]
	mov	w26, wzr
	sub	w27, w20, #18
	add	x24, x21, #72
	adrp	x22, init_value
	sub	w9, w9, w8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	add	w8, w8, w9, lsr #1
	mov	w9, #19                         // =0x13
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	lsr	w8, w8, #4
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI266_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI266_1]
	fmov	d13, x8
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	and	x28, x23, #0xfffffffffffffffc
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB266_4
.LBB266_3:                              //   in Loop: Header=BB266_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB266_32
.LBB266_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB266_5 Depth 2
                                        //     Child Loop BB266_8 Depth 2
                                        //     Child Loop BB266_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB266_5:                              //   Parent Loop BB266_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-72]
	add	x8, x8, #19
	ldp	d3, d4, [x9, #-56]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d7, d9
	ldp	d3, d7, [x9, #-8]
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d7, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #8]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d6
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	ldp	d7, d2, [x9, #24]
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #40]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fmadd	d6, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d6
	ldp	d4, d6, [x9, #56]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d5
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d5
	ldr	d5, [x9, #72]
	add	x9, x9, #152
	fadd	d2, d2, d9
	fadd	d5, d5, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB266_5
// %bb.6:                               //   in Loop: Header=BB266_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB266_12
// %bb.7:                               //   in Loop: Header=BB266_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB266_10
.LBB266_8:                              //   Parent Loop BB266_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB266_8
// %bb.9:                               //   in Loop: Header=BB266_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB266_12
.LBB266_10:                             // %.preheader
                                        //   in Loop: Header=BB266_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB266_11:                             //   Parent Loop BB266_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB266_11
.LBB266_12:                             //   in Loop: Header=BB266_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB266_3
// %bb.13:                              //   in Loop: Header=BB266_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB266_3
.LBB266_14:
	cmp	w20, #0
	b.le	.LBB266_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI266_1
	ldr	d12, [x9, :lo12:.LCPI266_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI266_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI266_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB266_17
.LBB266_16:                             //   in Loop: Header=BB266_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB266_32
.LBB266_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB266_25 Depth 2
	cmp	w20, #4
	b.hs	.LBB266_19
// %bb.18:                              //   in Loop: Header=BB266_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB266_24
.LBB266_19:                             //   in Loop: Header=BB266_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB266_23
// %bb.20:                              //   in Loop: Header=BB266_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB266_23
// %bb.21:                              //   in Loop: Header=BB266_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB266_23
// %bb.22:                              //   in Loop: Header=BB266_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB266_23:                             //   in Loop: Header=BB266_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB266_26
.LBB266_24:                             // %.preheader4
                                        //   in Loop: Header=BB266_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB266_25:                             //   Parent Loop BB266_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB266_25
.LBB266_26:                             //   in Loop: Header=BB266_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB266_16
// %bb.27:                              //   in Loop: Header=BB266_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB266_16
.LBB266_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI266_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI266_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB266_30
.LBB266_29:                             //   in Loop: Header=BB266_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB266_32
.LBB266_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB266_29
// %bb.31:                              //   in Loop: Header=BB266_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB266_29
.LBB266_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB266_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB266_36
.LBB266_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB266_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB266_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB266_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end266:
	.size	_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc, .Lfunc_end266-_Z28test_goto_loop_unroll_factorILi19EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
.LCPI267_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI267_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB267_32
// %bb.1:
	subs	w9, w20, #18
	b.lt	.LBB267_14
// %bb.2:
	mov	w8, #36409                      // =0x8e39
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	w8, #14563, lsl #16
	mov	w12, w20
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #18                         // =0x12
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #34
	adrp	x11, .LCPI267_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI267_0]
	sub	w27, w20, #17
	add	x24, x21, #72
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI267_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI267_1]
	adrp	x22, init_value
	fmov	d13, x8
	stur	x12, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x12, x19
	add	x10, x21, w19, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x19
	add	x25, x10, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB267_4
.LBB267_3:                              //   in Loop: Header=BB267_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB267_32
.LBB267_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB267_5 Depth 2
                                        //     Child Loop BB267_8 Depth 2
                                        //     Child Loop BB267_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB267_5:                              //   Parent Loop BB267_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-72]
	add	x8, x8, #18
	ldp	d3, d4, [x9, #-56]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-40]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-24]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	ldp	d4, d5, [x9, #8]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	ldp	d6, d5, [x9, #24]
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d2, d9
	fmadd	d2, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #40]
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d6, d6, d9
	fadd	d5, d5, d9
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fmadd	d3, d6, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #56]
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	add	x9, x9, #144
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB267_5
// %bb.6:                               //   in Loop: Header=BB267_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB267_12
// %bb.7:                               //   in Loop: Header=BB267_4 Depth=1
	cmp	x23, #4
	mov	x10, x19
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB267_10
.LBB267_8:                              //   Parent Loop BB267_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB267_8
// %bb.9:                               //   in Loop: Header=BB267_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB267_12
.LBB267_10:                             // %.preheader
                                        //   in Loop: Header=BB267_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB267_11:                             //   Parent Loop BB267_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB267_11
.LBB267_12:                             //   in Loop: Header=BB267_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB267_3
// %bb.13:                              //   in Loop: Header=BB267_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB267_3
.LBB267_14:
	cmp	w20, #0
	b.le	.LBB267_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI267_1
	ldr	d12, [x9, :lo12:.LCPI267_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI267_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI267_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB267_17
.LBB267_16:                             //   in Loop: Header=BB267_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB267_32
.LBB267_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB267_25 Depth 2
	cmp	w20, #4
	b.hs	.LBB267_19
// %bb.18:                              //   in Loop: Header=BB267_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB267_24
.LBB267_19:                             //   in Loop: Header=BB267_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB267_23
// %bb.20:                              //   in Loop: Header=BB267_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB267_23
// %bb.21:                              //   in Loop: Header=BB267_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB267_23
// %bb.22:                              //   in Loop: Header=BB267_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB267_23:                             //   in Loop: Header=BB267_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB267_26
.LBB267_24:                             // %.preheader4
                                        //   in Loop: Header=BB267_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB267_25:                             //   Parent Loop BB267_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB267_25
.LBB267_26:                             //   in Loop: Header=BB267_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB267_16
// %bb.27:                              //   in Loop: Header=BB267_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB267_16
.LBB267_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI267_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI267_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB267_30
.LBB267_29:                             //   in Loop: Header=BB267_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB267_32
.LBB267_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB267_29
// %bb.31:                              //   in Loop: Header=BB267_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB267_29
.LBB267_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB267_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB267_36
.LBB267_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB267_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB267_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB267_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end267:
	.size	_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc, .Lfunc_end267-_Z28test_goto_loop_unroll_factorILi18EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
.LCPI268_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI268_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB268_32
// %bb.1:
	subs	w9, w20, #17
	b.lt	.LBB268_14
// %bb.2:
	mov	w8, #61681                      // =0xf0f1
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	w8, #61680, lsl #16
	mov	w13, w20
	movk	x10, #16683, lsl #48
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	fmov	v16.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x12, .LCPI268_1
	dup	v17.2d, x9
	fmov	d9, x9
	lsr	x8, x8, #36
	dup	v18.2d, x10
	fmov	d10, x10
	adrp	x9, .LCPI268_0
	fmov	d13, x11
	ldr	d11, [x12, :lo12:.LCPI268_1]
	add	w8, w8, w8, lsl #4
	ldr	d12, [x9, :lo12:.LCPI268_0]
	mov	w26, wzr
	sub	w27, w20, #16
	add	x24, x21, #64
	adrp	x19, init_value
	add	w22, w8, #17
	stur	x13, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x13, x22
	add	x8, x21, w22, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x28, x22
	add	x25, x8, #16
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB268_4
.LBB268_3:                              //   in Loop: Header=BB268_4 Depth=1
	adrp	x8, iterations
	add	w26, w26, #1
	ldr	w8, [x8, :lo12:iterations]
	cmp	w26, w8
	b.ge	.LBB268_32
.LBB268_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB268_5 Depth 2
                                        //     Child Loop BB268_8 Depth 2
                                        //     Child Loop BB268_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB268_5:                              //   Parent Loop BB268_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-64]
	add	x8, x8, #17
	ldp	d3, d4, [x9, #-48]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-32]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9]
	fmadd	d2, d2, d10, d8
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d4, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d5
	ldp	d7, d5, [x9, #16]
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d4, d4, d9
	fadd	d0, d0, d1
	ldp	d6, d1, [x9, #32]
	fadd	d7, d7, d9
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d6, d10, d8
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	ldp	d6, d5, [x9, #48]
	fadd	d7, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d7, d10, d8
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d3
	ldr	d3, [x9, #64]
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #136
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB268_5
// %bb.6:                               //   in Loop: Header=BB268_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB268_12
// %bb.7:                               //   in Loop: Header=BB268_4 Depth=1
	cmp	x23, #4
	mov	x10, x22
	mov	x8, x25
	mov	x9, x28
	b.lo	.LBB268_10
.LBB268_8:                              //   Parent Loop BB268_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB268_8
// %bb.9:                               //   in Loop: Header=BB268_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB268_12
.LBB268_10:                             // %.preheader
                                        //   in Loop: Header=BB268_4 Depth=1
	ldur	x9, [x29, #-56]                 // 8-byte Folded Reload
	add	x8, x21, x10, lsl #3
	sub	x9, x9, x10
.LBB268_11:                             //   Parent Loop BB268_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB268_11
.LBB268_12:                             //   in Loop: Header=BB268_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB268_3
// %bb.13:                              //   in Loop: Header=BB268_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	b	.LBB268_3
.LBB268_14:
	cmp	w20, #0
	b.le	.LBB268_28
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI268_1
	ldr	d12, [x9, :lo12:.LCPI268_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI268_0
	fmov	d14, x9
	mov	w23, w20
	ldr	d13, [x10, :lo12:.LCPI268_0]
	mov	w19, wzr
	and	x24, x23, #0x7ffffffc
	adrp	x25, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB268_17
.LBB268_16:                             //   in Loop: Header=BB268_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB268_32
.LBB268_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB268_25 Depth 2
	cmp	w20, #4
	b.hs	.LBB268_19
// %bb.18:                              //   in Loop: Header=BB268_17 Depth=1
	movi	d0, #0000000000000000
	mov	x10, xzr
	b	.LBB268_24
.LBB268_19:                             //   in Loop: Header=BB268_17 Depth=1
	ldp	q0, q1, [x21]
	mov	v2.16b, v7.16b
	mov	v3.16b, v7.16b
	cmp	x24, #4
	fadd	v0.2d, v0.2d, v5.2d
	fmla	v2.2d, v6.2d, v0.2d
	fadd	v0.2d, v1.2d, v5.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	v2.16b, v7.16b
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v2.2d, v6.2d, v0.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v0.2d, v2.2d, v5.2d
	mov	d1, v3.d[1]
	fadd	d2, d3, d11
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v0.2d
	fadd	d0, d2, d1
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB268_23
// %bb.20:                              //   in Loop: Header=BB268_17 Depth=1
	ldp	q1, q2, [x21, #32]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #8
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB268_23
// %bb.21:                              //   in Loop: Header=BB268_17 Depth=1
	ldp	q1, q2, [x21, #64]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	cmp	x24, #12
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.eq	.LBB268_23
// %bb.22:                              //   in Loop: Header=BB268_17 Depth=1
	ldp	q1, q2, [x21, #96]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
.LBB268_23:                             //   in Loop: Header=BB268_17 Depth=1
	cmp	x24, x23
	mov	x10, x24
	b.eq	.LBB268_26
.LBB268_24:                             // %.preheader4
                                        //   in Loop: Header=BB268_17 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x23, x10
.LBB268_25:                             //   Parent Loop BB268_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB268_25
.LBB268_26:                             //   in Loop: Header=BB268_17 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB268_16
// %bb.27:                              //   in Loop: Header=BB268_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB268_16
.LBB268_28:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI268_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI268_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB268_30
.LBB268_29:                             //   in Loop: Header=BB268_30 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB268_32
.LBB268_30:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB268_29
// %bb.31:                              //   in Loop: Header=BB268_30 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB268_29
.LBB268_32:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB268_34
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB268_36
.LBB268_34:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB268_37
// %bb.35:
	ldr	w8, [x23, :lo12:current_test]
.LBB268_36:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB268_37:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end268:
	.size	_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc, .Lfunc_end268-_Z28test_goto_loop_unroll_factorILi17EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
.LCPI269_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI269_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB269_25
// %bb.1:
	subs	w9, w21, #16
	b.lt	.LBB269_14
// %bb.2:
	and	w8, w9, #0xfffffff0
	mov	w9, w21
	fmov	v18.2d, #-13.00000000
	add	w24, w8, #16
	mov	x8, #31336081391616             // =0x1c8000000000
	and	x10, x9, #0x3
	movk	x8, #16584, lsl #48
	sub	x22, x9, x24
	stp	x10, x9, [sp, #24]              // 16-byte Folded Spill
	dup	v16.2d, x8
	fmov	d8, x8
	adrp	x8, .LCPI269_1
	ldr	d11, [x8, :lo12:.LCPI269_1]
	adrp	x8, .LCPI269_0
	sub	x23, x22, x10
	mov	x10, #253411660398592           // =0xe67a00000000
	ldr	d12, [x8, :lo12:.LCPI269_0]
	mov	x8, #70368744177664             // =0x400000000000
	movk	x10, #16683, lsl #48
	movk	x8, #49343, lsl #48
	add	x9, x20, w24, uxtw #3
	dup	v17.2d, x10
	fmov	d9, x10
	fmov	d10, #-13.00000000
	fmov	d13, x8
	mov	w26, wzr
	sub	w27, w21, #15
	add	x19, x20, #64
	add	x11, x23, x24
	add	x9, x9, #16
	adrp	x28, init_value
	str	x11, [sp, #16]                  // 8-byte Folded Spill
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	stur	q16, [x29, #-64]                // 16-byte Folded Spill
	stp	q18, q17, [sp, #48]             // 32-byte Folded Spill
	b	.LBB269_4
.LBB269_3:                              //   in Loop: Header=BB269_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB269_25
.LBB269_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB269_5 Depth 2
                                        //     Child Loop BB269_8 Depth 2
                                        //     Child Loop BB269_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x19
.LBB269_5:                              //   Parent Loop BB269_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-64]
	add	x8, x8, #16
	ldp	d3, d4, [x9, #-48]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-32]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-16]
	fadd	d7, d7, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d2
	fmadd	d7, d7, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d3
	ldp	d2, d3, [x9]
	fadd	d7, d7, d8
	fadd	d2, d2, d8
	fadd	d1, d1, d8
	fadd	d0, d0, d4
	fadd	d3, d3, d8
	fmadd	d7, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d5
	fmadd	d1, d1, d9, d10
	fmadd	d3, d3, d9, d10
	ldp	d4, d5, [x9, #16]
	fadd	d7, d7, d8
	fadd	d2, d2, d8
	fadd	d4, d4, d8
	fadd	d0, d0, d6
	fadd	d1, d1, d8
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fmadd	d7, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d1, d1, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d0, d0, d7
	ldp	d6, d7, [x9, #32]
	fadd	d2, d2, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d3, d3, d8
	fadd	d6, d6, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d1, d6, d9, d10
	fadd	d6, d7, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d9, d10
	fadd	d4, d4, d8
	ldp	d7, d5, [x9, #48]
	add	x9, x9, #128
	fadd	d1, d1, d8
	fmadd	d6, d6, d9, d10
	fadd	d7, d7, d8
	fadd	d0, d0, d3
	fadd	d2, d2, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d1, d1, d9, d10
	fadd	d6, d6, d8
	fmadd	d5, d7, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d3
	fmadd	d3, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d1, d1, d9, d10
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d2, d2, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB269_5
// %bb.6:                               //   in Loop: Header=BB269_4 Depth=1
	cmp	w24, w21
	b.ge	.LBB269_12
// %bb.7:                               //   in Loop: Header=BB269_4 Depth=1
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	cmp	x22, #4
	mov	x10, x24
	mov	x9, x23
	b.lo	.LBB269_10
.LBB269_8:                              //   Parent Loop BB269_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB269_8
// %bb.9:                               //   in Loop: Header=BB269_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB269_12
.LBB269_10:                             // %.preheader
                                        //   in Loop: Header=BB269_4 Depth=1
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB269_11:                             //   Parent Loop BB269_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB269_11
.LBB269_12:                             //   in Loop: Header=BB269_4 Depth=1
	ldr	d1, [x28, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB269_3
// %bb.13:                              //   in Loop: Header=BB269_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #48]             // 32-byte Folded Reload
	ldur	q16, [x29, #-64]                // 16-byte Folded Reload
	b	.LBB269_3
.LBB269_14:
	cmp	w21, #0
	b.le	.LBB269_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI269_1
	adrp	x10, .LCPI269_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI269_1]
	ldr	d12, [x10, :lo12:.LCPI269_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB269_17
.LBB269_16:                             //   in Loop: Header=BB269_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB269_25
.LBB269_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB269_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB269_18:                             //   Parent Loop BB269_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB269_18
// %bb.19:                              //   in Loop: Header=BB269_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB269_16
// %bb.20:                              //   in Loop: Header=BB269_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB269_16
.LBB269_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI269_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI269_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB269_23
.LBB269_22:                             //   in Loop: Header=BB269_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB269_25
.LBB269_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB269_22
// %bb.24:                              //   in Loop: Header=BB269_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB269_22
.LBB269_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB269_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB269_29
.LBB269_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB269_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB269_29:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB269_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end269:
	.size	_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc, .Lfunc_end269-_Z28test_goto_loop_unroll_factorILi16EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
.LCPI270_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI270_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB270_25
// %bb.1:
	subs	w9, w21, #15
	b.lt	.LBB270_14
// %bb.2:
	mov	w8, #34953                      // =0x8889
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w8, #34952, lsl #16
	mov	w14, w21
	movk	x10, #16683, lsl #48
	umull	x8, w9, w8
	mov	x9, #31336081391616             // =0x1c8000000000
	fmov	v16.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x12, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI270_1
	dup	v17.2d, x9
	fmov	d9, x9
	lsr	x8, x8, #35
	dup	v18.2d, x10
	fmov	d10, x10
	adrp	x9, .LCPI270_0
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI270_1]
	lsl	w11, w8, #4
	ldr	d12, [x9, :lo12:.LCPI270_0]
	mov	w26, wzr
	sub	w27, w21, #14
	add	x24, x20, #56
	adrp	x19, init_value
	sub	w8, w11, w8
	add	w22, w8, #15
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	sub	x23, x14, x22
	add	x8, x20, w22, uxtw #3
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	add	x9, x28, x22
	add	x8, x8, #16
	stp	x9, x14, [sp, #8]               // 16-byte Folded Spill
	str	x8, [sp, #24]                   // 8-byte Folded Spill
	b	.LBB270_4
.LBB270_3:                              //   in Loop: Header=BB270_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB270_25
.LBB270_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB270_5 Depth 2
                                        //     Child Loop BB270_8 Depth 2
                                        //     Child Loop BB270_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB270_5:                              //   Parent Loop BB270_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-56]
	add	x8, x8, #15
	ldp	d3, d4, [x9, #-40]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d7, d3, [x9, #8]
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d7, d7, d10, d8
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #24]
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d7, d7, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d1, d1, d9
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d7, d7, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d7, d7, d9
	ldp	d6, d5, [x9, #40]
	fadd	d4, d4, d9
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fmadd	d1, d7, d10, d8
	fadd	d2, d2, d9
	fmadd	d4, d4, d10, d8
	fadd	d5, d5, d9
	fmadd	d3, d3, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x9, #56]
	fmadd	d2, d2, d10, d8
	fadd	d4, d4, d9
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	add	x9, x9, #120
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d0, d0, d1
	b.lo	.LBB270_5
// %bb.6:                               //   in Loop: Header=BB270_4 Depth=1
	cmp	w22, w21
	b.ge	.LBB270_12
// %bb.7:                               //   in Loop: Header=BB270_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x23, #4
	mov	x10, x22
	mov	x9, x28
	b.lo	.LBB270_10
.LBB270_8:                              //   Parent Loop BB270_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB270_8
// %bb.9:                               //   in Loop: Header=BB270_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB270_12
.LBB270_10:                             // %.preheader
                                        //   in Loop: Header=BB270_4 Depth=1
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB270_11:                             //   Parent Loop BB270_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB270_11
.LBB270_12:                             //   in Loop: Header=BB270_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB270_3
// %bb.13:                              //   in Loop: Header=BB270_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	b	.LBB270_3
.LBB270_14:
	cmp	w21, #0
	b.le	.LBB270_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI270_1
	adrp	x10, .LCPI270_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI270_1]
	ldr	d12, [x10, :lo12:.LCPI270_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB270_17
.LBB270_16:                             //   in Loop: Header=BB270_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB270_25
.LBB270_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB270_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB270_18:                             //   Parent Loop BB270_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB270_18
// %bb.19:                              //   in Loop: Header=BB270_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB270_16
// %bb.20:                              //   in Loop: Header=BB270_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB270_16
.LBB270_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI270_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI270_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB270_23
.LBB270_22:                             //   in Loop: Header=BB270_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB270_25
.LBB270_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB270_22
// %bb.24:                              //   in Loop: Header=BB270_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB270_22
.LBB270_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB270_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB270_29
.LBB270_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB270_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB270_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB270_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end270:
	.size	_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc, .Lfunc_end270-_Z28test_goto_loop_unroll_factorILi15EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
.LCPI271_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI271_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB271_25
// %bb.1:
	subs	w9, w21, #14
	b.lt	.LBB271_14
// %bb.2:
	lsr	w8, w9, #1
	mov	w9, #9363                       // =0x2493
	mov	w12, w21
	movk	w9, #37449, lsl #16
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	x11, #253411660398592           // =0xe67a00000000
	umull	x8, w8, w9
	mov	w9, #14                         // =0xe
	movk	x10, #16584, lsl #48
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x8, x8, #34
	fmov	d10, x11
	adrp	x11, .LCPI271_0
	ldr	d12, [x11, :lo12:.LCPI271_0]
	mov	w26, wzr
	sub	w27, w21, #13
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI271_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI271_1]
	add	x24, x20, #56
	fmov	d13, x8
	adrp	x13, init_value
	sub	x23, x12, x19
	add	x10, x20, w19, uxtw #3
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	add	x9, x28, x19
	stp	x9, x12, [sp, #8]               // 16-byte Folded Spill
	add	x9, x10, #16
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	b	.LBB271_4
.LBB271_3:                              //   in Loop: Header=BB271_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB271_25
.LBB271_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB271_5 Depth 2
                                        //     Child Loop BB271_8 Depth 2
                                        //     Child Loop BB271_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB271_5:                              //   Parent Loop BB271_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-56]
	add	x8, x8, #14
	ldp	d3, d4, [x9, #-40]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-24]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #-8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d6, d10, d8
	ldp	d7, d6, [x9, #8]
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fadd	d3, d3, d9
	fadd	d4, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d5
	fmadd	d3, d3, d10, d8
	ldp	d5, d7, [x9, #24]
	fmadd	d4, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fadd	d4, d4, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d3, d5, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #40]
	fmadd	d6, d6, d10, d8
	add	x9, x9, #112
	fadd	d0, d0, d1
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB271_5
// %bb.6:                               //   in Loop: Header=BB271_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB271_12
// %bb.7:                               //   in Loop: Header=BB271_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x23, #4
	mov	x10, x19
	mov	x9, x28
	b.lo	.LBB271_10
.LBB271_8:                              //   Parent Loop BB271_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB271_8
// %bb.9:                               //   in Loop: Header=BB271_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB271_12
.LBB271_10:                             // %.preheader
                                        //   in Loop: Header=BB271_4 Depth=1
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB271_11:                             //   Parent Loop BB271_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB271_11
.LBB271_12:                             //   in Loop: Header=BB271_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB271_3
// %bb.13:                              //   in Loop: Header=BB271_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x22, x25
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	mov	x25, x22
	b	.LBB271_3
.LBB271_14:
	cmp	w21, #0
	b.le	.LBB271_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI271_1
	adrp	x10, .LCPI271_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI271_1]
	ldr	d12, [x10, :lo12:.LCPI271_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB271_17
.LBB271_16:                             //   in Loop: Header=BB271_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB271_25
.LBB271_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB271_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB271_18:                             //   Parent Loop BB271_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB271_18
// %bb.19:                              //   in Loop: Header=BB271_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB271_16
// %bb.20:                              //   in Loop: Header=BB271_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB271_16
.LBB271_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI271_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI271_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB271_23
.LBB271_22:                             //   in Loop: Header=BB271_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB271_25
.LBB271_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB271_22
// %bb.24:                              //   in Loop: Header=BB271_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB271_22
.LBB271_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB271_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB271_29
.LBB271_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB271_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB271_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB271_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end271:
	.size	_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc, .Lfunc_end271-_Z28test_goto_loop_unroll_factorILi14EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
.LCPI272_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI272_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB272_25
// %bb.1:
	subs	w9, w21, #13
	b.lt	.LBB272_14
// %bb.2:
	mov	w8, #60495                      // =0xec4f
	mov	w12, w21
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w8, #20164, lsl #16
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #13                         // =0xd
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #34
	adrp	x11, .LCPI272_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI272_0]
	sub	w27, w21, #12
	add	x24, x20, #48
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI272_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI272_1]
	adrp	x13, init_value
	fmov	d13, x8
	sub	x23, x12, x19
	add	x10, x20, w19, uxtw #3
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	add	x9, x28, x19
	stp	x9, x12, [sp, #8]               // 16-byte Folded Spill
	add	x9, x10, #16
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	b	.LBB272_4
.LBB272_3:                              //   in Loop: Header=BB272_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB272_25
.LBB272_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB272_5 Depth 2
                                        //     Child Loop BB272_8 Depth 2
                                        //     Child Loop BB272_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB272_5:                              //   Parent Loop BB272_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-48]
	add	x8, x8, #13
	ldp	d3, d4, [x9, #-32]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d7, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	ldp	d2, d3, [x9, #16]
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fmadd	d7, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d5
	ldp	d4, d5, [x9, #32]
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d7, d7, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d0, d0, d6
	fadd	d5, d5, d9
	fadd	d3, d3, d9
	fadd	d1, d1, d9
	fmadd	d6, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d6
	ldr	d6, [x9, #48]
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	add	x9, x9, #104
	fadd	d6, d6, d9
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d3, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d4, d4, d9
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB272_5
// %bb.6:                               //   in Loop: Header=BB272_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB272_12
// %bb.7:                               //   in Loop: Header=BB272_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x23, #4
	mov	x10, x19
	mov	x9, x28
	b.lo	.LBB272_10
.LBB272_8:                              //   Parent Loop BB272_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB272_8
// %bb.9:                               //   in Loop: Header=BB272_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB272_12
.LBB272_10:                             // %.preheader
                                        //   in Loop: Header=BB272_4 Depth=1
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB272_11:                             //   Parent Loop BB272_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB272_11
.LBB272_12:                             //   in Loop: Header=BB272_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB272_3
// %bb.13:                              //   in Loop: Header=BB272_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x22, x25
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	mov	x25, x22
	b	.LBB272_3
.LBB272_14:
	cmp	w21, #0
	b.le	.LBB272_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI272_1
	adrp	x10, .LCPI272_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI272_1]
	ldr	d12, [x10, :lo12:.LCPI272_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB272_17
.LBB272_16:                             //   in Loop: Header=BB272_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB272_25
.LBB272_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB272_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB272_18:                             //   Parent Loop BB272_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB272_18
// %bb.19:                              //   in Loop: Header=BB272_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB272_16
// %bb.20:                              //   in Loop: Header=BB272_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB272_16
.LBB272_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI272_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI272_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB272_23
.LBB272_22:                             //   in Loop: Header=BB272_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB272_25
.LBB272_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB272_22
// %bb.24:                              //   in Loop: Header=BB272_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB272_22
.LBB272_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB272_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB272_29
.LBB272_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB272_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB272_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB272_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end272:
	.size	_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc, .Lfunc_end272-_Z28test_goto_loop_unroll_factorILi13EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
.LCPI273_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI273_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB273_25
// %bb.1:
	subs	w9, w21, #12
	b.lt	.LBB273_14
// %bb.2:
	mov	w8, #43691                      // =0xaaab
	mov	w12, w21
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w8, #43690, lsl #16
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #12                         // =0xc
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	and	x14, x12, #0x3
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	lsr	x8, x8, #35
	fmov	d10, x11
	adrp	x11, .LCPI273_0
	ldr	d12, [x11, :lo12:.LCPI273_0]
	mov	w26, wzr
	sub	w27, w21, #11
	madd	w22, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI273_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI273_1]
	add	x24, x20, #48
	fmov	d13, x8
	adrp	x13, init_value
	stp	x14, x12, [sp, #24]             // 16-byte Folded Spill
	sub	x23, x12, x22
	add	x10, x20, w22, uxtw #3
	sub	x28, x23, x14
	stur	q16, [x29, #-64]                // 16-byte Folded Spill
	add	x9, x28, x22
	stp	q18, q17, [sp, #48]             // 32-byte Folded Spill
	str	x9, [sp, #16]                   // 8-byte Folded Spill
	add	x9, x10, #16
	str	x9, [sp, #40]                   // 8-byte Folded Spill
	b	.LBB273_4
.LBB273_3:                              //   in Loop: Header=BB273_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB273_25
.LBB273_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB273_5 Depth 2
                                        //     Child Loop BB273_8 Depth 2
                                        //     Child Loop BB273_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB273_5:                              //   Parent Loop BB273_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-48]
	add	x8, x8, #12
	ldp	d3, d4, [x9, #-32]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-16]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d6, d10, d8
	ldp	d7, d6, [x9]
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d5, d10, d8
	fadd	d5, d6, d9
	fadd	d1, d1, d9
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d3
	fadd	d2, d2, d9
	ldp	d3, d7, [x9, #16]
	fmadd	d5, d5, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d3, d3, d9
	fadd	d6, d6, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d4
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d6, d7, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	ldp	d7, d5, [x9, #32]
	fmadd	d6, d6, d10, d8
	fadd	d0, d0, d1
	add	x9, x9, #96
	fadd	d7, d7, d9
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d5, d7, d10, d8
	fadd	d1, d1, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB273_5
// %bb.6:                               //   in Loop: Header=BB273_4 Depth=1
	cmp	w22, w21
	b.ge	.LBB273_12
// %bb.7:                               //   in Loop: Header=BB273_4 Depth=1
	ldr	x8, [sp, #40]                   // 8-byte Folded Reload
	cmp	x23, #4
	mov	x10, x22
	mov	x9, x28
	b.lo	.LBB273_10
.LBB273_8:                              //   Parent Loop BB273_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB273_8
// %bb.9:                               //   in Loop: Header=BB273_4 Depth=1
	ldp	x10, x8, [sp, #16]              // 16-byte Folded Reload
	cbz	x8, .LBB273_12
.LBB273_10:                             // %.preheader
                                        //   in Loop: Header=BB273_4 Depth=1
	ldr	x9, [sp, #32]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB273_11:                             //   Parent Loop BB273_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB273_11
.LBB273_12:                             //   in Loop: Header=BB273_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB273_3
// %bb.13:                              //   in Loop: Header=BB273_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x19, x25
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #48]             // 32-byte Folded Reload
	mov	x13, x25
	ldur	q16, [x29, #-64]                // 16-byte Folded Reload
	mov	x25, x19
	b	.LBB273_3
.LBB273_14:
	cmp	w21, #0
	b.le	.LBB273_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI273_1
	adrp	x10, .LCPI273_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI273_1]
	ldr	d12, [x10, :lo12:.LCPI273_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB273_17
.LBB273_16:                             //   in Loop: Header=BB273_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB273_25
.LBB273_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB273_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB273_18:                             //   Parent Loop BB273_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB273_18
// %bb.19:                              //   in Loop: Header=BB273_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB273_16
// %bb.20:                              //   in Loop: Header=BB273_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB273_16
.LBB273_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI273_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI273_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB273_23
.LBB273_22:                             //   in Loop: Header=BB273_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB273_25
.LBB273_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB273_22
// %bb.24:                              //   in Loop: Header=BB273_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB273_22
.LBB273_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB273_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB273_29
.LBB273_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB273_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB273_29:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB273_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end273:
	.size	_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc, .Lfunc_end273-_Z28test_goto_loop_unroll_factorILi12EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.text._ZN15goto_loop_testsILi10EdE7do_testEPKdPKc,"axG",@progbits,_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc,comdat
	.weak	_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc // -- Begin function _ZN15goto_loop_testsILi10EdE7do_testEPKdPKc
	.p2align	2
	.type	_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc,@function
_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc: // @_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_startproc
// %bb.0:
	stp	x29, x30, [sp, #-32]!           // 16-byte Folded Spill
	.cfi_def_cfa_offset 32
	stp	x20, x19, [sp, #16]             // 16-byte Folded Spill
	mov	x29, sp
	.cfi_def_cfa w29, 32
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w30, -24
	.cfi_offset w29, -32
	adrp	x20, temp_string
	add	x20, x20, :lo12:temp_string
	mov	w1, #8000                       // =0x1f40
	mov	x2, x20
	mov	x19, x0
	bl	_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
	add	x2, x20, #100
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
	add	x2, x20, #200
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
	add	x2, x20, #300
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
	add	x2, x20, #400
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
	add	x2, x20, #500
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
	add	x2, x20, #600
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
	add	x2, x20, #700
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
	add	x2, x20, #800
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	bl	_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
	add	x2, x20, #900
	mov	x0, x19
	mov	w1, #8000                       // =0x1f40
	.cfi_def_cfa wsp, 32
	ldp	x20, x19, [sp, #16]             // 16-byte Folded Reload
	ldp	x29, x30, [sp], #32             // 16-byte Folded Reload
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w30
	.cfi_restore w29
	b	_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
.Lfunc_end274:
	.size	_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc, .Lfunc_end274-_ZN15goto_loop_testsILi10EdE7do_testEPKdPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
.LCPI275_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI275_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB275_25
// %bb.1:
	subs	w9, w21, #11
	b.lt	.LBB275_14
// %bb.2:
	mov	w8, #35747                      // =0x8ba3
	mov	w12, w21
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	w8, #47662, lsl #16
	mov	x11, #253411660398592           // =0xe67a00000000
	movk	x10, #16584, lsl #48
	umull	x8, w9, w8
	mov	w9, #11                         // =0xb
	movk	x11, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x10
	fmov	d9, x10
	dup	v18.2d, x11
	fmov	d10, x11
	lsr	x8, x8, #35
	adrp	x11, .LCPI275_0
	mov	w26, wzr
	ldr	d12, [x11, :lo12:.LCPI275_0]
	sub	w27, w21, #10
	add	x24, x20, #40
	madd	w19, w8, w9, w9
	mov	x8, #70368744177664             // =0x400000000000
	adrp	x9, .LCPI275_1
	movk	x8, #49343, lsl #48
	ldr	d11, [x9, :lo12:.LCPI275_1]
	adrp	x13, init_value
	fmov	d13, x8
	sub	x23, x12, x19
	add	x10, x20, w19, uxtw #3
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	and	x28, x23, #0xfffffffffffffffc
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	add	x9, x28, x19
	stp	x9, x12, [sp, #8]               // 16-byte Folded Spill
	add	x9, x10, #16
	str	x9, [sp, #24]                   // 8-byte Folded Spill
	b	.LBB275_4
.LBB275_3:                              //   in Loop: Header=BB275_4 Depth=1
	ldr	w8, [x25, :lo12:iterations]
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB275_25
.LBB275_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB275_5 Depth 2
                                        //     Child Loop BB275_8 Depth 2
                                        //     Child Loop BB275_11 Depth 2
	movi	d0, #0000000000000000
	mov	x8, xzr
	mov	x9, x24
.LBB275_5:                              //   Parent Loop BB275_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-40]
	add	x8, x8, #11
	ldp	d3, d4, [x9, #-24]
	cmp	x8, x27
	ldp	d5, d6, [x9, #-8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	ldp	d7, d1, [x9, #8]
	fadd	d7, d7, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d2, d7, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d6, d10, d8
	ldp	d7, d6, [x9, #24]
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fmadd	d4, d5, d10, d8
	fadd	d3, d3, d9
	fadd	d5, d6, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d4
	ldr	d4, [x9, #40]
	fmadd	d3, d3, d10, d8
	fmadd	d5, d5, d10, d8
	add	x9, x9, #88
	fadd	d4, d4, d9
	fadd	d2, d2, d9
	fadd	d1, d1, d9
	fadd	d6, d6, d9
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d1, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB275_5
// %bb.6:                               //   in Loop: Header=BB275_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB275_12
// %bb.7:                               //   in Loop: Header=BB275_4 Depth=1
	ldr	x8, [sp, #24]                   // 8-byte Folded Reload
	cmp	x23, #4
	mov	x10, x19
	mov	x9, x28
	b.lo	.LBB275_10
.LBB275_8:                              //   Parent Loop BB275_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x8, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x9, x9, #4
	add	x8, x8, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB275_8
// %bb.9:                               //   in Loop: Header=BB275_4 Depth=1
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x28
	b.eq	.LBB275_12
.LBB275_10:                             // %.preheader
                                        //   in Loop: Header=BB275_4 Depth=1
	ldr	x9, [sp, #16]                   // 8-byte Folded Reload
	add	x8, x20, x10, lsl #3
	sub	x9, x9, x10
.LBB275_11:                             //   Parent Loop BB275_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x8], #8
	subs	x9, x9, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB275_11
.LBB275_12:                             //   in Loop: Header=BB275_4 Depth=1
	ldr	d1, [x13, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB275_3
// %bb.13:                              //   in Loop: Header=BB275_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	mov	x22, x25
	mov	x25, x13
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	mov	x13, x25
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	mov	x25, x22
	b	.LBB275_3
.LBB275_14:
	cmp	w21, #0
	b.le	.LBB275_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI275_1
	adrp	x10, .LCPI275_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI275_1]
	ldr	d12, [x10, :lo12:.LCPI275_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB275_17
.LBB275_16:                             //   in Loop: Header=BB275_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB275_25
.LBB275_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB275_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB275_18:                             //   Parent Loop BB275_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB275_18
// %bb.19:                              //   in Loop: Header=BB275_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB275_16
// %bb.20:                              //   in Loop: Header=BB275_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB275_16
.LBB275_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI275_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI275_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB275_23
.LBB275_22:                             //   in Loop: Header=BB275_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB275_25
.LBB275_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB275_22
// %bb.24:                              //   in Loop: Header=BB275_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB275_22
.LBB275_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB275_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB275_29
.LBB275_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB275_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB275_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB275_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end275:
	.size	_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc, .Lfunc_end275-_Z28test_goto_loop_unroll_factorILi11EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
.LCPI276_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI276_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB276_25
// %bb.1:
	subs	w9, w21, #10
	b.lt	.LBB276_14
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	x11, #31336081391616            // =0x1c8000000000
	mov	x12, #253411660398592           // =0xe67a00000000
	movk	w10, #52428, lsl #16
	mov	w13, w21
	movk	x11, #16584, lsl #48
	umull	x9, w9, w10
	mov	w10, #10                        // =0xa
	movk	x12, #16683, lsl #48
	fmov	v16.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v17.2d, x11
	fmov	d9, x11
	dup	v18.2d, x12
	fmov	d10, x12
	lsr	x9, x9, #35
	adrp	x12, .LCPI276_0
	mov	w26, wzr
	ldr	d12, [x12, :lo12:.LCPI276_0]
	sub	w27, w21, #9
	add	x24, x20, #40
	madd	w19, w9, w10, w10
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x10, .LCPI276_1
	movk	x9, #49343, lsl #48
	ldr	d11, [x10, :lo12:.LCPI276_1]
	adrp	x22, init_value
	fmov	d13, x9
	sub	x25, x13, x19
	add	x11, x20, w19, uxtw #3
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	and	x23, x25, #0xfffffffffffffffc
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	add	x10, x23, x19
	add	x28, x11, #16
	stp	x10, x13, [sp, #16]             // 16-byte Folded Spill
	b	.LBB276_4
.LBB276_3:                              //   in Loop: Header=BB276_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB276_25
.LBB276_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB276_5 Depth 2
                                        //     Child Loop BB276_8 Depth 2
                                        //     Child Loop BB276_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x24
.LBB276_5:                              //   Parent Loop BB276_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-40]
	add	x9, x9, #10
	ldp	d3, d4, [x10, #-24]
	cmp	x9, x27
	ldp	d5, d6, [x10, #-8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	ldp	d1, d7, [x10, #8]
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d6, d9
	fadd	d6, d7, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fadd	d3, d5, d9
	fmadd	d2, d2, d10, d8
	ldp	d7, d5, [x10, #24]
	fmadd	d6, d6, d10, d8
	add	x10, x10, #80
	fadd	d1, d1, d9
	fadd	d7, d7, d9
	fadd	d0, d0, d4
	fadd	d2, d2, d9
	fmadd	d3, d3, d10, d8
	fadd	d4, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d5, d7, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d3
	fmadd	d3, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d4, d5, d9
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d2
	fadd	d2, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fadd	d3, d3, d9
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB276_5
// %bb.6:                               //   in Loop: Header=BB276_4 Depth=1
	cmp	w19, w21
	b.ge	.LBB276_12
// %bb.7:                               //   in Loop: Header=BB276_4 Depth=1
	cmp	x25, #4
	mov	x11, x19
	mov	x9, x28
	mov	x10, x23
	b.lo	.LBB276_10
.LBB276_8:                              //   Parent Loop BB276_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB276_8
// %bb.9:                               //   in Loop: Header=BB276_4 Depth=1
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x25, x23
	b.eq	.LBB276_12
.LBB276_10:                             // %.preheader
                                        //   in Loop: Header=BB276_4 Depth=1
	ldr	x10, [sp, #24]                  // 8-byte Folded Reload
	add	x9, x20, x11, lsl #3
	sub	x10, x10, x11
.LBB276_11:                             //   Parent Loop BB276_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB276_11
.LBB276_12:                             //   in Loop: Header=BB276_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB276_3
// %bb.13:                              //   in Loop: Header=BB276_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB276_3
.LBB276_14:
	cmp	w21, #0
	b.le	.LBB276_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movk	x11, #49343, lsl #48
	fmov	d8, x9
	fmov	d9, x10
	fmov	d10, #-13.00000000
	adrp	x9, .LCPI276_1
	adrp	x10, .LCPI276_0
	fmov	d13, x11
	ldr	d11, [x9, :lo12:.LCPI276_1]
	ldr	d12, [x10, :lo12:.LCPI276_0]
	mov	w19, wzr
	mov	w22, w21
	adrp	x23, init_value
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	b	.LBB276_17
.LBB276_16:                             //   in Loop: Header=BB276_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB276_25
.LBB276_17:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB276_18 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x20
	mov	x10, x22
.LBB276_18:                             //   Parent Loop BB276_17 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB276_18
// %bb.19:                              //   in Loop: Header=BB276_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB276_16
// %bb.20:                              //   in Loop: Header=BB276_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB276_16
.LBB276_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI276_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI276_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB276_23
.LBB276_22:                             //   in Loop: Header=BB276_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB276_25
.LBB276_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB276_22
// %bb.24:                              //   in Loop: Header=BB276_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB276_22
.LBB276_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB276_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB276_29
.LBB276_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB276_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB276_29:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB276_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end276:
	.size	_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc, .Lfunc_end276-_Z28test_goto_loop_unroll_factorILi10EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
.LCPI277_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI277_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB277_31
// %bb.1:
	subs	w9, w20, #9
	b.lt	.LBB277_14
// %bb.2:
	mov	w10, #36409                     // =0x8e39
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #14563, lsl #16
	mov	w14, w20
	movk	x11, #16683, lsl #48
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v16.2d, #-13.00000000
	movk	x10, #16584, lsl #48
	movk	x12, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI277_1
	dup	v17.2d, x10
	fmov	d9, x10
	lsr	x9, x9, #33
	dup	v18.2d, x11
	fmov	d10, x11
	adrp	x10, .LCPI277_0
	fmov	d13, x12
	ldr	d11, [x13, :lo12:.LCPI277_1]
	add	w9, w9, w9, lsl #3
	ldr	d12, [x10, :lo12:.LCPI277_0]
	mov	w26, wzr
	sub	w27, w20, #8
	add	x24, x21, #32
	adrp	x19, init_value
	add	w22, w9, #9
	stur	x14, [x29, #-56]                // 8-byte Folded Spill
	sub	x25, x14, x22
	add	x9, x21, w22, uxtw #3
	stp	q17, q16, [sp, #32]             // 32-byte Folded Spill
	and	x23, x25, #0xfffffffffffffffc
	str	q18, [sp, #16]                  // 16-byte Folded Spill
	add	x10, x23, x22
	add	x28, x9, #16
	str	x10, [sp, #8]                   // 8-byte Folded Spill
	b	.LBB277_4
.LBB277_3:                              //   in Loop: Header=BB277_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB277_31
.LBB277_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB277_5 Depth 2
                                        //     Child Loop BB277_8 Depth 2
                                        //     Child Loop BB277_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x24
.LBB277_5:                              //   Parent Loop BB277_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-32]
	add	x9, x9, #9
	ldp	d3, d4, [x10, #-16]
	cmp	x9, x27
	ldp	d5, d6, [x10]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d6, d10, d8
	ldp	d7, d6, [x10, #16]
	fadd	d7, d7, d9
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fadd	d1, d1, d9
	fmadd	d3, d5, d10, d8
	fadd	d5, d6, d9
	fmadd	d6, d7, d10, d8
	fadd	d0, d0, d2
	ldr	d2, [x10, #32]
	fmadd	d1, d1, d10, d8
	fadd	d3, d3, d9
	fmadd	d5, d5, d10, d8
	fadd	d2, d2, d9
	add	x10, x10, #72
	fadd	d6, d6, d9
	fadd	d0, d0, d4
	fadd	d1, d1, d9
	fmadd	d3, d3, d10, d8
	fadd	d4, d5, d9
	fmadd	d2, d2, d10, d8
	fmadd	d5, d6, d10, d8
	fadd	d0, d0, d3
	fmadd	d1, d1, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d4, d5, d9
	fadd	d0, d0, d1
	fadd	d3, d3, d9
	fmadd	d2, d2, d10, d8
	fmadd	d1, d4, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB277_5
// %bb.6:                               //   in Loop: Header=BB277_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB277_12
// %bb.7:                               //   in Loop: Header=BB277_4 Depth=1
	cmp	x25, #4
	mov	x11, x22
	mov	x9, x28
	mov	x10, x23
	b.lo	.LBB277_10
.LBB277_8:                              //   Parent Loop BB277_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v16.16b
	mov	v4.16b, v16.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v17.2d
	fmla	v3.2d, v18.2d, v1.2d
	fadd	v1.2d, v2.2d, v17.2d
	fadd	v2.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	fadd	v2.2d, v4.2d, v17.2d
	mov	v4.16b, v16.16b
	fmla	v3.2d, v18.2d, v1.2d
	fmla	v4.2d, v18.2d, v2.2d
	fadd	v1.2d, v3.2d, v17.2d
	mov	v3.16b, v16.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v18.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB277_8
// %bb.9:                               //   in Loop: Header=BB277_4 Depth=1
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x25, x23
	b.eq	.LBB277_12
.LBB277_10:                             // %.preheader
                                        //   in Loop: Header=BB277_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB277_11:                             //   Parent Loop BB277_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB277_11
.LBB277_12:                             //   in Loop: Header=BB277_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB277_3
// %bb.13:                              //   in Loop: Header=BB277_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #48]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB277_3
.LBB277_14:
	cmp	w20, #0
	b.le	.LBB277_27
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI277_1
	adrp	x10, .LCPI277_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI277_1]
	ldr	d13, [x10, :lo12:.LCPI277_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB277_17
.LBB277_16:                             //   in Loop: Header=BB277_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB277_31
.LBB277_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB277_25
// %bb.18:                              //   in Loop: Header=BB277_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB277_25
// %bb.19:                              //   in Loop: Header=BB277_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB277_25
// %bb.20:                              //   in Loop: Header=BB277_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB277_25
// %bb.21:                              //   in Loop: Header=BB277_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB277_25
// %bb.22:                              //   in Loop: Header=BB277_17 Depth=1
	ldr	d1, [x21, #40]
	cmp	w20, #6
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB277_25
// %bb.23:                              //   in Loop: Header=BB277_17 Depth=1
	ldr	d1, [x21, #48]
	cmp	w20, #7
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB277_25
// %bb.24:                              //   in Loop: Header=BB277_17 Depth=1
	ldr	d1, [x21, #56]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB277_25:                             //   in Loop: Header=BB277_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB277_16
// %bb.26:                              //   in Loop: Header=BB277_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB277_16
.LBB277_27:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI277_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI277_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB277_29
.LBB277_28:                             //   in Loop: Header=BB277_29 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB277_31
.LBB277_29:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB277_28
// %bb.30:                              //   in Loop: Header=BB277_29 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB277_28
.LBB277_31:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB277_33
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB277_35
.LBB277_33:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB277_36
// %bb.34:
	ldr	w8, [x23, :lo12:current_test]
.LBB277_35:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB277_36:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end277:
	.size	_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc, .Lfunc_end277-_Z28test_goto_loop_unroll_factorILi9EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
.LCPI278_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI278_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB278_30
// %bb.1:
	subs	w9, w20, #8
	b.lt	.LBB278_14
// %bb.2:
	and	w9, w9, #0xfffffff8
	mov	w10, w20
	fmov	v18.2d, #-13.00000000
	add	w24, w9, #8
	mov	x9, #31336081391616             // =0x1c8000000000
	and	x11, x10, #0x3
	movk	x9, #16584, lsl #48
	sub	x22, x10, x24
	str	x11, [sp, #24]                  // 8-byte Folded Spill
	dup	v16.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI278_1
	ldr	d11, [x9, :lo12:.LCPI278_1]
	adrp	x9, .LCPI278_0
	sub	x25, x22, x11
	mov	x11, #253411660398592           // =0xe67a00000000
	ldr	d12, [x9, :lo12:.LCPI278_0]
	mov	x9, #70368744177664             // =0x400000000000
	movk	x11, #16683, lsl #48
	movk	x9, #49343, lsl #48
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	add	x10, x21, w24, uxtw #3
	dup	v17.2d, x11
	fmov	d9, x11
	fmov	d10, #-13.00000000
	fmov	d13, x9
	mov	w26, wzr
	sub	w27, w20, #7
	add	x19, x21, #32
	add	x12, x25, x24
	add	x23, x10, #16
	adrp	x28, init_value
	str	x12, [sp, #16]                  // 8-byte Folded Spill
	stp	q17, q16, [sp, #48]             // 32-byte Folded Spill
	str	q18, [sp, #32]                  // 16-byte Folded Spill
	b	.LBB278_4
.LBB278_3:                              //   in Loop: Header=BB278_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB278_30
.LBB278_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB278_5 Depth 2
                                        //     Child Loop BB278_8 Depth 2
                                        //     Child Loop BB278_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x19
.LBB278_5:                              //   Parent Loop BB278_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-32]
	add	x9, x9, #8
	ldp	d3, d4, [x10, #-16]
	cmp	x9, x27
	ldp	d5, d6, [x10]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d5, d5, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fmadd	d5, d5, d9, d10
	fmadd	d6, d6, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fadd	d6, d6, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d0, d0, d1
	fadd	d1, d5, d8
	ldp	d7, d5, [x10, #16]
	add	x10, x10, #64
	fadd	d7, d7, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d9, d10
	fadd	d2, d4, d8
	fadd	d4, d5, d8
	fmadd	d5, d7, d9, d10
	fadd	d0, d0, d3
	fadd	d1, d1, d8
	fmadd	d2, d2, d9, d10
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fmadd	d5, d6, d9, d10
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d2
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d4, d5, d8
	fadd	d0, d0, d1
	fmadd	d2, d2, d9, d10
	fmadd	d1, d4, d9, d10
	fadd	d3, d3, d8
	fadd	d2, d2, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB278_5
// %bb.6:                               //   in Loop: Header=BB278_4 Depth=1
	cmp	w24, w20
	b.ge	.LBB278_12
// %bb.7:                               //   in Loop: Header=BB278_4 Depth=1
	cmp	x22, #4
	mov	x11, x24
	mov	x9, x23
	mov	x10, x25
	b.lo	.LBB278_10
.LBB278_8:                              //   Parent Loop BB278_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v18.16b
	mov	v4.16b, v18.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v18.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v18.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB278_8
// %bb.9:                               //   in Loop: Header=BB278_4 Depth=1
	ldp	x11, x9, [sp, #16]              // 16-byte Folded Reload
	cbz	x9, .LBB278_12
.LBB278_10:                             // %.preheader
                                        //   in Loop: Header=BB278_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB278_11:                             //   Parent Loop BB278_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB278_11
.LBB278_12:                             //   in Loop: Header=BB278_4 Depth=1
	ldr	d1, [x28, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB278_3
// %bb.13:                              //   in Loop: Header=BB278_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q18, q17, [sp, #32]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q16, [sp, #64]                  // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB278_3
.LBB278_14:
	cmp	w20, #0
	b.le	.LBB278_26
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI278_1
	adrp	x10, .LCPI278_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI278_1]
	ldr	d13, [x10, :lo12:.LCPI278_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB278_17
.LBB278_16:                             //   in Loop: Header=BB278_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB278_30
.LBB278_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB278_24
// %bb.18:                              //   in Loop: Header=BB278_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB278_24
// %bb.19:                              //   in Loop: Header=BB278_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB278_24
// %bb.20:                              //   in Loop: Header=BB278_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB278_24
// %bb.21:                              //   in Loop: Header=BB278_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB278_24
// %bb.22:                              //   in Loop: Header=BB278_17 Depth=1
	ldr	d1, [x21, #40]
	cmp	w20, #6
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB278_24
// %bb.23:                              //   in Loop: Header=BB278_17 Depth=1
	ldr	d1, [x21, #48]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB278_24:                             //   in Loop: Header=BB278_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB278_16
// %bb.25:                              //   in Loop: Header=BB278_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB278_16
.LBB278_26:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI278_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI278_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB278_28
.LBB278_27:                             //   in Loop: Header=BB278_28 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB278_30
.LBB278_28:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB278_27
// %bb.29:                              //   in Loop: Header=BB278_28 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB278_27
.LBB278_30:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB278_32
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB278_34
.LBB278_32:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB278_35
// %bb.33:
	ldr	w8, [x23, :lo12:current_test]
.LBB278_34:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB278_35:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end278:
	.size	_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc, .Lfunc_end278-_Z28test_goto_loop_unroll_factorILi8EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
.LCPI279_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI279_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB279_29
// %bb.1:
	subs	w9, w20, #7
	b.lt	.LBB279_14
// %bb.2:
	mov	w10, #18725                     // =0x4925
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x13, #70368744177664            // =0x400000000000
	movk	w10, #9362, lsl #16
	mov	w15, w20
	movk	x11, #16683, lsl #48
	umull	x10, w9, w10
	fmov	v7.2d, #-13.00000000
	movk	x13, #49343, lsl #48
	fmov	d8, #-13.00000000
	adrp	x14, .LCPI279_1
	dup	v17.2d, x11
	fmov	d10, x11
	fmov	d13, x13
	ldr	d11, [x14, :lo12:.LCPI279_1]
	lsr	x10, x10, #32
	mov	w26, wzr
	sub	w27, w20, #6
	add	x24, x21, #24
	adrp	x19, init_value
	stur	x15, [x29, #-56]                // 8-byte Folded Spill
	sub	w9, w9, w10
	str	q17, [sp, #16]                  // 16-byte Folded Spill
	add	w9, w10, w9, lsr #1
	mov	x10, #31336081391616            // =0x1c8000000000
	movk	x10, #16584, lsl #48
	lsr	w9, w9, #2
	dup	v16.2d, x10
	fmov	d9, x10
	adrp	x10, .LCPI279_0
	lsl	w12, w9, #3
	ldr	d12, [x10, :lo12:.LCPI279_0]
	stp	q16, q7, [sp, #32]              // 32-byte Folded Spill
	sub	w9, w12, w9
	add	w22, w9, #7
	sub	x25, x15, x22
	add	x9, x21, w22, uxtw #3
	and	x23, x25, #0xfffffffffffffffc
	add	x10, x23, x22
	add	x28, x9, #16
	str	x10, [sp, #8]                   // 8-byte Folded Spill
	b	.LBB279_4
.LBB279_3:                              //   in Loop: Header=BB279_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB279_29
.LBB279_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB279_5 Depth 2
                                        //     Child Loop BB279_8 Depth 2
                                        //     Child Loop BB279_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x24
.LBB279_5:                              //   Parent Loop BB279_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-24]
	add	x9, x9, #7
	ldp	d3, d4, [x10, #-8]
	cmp	x9, x27
	ldp	d5, d6, [x10, #8]
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fmadd	d6, d6, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d0, d0, d1
	ldr	d1, [x10, #24]
	add	x10, x10, #56
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d2, d4, d9
	fadd	d4, d6, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d3
	fmadd	d2, d2, d10, d8
	fmadd	d3, d4, d10, d8
	fadd	d4, d5, d9
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fadd	d3, d3, d9
	fmadd	d2, d4, d10, d8
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d2
	fmadd	d2, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB279_5
// %bb.6:                               //   in Loop: Header=BB279_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB279_12
// %bb.7:                               //   in Loop: Header=BB279_4 Depth=1
	cmp	x25, #4
	mov	x11, x22
	mov	x9, x28
	mov	x10, x23
	b.lo	.LBB279_10
.LBB279_8:                              //   Parent Loop BB279_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB279_8
// %bb.9:                               //   in Loop: Header=BB279_4 Depth=1
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x25, x23
	b.eq	.LBB279_12
.LBB279_10:                             // %.preheader
                                        //   in Loop: Header=BB279_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB279_11:                             //   Parent Loop BB279_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB279_11
.LBB279_12:                             //   in Loop: Header=BB279_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB279_3
// %bb.13:                              //   in Loop: Header=BB279_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q17, q16, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB279_3
.LBB279_14:
	cmp	w20, #0
	b.le	.LBB279_25
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI279_1
	adrp	x10, .LCPI279_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI279_1]
	ldr	d13, [x10, :lo12:.LCPI279_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB279_17
.LBB279_16:                             //   in Loop: Header=BB279_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB279_29
.LBB279_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB279_23
// %bb.18:                              //   in Loop: Header=BB279_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB279_23
// %bb.19:                              //   in Loop: Header=BB279_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB279_23
// %bb.20:                              //   in Loop: Header=BB279_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB279_23
// %bb.21:                              //   in Loop: Header=BB279_17 Depth=1
	ldr	d1, [x21, #32]
	cmp	w20, #5
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB279_23
// %bb.22:                              //   in Loop: Header=BB279_17 Depth=1
	ldr	d1, [x21, #40]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB279_23:                             //   in Loop: Header=BB279_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB279_16
// %bb.24:                              //   in Loop: Header=BB279_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB279_16
.LBB279_25:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI279_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI279_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB279_27
.LBB279_26:                             //   in Loop: Header=BB279_27 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB279_29
.LBB279_27:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB279_26
// %bb.28:                              //   in Loop: Header=BB279_27 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB279_26
.LBB279_29:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB279_31
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB279_33
.LBB279_31:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB279_34
// %bb.32:
	ldr	w8, [x23, :lo12:current_test]
.LBB279_33:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB279_34:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end279:
	.size	_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc, .Lfunc_end279-_Z28test_goto_loop_unroll_factorILi7EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
.LCPI280_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI280_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB280_28
// %bb.1:
	subs	w9, w20, #6
	b.lt	.LBB280_14
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	x11, #31336081391616            // =0x1c8000000000
	mov	x12, #253411660398592           // =0xe67a00000000
	movk	w10, #43690, lsl #16
	mov	w13, w20
	movk	x11, #16584, lsl #48
	umull	x9, w9, w10
	mov	w10, #6                         // =0x6
	movk	x12, #16683, lsl #48
	fmov	v7.2d, #-13.00000000
	fmov	d8, #-13.00000000
	dup	v16.2d, x11
	fmov	d9, x11
	dup	v17.2d, x12
	fmov	d10, x12
	lsr	x9, x9, #34
	adrp	x12, .LCPI280_0
	mov	w26, wzr
	ldr	d12, [x12, :lo12:.LCPI280_0]
	sub	w27, w20, #5
	add	x24, x21, #24
	madd	w19, w9, w10, w10
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x10, .LCPI280_1
	movk	x9, #49343, lsl #48
	ldr	d11, [x10, :lo12:.LCPI280_1]
	adrp	x22, init_value
	fmov	d13, x9
	stur	x13, [x29, #-56]                // 8-byte Folded Spill
	sub	x25, x13, x19
	add	x11, x21, w19, uxtw #3
	stp	q16, q7, [sp, #32]              // 32-byte Folded Spill
	and	x23, x25, #0xfffffffffffffffc
	str	q17, [sp, #16]                  // 16-byte Folded Spill
	add	x10, x23, x19
	add	x28, x11, #16
	str	x10, [sp, #8]                   // 8-byte Folded Spill
	b	.LBB280_4
.LBB280_3:                              //   in Loop: Header=BB280_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB280_28
.LBB280_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB280_5 Depth 2
                                        //     Child Loop BB280_8 Depth 2
                                        //     Child Loop BB280_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x24
.LBB280_5:                              //   Parent Loop BB280_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-24]
	add	x9, x9, #6
	ldp	d3, d4, [x10, #-8]
	cmp	x9, x27
	ldp	d5, d6, [x10, #8]
	add	x10, x10, #48
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fadd	d6, d6, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fadd	d1, d3, d9
	fmadd	d3, d6, d10, d8
	fadd	d0, d0, d2
	fmadd	d1, d1, d10, d8
	fadd	d2, d3, d9
	fmadd	d3, d5, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d4, d10, d8
	fmadd	d2, d2, d10, d8
	fadd	d3, d3, d9
	fadd	d0, d0, d1
	fadd	d2, d2, d9
	fmadd	d1, d3, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB280_5
// %bb.6:                               //   in Loop: Header=BB280_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB280_12
// %bb.7:                               //   in Loop: Header=BB280_4 Depth=1
	cmp	x25, #4
	mov	x11, x19
	mov	x9, x28
	mov	x10, x23
	b.lo	.LBB280_10
.LBB280_8:                              //   Parent Loop BB280_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v16.2d
	fmla	v3.2d, v17.2d, v1.2d
	fadd	v1.2d, v2.2d, v16.2d
	fadd	v2.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v16.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v17.2d, v1.2d
	fmla	v4.2d, v17.2d, v2.2d
	fadd	v1.2d, v3.2d, v16.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v17.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB280_8
// %bb.9:                               //   in Loop: Header=BB280_4 Depth=1
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x25, x23
	b.eq	.LBB280_12
.LBB280_10:                             // %.preheader
                                        //   in Loop: Header=BB280_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB280_11:                             //   Parent Loop BB280_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB280_11
.LBB280_12:                             //   in Loop: Header=BB280_4 Depth=1
	ldr	d1, [x22, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB280_3
// %bb.13:                              //   in Loop: Header=BB280_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q17, q16, [sp, #16]             // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q7, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB280_3
.LBB280_14:
	cmp	w20, #0
	b.le	.LBB280_24
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI280_1
	adrp	x10, .LCPI280_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI280_1]
	ldr	d13, [x10, :lo12:.LCPI280_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB280_17
.LBB280_16:                             //   in Loop: Header=BB280_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB280_28
.LBB280_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB280_22
// %bb.18:                              //   in Loop: Header=BB280_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB280_22
// %bb.19:                              //   in Loop: Header=BB280_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB280_22
// %bb.20:                              //   in Loop: Header=BB280_17 Depth=1
	ldr	d1, [x21, #24]
	cmp	w20, #4
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB280_22
// %bb.21:                              //   in Loop: Header=BB280_17 Depth=1
	ldr	d1, [x21, #32]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB280_22:                             //   in Loop: Header=BB280_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB280_16
// %bb.23:                              //   in Loop: Header=BB280_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB280_16
.LBB280_24:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI280_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI280_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB280_26
.LBB280_25:                             //   in Loop: Header=BB280_26 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB280_28
.LBB280_26:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB280_25
// %bb.27:                              //   in Loop: Header=BB280_26 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB280_25
.LBB280_28:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB280_30
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB280_32
.LBB280_30:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB280_33
// %bb.31:
	ldr	w8, [x23, :lo12:current_test]
.LBB280_32:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB280_33:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end280:
	.size	_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc, .Lfunc_end280-_Z28test_goto_loop_unroll_factorILi6EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
.LCPI281_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI281_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB281_27
// %bb.1:
	subs	w9, w20, #5
	b.lt	.LBB281_14
// %bb.2:
	mov	w10, #52429                     // =0xcccd
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #52428, lsl #16
	mov	w15, w20
	movk	x11, #16683, lsl #48
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v6.2d, #-13.00000000
	movk	x10, #16584, lsl #48
	movk	x12, #49343, lsl #48
	add	x24, x21, #16
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI281_1
	adrp	x14, .LCPI281_0
	lsr	x9, x9, #34
	dup	v7.2d, x10
	fmov	d9, x10
	dup	v16.2d, x11
	fmov	d10, x11
	fmov	d13, x12
	add	w9, w9, w9, lsl #2
	ldr	d11, [x13, :lo12:.LCPI281_1]
	ldr	d12, [x14, :lo12:.LCPI281_0]
	mov	w26, wzr
	sub	w27, w20, #4
	adrp	x19, init_value
	add	w22, w9, #5
	stur	x15, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x15, x22
	add	x28, x24, w22, uxtw #3
	stp	q7, q6, [sp, #32]               // 32-byte Folded Spill
	and	x25, x23, #0xfffffffffffffffc
	str	q16, [sp, #16]                  // 16-byte Folded Spill
	add	x9, x25, x22
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB281_4
.LBB281_3:                              //   in Loop: Header=BB281_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB281_27
.LBB281_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB281_5 Depth 2
                                        //     Child Loop BB281_8 Depth 2
                                        //     Child Loop BB281_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
	mov	x10, x24
.LBB281_5:                              //   Parent Loop BB281_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x10, #-16]
	add	x9, x9, #5
	ldp	d3, d4, [x10]
	cmp	x9, x27
	ldr	d5, [x10, #16]
	add	x10, x10, #40
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fadd	d5, d5, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fmadd	d5, d5, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fadd	d4, d4, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fmadd	d4, d4, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d2, d5, d9
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d3, d4, d9
	fmadd	d2, d2, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d3, d10, d8
	fadd	d2, d2, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB281_5
// %bb.6:                               //   in Loop: Header=BB281_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB281_12
// %bb.7:                               //   in Loop: Header=BB281_4 Depth=1
	cmp	x23, #4
	mov	x11, x22
	mov	x9, x28
	mov	x10, x25
	b.lo	.LBB281_10
.LBB281_8:                              //   Parent Loop BB281_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v6.16b
	mov	v4.16b, v6.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v7.2d
	fmla	v3.2d, v16.2d, v1.2d
	fadd	v1.2d, v2.2d, v7.2d
	fadd	v2.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	fmla	v3.2d, v16.2d, v1.2d
	fmla	v4.2d, v16.2d, v2.2d
	fadd	v1.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	fadd	v2.2d, v4.2d, v7.2d
	mov	v4.16b, v6.16b
	fmla	v3.2d, v16.2d, v1.2d
	fmla	v4.2d, v16.2d, v2.2d
	fadd	v1.2d, v3.2d, v7.2d
	mov	v3.16b, v6.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v16.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB281_8
// %bb.9:                               //   in Loop: Header=BB281_4 Depth=1
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x25
	b.eq	.LBB281_12
.LBB281_10:                             // %.preheader
                                        //   in Loop: Header=BB281_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB281_11:                             //   Parent Loop BB281_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB281_11
.LBB281_12:                             //   in Loop: Header=BB281_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB281_3
// %bb.13:                              //   in Loop: Header=BB281_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q16, q7, [sp, #16]              // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q6, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB281_3
.LBB281_14:
	cmp	w20, #0
	b.le	.LBB281_23
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI281_1
	adrp	x10, .LCPI281_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI281_1]
	ldr	d13, [x10, :lo12:.LCPI281_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB281_17
.LBB281_16:                             //   in Loop: Header=BB281_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB281_27
.LBB281_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB281_21
// %bb.18:                              //   in Loop: Header=BB281_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB281_21
// %bb.19:                              //   in Loop: Header=BB281_17 Depth=1
	ldr	d1, [x21, #16]
	cmp	w20, #3
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB281_21
// %bb.20:                              //   in Loop: Header=BB281_17 Depth=1
	ldr	d1, [x21, #24]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB281_21:                             //   in Loop: Header=BB281_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB281_16
// %bb.22:                              //   in Loop: Header=BB281_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB281_16
.LBB281_23:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI281_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI281_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB281_25
.LBB281_24:                             //   in Loop: Header=BB281_25 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB281_27
.LBB281_25:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB281_24
// %bb.26:                              //   in Loop: Header=BB281_25 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB281_24
.LBB281_27:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB281_29
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB281_31
.LBB281_29:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB281_32
// %bb.30:
	ldr	w8, [x23, :lo12:current_test]
.LBB281_31:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB281_32:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end281:
	.size	_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc, .Lfunc_end281-_Z28test_goto_loop_unroll_factorILi5EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
.LCPI282_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI282_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #240
	.cfi_def_cfa_offset 240
	str	d14, [sp, #80]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #96]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #112]            // 16-byte Folded Spill
	stp	d9, d8, [sp, #128]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #144]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #160]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #176]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #192]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #208]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #224]            // 16-byte Folded Spill
	add	x29, sp, #144
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB282_26
// %bb.1:
	subs	w9, w20, #4
	b.lt	.LBB282_14
// %bb.2:
	and	w9, w9, #0xfffffffc
	mov	w10, w20
	fmov	v7.2d, #-13.00000000
	add	w19, w9, #4
	mov	x9, #31336081391616             // =0x1c8000000000
	add	x24, x21, #16
	movk	x9, #16584, lsl #48
	and	x11, x10, #0x3
	sub	x22, x10, x19
	dup	v5.2d, x9
	fmov	d8, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x9, #16683, lsl #48
	fmov	d10, #-13.00000000
	sub	x23, x22, x11
	dup	v6.2d, x9
	fmov	d9, x9
	adrp	x9, .LCPI282_1
	ldr	d11, [x9, :lo12:.LCPI282_1]
	adrp	x9, .LCPI282_0
	add	x25, x24, w19, uxtw #3
	ldr	d12, [x9, :lo12:.LCPI282_0]
	mov	x9, #70368744177664             // =0x400000000000
	mov	w26, wzr
	movk	x9, #49343, lsl #48
	sub	w27, w20, #3
	stur	x10, [x29, #-56]                // 8-byte Folded Spill
	fmov	d13, x9
	add	x10, x23, x19
	adrp	x28, init_value
	stp	x10, x11, [sp, #16]             // 16-byte Folded Spill
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB282_4
.LBB282_3:                              //   in Loop: Header=BB282_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB282_26
.LBB282_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB282_5 Depth 2
                                        //     Child Loop BB282_8 Depth 2
                                        //     Child Loop BB282_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x24
	mov	w10, #1                         // =0x1
.LBB282_5:                              //   Parent Loop BB282_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-16]
	add	x11, x10, #3
	ldp	d3, d4, [x9], #32
	add	x10, x10, #4
	cmp	x11, x27
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fmadd	d4, d4, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fadd	d3, d3, d8
	fadd	d4, d4, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fmadd	d3, d3, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fmadd	d3, d4, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d2, d3, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB282_5
// %bb.6:                               //   in Loop: Header=BB282_4 Depth=1
	cmp	w19, w20
	b.ge	.LBB282_12
// %bb.7:                               //   in Loop: Header=BB282_4 Depth=1
	cmp	x22, #4
	mov	x11, x19
	mov	x9, x25
	mov	x10, x23
	b.lo	.LBB282_10
.LBB282_8:                              //   Parent Loop BB282_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB282_8
// %bb.9:                               //   in Loop: Header=BB282_4 Depth=1
	ldp	x11, x9, [sp, #16]              // 16-byte Folded Reload
	cbz	x9, .LBB282_12
.LBB282_10:                             // %.preheader
                                        //   in Loop: Header=BB282_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB282_11:                             //   Parent Loop BB282_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB282_11
.LBB282_12:                             //   in Loop: Header=BB282_4 Depth=1
	ldr	d1, [x28, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB282_3
// %bb.13:                              //   in Loop: Header=BB282_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB282_3
.LBB282_14:
	cmp	w20, #0
	b.le	.LBB282_22
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI282_1
	adrp	x10, .LCPI282_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI282_1]
	ldr	d13, [x10, :lo12:.LCPI282_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB282_17
.LBB282_16:                             //   in Loop: Header=BB282_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB282_26
.LBB282_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB282_20
// %bb.18:                              //   in Loop: Header=BB282_17 Depth=1
	ldr	d1, [x21, #8]
	cmp	w20, #2
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.eq	.LBB282_20
// %bb.19:                              //   in Loop: Header=BB282_17 Depth=1
	ldr	d1, [x21, #16]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB282_20:                             //   in Loop: Header=BB282_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB282_16
// %bb.21:                              //   in Loop: Header=BB282_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB282_16
.LBB282_22:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI282_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI282_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB282_24
.LBB282_23:                             //   in Loop: Header=BB282_24 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB282_26
.LBB282_24:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB282_23
// %bb.25:                              //   in Loop: Header=BB282_24 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB282_23
.LBB282_26:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB282_28
// %bb.27:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB282_30
.LBB282_28:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB282_31
// %bb.29:
	ldr	w8, [x23, :lo12:current_test]
.LBB282_30:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 240
	ldp	x20, x19, [sp, #224]            // 16-byte Folded Reload
	ldr	d14, [sp, #80]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #208]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #192]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #176]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #160]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #144]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #128]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #112]            // 16-byte Folded Reload
	ldp	d13, d12, [sp, #96]             // 16-byte Folded Reload
	add	sp, sp, #240
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB282_31:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end282:
	.size	_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc, .Lfunc_end282-_Z28test_goto_loop_unroll_factorILi4EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
.LCPI283_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI283_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	str	d14, [sp, #64]                  // 8-byte Folded Spill
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_offset b14, -160
	.cfi_remember_state
	str	x2, [sp]                        // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB283_25
// %bb.1:
	subs	w9, w20, #3
	b.lt	.LBB283_14
// %bb.2:
	mov	w10, #43691                     // =0xaaab
	mov	x11, #253411660398592           // =0xe67a00000000
	mov	x12, #70368744177664            // =0x400000000000
	movk	w10, #43690, lsl #16
	mov	w15, w20
	movk	x11, #16683, lsl #48
	umull	x9, w9, w10
	mov	x10, #31336081391616            // =0x1c8000000000
	fmov	v5.2d, #-13.00000000
	movk	x10, #16584, lsl #48
	movk	x12, #49343, lsl #48
	add	x24, x21, #16
	fmov	d8, #-13.00000000
	adrp	x13, .LCPI283_1
	adrp	x14, .LCPI283_0
	lsr	x9, x9, #33
	dup	v6.2d, x10
	fmov	d9, x10
	dup	v7.2d, x11
	fmov	d10, x11
	fmov	d13, x12
	add	w9, w9, w9, lsl #1
	ldr	d11, [x13, :lo12:.LCPI283_1]
	ldr	d12, [x14, :lo12:.LCPI283_0]
	mov	w26, wzr
	sub	w27, w20, #2
	adrp	x19, init_value
	add	w22, w9, #3
	stur	x15, [x29, #-56]                // 8-byte Folded Spill
	sub	x23, x15, x22
	add	x28, x24, w22, uxtw #3
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	and	x25, x23, #0xfffffffffffffffc
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	add	x9, x25, x22
	str	x9, [sp, #8]                    // 8-byte Folded Spill
	b	.LBB283_4
.LBB283_3:                              //   in Loop: Header=BB283_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB283_25
.LBB283_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB283_5 Depth 2
                                        //     Child Loop BB283_8 Depth 2
                                        //     Child Loop BB283_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, x24
	mov	w10, #1                         // =0x1
.LBB283_5:                              //   Parent Loop BB283_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	d1, d2, [x9, #-16]
	add	x11, x10, #2
	ldr	d3, [x9], #24
	add	x10, x10, #3
	cmp	x11, x27
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fadd	d3, d3, d9
	fmadd	d1, d1, d10, d8
	fmadd	d2, d2, d10, d8
	fmadd	d3, d3, d10, d8
	fadd	d1, d1, d9
	fadd	d2, d2, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d2, d3, d9
	fadd	d0, d0, d1
	fmadd	d1, d2, d10, d8
	fadd	d0, d0, d1
	b.lo	.LBB283_5
// %bb.6:                               //   in Loop: Header=BB283_4 Depth=1
	cmp	w22, w20
	b.ge	.LBB283_12
// %bb.7:                               //   in Loop: Header=BB283_4 Depth=1
	cmp	x23, #4
	mov	x11, x22
	mov	x9, x28
	mov	x10, x25
	b.lo	.LBB283_10
.LBB283_8:                              //   Parent Loop BB283_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v5.16b
	mov	v4.16b, v5.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v6.2d
	fmla	v3.2d, v7.2d, v1.2d
	fadd	v1.2d, v2.2d, v6.2d
	fadd	v2.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	fmla	v3.2d, v7.2d, v1.2d
	fmla	v4.2d, v7.2d, v2.2d
	fadd	v1.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	fadd	v2.2d, v4.2d, v6.2d
	mov	v4.16b, v5.16b
	fmla	v3.2d, v7.2d, v1.2d
	fmla	v4.2d, v7.2d, v2.2d
	fadd	v1.2d, v3.2d, v6.2d
	mov	v3.16b, v5.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v7.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB283_8
// %bb.9:                               //   in Loop: Header=BB283_4 Depth=1
	ldr	x11, [sp, #8]                   // 8-byte Folded Reload
	cmp	x23, x25
	b.eq	.LBB283_12
.LBB283_10:                             // %.preheader
                                        //   in Loop: Header=BB283_4 Depth=1
	ldur	x10, [x29, #-56]                // 8-byte Folded Reload
	add	x9, x21, x11, lsl #3
	sub	x10, x10, x11
.LBB283_11:                             //   Parent Loop BB283_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
	b.ne	.LBB283_11
.LBB283_12:                             //   in Loop: Header=BB283_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB283_3
// %bb.13:                              //   in Loop: Header=BB283_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB283_3
.LBB283_14:
	cmp	w20, #0
	b.le	.LBB283_21
// %bb.15:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	mov	x11, #70368744177664            // =0x400000000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	d11, #0000000000000000
	movk	x11, #49343, lsl #48
	fmov	d8, #-13.00000000
	fmov	d9, x9
	fmov	d10, x10
	adrp	x9, .LCPI283_1
	adrp	x10, .LCPI283_0
	fmov	d14, x11
	ldr	d12, [x9, :lo12:.LCPI283_1]
	ldr	d13, [x10, :lo12:.LCPI283_0]
	mov	w19, wzr
	adrp	x23, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	b	.LBB283_17
.LBB283_16:                             //   in Loop: Header=BB283_17 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB283_25
.LBB283_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d0, [x21]
	cmp	w20, #1
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d9
	fmadd	d0, d0, d10, d8
	fadd	d0, d0, d11
	b.eq	.LBB283_19
// %bb.18:                              //   in Loop: Header=BB283_17 Depth=1
	ldr	d1, [x21, #8]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d0, d0, d1
.LBB283_19:                             //   in Loop: Header=BB283_17 Depth=1
	ldr	d1, [x23, :lo12:init_value]
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fadd	d1, d1, d9
	fmadd	d1, d1, d10, d8
	fmul	d1, d1, d14
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d12
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d13
	b.mi	.LBB283_16
// %bb.20:                              //   in Loop: Header=BB283_17 Depth=1
	adrp	x8, current_test
	mov	x0, x22
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB283_16
.LBB283_21:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI283_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI283_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB283_23
.LBB283_22:                             //   in Loop: Header=BB283_23 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB283_25
.LBB283_23:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB283_22
// %bb.24:                              //   in Loop: Header=BB283_23 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB283_22
.LBB283_25:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB283_27
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB283_29
.LBB283_27:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB283_30
// %bb.28:
	ldr	w8, [x23, :lo12:current_test]
.LBB283_29:
	sub	x9, x20, x19
	ldr	x10, [sp]                       // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldr	d14, [sp, #64]                  // 8-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	.cfi_restore b14
	ret
.LBB283_30:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end283:
	.size	_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc, .Lfunc_end283-_Z28test_goto_loop_unroll_factorILi3EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
.LCPI284_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI284_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	d13, d12, [sp, #80]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #96]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #112]              // 16-byte Folded Spill
	stp	x29, x30, [sp, #128]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #144]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #160]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #176]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #192]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #208]            // 16-byte Folded Spill
	add	x29, sp, #128
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w21, w1
	mov	x20, x0
	bl	clock
	adrp	x8, iterations
	adrp	x9, start_time
	ldr	w8, [x8, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB284_23
// %bb.1:
	subs	w9, w21, #2
	b.lt	.LBB284_14
// %bb.2:
	and	w9, w9, #0xfffffffe
	mov	x10, #31336081391616            // =0x1c8000000000
	mov	w28, w21
	add	w24, w9, #2
	mov	x9, #253411660398592            // =0xe67a00000000
	movk	x10, #16584, lsl #48
	movk	x9, #16683, lsl #48
	fmov	v7.2d, #-13.00000000
	sub	x19, x28, x24
	dup	v6.2d, x9
	fmov	d9, x9
	adrp	x9, .LCPI284_1
	ldr	d11, [x9, :lo12:.LCPI284_1]
	adrp	x9, .LCPI284_0
	add	x11, x20, w24, uxtw #3
	ldr	d12, [x9, :lo12:.LCPI284_0]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v5.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d8, x10
	fmov	d10, #-13.00000000
	fmov	d13, x9
	and	x22, x19, #0xfffffffffffffffc
	mov	w26, wzr
	sub	w27, w21, #1
	add	x10, x22, x24
	add	x23, x11, #16
	adrp	x25, init_value
	str	x10, [sp, #16]                  // 8-byte Folded Spill
	stp	q6, q5, [sp, #48]               // 32-byte Folded Spill
	str	q7, [sp, #32]                   // 16-byte Folded Spill
	b	.LBB284_4
.LBB284_3:                              //   in Loop: Header=BB284_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB284_23
.LBB284_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB284_5 Depth 2
                                        //     Child Loop BB284_8 Depth 2
                                        //     Child Loop BB284_11 Depth 2
	movi	d0, #0000000000000000
	mov	x9, xzr
.LBB284_5:                              //   Parent Loop BB284_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add	x10, x20, x9, lsl #3
	add	x9, x9, #2
	cmp	x9, x27
	ldp	d1, d2, [x10]
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fmadd	d2, d2, d9, d10
	fadd	d1, d1, d8
	fadd	d2, d2, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	fmadd	d1, d2, d9, d10
	fadd	d0, d0, d1
	b.lo	.LBB284_5
// %bb.6:                               //   in Loop: Header=BB284_4 Depth=1
	cmp	w24, w21
	b.ge	.LBB284_12
// %bb.7:                               //   in Loop: Header=BB284_4 Depth=1
	cmp	x19, #4
	mov	x11, x24
	mov	x9, x23
	mov	x10, x22
	b.lo	.LBB284_10
.LBB284_8:                              //   Parent Loop BB284_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB284_8
// %bb.9:                               //   in Loop: Header=BB284_4 Depth=1
	ldr	x11, [sp, #16]                  // 8-byte Folded Reload
	cmp	x19, x22
	b.eq	.LBB284_12
.LBB284_10:                             // %.preheader
                                        //   in Loop: Header=BB284_4 Depth=1
	add	x9, x20, x11, lsl #3
	sub	x10, x28, x11
.LBB284_11:                             //   Parent Loop BB284_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB284_11
.LBB284_12:                             //   in Loop: Header=BB284_4 Depth=1
	ldr	d1, [x25, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB284_3
// %bb.13:                              //   in Loop: Header=BB284_4 Depth=1
	adrp	x8, current_test
	adrp	x0, .L.str.19
	add	x0, x0, :lo12:.L.str.19
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	ldp	q7, q6, [sp, #32]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	q5, [sp, #64]                   // 16-byte Folded Reload
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB284_3
.LBB284_14:
	adrp	x19, init_value
	cmp	w21, #1
	ldr	d0, [x19, :lo12:init_value]
	b.ne	.LBB284_19
// %bb.15:                              // %.preheader4
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v4.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	movi	v7.2d, #0000000000000000
	dup	v5.2d, x9
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #16575, lsl #48
	adrp	x10, .LCPI284_0
	mov	w22, wzr
	dup	v16.2d, x9
	adrp	x9, .LCPI284_1
	ldr	d9, [x10, :lo12:.LCPI284_0]
	ldr	d8, [x9, :lo12:.LCPI284_1]
	adrp	x21, .L.str.19
	add	x21, x21, :lo12:.L.str.19
	stp	q5, q4, [sp, #48]               // 32-byte Folded Spill
	stp	q16, q6, [sp, #16]              // 32-byte Folded Spill
	b	.LBB284_17
.LBB284_16:                             //   in Loop: Header=BB284_17 Depth=1
	add	w22, w22, #1
	cmp	w22, w8
	b.ge	.LBB284_23
.LBB284_17:                             // =>This Inner Loop Header: Depth=1
	ldr	d1, [x20]
	mov	v2.16b, v4.16b
	mov	v1.d[1], v0.d[0]
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v2.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v4.16b
	fmla	v2.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	mov	v2.16b, v4.16b
	fmla	v2.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v7.2d
	fmul	v2.2d, v2.2d, v16.2d
	mov	v3.16b, v1.16b
	mov	v3.d[1], v2.d[1]
	dup	v2.2d, v2.d[1]
	fsub	v2.2d, v3.2d, v2.2d
	fdiv	v3.2d, v2.2d, v1.2d
	fabs	d1, d1
	fcmp	d1, d8
	fcsel	d1, d3, d2, gt
	fabs	d1, d1
	fcmp	d1, d9
	b.mi	.LBB284_16
// %bb.18:                              //   in Loop: Header=BB284_17 Depth=1
	adrp	x8, current_test
	mov	x0, x21
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	movi	v7.2d, #0000000000000000
	ldp	q16, q6, [sp, #16]              // 32-byte Folded Reload
	ldp	q5, q4, [sp, #48]               // 32-byte Folded Reload
	adrp	x8, iterations
	ldr	d0, [x19, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB284_16
.LBB284_19:                             // %.preheader6
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	fmov	d10, #-13.00000000
	movk	x9, #16584, lsl #48
	adrp	x10, .LCPI284_0
	mov	w21, wzr
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d12, [x10, :lo12:.LCPI284_0]
	movk	x9, #16683, lsl #48
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB284_21
.LBB284_20:                             //   in Loop: Header=BB284_21 Depth=1
	add	w21, w21, #1
	cmp	w21, w8
	b.ge	.LBB284_23
.LBB284_21:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB284_20
// %bb.22:                              //   in Loop: Header=BB284_21 Depth=1
	adrp	x8, current_test
	mov	x0, x20
	ldr	w1, [x8, :lo12:current_test]
	bl	printf
	adrp	x8, iterations
	ldr	d0, [x19, :lo12:init_value]
	ldr	w8, [x8, :lo12:iterations]
	b	.LBB284_20
.LBB284_23:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	adrp	x23, current_test
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB284_25
// %bb.24:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB284_27
.LBB284_25:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB284_28
// %bb.26:
	ldr	w8, [x23, :lo12:current_test]
.LBB284_27:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 224
	ldp	x20, x19, [sp, #208]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #192]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #176]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #160]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #144]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #128]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #112]              // 16-byte Folded Reload
	ldp	d11, d10, [sp, #96]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #80]             // 16-byte Folded Reload
	add	sp, sp, #224
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB284_28:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end284:
	.size	_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc, .Lfunc_end284-_Z28test_goto_loop_unroll_factorILi2EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          // -- Begin function _Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
.LCPI285_0:
	.xword	0x3eb0c6f7a0b5ed8d              // double 9.9999999999999995E-7
.LCPI285_1:
	.xword	0x3e45798ee2308c3a              // double 1.0E-8
	.section	.text._Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc,"axG",@progbits,_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc,comdat
	.weak	_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
	.p2align	2
	.type	_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc,@function
_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc: // @_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_startproc
// %bb.0:
	sub	sp, sp, #208
	.cfi_def_cfa_offset 208
	stp	d13, d12, [sp, #64]             // 16-byte Folded Spill
	stp	d11, d10, [sp, #80]             // 16-byte Folded Spill
	stp	d9, d8, [sp, #96]               // 16-byte Folded Spill
	stp	x29, x30, [sp, #112]            // 16-byte Folded Spill
	stp	x28, x27, [sp, #128]            // 16-byte Folded Spill
	stp	x26, x25, [sp, #144]            // 16-byte Folded Spill
	stp	x24, x23, [sp, #160]            // 16-byte Folded Spill
	stp	x22, x21, [sp, #176]            // 16-byte Folded Spill
	stp	x20, x19, [sp, #192]            // 16-byte Folded Spill
	add	x29, sp, #112
	.cfi_def_cfa w29, 96
	.cfi_offset w19, -8
	.cfi_offset w20, -16
	.cfi_offset w21, -24
	.cfi_offset w22, -32
	.cfi_offset w23, -40
	.cfi_offset w24, -48
	.cfi_offset w25, -56
	.cfi_offset w26, -64
	.cfi_offset w27, -72
	.cfi_offset w28, -80
	.cfi_offset w30, -88
	.cfi_offset w29, -96
	.cfi_offset b8, -104
	.cfi_offset b9, -112
	.cfi_offset b10, -120
	.cfi_offset b11, -128
	.cfi_offset b12, -136
	.cfi_offset b13, -144
	.cfi_remember_state
	str	x2, [sp, #8]                    // 8-byte Folded Spill
	mov	w20, w1
	mov	x21, x0
	bl	clock
	adrp	x25, iterations
	adrp	x9, start_time
	adrp	x23, current_test
	ldr	w8, [x25, :lo12:iterations]
	str	x0, [x9, :lo12:start_time]
	cmp	w8, #1
	b.lt	.LBB285_17
// %bb.1:
	cmp	w20, #0
	b.le	.LBB285_13
// %bb.2:
	mov	x9, #31336081391616             // =0x1c8000000000
	mov	x10, #253411660398592           // =0xe67a00000000
	fmov	v7.2d, #-13.00000000
	movk	x9, #16584, lsl #48
	movk	x10, #16683, lsl #48
	fmov	d10, #-13.00000000
	dup	v5.2d, x9
	fmov	d8, x9
	adrp	x9, .LCPI285_1
	ldr	d11, [x9, :lo12:.LCPI285_1]
	mov	x9, #70368744177664             // =0x400000000000
	dup	v6.2d, x10
	movk	x9, #49343, lsl #48
	fmov	d9, x10
	adrp	x10, .LCPI285_0
	fmov	d13, x9
	mov	w27, w20
	ldr	d12, [x10, :lo12:.LCPI285_0]
	mov	w26, wzr
	add	x28, x21, #16
	and	x24, x27, #0x7ffffffc
	adrp	x19, init_value
	adrp	x22, .L.str.19
	add	x22, x22, :lo12:.L.str.19
	stp	q6, q5, [sp, #32]               // 32-byte Folded Spill
	str	q7, [sp, #16]                   // 16-byte Folded Spill
	b	.LBB285_4
.LBB285_3:                              //   in Loop: Header=BB285_4 Depth=1
	add	w26, w26, #1
	cmp	w26, w8
	b.ge	.LBB285_17
.LBB285_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB285_7 Depth 2
                                        //     Child Loop BB285_10 Depth 2
	movi	d0, #0000000000000000
	cmp	w20, #4
	b.hs	.LBB285_6
// %bb.5:                               //   in Loop: Header=BB285_4 Depth=1
	mov	x10, xzr
	b	.LBB285_9
.LBB285_6:                              // %.preheader2
                                        //   in Loop: Header=BB285_4 Depth=1
	mov	x9, x28
	mov	x10, x24
.LBB285_7:                              //   Parent Loop BB285_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldp	q1, q2, [x9, #-16]
	mov	v3.16b, v7.16b
	mov	v4.16b, v7.16b
	subs	x10, x10, #4
	add	x9, x9, #32
	fadd	v1.2d, v1.2d, v5.2d
	fmla	v3.2d, v6.2d, v1.2d
	fadd	v1.2d, v2.2d, v5.2d
	fadd	v2.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	fadd	v2.2d, v4.2d, v5.2d
	mov	v4.16b, v7.16b
	fmla	v3.2d, v6.2d, v1.2d
	fmla	v4.2d, v6.2d, v2.2d
	fadd	v1.2d, v3.2d, v5.2d
	mov	v3.16b, v7.16b
	mov	d2, v4.d[1]
	fadd	d0, d0, d4
	fmla	v3.2d, v6.2d, v1.2d
	fadd	d0, d0, d2
	mov	d1, v3.d[1]
	fadd	d0, d0, d3
	fadd	d0, d0, d1
	b.ne	.LBB285_7
// %bb.8:                               //   in Loop: Header=BB285_4 Depth=1
	cmp	x24, x27
	mov	x10, x24
	b.eq	.LBB285_11
.LBB285_9:                              // %.preheader
                                        //   in Loop: Header=BB285_4 Depth=1
	add	x9, x21, x10, lsl #3
	sub	x10, x27, x10
.LBB285_10:                             //   Parent Loop BB285_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ldr	d1, [x9], #8
	subs	x10, x10, #1
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d0, d0, d1
	b.ne	.LBB285_10
.LBB285_11:                             //   in Loop: Header=BB285_4 Depth=1
	ldr	d1, [x19, :lo12:init_value]
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fadd	d1, d1, d8
	fmadd	d1, d1, d9, d10
	fmul	d1, d1, d13
	fadd	d1, d0, d1
	fdiv	d2, d1, d0
	fabs	d0, d0
	fcmp	d0, d11
	fcsel	d0, d2, d1, gt
	fabs	d0, d0
	fcmp	d0, d12
	b.mi	.LBB285_3
// %bb.12:                              //   in Loop: Header=BB285_4 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x22
	bl	printf
	ldp	q7, q6, [sp, #16]               // 32-byte Folded Reload
	ldr	q5, [sp, #48]                   // 16-byte Folded Reload
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB285_3
.LBB285_13:
	mov	x9, #31336081391616             // =0x1c8000000000
	movi	d8, #0000000000000000
	adrp	x21, init_value
	movk	x9, #16584, lsl #48
	fmov	d10, #-13.00000000
	adrp	x10, .LCPI285_0
	fmov	d9, x9
	mov	x9, #253411660398592            // =0xe67a00000000
	ldr	d0, [x21, :lo12:init_value]
	movk	x9, #16683, lsl #48
	ldr	d12, [x10, :lo12:.LCPI285_0]
	mov	w19, wzr
	fmov	d11, x9
	mov	x9, #70368744177664             // =0x400000000000
	adrp	x20, .L.str.19
	add	x20, x20, :lo12:.L.str.19
	movk	x9, #49343, lsl #48
	fmov	d13, x9
	b	.LBB285_15
.LBB285_14:                             //   in Loop: Header=BB285_15 Depth=1
	add	w19, w19, #1
	cmp	w19, w8
	b.ge	.LBB285_17
.LBB285_15:                             // =>This Inner Loop Header: Depth=1
	fadd	d1, d0, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fadd	d1, d1, d9
	fmadd	d1, d1, d11, d10
	fmul	d1, d1, d13
	fadd	d1, d1, d8
	fabs	d1, d1
	fcmp	d1, d12
	b.mi	.LBB285_14
// %bb.16:                              //   in Loop: Header=BB285_15 Depth=1
	ldr	w1, [x23, :lo12:current_test]
	mov	x0, x20
	bl	printf
	ldr	d0, [x21, :lo12:init_value]
	ldr	w8, [x25, :lo12:iterations]
	b	.LBB285_14
.LBB285_17:
	bl	clock
	adrp	x22, results
	adrp	x21, allocated_results
	adrp	x9, start_time
	mov	x20, x0
	ldr	x0, [x22, :lo12:results]
	ldr	x19, [x9, :lo12:start_time]
	ldr	w9, [x21, :lo12:allocated_results]
	adrp	x8, end_time
	str	x20, [x8, :lo12:end_time]
	cbz	x0, .LBB285_19
// %bb.18:
	ldr	w8, [x23, :lo12:current_test]
	cmp	w8, w9
	b.lt	.LBB285_21
.LBB285_19:
	add	w8, w9, #10
	sbfiz	x1, x8, #4, #32
	str	w8, [x21, :lo12:allocated_results]
	bl	realloc
	str	x0, [x22, :lo12:results]
	cbz	x0, .LBB285_22
// %bb.20:
	ldr	w8, [x23, :lo12:current_test]
.LBB285_21:
	sub	x9, x20, x19
	ldr	x10, [sp, #8]                   // 8-byte Folded Reload
	scvtf	d0, x9
	mov	x9, #145685290680320            // =0x848000000000
	movk	x9, #16686, lsl #48
	fmov	d1, x9
	add	x9, x0, w8, sxtw #4
	add	w8, w8, #1
	str	x10, [x9, #8]
	fdiv	d0, d0, d1
	str	d0, [x9]
	str	w8, [x23, :lo12:current_test]
	.cfi_def_cfa wsp, 208
	ldp	x20, x19, [sp, #192]            // 16-byte Folded Reload
	ldp	x22, x21, [sp, #176]            // 16-byte Folded Reload
	ldp	x24, x23, [sp, #160]            // 16-byte Folded Reload
	ldp	x26, x25, [sp, #144]            // 16-byte Folded Reload
	ldp	x28, x27, [sp, #128]            // 16-byte Folded Reload
	ldp	x29, x30, [sp, #112]            // 16-byte Folded Reload
	ldp	d9, d8, [sp, #96]               // 16-byte Folded Reload
	ldp	d11, d10, [sp, #80]             // 16-byte Folded Reload
	ldp	d13, d12, [sp, #64]             // 16-byte Folded Reload
	add	sp, sp, #208
	.cfi_def_cfa_offset 0
	.cfi_restore w19
	.cfi_restore w20
	.cfi_restore w21
	.cfi_restore w22
	.cfi_restore w23
	.cfi_restore w24
	.cfi_restore w25
	.cfi_restore w26
	.cfi_restore w27
	.cfi_restore w28
	.cfi_restore w30
	.cfi_restore w29
	.cfi_restore b8
	.cfi_restore b9
	.cfi_restore b10
	.cfi_restore b11
	.cfi_restore b12
	.cfi_restore b13
	ret
.LBB285_22:
	.cfi_restore_state
	ldr	w1, [x21, :lo12:allocated_results]
	adrp	x0, .L.str
	add	x0, x0, :lo12:.L.str
	bl	printf
	mov	w0, #-1                         // =0xffffffff
	bl	exit
.Lfunc_end285:
	.size	_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc, .Lfunc_end285-_Z28test_goto_loop_unroll_factorILi1EdEvPKT0_iPKc
	.cfi_endproc
                                        // -- End function
	.type	results,@object                 // @results
	.bss
	.globl	results
	.p2align	3, 0x0
results:
	.xword	0
	.size	results, 8

	.type	current_test,@object            // @current_test
	.globl	current_test
	.p2align	2, 0x0
current_test:
	.word	0                               // 0x0
	.size	current_test, 4

	.type	allocated_results,@object       // @allocated_results
	.globl	allocated_results
	.p2align	2, 0x0
allocated_results:
	.word	0                               // 0x0
	.size	allocated_results, 4

	.type	.L.str,@object                  // @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Could not allocate %d results\n"
	.size	.L.str, 31

	.type	.L.str.1,@object                // @.str.1
.L.str.1:
	.asciz	"\ntest %*s description   absolute   operations   ratio with\n"
	.size	.L.str.1, 60

	.type	.L.str.2,@object                // @.str.2
.L.str.2:
	.asciz	" "
	.size	.L.str.2, 2

	.type	.L.str.3,@object                // @.str.3
.L.str.3:
	.asciz	"number %*s time       per second   test0\n\n"
	.size	.L.str.3, 43

	.type	.L.str.4,@object                // @.str.4
.L.str.4:
	.asciz	"%2i %*s\"%s\"  %5.2f sec   %5.2f M     %.2f\n"
	.size	.L.str.4, 43

	.type	.L.str.5,@object                // @.str.5
.L.str.5:
	.zero	1
	.size	.L.str.5, 1

	.type	.L.str.6,@object                // @.str.6
.L.str.6:
	.asciz	"\nTotal absolute time for %s: %.2f sec\n"
	.size	.L.str.6, 39

	.type	.L.str.7,@object                // @.str.7
.L.str.7:
	.asciz	"\n%s Penalty: %.2f\n\n"
	.size	.L.str.7, 20

	.type	.L.str.8,@object                // @.str.8
.L.str.8:
	.asciz	"\ntest %*s description   absolute\n"
	.size	.L.str.8, 34

	.type	.L.str.9,@object                // @.str.9
.L.str.9:
	.asciz	"number %*s time\n\n"
	.size	.L.str.9, 18

	.type	.L.str.10,@object               // @.str.10
.L.str.10:
	.asciz	"%2i %*s\"%s\"  %5.2f sec\n"
	.size	.L.str.10, 24

	.type	start_time,@object              // @start_time
	.bss
	.globl	start_time
	.p2align	3, 0x0
start_time:
	.xword	0                               // 0x0
	.size	start_time, 8

	.type	end_time,@object                // @end_time
	.globl	end_time
	.p2align	3, 0x0
end_time:
	.xword	0                               // 0x0
	.size	end_time, 8

	.type	iterations,@object              // @iterations
	.data
	.globl	iterations
	.p2align	2, 0x0
iterations:
	.word	1000                            // 0x3e8
	.size	iterations, 4

	.type	init_value,@object              // @init_value
	.globl	init_value
	.p2align	3, 0x0
init_value:
	.xword	0x3ff0000000000000              // double 1
	.size	init_value, 8

	.type	dataDouble,@object              // @dataDouble
	.bss
	.globl	dataDouble
	.p2align	3, 0x0
dataDouble:
	.zero	64000
	.size	dataDouble, 64000

	.type	data32,@object                  // @data32
	.globl	data32
	.p2align	2, 0x0
data32:
	.zero	32000
	.size	data32, 32000

	.type	temp_string,@object             // @temp_string
	.globl	temp_string
temp_string:
	.zero	3200
	.size	temp_string, 3200

	.type	.L.str.11,@object               // @.str.11
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.11:
	.asciz	"int32_t for loop unroll"
	.size	.L.str.11, 24

	.type	.L.str.12,@object               // @.str.12
.L.str.12:
	.asciz	"int32_t while loop unroll"
	.size	.L.str.12, 26

	.type	.L.str.13,@object               // @.str.13
.L.str.13:
	.asciz	"int32_t do loop unroll"
	.size	.L.str.13, 23

	.type	.L.str.14,@object               // @.str.14
.L.str.14:
	.asciz	"int32_t goto loop unroll"
	.size	.L.str.14, 25

	.type	.L.str.15,@object               // @.str.15
.L.str.15:
	.asciz	"double for loop unroll"
	.size	.L.str.15, 23

	.type	.L.str.16,@object               // @.str.16
.L.str.16:
	.asciz	"double while loop unroll"
	.size	.L.str.16, 25

	.type	.L.str.17,@object               // @.str.17
.L.str.17:
	.asciz	"double do loop unroll"
	.size	.L.str.17, 22

	.type	.L.str.18,@object               // @.str.18
.L.str.18:
	.asciz	"double goto loop unroll"
	.size	.L.str.18, 24

	.type	.L.str.19,@object               // @.str.19
.L.str.19:
	.asciz	"test %i failed\n"
	.size	.L.str.19, 16

	.ident	"clang version 22.0.0git (https://github.com/steven-studio/llvm-project.git c2901ea177a93cdcea513ae5bdc6a189f274f4ca)"
	.section	".note.GNU-stack","",@progbits
