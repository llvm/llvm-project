; ModuleID = '/home/youzhewei.linux/work/llvm-project/llvm-test-suite/SingleSource/Benchmarks/Adobe-C++/simple_types_constant_folding.cpp'
source_filename = "/home/youzhewei.linux/work/llvm-project/llvm-test-suite/SingleSource/Benchmarks/Adobe-C++/simple_types_constant_folding.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-Fn32"
target triple = "aarch64-unknown-linux-gnu"

%struct.one_result = type { double, ptr }

$_Z13test_constantIa10custom_twoIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc = comdat any

$_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc = comdat any

$_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc = comdat any

$_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc = comdat any

$_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc = comdat any

$_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc = comdat any

$_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc = comdat any

$_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc = comdat any

$_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc = comdat any

$_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc = comdat any

$_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc = comdat any

$_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc = comdat any

$_Z13test_constantIh10custom_twoIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc = comdat any

$_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc = comdat any

$_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc = comdat any

$_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc = comdat any

$_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc = comdat any

$_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc = comdat any

$_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc = comdat any

$_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc = comdat any

$_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc = comdat any

$_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc = comdat any

$_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc = comdat any

$_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc = comdat any

$_Z13test_constantIs10custom_twoIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc = comdat any

$_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc = comdat any

$_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc = comdat any

$_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc = comdat any

$_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc = comdat any

$_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc = comdat any

$_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc = comdat any

$_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc = comdat any

$_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc = comdat any

$_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc = comdat any

$_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc = comdat any

$_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc = comdat any

$_Z13test_constantIt10custom_twoItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_addItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_subItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc = comdat any

$_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc = comdat any

$_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc = comdat any

$_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc = comdat any

$_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc = comdat any

$_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc = comdat any

$_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc = comdat any

$_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_andItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc = comdat any

$_Z13test_constantIt18custom_constant_orItEEvPT_iPKc = comdat any

$_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc = comdat any

$_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc = comdat any

$_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc = comdat any

$_Z13test_constantIi10custom_twoIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc = comdat any

$_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc = comdat any

$_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc = comdat any

$_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc = comdat any

$_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc = comdat any

$_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc = comdat any

$_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc = comdat any

$_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc = comdat any

$_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc = comdat any

$_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc = comdat any

$_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc = comdat any

$_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc = comdat any

$_Z13test_constantIj10custom_twoIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc = comdat any

$_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc = comdat any

$_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc = comdat any

$_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc = comdat any

$_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc = comdat any

$_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc = comdat any

$_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc = comdat any

$_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc = comdat any

$_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc = comdat any

$_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc = comdat any

$_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc = comdat any

$_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc = comdat any

$_Z13test_constantIl10custom_twoIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc = comdat any

$_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc = comdat any

$_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc = comdat any

$_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc = comdat any

$_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc = comdat any

$_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc = comdat any

$_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc = comdat any

$_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc = comdat any

$_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc = comdat any

$_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc = comdat any

$_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc = comdat any

$_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc = comdat any

$_Z13test_constantIm10custom_twoImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_addImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_subImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc = comdat any

$_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc = comdat any

$_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc = comdat any

$_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc = comdat any

$_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc = comdat any

$_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc = comdat any

$_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc = comdat any

$_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_andImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc = comdat any

$_Z13test_constantIm18custom_constant_orImEEvPT_iPKc = comdat any

$_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc = comdat any

$_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc = comdat any

$_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc = comdat any

$_Z13test_constantIf10custom_twoIfEEvPT_iPKc = comdat any

$_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc = comdat any

$_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc = comdat any

$_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc = comdat any

$_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc = comdat any

$_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc = comdat any

$_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc = comdat any

$_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc = comdat any

$_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc = comdat any

$_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc = comdat any

$_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc = comdat any

$_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc = comdat any

$_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc = comdat any

$_Z13test_constantId10custom_twoIdEEvPT_iPKc = comdat any

$_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc = comdat any

$_Z13test_constantId19custom_constant_addIdEEvPT_iPKc = comdat any

$_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc = comdat any

$_Z13test_constantId19custom_constant_subIdEEvPT_iPKc = comdat any

$_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc = comdat any

$_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc = comdat any

$_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc = comdat any

$_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc = comdat any

$_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc = comdat any

$_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc = comdat any

$_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc = comdat any

$_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc = comdat any

@results = dso_local local_unnamed_addr global ptr null, align 8
@current_test = dso_local local_unnamed_addr global i32 0, align 4
@allocated_results = dso_local local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [31 x i8] c"Could not allocate %d results\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"\0Atest %*s description   absolute   operations   ratio with\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"number %*s time       per second   test0\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [43 x i8] c"%2i %*s\22%s\22  %5.2f sec   %5.2f M     %.2f\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"\0ATotal absolute time for %s: %.2f sec\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"\0A%s Penalty: %.2f\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"\0Atest %*s description   absolute\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"number %*s time\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"%2i %*s\22%s\22  %5.2f sec\0A\00", align 1
@start_time = dso_local local_unnamed_addr global i64 0, align 8
@end_time = dso_local local_unnamed_addr global i64 0, align 8
@base_iterations = dso_local local_unnamed_addr global i32 5000, align 4
@iterations = dso_local local_unnamed_addr global i32 5000, align 4
@init_value = dso_local local_unnamed_addr global double 1.000000e+00, align 8
@dataDouble = dso_local global [8000 x double] zeroinitializer, align 8
@dataFloat = dso_local global [8000 x float] zeroinitializer, align 4
@data64unsigned = dso_local global [8000 x i64] zeroinitializer, align 8
@data64 = dso_local global [8000 x i64] zeroinitializer, align 8
@data32unsigned = dso_local global [8000 x i32] zeroinitializer, align 4
@data32 = dso_local global [8000 x i32] zeroinitializer, align 4
@data16unsigned = dso_local global [8000 x i16] zeroinitializer, align 2
@data16 = dso_local global [8000 x i16] zeroinitializer, align 2
@data8unsigned = dso_local global [8000 x i8] zeroinitializer, align 1
@data8 = dso_local global [8000 x i8] zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"int8_t constant\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"int8_t add constants\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"int8_t subtract constants\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"int8_t multiply constants\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"int8_t divide constants\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"int8_t mod constants\00", align 1
@.str.17 = private unnamed_addr constant [23 x i8] c"int8_t equal constants\00", align 1
@.str.18 = private unnamed_addr constant [26 x i8] c"int8_t notequal constants\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c"int8_t greater than constants\00", align 1
@.str.20 = private unnamed_addr constant [27 x i8] c"int8_t less than constants\00", align 1
@.str.21 = private unnamed_addr constant [36 x i8] c"int8_t greater than equal constants\00", align 1
@.str.22 = private unnamed_addr constant [33 x i8] c"int8_t less than equal constants\00", align 1
@.str.23 = private unnamed_addr constant [21 x i8] c"int8_t and constants\00", align 1
@.str.24 = private unnamed_addr constant [20 x i8] c"int8_t or constants\00", align 1
@.str.25 = private unnamed_addr constant [21 x i8] c"int8_t xor constants\00", align 1
@.str.26 = private unnamed_addr constant [20 x i8] c"int8_t constant add\00", align 1
@.str.27 = private unnamed_addr constant [30 x i8] c"int8_t multiple constant adds\00", align 1
@.str.28 = private unnamed_addr constant [25 x i8] c"int8_t constant subtract\00", align 1
@.str.29 = private unnamed_addr constant [35 x i8] c"int8_t multiple constant subtracts\00", align 1
@.str.30 = private unnamed_addr constant [25 x i8] c"int8_t constant multiply\00", align 1
@.str.31 = private unnamed_addr constant [36 x i8] c"int8_t multiple constant multiplies\00", align 1
@.str.32 = private unnamed_addr constant [35 x i8] c"int8_t multiple constant multiply2\00", align 1
@.str.33 = private unnamed_addr constant [23 x i8] c"int8_t constant divide\00", align 1
@.str.34 = private unnamed_addr constant [33 x i8] c"int8_t multiple constant divides\00", align 1
@.str.35 = private unnamed_addr constant [33 x i8] c"int8_t multiple constant divide2\00", align 1
@.str.36 = private unnamed_addr constant [31 x i8] c"int8_t multiple constant mixed\00", align 1
@.str.37 = private unnamed_addr constant [20 x i8] c"int8_t constant and\00", align 1
@.str.38 = private unnamed_addr constant [29 x i8] c"int8_t multiple constant and\00", align 1
@.str.39 = private unnamed_addr constant [19 x i8] c"int8_t constant or\00", align 1
@.str.40 = private unnamed_addr constant [28 x i8] c"int8_t multiple constant or\00", align 1
@.str.41 = private unnamed_addr constant [20 x i8] c"int8_t constant xor\00", align 1
@.str.42 = private unnamed_addr constant [29 x i8] c"int8_t multiple constant xor\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"uint8_t constant\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"uint8_t add constants\00", align 1
@.str.45 = private unnamed_addr constant [27 x i8] c"uint8_t subtract constants\00", align 1
@.str.46 = private unnamed_addr constant [27 x i8] c"uint8_t multiply constants\00", align 1
@.str.47 = private unnamed_addr constant [25 x i8] c"uint8_t divide constants\00", align 1
@.str.48 = private unnamed_addr constant [22 x i8] c"uint8_t mod constants\00", align 1
@.str.49 = private unnamed_addr constant [24 x i8] c"uint8_t equal constants\00", align 1
@.str.50 = private unnamed_addr constant [27 x i8] c"uint8_t notequal constants\00", align 1
@.str.51 = private unnamed_addr constant [31 x i8] c"uint8_t greater than constants\00", align 1
@.str.52 = private unnamed_addr constant [28 x i8] c"uint8_t less than constants\00", align 1
@.str.53 = private unnamed_addr constant [37 x i8] c"uint8_t greater than equal constants\00", align 1
@.str.54 = private unnamed_addr constant [34 x i8] c"uint8_t less than equal constants\00", align 1
@.str.55 = private unnamed_addr constant [22 x i8] c"uint8_t and constants\00", align 1
@.str.56 = private unnamed_addr constant [21 x i8] c"uint8_t or constants\00", align 1
@.str.57 = private unnamed_addr constant [22 x i8] c"uint8_t xor constants\00", align 1
@.str.58 = private unnamed_addr constant [21 x i8] c"uint8_t constant add\00", align 1
@.str.59 = private unnamed_addr constant [31 x i8] c"uint8_t multiple constant adds\00", align 1
@.str.60 = private unnamed_addr constant [26 x i8] c"uint8_t constant subtract\00", align 1
@.str.61 = private unnamed_addr constant [36 x i8] c"uint8_t multiple constant subtracts\00", align 1
@.str.62 = private unnamed_addr constant [26 x i8] c"uint8_t constant multiply\00", align 1
@.str.63 = private unnamed_addr constant [37 x i8] c"uint8_t multiple constant multiplies\00", align 1
@.str.64 = private unnamed_addr constant [36 x i8] c"uint8_t multiple constant multiply2\00", align 1
@.str.65 = private unnamed_addr constant [24 x i8] c"uint8_t constant divide\00", align 1
@.str.66 = private unnamed_addr constant [34 x i8] c"uint8_t multiple constant divides\00", align 1
@.str.67 = private unnamed_addr constant [34 x i8] c"uint8_t multiple constant divide2\00", align 1
@.str.68 = private unnamed_addr constant [32 x i8] c"uint8_t multiple constant mixed\00", align 1
@.str.69 = private unnamed_addr constant [21 x i8] c"uint8_t constant and\00", align 1
@.str.70 = private unnamed_addr constant [30 x i8] c"uint8_t multiple constant and\00", align 1
@.str.71 = private unnamed_addr constant [20 x i8] c"uint8_t constant or\00", align 1
@.str.72 = private unnamed_addr constant [29 x i8] c"uint8_t multiple constant or\00", align 1
@.str.73 = private unnamed_addr constant [21 x i8] c"uint8_t constant xor\00", align 1
@.str.74 = private unnamed_addr constant [30 x i8] c"uint8_t multiple constant xor\00", align 1
@.str.75 = private unnamed_addr constant [17 x i8] c"int16_t constant\00", align 1
@.str.76 = private unnamed_addr constant [22 x i8] c"int16_t add constants\00", align 1
@.str.77 = private unnamed_addr constant [27 x i8] c"int16_t subtract constants\00", align 1
@.str.78 = private unnamed_addr constant [27 x i8] c"int16_t multiply constants\00", align 1
@.str.79 = private unnamed_addr constant [25 x i8] c"int16_t divide constants\00", align 1
@.str.80 = private unnamed_addr constant [22 x i8] c"int16_t mod constants\00", align 1
@.str.81 = private unnamed_addr constant [24 x i8] c"int16_t equal constants\00", align 1
@.str.82 = private unnamed_addr constant [27 x i8] c"int16_t notequal constants\00", align 1
@.str.83 = private unnamed_addr constant [31 x i8] c"int16_t greater than constants\00", align 1
@.str.84 = private unnamed_addr constant [28 x i8] c"int16_t less than constants\00", align 1
@.str.85 = private unnamed_addr constant [37 x i8] c"int16_t greater than equal constants\00", align 1
@.str.86 = private unnamed_addr constant [34 x i8] c"int16_t less than equal constants\00", align 1
@.str.87 = private unnamed_addr constant [22 x i8] c"int16_t and constants\00", align 1
@.str.88 = private unnamed_addr constant [21 x i8] c"int16_t or constants\00", align 1
@.str.89 = private unnamed_addr constant [22 x i8] c"int16_t xor constants\00", align 1
@.str.90 = private unnamed_addr constant [21 x i8] c"int16_t constant add\00", align 1
@.str.91 = private unnamed_addr constant [31 x i8] c"int16_t multiple constant adds\00", align 1
@.str.92 = private unnamed_addr constant [26 x i8] c"int16_t constant subtract\00", align 1
@.str.93 = private unnamed_addr constant [36 x i8] c"int16_t multiple constant subtracts\00", align 1
@.str.94 = private unnamed_addr constant [26 x i8] c"int16_t constant multiply\00", align 1
@.str.95 = private unnamed_addr constant [37 x i8] c"int16_t multiple constant multiplies\00", align 1
@.str.96 = private unnamed_addr constant [36 x i8] c"int16_t multiple constant multiply2\00", align 1
@.str.97 = private unnamed_addr constant [24 x i8] c"int16_t constant divide\00", align 1
@.str.98 = private unnamed_addr constant [34 x i8] c"int16_t multiple constant divides\00", align 1
@.str.99 = private unnamed_addr constant [34 x i8] c"int16_t multiple constant divide2\00", align 1
@.str.100 = private unnamed_addr constant [32 x i8] c"int16_t multiple constant mixed\00", align 1
@.str.101 = private unnamed_addr constant [21 x i8] c"int16_t constant and\00", align 1
@.str.102 = private unnamed_addr constant [30 x i8] c"int16_t multiple constant and\00", align 1
@.str.103 = private unnamed_addr constant [20 x i8] c"int16_t constant or\00", align 1
@.str.104 = private unnamed_addr constant [29 x i8] c"int16_t multiple constant or\00", align 1
@.str.105 = private unnamed_addr constant [21 x i8] c"int16_t constant xor\00", align 1
@.str.106 = private unnamed_addr constant [30 x i8] c"int16_t multiple constant xor\00", align 1
@.str.107 = private unnamed_addr constant [18 x i8] c"uint16_t constant\00", align 1
@.str.108 = private unnamed_addr constant [23 x i8] c"uint16_t add constants\00", align 1
@.str.109 = private unnamed_addr constant [28 x i8] c"uint16_t subtract constants\00", align 1
@.str.110 = private unnamed_addr constant [28 x i8] c"uint16_t multiply constants\00", align 1
@.str.111 = private unnamed_addr constant [26 x i8] c"uint16_t divide constants\00", align 1
@.str.112 = private unnamed_addr constant [23 x i8] c"uint16_t mod constants\00", align 1
@.str.113 = private unnamed_addr constant [25 x i8] c"uint16_t equal constants\00", align 1
@.str.114 = private unnamed_addr constant [28 x i8] c"uint16_t notequal constants\00", align 1
@.str.115 = private unnamed_addr constant [32 x i8] c"uint16_t greater than constants\00", align 1
@.str.116 = private unnamed_addr constant [29 x i8] c"uint16_t less than constants\00", align 1
@.str.117 = private unnamed_addr constant [38 x i8] c"uint16_t greater than equal constants\00", align 1
@.str.118 = private unnamed_addr constant [35 x i8] c"uint16_t less than equal constants\00", align 1
@.str.119 = private unnamed_addr constant [23 x i8] c"uint16_t and constants\00", align 1
@.str.120 = private unnamed_addr constant [22 x i8] c"uint16_t or constants\00", align 1
@.str.121 = private unnamed_addr constant [23 x i8] c"uint16_t xor constants\00", align 1
@.str.122 = private unnamed_addr constant [22 x i8] c"uint16_t constant add\00", align 1
@.str.123 = private unnamed_addr constant [32 x i8] c"uint16_t multiple constant adds\00", align 1
@.str.124 = private unnamed_addr constant [27 x i8] c"uint16_t constant subtract\00", align 1
@.str.125 = private unnamed_addr constant [37 x i8] c"uint16_t multiple constant subtracts\00", align 1
@.str.126 = private unnamed_addr constant [27 x i8] c"uint16_t constant multiply\00", align 1
@.str.127 = private unnamed_addr constant [38 x i8] c"uint16_t multiple constant multiplies\00", align 1
@.str.128 = private unnamed_addr constant [37 x i8] c"uint16_t multiple constant multiply2\00", align 1
@.str.129 = private unnamed_addr constant [25 x i8] c"uint16_t constant divide\00", align 1
@.str.130 = private unnamed_addr constant [35 x i8] c"uint16_t multiple constant divides\00", align 1
@.str.131 = private unnamed_addr constant [35 x i8] c"uint16_t multiple constant divide2\00", align 1
@.str.132 = private unnamed_addr constant [33 x i8] c"uint16_t multiple constant mixed\00", align 1
@.str.133 = private unnamed_addr constant [22 x i8] c"uint16_t constant and\00", align 1
@.str.134 = private unnamed_addr constant [31 x i8] c"uint16_t multiple constant and\00", align 1
@.str.135 = private unnamed_addr constant [21 x i8] c"uint16_t constant or\00", align 1
@.str.136 = private unnamed_addr constant [30 x i8] c"uint16_t multiple constant or\00", align 1
@.str.137 = private unnamed_addr constant [22 x i8] c"uint16_t constant xor\00", align 1
@.str.138 = private unnamed_addr constant [31 x i8] c"uint16_t multiple constant xor\00", align 1
@.str.139 = private unnamed_addr constant [17 x i8] c"int32_t constant\00", align 1
@.str.140 = private unnamed_addr constant [22 x i8] c"int32_t add constants\00", align 1
@.str.141 = private unnamed_addr constant [27 x i8] c"int32_t subtract constants\00", align 1
@.str.142 = private unnamed_addr constant [27 x i8] c"int32_t multiply constants\00", align 1
@.str.143 = private unnamed_addr constant [25 x i8] c"int32_t divide constants\00", align 1
@.str.144 = private unnamed_addr constant [22 x i8] c"int32_t mod constants\00", align 1
@.str.145 = private unnamed_addr constant [24 x i8] c"int32_t equal constants\00", align 1
@.str.146 = private unnamed_addr constant [27 x i8] c"int32_t notequal constants\00", align 1
@.str.147 = private unnamed_addr constant [31 x i8] c"int32_t greater than constants\00", align 1
@.str.148 = private unnamed_addr constant [28 x i8] c"int32_t less than constants\00", align 1
@.str.149 = private unnamed_addr constant [37 x i8] c"int32_t greater than equal constants\00", align 1
@.str.150 = private unnamed_addr constant [34 x i8] c"int32_t less than equal constants\00", align 1
@.str.151 = private unnamed_addr constant [22 x i8] c"int32_t and constants\00", align 1
@.str.152 = private unnamed_addr constant [21 x i8] c"int32_t or constants\00", align 1
@.str.153 = private unnamed_addr constant [22 x i8] c"int32_t xor constants\00", align 1
@.str.154 = private unnamed_addr constant [21 x i8] c"int32_t constant add\00", align 1
@.str.155 = private unnamed_addr constant [31 x i8] c"int32_t multiple constant adds\00", align 1
@.str.156 = private unnamed_addr constant [26 x i8] c"int32_t constant subtract\00", align 1
@.str.157 = private unnamed_addr constant [36 x i8] c"int32_t multiple constant subtracts\00", align 1
@.str.158 = private unnamed_addr constant [26 x i8] c"int32_t constant multiply\00", align 1
@.str.159 = private unnamed_addr constant [37 x i8] c"int32_t multiple constant multiplies\00", align 1
@.str.160 = private unnamed_addr constant [36 x i8] c"int32_t multiple constant multiply2\00", align 1
@.str.161 = private unnamed_addr constant [24 x i8] c"int32_t constant divide\00", align 1
@.str.162 = private unnamed_addr constant [34 x i8] c"int32_t multiple constant divides\00", align 1
@.str.163 = private unnamed_addr constant [34 x i8] c"int32_t multiple constant divide2\00", align 1
@.str.164 = private unnamed_addr constant [32 x i8] c"int32_t multiple constant mixed\00", align 1
@.str.165 = private unnamed_addr constant [21 x i8] c"int32_t constant and\00", align 1
@.str.166 = private unnamed_addr constant [30 x i8] c"int32_t multiple constant and\00", align 1
@.str.167 = private unnamed_addr constant [20 x i8] c"int32_t constant or\00", align 1
@.str.168 = private unnamed_addr constant [29 x i8] c"int32_t multiple constant or\00", align 1
@.str.169 = private unnamed_addr constant [21 x i8] c"int32_t constant xor\00", align 1
@.str.170 = private unnamed_addr constant [30 x i8] c"int32_t multiple constant xor\00", align 1
@.str.171 = private unnamed_addr constant [18 x i8] c"uint32_t constant\00", align 1
@.str.172 = private unnamed_addr constant [23 x i8] c"uint32_t add constants\00", align 1
@.str.173 = private unnamed_addr constant [28 x i8] c"uint32_t subtract constants\00", align 1
@.str.174 = private unnamed_addr constant [28 x i8] c"uint32_t multiply constants\00", align 1
@.str.175 = private unnamed_addr constant [26 x i8] c"uint32_t divide constants\00", align 1
@.str.176 = private unnamed_addr constant [23 x i8] c"uint32_t mod constants\00", align 1
@.str.177 = private unnamed_addr constant [25 x i8] c"uint32_t equal constants\00", align 1
@.str.178 = private unnamed_addr constant [28 x i8] c"uint32_t notequal constants\00", align 1
@.str.179 = private unnamed_addr constant [32 x i8] c"uint32_t greater than constants\00", align 1
@.str.180 = private unnamed_addr constant [29 x i8] c"uint32_t less than constants\00", align 1
@.str.181 = private unnamed_addr constant [38 x i8] c"uint32_t greater than equal constants\00", align 1
@.str.182 = private unnamed_addr constant [35 x i8] c"uint32_t less than equal constants\00", align 1
@.str.183 = private unnamed_addr constant [23 x i8] c"uint32_t and constants\00", align 1
@.str.184 = private unnamed_addr constant [22 x i8] c"uint32_t or constants\00", align 1
@.str.185 = private unnamed_addr constant [23 x i8] c"uint32_t xor constants\00", align 1
@.str.186 = private unnamed_addr constant [22 x i8] c"uint32_t constant add\00", align 1
@.str.187 = private unnamed_addr constant [32 x i8] c"uint32_t multiple constant adds\00", align 1
@.str.188 = private unnamed_addr constant [27 x i8] c"uint32_t constant subtract\00", align 1
@.str.189 = private unnamed_addr constant [37 x i8] c"uint32_t multiple constant subtracts\00", align 1
@.str.190 = private unnamed_addr constant [27 x i8] c"uint32_t constant multiply\00", align 1
@.str.191 = private unnamed_addr constant [38 x i8] c"uint32_t multiple constant multiplies\00", align 1
@.str.192 = private unnamed_addr constant [37 x i8] c"uint32_t multiple constant multiply2\00", align 1
@.str.193 = private unnamed_addr constant [25 x i8] c"uint32_t constant divide\00", align 1
@.str.194 = private unnamed_addr constant [35 x i8] c"uint32_t multiple constant divides\00", align 1
@.str.195 = private unnamed_addr constant [35 x i8] c"uint32_t multiple constant divide2\00", align 1
@.str.196 = private unnamed_addr constant [33 x i8] c"uint32_t multiple constant mixed\00", align 1
@.str.197 = private unnamed_addr constant [22 x i8] c"uint32_t constant and\00", align 1
@.str.198 = private unnamed_addr constant [31 x i8] c"uint32_t multiple constant and\00", align 1
@.str.199 = private unnamed_addr constant [21 x i8] c"uint32_t constant or\00", align 1
@.str.200 = private unnamed_addr constant [30 x i8] c"uint32_t multiple constant or\00", align 1
@.str.201 = private unnamed_addr constant [22 x i8] c"uint32_t constant xor\00", align 1
@.str.202 = private unnamed_addr constant [31 x i8] c"uint32_t multiple constant xor\00", align 1
@.str.203 = private unnamed_addr constant [17 x i8] c"int64_t constant\00", align 1
@.str.204 = private unnamed_addr constant [22 x i8] c"int64_t add constants\00", align 1
@.str.205 = private unnamed_addr constant [27 x i8] c"int64_t subtract constants\00", align 1
@.str.206 = private unnamed_addr constant [27 x i8] c"int64_t multiply constants\00", align 1
@.str.207 = private unnamed_addr constant [25 x i8] c"int64_t divide constants\00", align 1
@.str.208 = private unnamed_addr constant [22 x i8] c"int64_t mod constants\00", align 1
@.str.209 = private unnamed_addr constant [24 x i8] c"int64_t equal constants\00", align 1
@.str.210 = private unnamed_addr constant [27 x i8] c"int64_t notequal constants\00", align 1
@.str.211 = private unnamed_addr constant [31 x i8] c"int64_t greater than constants\00", align 1
@.str.212 = private unnamed_addr constant [28 x i8] c"int64_t less than constants\00", align 1
@.str.213 = private unnamed_addr constant [37 x i8] c"int64_t greater than equal constants\00", align 1
@.str.214 = private unnamed_addr constant [34 x i8] c"int64_t less than equal constants\00", align 1
@.str.215 = private unnamed_addr constant [22 x i8] c"int64_t and constants\00", align 1
@.str.216 = private unnamed_addr constant [21 x i8] c"int64_t or constants\00", align 1
@.str.217 = private unnamed_addr constant [22 x i8] c"int64_t xor constants\00", align 1
@.str.218 = private unnamed_addr constant [21 x i8] c"int64_t constant add\00", align 1
@.str.219 = private unnamed_addr constant [31 x i8] c"int64_t multiple constant adds\00", align 1
@.str.220 = private unnamed_addr constant [26 x i8] c"int64_t constant subtract\00", align 1
@.str.221 = private unnamed_addr constant [36 x i8] c"int64_t multiple constant subtracts\00", align 1
@.str.222 = private unnamed_addr constant [26 x i8] c"int64_t constant multiply\00", align 1
@.str.223 = private unnamed_addr constant [37 x i8] c"int64_t multiple constant multiplies\00", align 1
@.str.224 = private unnamed_addr constant [36 x i8] c"int64_t multiple constant multiply2\00", align 1
@.str.225 = private unnamed_addr constant [24 x i8] c"int64_t constant divide\00", align 1
@.str.226 = private unnamed_addr constant [34 x i8] c"int64_t multiple constant divides\00", align 1
@.str.227 = private unnamed_addr constant [34 x i8] c"int64_t multiple constant divide2\00", align 1
@.str.228 = private unnamed_addr constant [32 x i8] c"int64_t multiple constant mixed\00", align 1
@.str.229 = private unnamed_addr constant [21 x i8] c"int64_t constant and\00", align 1
@.str.230 = private unnamed_addr constant [30 x i8] c"int64_t multiple constant and\00", align 1
@.str.231 = private unnamed_addr constant [20 x i8] c"int64_t constant or\00", align 1
@.str.232 = private unnamed_addr constant [29 x i8] c"int64_t multiple constant or\00", align 1
@.str.233 = private unnamed_addr constant [21 x i8] c"int64_t constant xor\00", align 1
@.str.234 = private unnamed_addr constant [30 x i8] c"int64_t multiple constant xor\00", align 1
@.str.235 = private unnamed_addr constant [18 x i8] c"uint64_t constant\00", align 1
@.str.236 = private unnamed_addr constant [23 x i8] c"uint64_t add constants\00", align 1
@.str.237 = private unnamed_addr constant [28 x i8] c"uint64_t subtract constants\00", align 1
@.str.238 = private unnamed_addr constant [28 x i8] c"uint64_t multiply constants\00", align 1
@.str.239 = private unnamed_addr constant [26 x i8] c"uint64_t divide constants\00", align 1
@.str.240 = private unnamed_addr constant [23 x i8] c"uint64_t mod constants\00", align 1
@.str.241 = private unnamed_addr constant [25 x i8] c"uint64_t equal constants\00", align 1
@.str.242 = private unnamed_addr constant [28 x i8] c"uint64_t notequal constants\00", align 1
@.str.243 = private unnamed_addr constant [32 x i8] c"uint64_t greater than constants\00", align 1
@.str.244 = private unnamed_addr constant [29 x i8] c"uint64_t less than constants\00", align 1
@.str.245 = private unnamed_addr constant [38 x i8] c"uint64_t greater than equal constants\00", align 1
@.str.246 = private unnamed_addr constant [35 x i8] c"uint64_t less than equal constants\00", align 1
@.str.247 = private unnamed_addr constant [23 x i8] c"uint64_t and constants\00", align 1
@.str.248 = private unnamed_addr constant [22 x i8] c"uint64_t or constants\00", align 1
@.str.249 = private unnamed_addr constant [23 x i8] c"uint64_t xor constants\00", align 1
@.str.250 = private unnamed_addr constant [22 x i8] c"uint64_t constant add\00", align 1
@.str.251 = private unnamed_addr constant [32 x i8] c"uint64_t multiple constant adds\00", align 1
@.str.252 = private unnamed_addr constant [27 x i8] c"uint64_t constant subtract\00", align 1
@.str.253 = private unnamed_addr constant [37 x i8] c"uint64_t multiple constant subtracts\00", align 1
@.str.254 = private unnamed_addr constant [27 x i8] c"uint64_t constant multiply\00", align 1
@.str.255 = private unnamed_addr constant [38 x i8] c"uint64_t multiple constant multiplies\00", align 1
@.str.256 = private unnamed_addr constant [37 x i8] c"uint64_t multiple constant multiply2\00", align 1
@.str.257 = private unnamed_addr constant [25 x i8] c"uint64_t constant divide\00", align 1
@.str.258 = private unnamed_addr constant [35 x i8] c"uint64_t multiple constant divides\00", align 1
@.str.259 = private unnamed_addr constant [35 x i8] c"uint64_t multiple constant divide2\00", align 1
@.str.260 = private unnamed_addr constant [33 x i8] c"uint64_t multiple constant mixed\00", align 1
@.str.261 = private unnamed_addr constant [22 x i8] c"uint64_t constant and\00", align 1
@.str.262 = private unnamed_addr constant [31 x i8] c"uint64_t multiple constant and\00", align 1
@.str.263 = private unnamed_addr constant [21 x i8] c"uint64_t constant or\00", align 1
@.str.264 = private unnamed_addr constant [30 x i8] c"uint64_t multiple constant or\00", align 1
@.str.265 = private unnamed_addr constant [22 x i8] c"uint64_t constant xor\00", align 1
@.str.266 = private unnamed_addr constant [31 x i8] c"uint64_t multiple constant xor\00", align 1
@.str.267 = private unnamed_addr constant [15 x i8] c"float constant\00", align 1
@.str.268 = private unnamed_addr constant [20 x i8] c"float add constants\00", align 1
@.str.269 = private unnamed_addr constant [25 x i8] c"float subtract constants\00", align 1
@.str.270 = private unnamed_addr constant [25 x i8] c"float multiply constants\00", align 1
@.str.271 = private unnamed_addr constant [23 x i8] c"float divide constants\00", align 1
@.str.272 = private unnamed_addr constant [19 x i8] c"float constant add\00", align 1
@.str.273 = private unnamed_addr constant [29 x i8] c"float multiple constant adds\00", align 1
@.str.274 = private unnamed_addr constant [24 x i8] c"float constant subtract\00", align 1
@.str.275 = private unnamed_addr constant [34 x i8] c"float multiple constant subtracts\00", align 1
@.str.276 = private unnamed_addr constant [24 x i8] c"float constant multiply\00", align 1
@.str.277 = private unnamed_addr constant [35 x i8] c"float multiple constant multiplies\00", align 1
@.str.278 = private unnamed_addr constant [34 x i8] c"float multiple constant multiply2\00", align 1
@.str.279 = private unnamed_addr constant [22 x i8] c"float constant divide\00", align 1
@.str.280 = private unnamed_addr constant [32 x i8] c"float multiple constant divides\00", align 1
@.str.281 = private unnamed_addr constant [32 x i8] c"float multiple constant divide2\00", align 1
@.str.282 = private unnamed_addr constant [30 x i8] c"float multiple constant mixed\00", align 1
@.str.283 = private unnamed_addr constant [16 x i8] c"double constant\00", align 1
@.str.284 = private unnamed_addr constant [21 x i8] c"double add constants\00", align 1
@.str.285 = private unnamed_addr constant [26 x i8] c"double subtract constants\00", align 1
@.str.286 = private unnamed_addr constant [26 x i8] c"double multiply constants\00", align 1
@.str.287 = private unnamed_addr constant [24 x i8] c"double divide constants\00", align 1
@.str.288 = private unnamed_addr constant [20 x i8] c"double constant add\00", align 1
@.str.289 = private unnamed_addr constant [30 x i8] c"double multiple constant adds\00", align 1
@.str.290 = private unnamed_addr constant [25 x i8] c"double constant subtract\00", align 1
@.str.291 = private unnamed_addr constant [35 x i8] c"double multiple constant subtracts\00", align 1
@.str.292 = private unnamed_addr constant [25 x i8] c"double constant multiply\00", align 1
@.str.293 = private unnamed_addr constant [36 x i8] c"double multiple constant multiplies\00", align 1
@.str.294 = private unnamed_addr constant [35 x i8] c"double multiple constant multiply2\00", align 1
@.str.295 = private unnamed_addr constant [23 x i8] c"double constant divide\00", align 1
@.str.296 = private unnamed_addr constant [33 x i8] c"double multiple constant divides\00", align 1
@.str.297 = private unnamed_addr constant [33 x i8] c"double multiple constant divide2\00", align 1
@.str.298 = private unnamed_addr constant [31 x i8] c"double multiple constant mixed\00", align 1
@.str.299 = private unnamed_addr constant [16 x i8] c"test %i failed\0A\00", align 1
@llvm.global_ctors = appending global [0 x { i32, ptr, ptr }] zeroinitializer

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @_Z13record_resultdPKc(double noundef %0, ptr noundef %1) local_unnamed_addr #0 {
  %3 = load ptr, ptr @results, align 8, !tbaa !6
  %4 = icmp ne ptr %3, null
  %5 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %6 = load i32, ptr @current_test, align 4
  %7 = icmp slt i32 %6, %5
  %8 = select i1 %4, i1 %7, i1 false
  br i1 %8, label %20, label %9

9:                                                ; preds = %2
  %10 = add nsw i32 %5, 10
  store i32 %10, ptr @allocated_results, align 4, !tbaa !11
  %11 = sext i32 %10 to i64
  %12 = shl nsw i64 %11, 4
  %13 = tail call ptr @realloc(ptr noundef %3, i64 noundef %12) #14
  store ptr %13, ptr @results, align 8, !tbaa !6
  %14 = icmp eq ptr %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %9
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %20

17:                                               ; preds = %9
  %18 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %19 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %18)
  tail call void @exit(i32 noundef -1) #15
  unreachable

20:                                               ; preds = %2, %15
  %21 = phi i32 [ %16, %15 ], [ %6, %2 ]
  %22 = phi ptr [ %13, %15 ], [ %3, %2 ]
  %23 = sext i32 %21 to i64
  %24 = getelementptr inbounds %struct.one_result, ptr %22, i64 %23
  store double %0, ptr %24, align 8, !tbaa !13
  %25 = getelementptr inbounds %struct.one_result, ptr %22, i64 %23, i32 1
  store ptr %1, ptr %25, align 8, !tbaa !17
  %26 = add nsw i32 %21, 1
  store i32 %26, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress nounwind willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite)
declare noalias noundef ptr @realloc(ptr allocptr noundef captures(none), i64 noundef) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr noundef readonly captures(none), ...) local_unnamed_addr #2

; Function Attrs: nofree noreturn nounwind
declare void @exit(i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local void @_Z9summarizePKciiii(ptr noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) local_unnamed_addr #4 {
  %6 = sitofp i32 %1 to double
  %7 = sitofp i32 %2 to double
  %8 = fmul double %6, %7
  %9 = fdiv double %8, 1.000000e+06
  %10 = load i32, ptr @current_test, align 4, !tbaa !11
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %25

12:                                               ; preds = %5
  %13 = load ptr, ptr @results, align 8, !tbaa !6
  %14 = zext nneg i32 %10 to i64
  br label %15

15:                                               ; preds = %12, %15
  %16 = phi i64 [ 0, %12 ], [ %23, %15 ]
  %17 = phi i32 [ 12, %12 ], [ %22, %15 ]
  %18 = getelementptr inbounds nuw %struct.one_result, ptr %13, i64 %16, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %19) #16
  %21 = trunc i64 %20 to i32
  %22 = tail call i32 @llvm.smax.i32(i32 %17, i32 %21)
  %23 = add nuw nsw i64 %16, 1
  %24 = icmp eq i64 %23, %14
  br i1 %24, label %25, label %15, !llvm.loop !18

25:                                               ; preds = %15, %5
  %26 = phi i32 [ 12, %5 ], [ %22, %15 ]
  %27 = add nsw i32 %26, -12
  %28 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %27, ptr noundef nonnull @.str.2)
  %29 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3, i32 noundef %26, ptr noundef nonnull @.str.2)
  %30 = load i32, ptr @current_test, align 4, !tbaa !11
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %57, label %84

32:                                               ; preds = %57
  %33 = icmp sgt i32 %73, 0
  br i1 %33, label %34, label %84

34:                                               ; preds = %32
  %35 = load ptr, ptr @results, align 8, !tbaa !6
  %36 = zext nneg i32 %73 to i64
  %37 = icmp eq i32 %73, 1
  br i1 %37, label %54, label %38

38:                                               ; preds = %34
  %39 = and i64 %36, 2147483646
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %50, %40 ]
  %42 = phi double [ 0.000000e+00, %38 ], [ %49, %40 ]
  %43 = getelementptr inbounds nuw %struct.one_result, ptr %35, i64 %41
  %44 = getelementptr inbounds nuw %struct.one_result, ptr %35, i64 %41
  %45 = getelementptr inbounds nuw i8, ptr %44, i64 16
  %46 = load double, ptr %43, align 8, !tbaa !13
  %47 = load double, ptr %45, align 8, !tbaa !13
  %48 = fadd double %42, %46
  %49 = fadd double %48, %47
  %50 = add nuw i64 %41, 2
  %51 = icmp eq i64 %50, %39
  br i1 %51, label %52, label %40, !llvm.loop !20

52:                                               ; preds = %40
  %53 = icmp eq i64 %39, %36
  br i1 %53, label %84, label %54

54:                                               ; preds = %34, %52
  %55 = phi i64 [ 0, %34 ], [ %39, %52 ]
  %56 = phi double [ 0.000000e+00, %34 ], [ %49, %52 ]
  br label %76

57:                                               ; preds = %25, %57
  %58 = phi i64 [ %72, %57 ], [ 0, %25 ]
  %59 = load ptr, ptr @results, align 8, !tbaa !6
  %60 = getelementptr inbounds nuw %struct.one_result, ptr %59, i64 %58
  %61 = getelementptr inbounds nuw i8, ptr %60, i64 8
  %62 = load ptr, ptr %61, align 8, !tbaa !17
  %63 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %62) #16
  %64 = trunc i64 %63 to i32
  %65 = sub i32 %26, %64
  %66 = load double, ptr %60, align 8, !tbaa !13
  %67 = fdiv double %9, %66
  %68 = load double, ptr %59, align 8, !tbaa !13
  %69 = fdiv double %66, %68
  %70 = trunc nuw nsw i64 %58 to i32
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4, i32 noundef %70, i32 noundef %65, ptr noundef nonnull @.str.5, ptr noundef nonnull %62, double noundef %66, double noundef %67, double noundef %69)
  %72 = add nuw nsw i64 %58, 1
  %73 = load i32, ptr @current_test, align 4, !tbaa !11
  %74 = sext i32 %73 to i64
  %75 = icmp slt i64 %72, %74
  br i1 %75, label %57, label %32, !llvm.loop !23

76:                                               ; preds = %54, %76
  %77 = phi i64 [ %82, %76 ], [ %55, %54 ]
  %78 = phi double [ %81, %76 ], [ %56, %54 ]
  %79 = getelementptr inbounds nuw %struct.one_result, ptr %35, i64 %77
  %80 = load double, ptr %79, align 8, !tbaa !13
  %81 = fadd double %78, %80
  %82 = add nuw nsw i64 %77, 1
  %83 = icmp eq i64 %82, %36
  br i1 %83, label %84, label %76, !llvm.loop !24

84:                                               ; preds = %76, %52, %25, %32
  %85 = phi double [ 0.000000e+00, %32 ], [ 0.000000e+00, %25 ], [ %49, %52 ], [ %81, %76 ]
  %86 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6, ptr noundef %0, double noundef %85)
  %87 = load i32, ptr @current_test, align 4, !tbaa !11
  %88 = icmp sgt i32 %87, 1
  %89 = icmp ne i32 %4, 0
  %90 = and i1 %89, %88
  br i1 %90, label %91, label %112

91:                                               ; preds = %84
  %92 = load ptr, ptr @results, align 8, !tbaa !6
  %93 = load double, ptr %92, align 8, !tbaa !13
  br label %94

94:                                               ; preds = %91, %94
  %95 = phi i64 [ 1, %91 ], [ %102, %94 ]
  %96 = phi double [ 0.000000e+00, %91 ], [ %101, %94 ]
  %97 = getelementptr inbounds nuw %struct.one_result, ptr %92, i64 %95
  %98 = load double, ptr %97, align 8, !tbaa !13
  %99 = fdiv double %98, %93
  %100 = tail call double @log(double noundef %99) #17, !tbaa !11
  %101 = fadd double %96, %100
  %102 = add nuw nsw i64 %95, 1
  %103 = load i32, ptr @current_test, align 4, !tbaa !11
  %104 = sext i32 %103 to i64
  %105 = icmp slt i64 %102, %104
  br i1 %105, label %94, label %106, !llvm.loop !25

106:                                              ; preds = %94
  %107 = add nsw i32 %103, -1
  %108 = sitofp i32 %107 to double
  %109 = fdiv double %101, %108
  %110 = tail call double @exp(double noundef %109) #17, !tbaa !11
  %111 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.7, ptr noundef %0, double noundef %110)
  br label %112

112:                                              ; preds = %106, %84
  store i32 0, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: read)
declare i64 @strlen(ptr noundef captures(none)) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(errnomem: write)
declare double @log(double noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(errnomem: write)
declare double @exp(double noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local void @_Z17summarize_simplefP8_IO_FILEPKc(ptr noundef captures(none) %0, ptr noundef %1) local_unnamed_addr #4 {
  %3 = load i32, ptr @current_test, align 4, !tbaa !11
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %18

5:                                                ; preds = %2
  %6 = load ptr, ptr @results, align 8, !tbaa !6
  %7 = zext nneg i32 %3 to i64
  br label %8

8:                                                ; preds = %5, %8
  %9 = phi i64 [ 0, %5 ], [ %16, %8 ]
  %10 = phi i32 [ 12, %5 ], [ %15, %8 ]
  %11 = getelementptr inbounds nuw %struct.one_result, ptr %6, i64 %9, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %12) #16
  %14 = trunc i64 %13 to i32
  %15 = tail call i32 @llvm.smax.i32(i32 %10, i32 %14)
  %16 = add nuw nsw i64 %9, 1
  %17 = icmp eq i64 %16, %7
  br i1 %17, label %18, label %8, !llvm.loop !26

18:                                               ; preds = %8, %2
  %19 = phi i32 [ 12, %2 ], [ %15, %8 ]
  %20 = add nsw i32 %19, -12
  %21 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.8, i32 noundef %20, ptr noundef nonnull @.str.2) #17
  %22 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.9, i32 noundef %19, ptr noundef nonnull @.str.2) #17
  %23 = load i32, ptr @current_test, align 4, !tbaa !11
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %50, label %74

25:                                               ; preds = %50
  %26 = icmp sgt i32 %63, 0
  br i1 %26, label %27, label %74

27:                                               ; preds = %25
  %28 = load ptr, ptr @results, align 8, !tbaa !6
  %29 = zext nneg i32 %63 to i64
  %30 = icmp eq i32 %63, 1
  br i1 %30, label %47, label %31

31:                                               ; preds = %27
  %32 = and i64 %29, 2147483646
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %43, %33 ]
  %35 = phi double [ 0.000000e+00, %31 ], [ %42, %33 ]
  %36 = getelementptr inbounds nuw %struct.one_result, ptr %28, i64 %34
  %37 = getelementptr inbounds nuw %struct.one_result, ptr %28, i64 %34
  %38 = getelementptr inbounds nuw i8, ptr %37, i64 16
  %39 = load double, ptr %36, align 8, !tbaa !13
  %40 = load double, ptr %38, align 8, !tbaa !13
  %41 = fadd double %35, %39
  %42 = fadd double %41, %40
  %43 = add nuw i64 %34, 2
  %44 = icmp eq i64 %43, %32
  br i1 %44, label %45, label %33, !llvm.loop !27

45:                                               ; preds = %33
  %46 = icmp eq i64 %32, %29
  br i1 %46, label %74, label %47

47:                                               ; preds = %27, %45
  %48 = phi i64 [ 0, %27 ], [ %32, %45 ]
  %49 = phi double [ 0.000000e+00, %27 ], [ %42, %45 ]
  br label %66

50:                                               ; preds = %18, %50
  %51 = phi i64 [ %62, %50 ], [ 0, %18 ]
  %52 = load ptr, ptr @results, align 8, !tbaa !6
  %53 = getelementptr inbounds nuw %struct.one_result, ptr %52, i64 %51
  %54 = getelementptr inbounds nuw i8, ptr %53, i64 8
  %55 = load ptr, ptr %54, align 8, !tbaa !17
  %56 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %55) #16
  %57 = trunc i64 %56 to i32
  %58 = sub i32 %19, %57
  %59 = load double, ptr %53, align 8, !tbaa !13
  %60 = trunc nuw nsw i64 %51 to i32
  %61 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.10, i32 noundef %60, i32 noundef %58, ptr noundef nonnull @.str.5, ptr noundef nonnull %55, double noundef %59) #17
  %62 = add nuw nsw i64 %51, 1
  %63 = load i32, ptr @current_test, align 4, !tbaa !11
  %64 = sext i32 %63 to i64
  %65 = icmp slt i64 %62, %64
  br i1 %65, label %50, label %25, !llvm.loop !28

66:                                               ; preds = %47, %66
  %67 = phi i64 [ %72, %66 ], [ %48, %47 ]
  %68 = phi double [ %71, %66 ], [ %49, %47 ]
  %69 = getelementptr inbounds nuw %struct.one_result, ptr %28, i64 %67
  %70 = load double, ptr %69, align 8, !tbaa !13
  %71 = fadd double %68, %70
  %72 = add nuw nsw i64 %67, 1
  %73 = icmp eq i64 %72, %29
  br i1 %73, label %74, label %66, !llvm.loop !29

74:                                               ; preds = %66, %45, %18, %25
  %75 = phi double [ 0.000000e+00, %25 ], [ 0.000000e+00, %18 ], [ %42, %45 ], [ %71, %66 ]
  %76 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.6, ptr noundef %1, double noundef %75) #17
  store i32 0, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr noundef captures(none), ptr noundef readonly captures(none), ...) local_unnamed_addr #2

; Function Attrs: mustprogress nounwind uwtable
define dso_local void @_Z11start_timerv() local_unnamed_addr #0 {
  %1 = tail call i64 @clock() #17
  store i64 %1, ptr @start_time, align 8, !tbaa !30
  ret void
}

; Function Attrs: nounwind
declare i64 @clock() local_unnamed_addr #7

; Function Attrs: mustprogress nounwind uwtable
define dso_local noundef double @_Z5timerv() local_unnamed_addr #0 {
  %1 = tail call i64 @clock() #17
  store i64 %1, ptr @end_time, align 8, !tbaa !30
  %2 = load i64, ptr @start_time, align 8, !tbaa !30
  %3 = sub nsw i64 %1, %2
  %4 = sitofp i64 %3 to double
  %5 = fdiv double %4, 1.000000e+06
  ret double %5
}

; Function Attrs: mustprogress norecurse uwtable
define dso_local noundef i32 @main(i32 noundef %0, ptr noundef readonly captures(none) %1) local_unnamed_addr #8 {
  %3 = icmp sgt i32 %0, 1
  br i1 %3, label %4, label %14

4:                                                ; preds = %2
  %5 = getelementptr inbounds nuw i8, ptr %1, i64 8
  %6 = load ptr, ptr %5, align 8, !tbaa !32
  %7 = tail call i64 @__isoc23_strtol(ptr noundef nonnull %6, ptr noundef null, i32 noundef 10) #17
  %8 = trunc i64 %7 to i32
  store i32 %8, ptr @base_iterations, align 4, !tbaa !11
  %9 = icmp eq i32 %0, 2
  br i1 %9, label %14, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds nuw i8, ptr %1, i64 16
  %12 = load ptr, ptr %11, align 8, !tbaa !32
  %13 = tail call double @strtod(ptr noundef nonnull captures(none) %12, ptr noundef null) #17
  store double %13, ptr @init_value, align 8, !tbaa !33
  br label %14

14:                                               ; preds = %2, %10, %4
  %15 = load double, ptr @init_value, align 8, !tbaa !33
  %16 = fptosi double %15 to i8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(8000) @data8, i8 %16, i64 8000, i1 false), !tbaa !34
  %17 = load i32, ptr @base_iterations, align 4, !tbaa !11
  store i32 %17, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIa10custom_twoIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.11)
  tail call void @_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.12)
  tail call void @_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.13)
  tail call void @_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.14)
  tail call void @_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.15)
  tail call void @_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.16)
  tail call void @_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.17)
  tail call void @_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.18)
  tail call void @_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.19)
  tail call void @_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.20)
  tail call void @_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.21)
  tail call void @_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.22)
  tail call void @_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.23)
  tail call void @_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.24)
  tail call void @_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.25)
  %18 = load i32, ptr @base_iterations, align 4, !tbaa !11
  %19 = sdiv i32 %18, 10
  store i32 %19, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.26)
  tail call void @_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.27)
  tail call void @_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.28)
  tail call void @_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.29)
  tail call void @_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.30)
  tail call void @_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.31)
  tail call void @_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.32)
  tail call void @_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.33)
  tail call void @_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.34)
  tail call void @_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.35)
  tail call void @_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.36)
  tail call void @_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.37)
  tail call void @_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.38)
  tail call void @_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.39)
  tail call void @_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.40)
  tail call void @_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.41)
  tail call void @_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc(ptr noundef nonnull @data8, i32 noundef 8000, ptr noundef nonnull @.str.42)
  %20 = load double, ptr @init_value, align 8, !tbaa !33
  %21 = fptoui double %20 to i8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(8000) @data8unsigned, i8 %21, i64 8000, i1 false), !tbaa !34
  %22 = load i32, ptr @base_iterations, align 4, !tbaa !11
  store i32 %22, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIh10custom_twoIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.43)
  tail call void @_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.44)
  tail call void @_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.45)
  tail call void @_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.46)
  tail call void @_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.47)
  tail call void @_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.48)
  tail call void @_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.49)
  tail call void @_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.50)
  tail call void @_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.51)
  tail call void @_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.52)
  tail call void @_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.53)
  tail call void @_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.54)
  tail call void @_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.55)
  tail call void @_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.56)
  tail call void @_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.57)
  %23 = load i32, ptr @base_iterations, align 4, !tbaa !11
  %24 = sdiv i32 %23, 10
  store i32 %24, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.58)
  tail call void @_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.59)
  tail call void @_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.60)
  tail call void @_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.61)
  tail call void @_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.62)
  tail call void @_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.63)
  tail call void @_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.64)
  tail call void @_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.65)
  tail call void @_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.66)
  tail call void @_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.67)
  tail call void @_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.68)
  tail call void @_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.69)
  tail call void @_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.70)
  tail call void @_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.71)
  tail call void @_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.72)
  tail call void @_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.73)
  tail call void @_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc(ptr noundef nonnull @data8unsigned, i32 noundef 8000, ptr noundef nonnull @.str.74)
  %25 = load double, ptr @init_value, align 8, !tbaa !33
  %26 = fptosi double %25 to i16
  %27 = insertelement <8 x i16> poison, i16 %26, i64 0
  %28 = shufflevector <8 x i16> %27, <8 x i16> poison, <8 x i32> zeroinitializer
  br label %29

29:                                               ; preds = %29, %14
  %30 = phi i64 [ 0, %14 ], [ %34, %29 ]
  %31 = shl i64 %30, 1
  %32 = getelementptr inbounds nuw i8, ptr @data16, i64 %31
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  store <8 x i16> %28, ptr %32, align 2, !tbaa !35
  store <8 x i16> %28, ptr %33, align 2, !tbaa !35
  %34 = add nuw i64 %30, 16
  %35 = icmp eq i64 %34, 8000
  br i1 %35, label %36, label %29, !llvm.loop !37

36:                                               ; preds = %29
  %37 = load i32, ptr @base_iterations, align 4, !tbaa !11
  store i32 %37, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIs10custom_twoIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.75)
  tail call void @_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.76)
  tail call void @_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.77)
  tail call void @_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.78)
  tail call void @_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.79)
  tail call void @_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.80)
  tail call void @_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.81)
  tail call void @_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.82)
  tail call void @_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.83)
  tail call void @_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.84)
  tail call void @_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.85)
  tail call void @_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.86)
  tail call void @_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.87)
  tail call void @_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.88)
  tail call void @_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.89)
  %38 = load i32, ptr @base_iterations, align 4, !tbaa !11
  %39 = sdiv i32 %38, 10
  store i32 %39, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.90)
  tail call void @_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.91)
  tail call void @_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.92)
  tail call void @_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.93)
  tail call void @_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.94)
  tail call void @_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.95)
  tail call void @_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.96)
  tail call void @_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.97)
  tail call void @_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.98)
  tail call void @_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.99)
  tail call void @_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.100)
  tail call void @_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.101)
  tail call void @_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.102)
  tail call void @_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.103)
  tail call void @_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.104)
  tail call void @_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.105)
  tail call void @_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc(ptr noundef nonnull @data16, i32 noundef 8000, ptr noundef nonnull @.str.106)
  %40 = load double, ptr @init_value, align 8, !tbaa !33
  %41 = fptoui double %40 to i16
  %42 = insertelement <8 x i16> poison, i16 %41, i64 0
  %43 = shufflevector <8 x i16> %42, <8 x i16> poison, <8 x i32> zeroinitializer
  br label %44

44:                                               ; preds = %44, %36
  %45 = phi i64 [ 0, %36 ], [ %49, %44 ]
  %46 = shl i64 %45, 1
  %47 = getelementptr inbounds nuw i8, ptr @data16unsigned, i64 %46
  %48 = getelementptr inbounds nuw i8, ptr %47, i64 16
  store <8 x i16> %43, ptr %47, align 2, !tbaa !35
  store <8 x i16> %43, ptr %48, align 2, !tbaa !35
  %49 = add nuw i64 %45, 16
  %50 = icmp eq i64 %49, 8000
  br i1 %50, label %51, label %44, !llvm.loop !38

51:                                               ; preds = %44
  %52 = load i32, ptr @base_iterations, align 4, !tbaa !11
  store i32 %52, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIt10custom_twoItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.107)
  tail call void @_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.108)
  tail call void @_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.109)
  tail call void @_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.110)
  tail call void @_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.111)
  tail call void @_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.112)
  tail call void @_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.113)
  tail call void @_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.114)
  tail call void @_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.115)
  tail call void @_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.116)
  tail call void @_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.117)
  tail call void @_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.118)
  tail call void @_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.119)
  tail call void @_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.120)
  tail call void @_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.121)
  %53 = load i32, ptr @base_iterations, align 4, !tbaa !11
  %54 = sdiv i32 %53, 10
  store i32 %54, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIt19custom_constant_addItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.122)
  tail call void @_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.123)
  tail call void @_Z13test_constantIt19custom_constant_subItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.124)
  tail call void @_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.125)
  tail call void @_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.126)
  tail call void @_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.127)
  tail call void @_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.128)
  tail call void @_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.129)
  tail call void @_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.130)
  tail call void @_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.131)
  tail call void @_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.132)
  tail call void @_Z13test_constantIt19custom_constant_andItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.133)
  tail call void @_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.134)
  tail call void @_Z13test_constantIt18custom_constant_orItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.135)
  tail call void @_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.136)
  tail call void @_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.137)
  tail call void @_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc(ptr noundef nonnull @data16unsigned, i32 noundef 8000, ptr noundef nonnull @.str.138)
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fptosi double %55 to i32
  %57 = insertelement <4 x i32> poison, i32 %56, i64 0
  %58 = shufflevector <4 x i32> %57, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %59

59:                                               ; preds = %59, %51
  %60 = phi i64 [ 0, %51 ], [ %64, %59 ]
  %61 = shl i64 %60, 2
  %62 = getelementptr inbounds nuw i8, ptr @data32, i64 %61
  %63 = getelementptr inbounds nuw i8, ptr %62, i64 16
  store <4 x i32> %58, ptr %62, align 4, !tbaa !11
  store <4 x i32> %58, ptr %63, align 4, !tbaa !11
  %64 = add nuw i64 %60, 8
  %65 = icmp eq i64 %64, 8000
  br i1 %65, label %66, label %59, !llvm.loop !39

66:                                               ; preds = %59
  %67 = load i32, ptr @base_iterations, align 4, !tbaa !11
  store i32 %67, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIi10custom_twoIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.139)
  tail call void @_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.140)
  tail call void @_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.141)
  tail call void @_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.142)
  tail call void @_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.143)
  tail call void @_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.144)
  tail call void @_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.145)
  tail call void @_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.146)
  tail call void @_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.147)
  tail call void @_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.148)
  tail call void @_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.149)
  tail call void @_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.150)
  tail call void @_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.151)
  tail call void @_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.152)
  tail call void @_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.153)
  %68 = load i32, ptr @base_iterations, align 4, !tbaa !11
  %69 = sdiv i32 %68, 10
  store i32 %69, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.154)
  tail call void @_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.155)
  tail call void @_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.156)
  tail call void @_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.157)
  tail call void @_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.158)
  tail call void @_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.159)
  tail call void @_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.160)
  tail call void @_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.161)
  tail call void @_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.162)
  tail call void @_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.163)
  tail call void @_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.164)
  tail call void @_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.165)
  tail call void @_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.166)
  tail call void @_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.167)
  tail call void @_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.168)
  tail call void @_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.169)
  tail call void @_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc(ptr noundef nonnull @data32, i32 noundef 8000, ptr noundef nonnull @.str.170)
  %70 = load double, ptr @init_value, align 8, !tbaa !33
  %71 = fptoui double %70 to i32
  %72 = insertelement <4 x i32> poison, i32 %71, i64 0
  %73 = shufflevector <4 x i32> %72, <4 x i32> poison, <4 x i32> zeroinitializer
  br label %74

74:                                               ; preds = %74, %66
  %75 = phi i64 [ 0, %66 ], [ %79, %74 ]
  %76 = shl i64 %75, 2
  %77 = getelementptr inbounds nuw i8, ptr @data32unsigned, i64 %76
  %78 = getelementptr inbounds nuw i8, ptr %77, i64 16
  store <4 x i32> %73, ptr %77, align 4, !tbaa !11
  store <4 x i32> %73, ptr %78, align 4, !tbaa !11
  %79 = add nuw i64 %75, 8
  %80 = icmp eq i64 %79, 8000
  br i1 %80, label %81, label %74, !llvm.loop !40

81:                                               ; preds = %74
  %82 = load i32, ptr @base_iterations, align 4, !tbaa !11
  store i32 %82, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIj10custom_twoIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.171)
  tail call void @_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.172)
  tail call void @_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.173)
  tail call void @_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.174)
  tail call void @_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.175)
  tail call void @_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.176)
  tail call void @_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.177)
  tail call void @_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.178)
  tail call void @_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.179)
  tail call void @_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.180)
  tail call void @_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.181)
  tail call void @_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.182)
  tail call void @_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.183)
  tail call void @_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.184)
  tail call void @_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.185)
  %83 = load i32, ptr @base_iterations, align 4, !tbaa !11
  %84 = sdiv i32 %83, 10
  store i32 %84, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.186)
  tail call void @_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.187)
  tail call void @_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.188)
  tail call void @_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.189)
  tail call void @_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.190)
  tail call void @_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.191)
  tail call void @_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.192)
  tail call void @_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.193)
  tail call void @_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.194)
  tail call void @_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.195)
  tail call void @_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.196)
  tail call void @_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.197)
  tail call void @_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.198)
  tail call void @_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.199)
  tail call void @_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.200)
  tail call void @_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.201)
  tail call void @_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc(ptr noundef nonnull @data32unsigned, i32 noundef 8000, ptr noundef nonnull @.str.202)
  %85 = load double, ptr @init_value, align 8, !tbaa !33
  %86 = fptosi double %85 to i64
  %87 = insertelement <2 x i64> poison, i64 %86, i64 0
  %88 = shufflevector <2 x i64> %87, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %89

89:                                               ; preds = %89, %81
  %90 = phi i64 [ 0, %81 ], [ %94, %89 ]
  %91 = shl i64 %90, 3
  %92 = getelementptr inbounds nuw i8, ptr @data64, i64 %91
  %93 = getelementptr inbounds nuw i8, ptr %92, i64 16
  store <2 x i64> %88, ptr %92, align 8, !tbaa !30
  store <2 x i64> %88, ptr %93, align 8, !tbaa !30
  %94 = add nuw i64 %90, 4
  %95 = icmp eq i64 %94, 8000
  br i1 %95, label %96, label %89, !llvm.loop !41

96:                                               ; preds = %89
  %97 = load i32, ptr @base_iterations, align 4, !tbaa !11
  store i32 %97, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIl10custom_twoIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.203)
  tail call void @_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.204)
  tail call void @_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.205)
  tail call void @_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.206)
  tail call void @_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.207)
  tail call void @_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.208)
  tail call void @_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.209)
  tail call void @_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.210)
  tail call void @_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.211)
  tail call void @_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.212)
  tail call void @_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.213)
  tail call void @_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.214)
  tail call void @_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.215)
  tail call void @_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.216)
  tail call void @_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.217)
  %98 = load i32, ptr @base_iterations, align 4, !tbaa !11
  %99 = sdiv i32 %98, 10
  store i32 %99, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.218)
  tail call void @_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.219)
  tail call void @_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.220)
  tail call void @_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.221)
  tail call void @_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.222)
  tail call void @_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.223)
  tail call void @_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.224)
  tail call void @_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.225)
  tail call void @_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.226)
  tail call void @_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.227)
  tail call void @_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.228)
  tail call void @_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.229)
  tail call void @_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.230)
  tail call void @_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.231)
  tail call void @_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.232)
  tail call void @_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.233)
  tail call void @_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc(ptr noundef nonnull @data64, i32 noundef 8000, ptr noundef nonnull @.str.234)
  %100 = load double, ptr @init_value, align 8, !tbaa !33
  %101 = fptoui double %100 to i64
  %102 = insertelement <2 x i64> poison, i64 %101, i64 0
  %103 = shufflevector <2 x i64> %102, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %104

104:                                              ; preds = %104, %96
  %105 = phi i64 [ 0, %96 ], [ %109, %104 ]
  %106 = shl i64 %105, 3
  %107 = getelementptr inbounds nuw i8, ptr @data64unsigned, i64 %106
  %108 = getelementptr inbounds nuw i8, ptr %107, i64 16
  store <2 x i64> %103, ptr %107, align 8, !tbaa !30
  store <2 x i64> %103, ptr %108, align 8, !tbaa !30
  %109 = add nuw i64 %105, 4
  %110 = icmp eq i64 %109, 8000
  br i1 %110, label %111, label %104, !llvm.loop !42

111:                                              ; preds = %104
  %112 = load i32, ptr @base_iterations, align 4, !tbaa !11
  store i32 %112, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIm10custom_twoImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.235)
  tail call void @_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.236)
  tail call void @_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.237)
  tail call void @_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.238)
  tail call void @_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.239)
  tail call void @_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.240)
  tail call void @_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.241)
  tail call void @_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.242)
  tail call void @_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.243)
  tail call void @_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.244)
  tail call void @_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.245)
  tail call void @_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.246)
  tail call void @_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.247)
  tail call void @_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.248)
  tail call void @_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.249)
  %113 = load i32, ptr @base_iterations, align 4, !tbaa !11
  %114 = sdiv i32 %113, 10
  store i32 %114, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIm19custom_constant_addImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.250)
  tail call void @_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.251)
  tail call void @_Z13test_constantIm19custom_constant_subImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.252)
  tail call void @_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.253)
  tail call void @_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.254)
  tail call void @_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.255)
  tail call void @_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.256)
  tail call void @_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.257)
  tail call void @_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.258)
  tail call void @_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.259)
  tail call void @_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.260)
  tail call void @_Z13test_constantIm19custom_constant_andImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.261)
  tail call void @_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.262)
  tail call void @_Z13test_constantIm18custom_constant_orImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.263)
  tail call void @_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.264)
  tail call void @_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.265)
  tail call void @_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc(ptr noundef nonnull @data64unsigned, i32 noundef 8000, ptr noundef nonnull @.str.266)
  %115 = load double, ptr @init_value, align 8, !tbaa !33
  %116 = fptrunc double %115 to float
  %117 = insertelement <4 x float> poison, float %116, i64 0
  %118 = shufflevector <4 x float> %117, <4 x float> poison, <4 x i32> zeroinitializer
  br label %119

119:                                              ; preds = %119, %111
  %120 = phi i64 [ 0, %111 ], [ %124, %119 ]
  %121 = shl i64 %120, 2
  %122 = getelementptr inbounds nuw i8, ptr @dataFloat, i64 %121
  %123 = getelementptr inbounds nuw i8, ptr %122, i64 16
  store <4 x float> %118, ptr %122, align 4, !tbaa !43
  store <4 x float> %118, ptr %123, align 4, !tbaa !43
  %124 = add nuw i64 %120, 8
  %125 = icmp eq i64 %124, 8000
  br i1 %125, label %126, label %119, !llvm.loop !45

126:                                              ; preds = %119
  %127 = load i32, ptr @base_iterations, align 4, !tbaa !11
  store i32 %127, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIf10custom_twoIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.267)
  tail call void @_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.268)
  tail call void @_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.269)
  tail call void @_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.270)
  tail call void @_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.271)
  %128 = load i32, ptr @base_iterations, align 4, !tbaa !11
  %129 = sdiv i32 %128, 10
  store i32 %129, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.272)
  tail call void @_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.273)
  tail call void @_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.274)
  tail call void @_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.275)
  tail call void @_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.276)
  tail call void @_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.277)
  tail call void @_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.278)
  tail call void @_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.279)
  tail call void @_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.280)
  tail call void @_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.281)
  tail call void @_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc(ptr noundef nonnull @dataFloat, i32 noundef 8000, ptr noundef nonnull @.str.282)
  %130 = load <1 x double>, ptr @init_value, align 8
  %131 = shufflevector <1 x double> %130, <1 x double> poison, <2 x i32> zeroinitializer
  br label %132

132:                                              ; preds = %132, %126
  %133 = phi i64 [ 0, %126 ], [ %137, %132 ]
  %134 = shl i64 %133, 3
  %135 = getelementptr inbounds nuw i8, ptr @dataDouble, i64 %134
  %136 = getelementptr inbounds nuw i8, ptr %135, i64 16
  store <2 x double> %131, ptr %135, align 8, !tbaa !33
  store <2 x double> %131, ptr %136, align 8, !tbaa !33
  %137 = add nuw i64 %133, 4
  %138 = icmp eq i64 %137, 8000
  br i1 %138, label %139, label %132, !llvm.loop !46

139:                                              ; preds = %132
  %140 = load i32, ptr @base_iterations, align 4, !tbaa !11
  store i32 %140, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantId10custom_twoIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.283)
  tail call void @_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.284)
  tail call void @_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.285)
  tail call void @_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.286)
  tail call void @_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.287)
  %141 = load i32, ptr @base_iterations, align 4, !tbaa !11
  %142 = sdiv i32 %141, 10
  store i32 %142, ptr @iterations, align 4, !tbaa !11
  tail call void @_Z13test_constantId19custom_constant_addIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.288)
  tail call void @_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.289)
  tail call void @_Z13test_constantId19custom_constant_subIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.290)
  tail call void @_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.291)
  tail call void @_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.292)
  tail call void @_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.293)
  tail call void @_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.294)
  tail call void @_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.295)
  tail call void @_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.296)
  tail call void @_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.297)
  tail call void @_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc(ptr noundef nonnull @dataDouble, i32 noundef 8000, ptr noundef nonnull @.str.298)
  ret i32 0
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa10custom_twoIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !47

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !47

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_add_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !48

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !48

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_sub_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !49

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !49

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa25custom_multiply_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 6
  %12 = icmp eq i8 %11, -128
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !50

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !50

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa23custom_divide_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !51

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !51

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_mod_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !52

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !52

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa22custom_equal_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa25custom_notequal_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !53

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !53

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_greaterthan_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !54

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !54

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa25custom_lessthan_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa33custom_greaterthanequal_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !55

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !55

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa30custom_lessthanequal_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_and_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !56

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !56

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_or_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 31
  %12 = icmp eq i8 %11, -64
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !57

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !57

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa20custom_xor_constantsIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 29
  %12 = icmp eq i8 %11, 64
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !58

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !58

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_addIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 10)
  %37 = add <16 x i8> %31, splat (i8 10)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !59

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 10)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !60

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !61

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, 10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !62

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !61

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_addIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 10)
  %37 = add <16 x i8> %31, splat (i8 10)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !63

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 10)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !64

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !65

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, 10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !66

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !65

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_subIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 -10)
  %37 = add <16 x i8> %31, splat (i8 -10)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !67

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 -10)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !68

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !69

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, -10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !70

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !69

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_subIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 -10)
  %37 = add <16 x i8> %31, splat (i8 -10)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !71

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 -10)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !72

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !73

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, -10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !74

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !73

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa24custom_constant_multiplyIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  %7 = icmp sgt i32 %1, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %79

9:                                                ; preds = %3
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 2147483616
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483640
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i8 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <16 x i8> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <16 x i8> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i8, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <16 x i8>, ptr %30, align 1, !tbaa !34
  %33 = load <16 x i8>, ptr %31, align 1, !tbaa !34
  %34 = mul <16 x i8> %32, splat (i8 120)
  %35 = mul <16 x i8> %33, splat (i8 120)
  %36 = add <16 x i8> %34, %28
  %37 = add <16 x i8> %35, %29
  %38 = add nuw i64 %27, 32
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !75

40:                                               ; preds = %26
  %41 = add <16 x i8> %37, %36
  %42 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i8 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <8 x i8> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i8, ptr %0, i64 %49
  %52 = load <8 x i8>, ptr %51, align 1, !tbaa !34
  %53 = mul <8 x i8> %52, splat (i8 120)
  %54 = add <8 x i8> %53, %50
  %55 = add nuw i64 %49, 8
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !76

57:                                               ; preds = %48
  %58 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %79, !llvm.loop !77

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i8 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !34
  %72 = mul i8 %71, 120
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !78

76:                                               ; preds = %67, %57, %40
  %77 = phi i8 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %63, label %59

79:                                               ; preds = %63, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa33custom_multiple_constant_multiplyIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  %7 = icmp sgt i32 %1, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %79

9:                                                ; preds = %3
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 2147483616
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483640
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i8 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <16 x i8> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <16 x i8> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i8, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <16 x i8>, ptr %30, align 1, !tbaa !34
  %33 = load <16 x i8>, ptr %31, align 1, !tbaa !34
  %34 = mul <16 x i8> %32, splat (i8 120)
  %35 = mul <16 x i8> %33, splat (i8 120)
  %36 = add <16 x i8> %34, %28
  %37 = add <16 x i8> %35, %29
  %38 = add nuw i64 %27, 32
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !79

40:                                               ; preds = %26
  %41 = add <16 x i8> %37, %36
  %42 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i8 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <8 x i8> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i8, ptr %0, i64 %49
  %52 = load <8 x i8>, ptr %51, align 1, !tbaa !34
  %53 = mul <8 x i8> %52, splat (i8 120)
  %54 = add <8 x i8> %53, %50
  %55 = add nuw i64 %49, 8
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !80

57:                                               ; preds = %48
  %58 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %79, !llvm.loop !81

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i8 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !34
  %72 = mul i8 %71, 120
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !82

76:                                               ; preds = %67, %57, %40
  %77 = phi i8 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %63, label %59

79:                                               ; preds = %63, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa34custom_multiple_constant_multiply2IaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %84

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 120)
  %37 = add <16 x i8> %31, splat (i8 120)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !83

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 120)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !84

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %101, !llvm.loop !85

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, 120
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !86

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = icmp eq i8 %79, %82
  br i1 %83, label %65, label %61

84:                                               ; preds = %9, %96
  %85 = phi i32 [ %97, %96 ], [ %5, %9 ]
  %86 = phi double [ %98, %96 ], [ %10, %9 ]
  %87 = phi i32 [ %99, %96 ], [ 0, %9 ]
  %88 = fptosi double %86 to i8
  %89 = and i8 %88, 3
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %84
  %92 = load i32, ptr @current_test, align 4, !tbaa !11
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %92)
  %94 = load double, ptr @init_value, align 8, !tbaa !33
  %95 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %96

96:                                               ; preds = %84, %91
  %97 = phi i32 [ %85, %84 ], [ %95, %91 ]
  %98 = phi double [ %86, %84 ], [ %94, %91 ]
  %99 = add nuw nsw i32 %87, 1
  %100 = icmp slt i32 %99, %97
  br i1 %100, label %84, label %101, !llvm.loop !85

101:                                              ; preds = %96, %65, %3
  %102 = tail call i64 @clock() #17
  store i64 %102, ptr @end_time, align 8, !tbaa !30
  %103 = load i64, ptr @start_time, align 8, !tbaa !30
  %104 = load ptr, ptr @results, align 8, !tbaa !6
  %105 = icmp ne ptr %104, null
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %107 = load i32, ptr @current_test, align 4
  %108 = icmp slt i32 %107, %106
  %109 = select i1 %105, i1 %108, i1 false
  br i1 %109, label %121, label %110

110:                                              ; preds = %101
  %111 = add nsw i32 %106, 10
  store i32 %111, ptr @allocated_results, align 4, !tbaa !11
  %112 = sext i32 %111 to i64
  %113 = shl nsw i64 %112, 4
  %114 = tail call ptr @realloc(ptr noundef %104, i64 noundef %113) #14
  store ptr %114, ptr @results, align 8, !tbaa !6
  %115 = icmp eq ptr %114, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %110
  %117 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %121

118:                                              ; preds = %110
  %119 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %120 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %119)
  tail call void @exit(i32 noundef -1) #15
  unreachable

121:                                              ; preds = %101, %116
  %122 = phi i32 [ %117, %116 ], [ %107, %101 ]
  %123 = phi ptr [ %114, %116 ], [ %104, %101 ]
  %124 = sub nsw i64 %102, %103
  %125 = sitofp i64 %124 to double
  %126 = fdiv double %125, 1.000000e+06
  %127 = sext i32 %122 to i64
  %128 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127
  store double %126, ptr %128, align 8, !tbaa !13
  %129 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127, i32 1
  store ptr %2, ptr %129, align 8, !tbaa !17
  %130 = add nsw i32 %122, 1
  store i32 %130, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa22custom_constant_divideIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = sdiv <16 x i8> %34, splat (i8 5)
  %37 = sdiv <16 x i8> %35, splat (i8 5)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !87

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = sdiv <8 x i8> %54, splat (i8 5)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !88

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !89

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = sdiv i8 %73, 5
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !90

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = sdiv i8 %81, 5
  %83 = shl i8 %82, 6
  %84 = icmp eq i8 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = sdiv i8 %89, 5
  %91 = and i8 %90, 3
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !89

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa31custom_multiple_constant_divideIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = sdiv <16 x i8> %34, splat (i8 120)
  %37 = sdiv <16 x i8> %35, splat (i8 120)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !91

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = sdiv <8 x i8> %54, splat (i8 120)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !92

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !93

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = sdiv i8 %73, 120
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !94

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = sdiv i8 %81, 120
  %83 = shl nsw i8 %82, 6
  %84 = icmp eq i8 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = add i8 %89, 119
  %91 = icmp ult i8 %90, -17
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !93

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa32custom_multiple_constant_divide2IaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 2)
  %37 = add <16 x i8> %31, splat (i8 2)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !95

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 2)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !96

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !97

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, 2
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !98

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !97

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa30custom_multiple_constant_mixedIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %97

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %80

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %62
  %22 = phi i32 [ %63, %62 ], [ %5, %11 ]
  %23 = phi i32 [ %64, %62 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %43, %56, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %43 ], [ %19, %56 ]
  %26 = phi i8 [ 0, %21 ], [ %42, %43 ], [ %57, %56 ]
  br label %66

27:                                               ; preds = %21
  br i1 %14, label %44, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %38, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %36, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %37, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %34, %30
  %37 = add <16 x i8> %35, %31
  %38 = add nuw i64 %29, 32
  %39 = icmp eq i64 %38, %15
  br i1 %39, label %40, label %28, !llvm.loop !99

40:                                               ; preds = %28
  %41 = add <16 x i8> %37, %36
  %42 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %41)
  br i1 %16, label %74, label %43

43:                                               ; preds = %40
  br i1 %18, label %24, label %44

44:                                               ; preds = %43, %27
  %45 = phi i64 [ %15, %43 ], [ 0, %27 ]
  %46 = phi i8 [ %42, %43 ], [ 0, %27 ]
  %47 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %54, %48 ]
  %50 = phi <8 x i8> [ %47, %44 ], [ %53, %48 ]
  %51 = getelementptr inbounds nuw i8, ptr %0, i64 %49
  %52 = load <8 x i8>, ptr %51, align 1, !tbaa !34
  %53 = add <8 x i8> %52, %50
  %54 = add nuw i64 %49, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %48, !llvm.loop !100

56:                                               ; preds = %48
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %74, label %24

58:                                               ; preds = %74
  %59 = load i32, ptr @current_test, align 4, !tbaa !11
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %59)
  %61 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %62

62:                                               ; preds = %58, %74
  %63 = phi i32 [ %61, %58 ], [ %22, %74 ]
  %64 = add nuw nsw i32 %23, 1
  %65 = icmp slt i32 %64, %63
  br i1 %65, label %21, label %97, !llvm.loop !101

66:                                               ; preds = %24, %66
  %67 = phi i64 [ %72, %66 ], [ %25, %24 ]
  %68 = phi i8 [ %71, %66 ], [ %26, %24 ]
  %69 = getelementptr inbounds nuw i8, ptr %0, i64 %67
  %70 = load i8, ptr %69, align 1, !tbaa !34
  %71 = add i8 %70, %68
  %72 = add nuw nsw i64 %67, 1
  %73 = icmp eq i64 %72, %12
  br i1 %73, label %74, label %66, !llvm.loop !102

74:                                               ; preds = %66, %56, %40
  %75 = phi i8 [ %42, %40 ], [ %57, %56 ], [ %71, %66 ]
  %76 = load double, ptr @init_value, align 8, !tbaa !33
  %77 = fptosi double %76 to i8
  %78 = shl i8 %77, 6
  %79 = icmp eq i8 %75, %78
  br i1 %79, label %62, label %58

80:                                               ; preds = %9, %92
  %81 = phi i32 [ %93, %92 ], [ %5, %9 ]
  %82 = phi double [ %94, %92 ], [ %10, %9 ]
  %83 = phi i32 [ %95, %92 ], [ 0, %9 ]
  %84 = fptosi double %82 to i8
  %85 = and i8 %84, 3
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !11
  %89 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %88)
  %90 = load double, ptr @init_value, align 8, !tbaa !33
  %91 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %92

92:                                               ; preds = %80, %87
  %93 = phi i32 [ %81, %80 ], [ %91, %87 ]
  %94 = phi double [ %82, %80 ], [ %90, %87 ]
  %95 = add nuw nsw i32 %83, 1
  %96 = icmp slt i32 %95, %93
  br i1 %96, label %80, label %97, !llvm.loop !101

97:                                               ; preds = %92, %62, %3
  %98 = tail call i64 @clock() #17
  store i64 %98, ptr @end_time, align 8, !tbaa !30
  %99 = load i64, ptr @start_time, align 8, !tbaa !30
  %100 = load ptr, ptr @results, align 8, !tbaa !6
  %101 = icmp ne ptr %100, null
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %103 = load i32, ptr @current_test, align 4
  %104 = icmp slt i32 %103, %102
  %105 = select i1 %101, i1 %104, i1 false
  br i1 %105, label %117, label %106

106:                                              ; preds = %97
  %107 = add nsw i32 %102, 10
  store i32 %107, ptr @allocated_results, align 4, !tbaa !11
  %108 = sext i32 %107 to i64
  %109 = shl nsw i64 %108, 4
  %110 = tail call ptr @realloc(ptr noundef %100, i64 noundef %109) #14
  store ptr %110, ptr @results, align 8, !tbaa !6
  %111 = icmp eq ptr %110, null
  br i1 %111, label %114, label %112

112:                                              ; preds = %106
  %113 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %117

114:                                              ; preds = %106
  %115 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %116 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %115)
  tail call void @exit(i32 noundef -1) #15
  unreachable

117:                                              ; preds = %97, %112
  %118 = phi i32 [ %113, %112 ], [ %103, %97 ]
  %119 = phi ptr [ %110, %112 ], [ %100, %97 ]
  %120 = sub nsw i64 %98, %99
  %121 = sitofp i64 %120 to double
  %122 = fdiv double %121, 1.000000e+06
  %123 = sext i32 %118 to i64
  %124 = getelementptr inbounds %struct.one_result, ptr %119, i64 %123
  store double %122, ptr %124, align 8, !tbaa !13
  %125 = getelementptr inbounds %struct.one_result, ptr %119, i64 %123, i32 1
  store ptr %2, ptr %125, align 8, !tbaa !17
  %126 = add nsw i32 %118, 1
  store i32 %126, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_andIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = and <16 x i8> %34, splat (i8 10)
  %37 = and <16 x i8> %35, splat (i8 10)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !103

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = and <8 x i8> %54, splat (i8 10)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !104

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !105

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = and i8 %73, 10
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !106

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = and i8 %82, -128
  %84 = icmp eq i8 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 2
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !105

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_andIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = and <16 x i8> %34, splat (i8 14)
  %37 = and <16 x i8> %35, splat (i8 14)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !107

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = and <8 x i8> %54, splat (i8 14)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !108

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !109

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = and i8 %73, 14
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !110

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = and i8 %82, -128
  %84 = icmp eq i8 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 2
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !109

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa18custom_constant_orIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %90

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %83

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 2147483616
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483640
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i8 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <16 x i8> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <16 x i8> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i8, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <16 x i8>, ptr %30, align 1, !tbaa !34
  %33 = load <16 x i8>, ptr %31, align 1, !tbaa !34
  %34 = or <16 x i8> %32, splat (i8 10)
  %35 = or <16 x i8> %33, splat (i8 10)
  %36 = add <16 x i8> %34, %28
  %37 = add <16 x i8> %35, %29
  %38 = add nuw i64 %27, 32
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !111

40:                                               ; preds = %26
  %41 = add <16 x i8> %37, %36
  %42 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i8 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <8 x i8> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i8, ptr %0, i64 %49
  %52 = load <8 x i8>, ptr %51, align 1, !tbaa !34
  %53 = or <8 x i8> %52, splat (i8 10)
  %54 = add <8 x i8> %53, %50
  %55 = add nuw i64 %49, 8
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !112

57:                                               ; preds = %48
  %58 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %90, !llvm.loop !113

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i8 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !34
  %72 = or i8 %71, 10
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !114

76:                                               ; preds = %67, %57, %40
  %77 = phi i8 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = load double, ptr @init_value, align 8, !tbaa !33
  %79 = fptosi double %78 to i8
  %80 = shl i8 %79, 6
  %81 = or i8 %80, -128
  %82 = icmp eq i8 %77, %81
  br i1 %82, label %63, label %59

83:                                               ; preds = %7, %83
  %84 = phi i32 [ %87, %83 ], [ 0, %7 ]
  %85 = load i32, ptr @current_test, align 4, !tbaa !11
  %86 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %85)
  %87 = add nuw nsw i32 %84, 1
  %88 = load i32, ptr @iterations, align 4, !tbaa !11
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %83, label %90, !llvm.loop !113

90:                                               ; preds = %83, %63, %3
  %91 = tail call i64 @clock() #17
  store i64 %91, ptr @end_time, align 8, !tbaa !30
  %92 = load i64, ptr @start_time, align 8, !tbaa !30
  %93 = load ptr, ptr @results, align 8, !tbaa !6
  %94 = icmp ne ptr %93, null
  %95 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %96 = load i32, ptr @current_test, align 4
  %97 = icmp slt i32 %96, %95
  %98 = select i1 %94, i1 %97, i1 false
  br i1 %98, label %110, label %99

99:                                               ; preds = %90
  %100 = add nsw i32 %95, 10
  store i32 %100, ptr @allocated_results, align 4, !tbaa !11
  %101 = sext i32 %100 to i64
  %102 = shl nsw i64 %101, 4
  %103 = tail call ptr @realloc(ptr noundef %93, i64 noundef %102) #14
  store ptr %103, ptr @results, align 8, !tbaa !6
  %104 = icmp eq ptr %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %99
  %106 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %110

107:                                              ; preds = %99
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %108)
  tail call void @exit(i32 noundef -1) #15
  unreachable

110:                                              ; preds = %90, %105
  %111 = phi i32 [ %106, %105 ], [ %96, %90 ]
  %112 = phi ptr [ %103, %105 ], [ %93, %90 ]
  %113 = sub nsw i64 %91, %92
  %114 = sitofp i64 %113 to double
  %115 = fdiv double %114, 1.000000e+06
  %116 = sext i32 %111 to i64
  %117 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116
  store double %115, ptr %117, align 8, !tbaa !13
  %118 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116, i32 1
  store ptr %2, ptr %118, align 8, !tbaa !17
  %119 = add nsw i32 %111, 1
  store i32 %119, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa27custom_multiple_constant_orIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %86

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %79

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 2147483616
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483640
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i8 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <16 x i8> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <16 x i8> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i8, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <16 x i8>, ptr %30, align 1, !tbaa !34
  %33 = load <16 x i8>, ptr %31, align 1, !tbaa !34
  %34 = or <16 x i8> %32, splat (i8 63)
  %35 = or <16 x i8> %33, splat (i8 63)
  %36 = add <16 x i8> %34, %28
  %37 = add <16 x i8> %35, %29
  %38 = add nuw i64 %27, 32
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !115

40:                                               ; preds = %26
  %41 = add <16 x i8> %37, %36
  %42 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i8 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <8 x i8> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i8, ptr %0, i64 %49
  %52 = load <8 x i8>, ptr %51, align 1, !tbaa !34
  %53 = or <8 x i8> %52, splat (i8 63)
  %54 = add <8 x i8> %53, %50
  %55 = add nuw i64 %49, 8
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !116

57:                                               ; preds = %48
  %58 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %86, !llvm.loop !117

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i8 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !34
  %72 = or i8 %71, 63
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !118

76:                                               ; preds = %67, %57, %40
  %77 = phi i8 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, -64
  br i1 %78, label %63, label %59

79:                                               ; preds = %7, %79
  %80 = phi i32 [ %83, %79 ], [ 0, %7 ]
  %81 = load i32, ptr @current_test, align 4, !tbaa !11
  %82 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %81)
  %83 = add nuw nsw i32 %80, 1
  %84 = load i32, ptr @iterations, align 4, !tbaa !11
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %79, label %86, !llvm.loop !117

86:                                               ; preds = %79, %63, %3
  %87 = tail call i64 @clock() #17
  store i64 %87, ptr @end_time, align 8, !tbaa !30
  %88 = load i64, ptr @start_time, align 8, !tbaa !30
  %89 = load ptr, ptr @results, align 8, !tbaa !6
  %90 = icmp ne ptr %89, null
  %91 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %92 = load i32, ptr @current_test, align 4
  %93 = icmp slt i32 %92, %91
  %94 = select i1 %90, i1 %93, i1 false
  br i1 %94, label %106, label %95

95:                                               ; preds = %86
  %96 = add nsw i32 %91, 10
  store i32 %96, ptr @allocated_results, align 4, !tbaa !11
  %97 = sext i32 %96 to i64
  %98 = shl nsw i64 %97, 4
  %99 = tail call ptr @realloc(ptr noundef %89, i64 noundef %98) #14
  store ptr %99, ptr @results, align 8, !tbaa !6
  %100 = icmp eq ptr %99, null
  br i1 %100, label %103, label %101

101:                                              ; preds = %95
  %102 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %106

103:                                              ; preds = %95
  %104 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %105 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %104)
  tail call void @exit(i32 noundef -1) #15
  unreachable

106:                                              ; preds = %86, %101
  %107 = phi i32 [ %102, %101 ], [ %92, %86 ]
  %108 = phi ptr [ %99, %101 ], [ %89, %86 ]
  %109 = sub nsw i64 %87, %88
  %110 = sitofp i64 %109 to double
  %111 = fdiv double %110, 1.000000e+06
  %112 = sext i32 %107 to i64
  %113 = getelementptr inbounds %struct.one_result, ptr %108, i64 %112
  store double %111, ptr %113, align 8, !tbaa !13
  %114 = getelementptr inbounds %struct.one_result, ptr %108, i64 %112, i32 1
  store ptr %2, ptr %114, align 8, !tbaa !17
  %115 = add nsw i32 %107, 1
  store i32 %115, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa19custom_constant_xorIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = xor <16 x i8> %34, splat (i8 10)
  %37 = xor <16 x i8> %35, splat (i8 10)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !119

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = xor <8 x i8> %54, splat (i8 10)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !120

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !121

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = xor i8 %73, 10
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !122

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !121

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIa28custom_multiple_constant_xorIaEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = xor <16 x i8> %34, splat (i8 49)
  %37 = xor <16 x i8> %35, splat (i8 49)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !123

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = xor <8 x i8> %54, splat (i8 49)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !124

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !125

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = xor i8 %73, 49
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !126

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, 64
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 1
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !125

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh10custom_twoIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !127

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !127

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_add_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !128

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !128

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_sub_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !129

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !129

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh25custom_multiply_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 6
  %12 = icmp eq i8 %11, -128
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !130

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !130

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh23custom_divide_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !131

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !131

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_mod_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !132

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !132

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh22custom_equal_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh25custom_notequal_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !133

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !133

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_greaterthan_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !134

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !134

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh25custom_lessthan_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh33custom_greaterthanequal_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 255
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !135

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !135

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh30custom_lessthanequal_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_and_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 127
  %11 = icmp eq i32 %10, 64
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !136

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !136

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_or_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 31
  %12 = icmp eq i8 %11, -64
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !137

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !137

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh20custom_xor_constantsIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i8
  %11 = mul i8 %10, 29
  %12 = icmp eq i8 %11, 64
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !138

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !138

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_addIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 10)
  %37 = add <16 x i8> %31, splat (i8 10)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !139

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 10)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !140

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !141

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, 10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !142

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !141

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_addIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 10)
  %37 = add <16 x i8> %31, splat (i8 10)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !143

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 10)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !144

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !145

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, 10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !146

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !145

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_subIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 -10)
  %37 = add <16 x i8> %31, splat (i8 -10)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !147

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 -10)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !148

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !149

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, -10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !150

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !149

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_subIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 -10)
  %37 = add <16 x i8> %31, splat (i8 -10)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !151

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 -10)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !152

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !153

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, -10
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !154

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !153

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh24custom_constant_multiplyIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  %7 = icmp sgt i32 %1, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %79

9:                                                ; preds = %3
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 2147483616
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483640
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i8 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <16 x i8> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <16 x i8> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i8, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <16 x i8>, ptr %30, align 1, !tbaa !34
  %33 = load <16 x i8>, ptr %31, align 1, !tbaa !34
  %34 = mul <16 x i8> %32, splat (i8 120)
  %35 = mul <16 x i8> %33, splat (i8 120)
  %36 = add <16 x i8> %34, %28
  %37 = add <16 x i8> %35, %29
  %38 = add nuw i64 %27, 32
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !155

40:                                               ; preds = %26
  %41 = add <16 x i8> %37, %36
  %42 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i8 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <8 x i8> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i8, ptr %0, i64 %49
  %52 = load <8 x i8>, ptr %51, align 1, !tbaa !34
  %53 = mul <8 x i8> %52, splat (i8 120)
  %54 = add <8 x i8> %53, %50
  %55 = add nuw i64 %49, 8
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !156

57:                                               ; preds = %48
  %58 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %79, !llvm.loop !157

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i8 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !34
  %72 = mul i8 %71, 120
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !158

76:                                               ; preds = %67, %57, %40
  %77 = phi i8 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %63, label %59

79:                                               ; preds = %63, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh33custom_multiple_constant_multiplyIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  %7 = icmp sgt i32 %1, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %79

9:                                                ; preds = %3
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 2147483616
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483640
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i8 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <16 x i8> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <16 x i8> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i8, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <16 x i8>, ptr %30, align 1, !tbaa !34
  %33 = load <16 x i8>, ptr %31, align 1, !tbaa !34
  %34 = mul <16 x i8> %32, splat (i8 120)
  %35 = mul <16 x i8> %33, splat (i8 120)
  %36 = add <16 x i8> %34, %28
  %37 = add <16 x i8> %35, %29
  %38 = add nuw i64 %27, 32
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !159

40:                                               ; preds = %26
  %41 = add <16 x i8> %37, %36
  %42 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i8 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <8 x i8> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i8, ptr %0, i64 %49
  %52 = load <8 x i8>, ptr %51, align 1, !tbaa !34
  %53 = mul <8 x i8> %52, splat (i8 120)
  %54 = add <8 x i8> %53, %50
  %55 = add nuw i64 %49, 8
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !160

57:                                               ; preds = %48
  %58 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %79, !llvm.loop !161

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i8 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !34
  %72 = mul i8 %71, 120
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !162

76:                                               ; preds = %67, %57, %40
  %77 = phi i8 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %63, label %59

79:                                               ; preds = %63, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh34custom_multiple_constant_multiply2IhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %84

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 120)
  %37 = add <16 x i8> %31, splat (i8 120)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !163

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 120)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !164

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %101, !llvm.loop !165

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, 120
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !166

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = icmp eq i8 %79, %82
  br i1 %83, label %65, label %61

84:                                               ; preds = %9, %96
  %85 = phi i32 [ %97, %96 ], [ %5, %9 ]
  %86 = phi double [ %98, %96 ], [ %10, %9 ]
  %87 = phi i32 [ %99, %96 ], [ 0, %9 ]
  %88 = fptoui double %86 to i8
  %89 = and i8 %88, 3
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %84
  %92 = load i32, ptr @current_test, align 4, !tbaa !11
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %92)
  %94 = load double, ptr @init_value, align 8, !tbaa !33
  %95 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %96

96:                                               ; preds = %84, %91
  %97 = phi i32 [ %85, %84 ], [ %95, %91 ]
  %98 = phi double [ %86, %84 ], [ %94, %91 ]
  %99 = add nuw nsw i32 %87, 1
  %100 = icmp slt i32 %99, %97
  br i1 %100, label %84, label %101, !llvm.loop !165

101:                                              ; preds = %96, %65, %3
  %102 = tail call i64 @clock() #17
  store i64 %102, ptr @end_time, align 8, !tbaa !30
  %103 = load i64, ptr @start_time, align 8, !tbaa !30
  %104 = load ptr, ptr @results, align 8, !tbaa !6
  %105 = icmp ne ptr %104, null
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %107 = load i32, ptr @current_test, align 4
  %108 = icmp slt i32 %107, %106
  %109 = select i1 %105, i1 %108, i1 false
  br i1 %109, label %121, label %110

110:                                              ; preds = %101
  %111 = add nsw i32 %106, 10
  store i32 %111, ptr @allocated_results, align 4, !tbaa !11
  %112 = sext i32 %111 to i64
  %113 = shl nsw i64 %112, 4
  %114 = tail call ptr @realloc(ptr noundef %104, i64 noundef %113) #14
  store ptr %114, ptr @results, align 8, !tbaa !6
  %115 = icmp eq ptr %114, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %110
  %117 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %121

118:                                              ; preds = %110
  %119 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %120 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %119)
  tail call void @exit(i32 noundef -1) #15
  unreachable

121:                                              ; preds = %101, %116
  %122 = phi i32 [ %117, %116 ], [ %107, %101 ]
  %123 = phi ptr [ %114, %116 ], [ %104, %101 ]
  %124 = sub nsw i64 %102, %103
  %125 = sitofp i64 %124 to double
  %126 = fdiv double %125, 1.000000e+06
  %127 = sext i32 %122 to i64
  %128 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127
  store double %126, ptr %128, align 8, !tbaa !13
  %129 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127, i32 1
  store ptr %2, ptr %129, align 8, !tbaa !17
  %130 = add nsw i32 %122, 1
  store i32 %130, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh22custom_constant_divideIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = udiv <16 x i8> %34, splat (i8 5)
  %37 = udiv <16 x i8> %35, splat (i8 5)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !167

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = udiv <8 x i8> %54, splat (i8 5)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !168

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !169

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = udiv i8 %73, 5
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !170

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = udiv i8 %81, 5
  %83 = shl i8 %82, 6
  %84 = icmp eq i8 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = udiv i8 %89, 5
  %91 = and i8 %90, 3
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !169

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh31custom_multiple_constant_divideIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = udiv <16 x i8> %34, splat (i8 120)
  %37 = udiv <16 x i8> %35, splat (i8 120)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !171

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = udiv <8 x i8> %54, splat (i8 120)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !172

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %101, !llvm.loop !173

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = udiv i8 %73, 120
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !174

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = udiv i8 %81, 120
  %83 = shl nuw i8 %82, 6
  %84 = icmp eq i8 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %96
  %86 = phi i32 [ %97, %96 ], [ %5, %9 ]
  %87 = phi double [ %98, %96 ], [ %10, %9 ]
  %88 = phi i32 [ %99, %96 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = icmp ult i8 %89, 120
  br i1 %90, label %96, label %91

91:                                               ; preds = %85
  %92 = load i32, ptr @current_test, align 4, !tbaa !11
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %92)
  %94 = load double, ptr @init_value, align 8, !tbaa !33
  %95 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %96

96:                                               ; preds = %85, %91
  %97 = phi i32 [ %86, %85 ], [ %95, %91 ]
  %98 = phi double [ %87, %85 ], [ %94, %91 ]
  %99 = add nuw nsw i32 %88, 1
  %100 = icmp slt i32 %99, %97
  br i1 %100, label %85, label %101, !llvm.loop !173

101:                                              ; preds = %96, %65, %3
  %102 = tail call i64 @clock() #17
  store i64 %102, ptr @end_time, align 8, !tbaa !30
  %103 = load i64, ptr @start_time, align 8, !tbaa !30
  %104 = load ptr, ptr @results, align 8, !tbaa !6
  %105 = icmp ne ptr %104, null
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %107 = load i32, ptr @current_test, align 4
  %108 = icmp slt i32 %107, %106
  %109 = select i1 %105, i1 %108, i1 false
  br i1 %109, label %121, label %110

110:                                              ; preds = %101
  %111 = add nsw i32 %106, 10
  store i32 %111, ptr @allocated_results, align 4, !tbaa !11
  %112 = sext i32 %111 to i64
  %113 = shl nsw i64 %112, 4
  %114 = tail call ptr @realloc(ptr noundef %104, i64 noundef %113) #14
  store ptr %114, ptr @results, align 8, !tbaa !6
  %115 = icmp eq ptr %114, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %110
  %117 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %121

118:                                              ; preds = %110
  %119 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %120 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %119)
  tail call void @exit(i32 noundef -1) #15
  unreachable

121:                                              ; preds = %101, %116
  %122 = phi i32 [ %117, %116 ], [ %107, %101 ]
  %123 = phi ptr [ %114, %116 ], [ %104, %101 ]
  %124 = sub nsw i64 %102, %103
  %125 = sitofp i64 %124 to double
  %126 = fdiv double %125, 1.000000e+06
  %127 = sext i32 %122 to i64
  %128 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127
  store double %126, ptr %128, align 8, !tbaa !13
  %129 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127, i32 1
  store ptr %2, ptr %129, align 8, !tbaa !17
  %130 = add nsw i32 %122, 1
  store i32 %130, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh32custom_multiple_constant_divide2IhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %30, splat (i8 2)
  %37 = add <16 x i8> %31, splat (i8 2)
  %38 = add <16 x i8> %36, %34
  %39 = add <16 x i8> %37, %35
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !175

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = add <8 x i8> %52, splat (i8 2)
  %56 = add <8 x i8> %55, %54
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !176

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !177

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = add i8 %71, 2
  %75 = add i8 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !178

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !177

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh30custom_multiple_constant_mixedIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %97

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %80

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %62
  %22 = phi i32 [ %63, %62 ], [ %5, %11 ]
  %23 = phi i32 [ %64, %62 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %43, %56, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %43 ], [ %19, %56 ]
  %26 = phi i8 [ 0, %21 ], [ %42, %43 ], [ %57, %56 ]
  br label %66

27:                                               ; preds = %21
  br i1 %14, label %44, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %38, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %36, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %37, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = add <16 x i8> %34, %30
  %37 = add <16 x i8> %35, %31
  %38 = add nuw i64 %29, 32
  %39 = icmp eq i64 %38, %15
  br i1 %39, label %40, label %28, !llvm.loop !179

40:                                               ; preds = %28
  %41 = add <16 x i8> %37, %36
  %42 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %41)
  br i1 %16, label %74, label %43

43:                                               ; preds = %40
  br i1 %18, label %24, label %44

44:                                               ; preds = %43, %27
  %45 = phi i64 [ %15, %43 ], [ 0, %27 ]
  %46 = phi i8 [ %42, %43 ], [ 0, %27 ]
  %47 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %54, %48 ]
  %50 = phi <8 x i8> [ %47, %44 ], [ %53, %48 ]
  %51 = getelementptr inbounds nuw i8, ptr %0, i64 %49
  %52 = load <8 x i8>, ptr %51, align 1, !tbaa !34
  %53 = add <8 x i8> %52, %50
  %54 = add nuw i64 %49, 8
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %48, !llvm.loop !180

56:                                               ; preds = %48
  %57 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %53)
  br i1 %20, label %74, label %24

58:                                               ; preds = %74
  %59 = load i32, ptr @current_test, align 4, !tbaa !11
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %59)
  %61 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %62

62:                                               ; preds = %58, %74
  %63 = phi i32 [ %61, %58 ], [ %22, %74 ]
  %64 = add nuw nsw i32 %23, 1
  %65 = icmp slt i32 %64, %63
  br i1 %65, label %21, label %97, !llvm.loop !181

66:                                               ; preds = %24, %66
  %67 = phi i64 [ %72, %66 ], [ %25, %24 ]
  %68 = phi i8 [ %71, %66 ], [ %26, %24 ]
  %69 = getelementptr inbounds nuw i8, ptr %0, i64 %67
  %70 = load i8, ptr %69, align 1, !tbaa !34
  %71 = add i8 %70, %68
  %72 = add nuw nsw i64 %67, 1
  %73 = icmp eq i64 %72, %12
  br i1 %73, label %74, label %66, !llvm.loop !182

74:                                               ; preds = %66, %56, %40
  %75 = phi i8 [ %42, %40 ], [ %57, %56 ], [ %71, %66 ]
  %76 = load double, ptr @init_value, align 8, !tbaa !33
  %77 = fptoui double %76 to i8
  %78 = shl i8 %77, 6
  %79 = icmp eq i8 %75, %78
  br i1 %79, label %62, label %58

80:                                               ; preds = %9, %92
  %81 = phi i32 [ %93, %92 ], [ %5, %9 ]
  %82 = phi double [ %94, %92 ], [ %10, %9 ]
  %83 = phi i32 [ %95, %92 ], [ 0, %9 ]
  %84 = fptoui double %82 to i8
  %85 = and i8 %84, 3
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !11
  %89 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %88)
  %90 = load double, ptr @init_value, align 8, !tbaa !33
  %91 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %92

92:                                               ; preds = %80, %87
  %93 = phi i32 [ %81, %80 ], [ %91, %87 ]
  %94 = phi double [ %82, %80 ], [ %90, %87 ]
  %95 = add nuw nsw i32 %83, 1
  %96 = icmp slt i32 %95, %93
  br i1 %96, label %80, label %97, !llvm.loop !181

97:                                               ; preds = %92, %62, %3
  %98 = tail call i64 @clock() #17
  store i64 %98, ptr @end_time, align 8, !tbaa !30
  %99 = load i64, ptr @start_time, align 8, !tbaa !30
  %100 = load ptr, ptr @results, align 8, !tbaa !6
  %101 = icmp ne ptr %100, null
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %103 = load i32, ptr @current_test, align 4
  %104 = icmp slt i32 %103, %102
  %105 = select i1 %101, i1 %104, i1 false
  br i1 %105, label %117, label %106

106:                                              ; preds = %97
  %107 = add nsw i32 %102, 10
  store i32 %107, ptr @allocated_results, align 4, !tbaa !11
  %108 = sext i32 %107 to i64
  %109 = shl nsw i64 %108, 4
  %110 = tail call ptr @realloc(ptr noundef %100, i64 noundef %109) #14
  store ptr %110, ptr @results, align 8, !tbaa !6
  %111 = icmp eq ptr %110, null
  br i1 %111, label %114, label %112

112:                                              ; preds = %106
  %113 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %117

114:                                              ; preds = %106
  %115 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %116 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %115)
  tail call void @exit(i32 noundef -1) #15
  unreachable

117:                                              ; preds = %97, %112
  %118 = phi i32 [ %113, %112 ], [ %103, %97 ]
  %119 = phi ptr [ %110, %112 ], [ %100, %97 ]
  %120 = sub nsw i64 %98, %99
  %121 = sitofp i64 %120 to double
  %122 = fdiv double %121, 1.000000e+06
  %123 = sext i32 %118 to i64
  %124 = getelementptr inbounds %struct.one_result, ptr %119, i64 %123
  store double %122, ptr %124, align 8, !tbaa !13
  %125 = getelementptr inbounds %struct.one_result, ptr %119, i64 %123, i32 1
  store ptr %2, ptr %125, align 8, !tbaa !17
  %126 = add nsw i32 %118, 1
  store i32 %126, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_andIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = and <16 x i8> %34, splat (i8 10)
  %37 = and <16 x i8> %35, splat (i8 10)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !183

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = and <8 x i8> %54, splat (i8 10)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !184

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !185

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = and i8 %73, 10
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !186

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = and i8 %82, -128
  %84 = icmp eq i8 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 2
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !185

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_andIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = and <16 x i8> %34, splat (i8 14)
  %37 = and <16 x i8> %35, splat (i8 14)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !187

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = and <8 x i8> %54, splat (i8 14)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !188

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !189

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = and i8 %73, 14
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !190

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = and i8 %82, -128
  %84 = icmp eq i8 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 2
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !189

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh18custom_constant_orIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %90

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %83

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 2147483616
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483640
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i8 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <16 x i8> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <16 x i8> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i8, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <16 x i8>, ptr %30, align 1, !tbaa !34
  %33 = load <16 x i8>, ptr %31, align 1, !tbaa !34
  %34 = or <16 x i8> %32, splat (i8 10)
  %35 = or <16 x i8> %33, splat (i8 10)
  %36 = add <16 x i8> %34, %28
  %37 = add <16 x i8> %35, %29
  %38 = add nuw i64 %27, 32
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !191

40:                                               ; preds = %26
  %41 = add <16 x i8> %37, %36
  %42 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i8 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <8 x i8> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i8, ptr %0, i64 %49
  %52 = load <8 x i8>, ptr %51, align 1, !tbaa !34
  %53 = or <8 x i8> %52, splat (i8 10)
  %54 = add <8 x i8> %53, %50
  %55 = add nuw i64 %49, 8
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !192

57:                                               ; preds = %48
  %58 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %90, !llvm.loop !193

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i8 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !34
  %72 = or i8 %71, 10
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !194

76:                                               ; preds = %67, %57, %40
  %77 = phi i8 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = load double, ptr @init_value, align 8, !tbaa !33
  %79 = fptoui double %78 to i8
  %80 = shl i8 %79, 6
  %81 = or i8 %80, -128
  %82 = icmp eq i8 %77, %81
  br i1 %82, label %63, label %59

83:                                               ; preds = %7, %83
  %84 = phi i32 [ %87, %83 ], [ 0, %7 ]
  %85 = load i32, ptr @current_test, align 4, !tbaa !11
  %86 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %85)
  %87 = add nuw nsw i32 %84, 1
  %88 = load i32, ptr @iterations, align 4, !tbaa !11
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %83, label %90, !llvm.loop !193

90:                                               ; preds = %83, %63, %3
  %91 = tail call i64 @clock() #17
  store i64 %91, ptr @end_time, align 8, !tbaa !30
  %92 = load i64, ptr @start_time, align 8, !tbaa !30
  %93 = load ptr, ptr @results, align 8, !tbaa !6
  %94 = icmp ne ptr %93, null
  %95 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %96 = load i32, ptr @current_test, align 4
  %97 = icmp slt i32 %96, %95
  %98 = select i1 %94, i1 %97, i1 false
  br i1 %98, label %110, label %99

99:                                               ; preds = %90
  %100 = add nsw i32 %95, 10
  store i32 %100, ptr @allocated_results, align 4, !tbaa !11
  %101 = sext i32 %100 to i64
  %102 = shl nsw i64 %101, 4
  %103 = tail call ptr @realloc(ptr noundef %93, i64 noundef %102) #14
  store ptr %103, ptr @results, align 8, !tbaa !6
  %104 = icmp eq ptr %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %99
  %106 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %110

107:                                              ; preds = %99
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %108)
  tail call void @exit(i32 noundef -1) #15
  unreachable

110:                                              ; preds = %90, %105
  %111 = phi i32 [ %106, %105 ], [ %96, %90 ]
  %112 = phi ptr [ %103, %105 ], [ %93, %90 ]
  %113 = sub nsw i64 %91, %92
  %114 = sitofp i64 %113 to double
  %115 = fdiv double %114, 1.000000e+06
  %116 = sext i32 %111 to i64
  %117 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116
  store double %115, ptr %117, align 8, !tbaa !13
  %118 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116, i32 1
  store ptr %2, ptr %118, align 8, !tbaa !17
  %119 = add nsw i32 %111, 1
  store i32 %119, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh27custom_multiple_constant_orIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %86

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %79

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = icmp ult i32 %1, 32
  %13 = and i64 %10, 2147483616
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 24
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483640
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i8 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <16 x i8> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <16 x i8> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i8, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <16 x i8>, ptr %30, align 1, !tbaa !34
  %33 = load <16 x i8>, ptr %31, align 1, !tbaa !34
  %34 = or <16 x i8> %32, splat (i8 63)
  %35 = or <16 x i8> %33, splat (i8 63)
  %36 = add <16 x i8> %34, %28
  %37 = add <16 x i8> %35, %29
  %38 = add nuw i64 %27, 32
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !195

40:                                               ; preds = %26
  %41 = add <16 x i8> %37, %36
  %42 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i8 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <8 x i8> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i8, ptr %0, i64 %49
  %52 = load <8 x i8>, ptr %51, align 1, !tbaa !34
  %53 = or <8 x i8> %52, splat (i8 63)
  %54 = add <8 x i8> %53, %50
  %55 = add nuw i64 %49, 8
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !196

57:                                               ; preds = %48
  %58 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %86, !llvm.loop !197

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i8 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i8, ptr %0, i64 %68
  %71 = load i8, ptr %70, align 1, !tbaa !34
  %72 = or i8 %71, 63
  %73 = add i8 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !198

76:                                               ; preds = %67, %57, %40
  %77 = phi i8 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = icmp eq i8 %77, -64
  br i1 %78, label %63, label %59

79:                                               ; preds = %7, %79
  %80 = phi i32 [ %83, %79 ], [ 0, %7 ]
  %81 = load i32, ptr @current_test, align 4, !tbaa !11
  %82 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %81)
  %83 = add nuw nsw i32 %80, 1
  %84 = load i32, ptr @iterations, align 4, !tbaa !11
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %79, label %86, !llvm.loop !197

86:                                               ; preds = %79, %63, %3
  %87 = tail call i64 @clock() #17
  store i64 %87, ptr @end_time, align 8, !tbaa !30
  %88 = load i64, ptr @start_time, align 8, !tbaa !30
  %89 = load ptr, ptr @results, align 8, !tbaa !6
  %90 = icmp ne ptr %89, null
  %91 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %92 = load i32, ptr @current_test, align 4
  %93 = icmp slt i32 %92, %91
  %94 = select i1 %90, i1 %93, i1 false
  br i1 %94, label %106, label %95

95:                                               ; preds = %86
  %96 = add nsw i32 %91, 10
  store i32 %96, ptr @allocated_results, align 4, !tbaa !11
  %97 = sext i32 %96 to i64
  %98 = shl nsw i64 %97, 4
  %99 = tail call ptr @realloc(ptr noundef %89, i64 noundef %98) #14
  store ptr %99, ptr @results, align 8, !tbaa !6
  %100 = icmp eq ptr %99, null
  br i1 %100, label %103, label %101

101:                                              ; preds = %95
  %102 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %106

103:                                              ; preds = %95
  %104 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %105 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %104)
  tail call void @exit(i32 noundef -1) #15
  unreachable

106:                                              ; preds = %86, %101
  %107 = phi i32 [ %102, %101 ], [ %92, %86 ]
  %108 = phi ptr [ %99, %101 ], [ %89, %86 ]
  %109 = sub nsw i64 %87, %88
  %110 = sitofp i64 %109 to double
  %111 = fdiv double %110, 1.000000e+06
  %112 = sext i32 %107 to i64
  %113 = getelementptr inbounds %struct.one_result, ptr %108, i64 %112
  store double %111, ptr %113, align 8, !tbaa !13
  %114 = getelementptr inbounds %struct.one_result, ptr %108, i64 %112, i32 1
  store ptr %2, ptr %114, align 8, !tbaa !17
  %115 = add nsw i32 %107, 1
  store i32 %115, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh19custom_constant_xorIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = xor <16 x i8> %34, splat (i8 10)
  %37 = xor <16 x i8> %35, splat (i8 10)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !199

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = xor <8 x i8> %54, splat (i8 10)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !200

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !201

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = xor i8 %73, 10
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !202

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, -128
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 2
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !201

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIh28custom_multiple_constant_xorIhEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = icmp ult i32 %1, 32
  %15 = and i64 %12, 2147483616
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 24
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483640
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i8 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <16 x i8> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <16 x i8> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i8, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <16 x i8>, ptr %32, align 1, !tbaa !34
  %35 = load <16 x i8>, ptr %33, align 1, !tbaa !34
  %36 = xor <16 x i8> %34, splat (i8 49)
  %37 = xor <16 x i8> %35, splat (i8 49)
  %38 = add <16 x i8> %36, %30
  %39 = add <16 x i8> %37, %31
  %40 = add nuw i64 %29, 32
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !203

42:                                               ; preds = %28
  %43 = add <16 x i8> %39, %38
  %44 = tail call i8 @llvm.vector.reduce.add.v16i8(<16 x i8> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i8 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <8 x i8> <i8 poison, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <8 x i8> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i8, ptr %0, i64 %51
  %54 = load <8 x i8>, ptr %53, align 1, !tbaa !34
  %55 = xor <8 x i8> %54, splat (i8 49)
  %56 = add <8 x i8> %55, %52
  %57 = add nuw i64 %51, 8
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !204

59:                                               ; preds = %50
  %60 = tail call i8 @llvm.vector.reduce.add.v8i8(<8 x i8> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !205

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i8 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i8, ptr %0, i64 %70
  %73 = load i8, ptr %72, align 1, !tbaa !34
  %74 = xor i8 %73, 49
  %75 = add i8 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !206

78:                                               ; preds = %69, %59, %42
  %79 = phi i8 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i8
  %82 = shl i8 %81, 6
  %83 = xor i8 %82, %79
  %84 = icmp eq i8 %83, 64
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i8
  %90 = and i8 %89, 3
  %91 = icmp eq i8 %90, 1
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !205

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs10custom_twoIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !207

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !207

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_add_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !208

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !208

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_sub_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !209

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !209

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs25custom_multiply_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 6
  %12 = icmp eq i16 %11, -17536
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !210

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !210

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs23custom_divide_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !211

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !211

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_mod_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !212

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !212

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs22custom_equal_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs25custom_notequal_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !213

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !213

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_greaterthan_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !214

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !214

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs25custom_lessthan_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs33custom_greaterthanequal_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !215

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !215

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs30custom_lessthanequal_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_and_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !216

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !216

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_or_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 31
  %12 = icmp eq i16 %11, -14144
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !217

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !217

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs20custom_xor_constantsIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 29
  %12 = icmp eq i16 %11, -30144
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !218

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !218

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_addIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 10)
  %37 = add <8 x i16> %31, splat (i16 10)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !219

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 10)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !220

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !221

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, 10
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !222

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, 14464
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, -14464
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !221

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_addIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 10)
  %37 = add <8 x i16> %31, splat (i16 10)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !223

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 10)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !224

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !225

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, 10
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !226

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, 14464
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, -14464
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !225

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_subIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 -10)
  %37 = add <8 x i16> %31, splat (i16 -10)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !227

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 -10)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !228

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !229

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, -10
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !230

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, -14464
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, 14464
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !229

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_subIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 -10)
  %37 = add <8 x i16> %31, splat (i16 -10)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !231

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 -10)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !232

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !233

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, -10
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !234

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, -14464
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, 14464
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !233

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs24custom_constant_multiplyIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %84

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = mul <8 x i16> %34, splat (i16 120)
  %37 = mul <8 x i16> %35, splat (i16 120)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !235

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = mul <4 x i16> %54, splat (i16 120)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !236

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %101, !llvm.loop !237

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = mul i16 %73, 120
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !238

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = mul i16 %81, -23040
  %83 = icmp eq i16 %79, %82
  br i1 %83, label %65, label %61

84:                                               ; preds = %9, %96
  %85 = phi i32 [ %97, %96 ], [ %5, %9 ]
  %86 = phi double [ %98, %96 ], [ %10, %9 ]
  %87 = phi i32 [ %99, %96 ], [ 0, %9 ]
  %88 = fptosi double %86 to i16
  %89 = mul i16 %88, -23040
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %84
  %92 = load i32, ptr @current_test, align 4, !tbaa !11
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %92)
  %94 = load double, ptr @init_value, align 8, !tbaa !33
  %95 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %96

96:                                               ; preds = %84, %91
  %97 = phi i32 [ %85, %84 ], [ %95, %91 ]
  %98 = phi double [ %86, %84 ], [ %94, %91 ]
  %99 = add nuw nsw i32 %87, 1
  %100 = icmp slt i32 %99, %97
  br i1 %100, label %84, label %101, !llvm.loop !237

101:                                              ; preds = %96, %65, %3
  %102 = tail call i64 @clock() #17
  store i64 %102, ptr @end_time, align 8, !tbaa !30
  %103 = load i64, ptr @start_time, align 8, !tbaa !30
  %104 = load ptr, ptr @results, align 8, !tbaa !6
  %105 = icmp ne ptr %104, null
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %107 = load i32, ptr @current_test, align 4
  %108 = icmp slt i32 %107, %106
  %109 = select i1 %105, i1 %108, i1 false
  br i1 %109, label %121, label %110

110:                                              ; preds = %101
  %111 = add nsw i32 %106, 10
  store i32 %111, ptr @allocated_results, align 4, !tbaa !11
  %112 = sext i32 %111 to i64
  %113 = shl nsw i64 %112, 4
  %114 = tail call ptr @realloc(ptr noundef %104, i64 noundef %113) #14
  store ptr %114, ptr @results, align 8, !tbaa !6
  %115 = icmp eq ptr %114, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %110
  %117 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %121

118:                                              ; preds = %110
  %119 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %120 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %119)
  tail call void @exit(i32 noundef -1) #15
  unreachable

121:                                              ; preds = %101, %116
  %122 = phi i32 [ %117, %116 ], [ %107, %101 ]
  %123 = phi ptr [ %114, %116 ], [ %104, %101 ]
  %124 = sub nsw i64 %102, %103
  %125 = sitofp i64 %124 to double
  %126 = fdiv double %125, 1.000000e+06
  %127 = sext i32 %122 to i64
  %128 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127
  store double %126, ptr %128, align 8, !tbaa !13
  %129 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127, i32 1
  store ptr %2, ptr %129, align 8, !tbaa !17
  %130 = add nsw i32 %122, 1
  store i32 %130, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs33custom_multiple_constant_multiplyIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %84

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = mul <8 x i16> %34, splat (i16 120)
  %37 = mul <8 x i16> %35, splat (i16 120)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !239

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = mul <4 x i16> %54, splat (i16 120)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !240

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %101, !llvm.loop !241

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = mul i16 %73, 120
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !242

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = mul i16 %81, -23040
  %83 = icmp eq i16 %79, %82
  br i1 %83, label %65, label %61

84:                                               ; preds = %9, %96
  %85 = phi i32 [ %97, %96 ], [ %5, %9 ]
  %86 = phi double [ %98, %96 ], [ %10, %9 ]
  %87 = phi i32 [ %99, %96 ], [ 0, %9 ]
  %88 = fptosi double %86 to i16
  %89 = mul i16 %88, -23040
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %84
  %92 = load i32, ptr @current_test, align 4, !tbaa !11
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %92)
  %94 = load double, ptr @init_value, align 8, !tbaa !33
  %95 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %96

96:                                               ; preds = %84, %91
  %97 = phi i32 [ %85, %84 ], [ %95, %91 ]
  %98 = phi double [ %86, %84 ], [ %94, %91 ]
  %99 = add nuw nsw i32 %87, 1
  %100 = icmp slt i32 %99, %97
  br i1 %100, label %84, label %101, !llvm.loop !241

101:                                              ; preds = %96, %65, %3
  %102 = tail call i64 @clock() #17
  store i64 %102, ptr @end_time, align 8, !tbaa !30
  %103 = load i64, ptr @start_time, align 8, !tbaa !30
  %104 = load ptr, ptr @results, align 8, !tbaa !6
  %105 = icmp ne ptr %104, null
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %107 = load i32, ptr @current_test, align 4
  %108 = icmp slt i32 %107, %106
  %109 = select i1 %105, i1 %108, i1 false
  br i1 %109, label %121, label %110

110:                                              ; preds = %101
  %111 = add nsw i32 %106, 10
  store i32 %111, ptr @allocated_results, align 4, !tbaa !11
  %112 = sext i32 %111 to i64
  %113 = shl nsw i64 %112, 4
  %114 = tail call ptr @realloc(ptr noundef %104, i64 noundef %113) #14
  store ptr %114, ptr @results, align 8, !tbaa !6
  %115 = icmp eq ptr %114, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %110
  %117 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %121

118:                                              ; preds = %110
  %119 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %120 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %119)
  tail call void @exit(i32 noundef -1) #15
  unreachable

121:                                              ; preds = %101, %116
  %122 = phi i32 [ %117, %116 ], [ %107, %101 ]
  %123 = phi ptr [ %114, %116 ], [ %104, %101 ]
  %124 = sub nsw i64 %102, %103
  %125 = sitofp i64 %124 to double
  %126 = fdiv double %125, 1.000000e+06
  %127 = sext i32 %122 to i64
  %128 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127
  store double %126, ptr %128, align 8, !tbaa !13
  %129 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127, i32 1
  store ptr %2, ptr %129, align 8, !tbaa !17
  %130 = add nsw i32 %122, 1
  store i32 %130, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs34custom_multiple_constant_multiply2IsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 120)
  %37 = add <8 x i16> %31, splat (i16 120)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !243

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 120)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !244

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !245

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, 120
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !246

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, -23040
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, 23040
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !245

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs22custom_constant_divideIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = sdiv <8 x i16> %34, splat (i16 5)
  %37 = sdiv <8 x i16> %35, splat (i16 5)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !247

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = sdiv <4 x i16> %54, splat (i16 5)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !248

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !249

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = sdiv i16 %73, 5
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !250

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = sdiv i16 %81, 5
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = sdiv i16 %89, 5
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !249

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs31custom_multiple_constant_divideIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = sdiv <8 x i16> %34, splat (i16 120)
  %37 = sdiv <8 x i16> %35, splat (i16 120)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !251

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = sdiv <4 x i16> %54, splat (i16 120)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !252

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !253

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = sdiv i16 %73, 120
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !254

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = sdiv i16 %81, 120
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = sdiv i16 %89, 120
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !253

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs32custom_multiple_constant_divide2IsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 2)
  %37 = add <8 x i16> %31, splat (i16 2)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !255

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 2)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !256

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !257

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, 2
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !258

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, 16000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, -16000
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !257

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs30custom_multiple_constant_mixedIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %97

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %80

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %62
  %22 = phi i32 [ %63, %62 ], [ %5, %11 ]
  %23 = phi i32 [ %64, %62 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %43, %56, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %43 ], [ %19, %56 ]
  %26 = phi i16 [ 0, %21 ], [ %42, %43 ], [ %57, %56 ]
  br label %66

27:                                               ; preds = %21
  br i1 %14, label %44, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %38, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %36, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %37, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %34, %30
  %37 = add <8 x i16> %35, %31
  %38 = add nuw i64 %29, 16
  %39 = icmp eq i64 %38, %15
  br i1 %39, label %40, label %28, !llvm.loop !259

40:                                               ; preds = %28
  %41 = add <8 x i16> %37, %36
  %42 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %41)
  br i1 %16, label %74, label %43

43:                                               ; preds = %40
  br i1 %18, label %24, label %44

44:                                               ; preds = %43, %27
  %45 = phi i64 [ %15, %43 ], [ 0, %27 ]
  %46 = phi i16 [ %42, %43 ], [ 0, %27 ]
  %47 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %54, %48 ]
  %50 = phi <4 x i16> [ %47, %44 ], [ %53, %48 ]
  %51 = getelementptr inbounds nuw i16, ptr %0, i64 %49
  %52 = load <4 x i16>, ptr %51, align 2, !tbaa !35
  %53 = add <4 x i16> %52, %50
  %54 = add nuw i64 %49, 4
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %48, !llvm.loop !260

56:                                               ; preds = %48
  %57 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %53)
  br i1 %20, label %74, label %24

58:                                               ; preds = %74
  %59 = load i32, ptr @current_test, align 4, !tbaa !11
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %59)
  %61 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %62

62:                                               ; preds = %58, %74
  %63 = phi i32 [ %61, %58 ], [ %22, %74 ]
  %64 = add nuw nsw i32 %23, 1
  %65 = icmp slt i32 %64, %63
  br i1 %65, label %21, label %97, !llvm.loop !261

66:                                               ; preds = %24, %66
  %67 = phi i64 [ %72, %66 ], [ %25, %24 ]
  %68 = phi i16 [ %71, %66 ], [ %26, %24 ]
  %69 = getelementptr inbounds nuw i16, ptr %0, i64 %67
  %70 = load i16, ptr %69, align 2, !tbaa !35
  %71 = add i16 %70, %68
  %72 = add nuw nsw i64 %67, 1
  %73 = icmp eq i64 %72, %12
  br i1 %73, label %74, label %66, !llvm.loop !262

74:                                               ; preds = %66, %56, %40
  %75 = phi i16 [ %42, %40 ], [ %57, %56 ], [ %71, %66 ]
  %76 = load double, ptr @init_value, align 8, !tbaa !33
  %77 = fptosi double %76 to i16
  %78 = mul i16 %77, 8000
  %79 = icmp eq i16 %75, %78
  br i1 %79, label %62, label %58

80:                                               ; preds = %9, %92
  %81 = phi i32 [ %93, %92 ], [ %5, %9 ]
  %82 = phi double [ %94, %92 ], [ %10, %9 ]
  %83 = phi i32 [ %95, %92 ], [ 0, %9 ]
  %84 = fptosi double %82 to i16
  %85 = mul i16 %84, 8000
  %86 = icmp eq i16 %85, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !11
  %89 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %88)
  %90 = load double, ptr @init_value, align 8, !tbaa !33
  %91 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %92

92:                                               ; preds = %80, %87
  %93 = phi i32 [ %81, %80 ], [ %91, %87 ]
  %94 = phi double [ %82, %80 ], [ %90, %87 ]
  %95 = add nuw nsw i32 %83, 1
  %96 = icmp slt i32 %95, %93
  br i1 %96, label %80, label %97, !llvm.loop !261

97:                                               ; preds = %92, %62, %3
  %98 = tail call i64 @clock() #17
  store i64 %98, ptr @end_time, align 8, !tbaa !30
  %99 = load i64, ptr @start_time, align 8, !tbaa !30
  %100 = load ptr, ptr @results, align 8, !tbaa !6
  %101 = icmp ne ptr %100, null
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %103 = load i32, ptr @current_test, align 4
  %104 = icmp slt i32 %103, %102
  %105 = select i1 %101, i1 %104, i1 false
  br i1 %105, label %117, label %106

106:                                              ; preds = %97
  %107 = add nsw i32 %102, 10
  store i32 %107, ptr @allocated_results, align 4, !tbaa !11
  %108 = sext i32 %107 to i64
  %109 = shl nsw i64 %108, 4
  %110 = tail call ptr @realloc(ptr noundef %100, i64 noundef %109) #14
  store ptr %110, ptr @results, align 8, !tbaa !6
  %111 = icmp eq ptr %110, null
  br i1 %111, label %114, label %112

112:                                              ; preds = %106
  %113 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %117

114:                                              ; preds = %106
  %115 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %116 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %115)
  tail call void @exit(i32 noundef -1) #15
  unreachable

117:                                              ; preds = %97, %112
  %118 = phi i32 [ %113, %112 ], [ %103, %97 ]
  %119 = phi ptr [ %110, %112 ], [ %100, %97 ]
  %120 = sub nsw i64 %98, %99
  %121 = sitofp i64 %120 to double
  %122 = fdiv double %121, 1.000000e+06
  %123 = sext i32 %118 to i64
  %124 = getelementptr inbounds %struct.one_result, ptr %119, i64 %123
  store double %122, ptr %124, align 8, !tbaa !13
  %125 = getelementptr inbounds %struct.one_result, ptr %119, i64 %123, i32 1
  store ptr %2, ptr %125, align 8, !tbaa !17
  %126 = add nsw i32 %118, 1
  store i32 %126, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_andIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = and <8 x i16> %34, splat (i16 10)
  %37 = and <8 x i16> %35, splat (i16 10)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !263

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = and <4 x i16> %54, splat (i16 10)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !264

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !265

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = and i16 %73, 10
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !266

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = and i16 %81, 10
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = and i16 %89, 10
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !265

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_andIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = and <8 x i16> %34, splat (i16 14)
  %37 = and <8 x i16> %35, splat (i16 14)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !267

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = and <4 x i16> %54, splat (i16 14)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !268

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !269

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = and i16 %73, 14
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !270

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = and i16 %81, 14
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = and i16 %89, 14
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !269

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs18custom_constant_orIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %90

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %83

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 4
  %12 = icmp ult i32 %1, 16
  %13 = and i64 %10, 2147483632
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 12
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483644
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i16 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <8 x i16> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <8 x i16> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i16, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <8 x i16>, ptr %30, align 2, !tbaa !35
  %33 = load <8 x i16>, ptr %31, align 2, !tbaa !35
  %34 = or <8 x i16> %32, splat (i16 10)
  %35 = or <8 x i16> %33, splat (i16 10)
  %36 = add <8 x i16> %34, %28
  %37 = add <8 x i16> %35, %29
  %38 = add nuw i64 %27, 16
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !271

40:                                               ; preds = %26
  %41 = add <8 x i16> %37, %36
  %42 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i16 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <4 x i16> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i16, ptr %0, i64 %49
  %52 = load <4 x i16>, ptr %51, align 2, !tbaa !35
  %53 = or <4 x i16> %52, splat (i16 10)
  %54 = add <4 x i16> %53, %50
  %55 = add nuw i64 %49, 4
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !272

57:                                               ; preds = %48
  %58 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %90, !llvm.loop !273

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i16 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i16, ptr %0, i64 %68
  %71 = load i16, ptr %70, align 2, !tbaa !35
  %72 = or i16 %71, 10
  %73 = add i16 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !274

76:                                               ; preds = %67, %57, %40
  %77 = phi i16 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = load double, ptr @init_value, align 8, !tbaa !33
  %79 = fptosi double %78 to i16
  %80 = or i16 %79, 10
  %81 = mul i16 %80, 8000
  %82 = icmp eq i16 %77, %81
  br i1 %82, label %63, label %59

83:                                               ; preds = %7, %83
  %84 = phi i32 [ %87, %83 ], [ 0, %7 ]
  %85 = load i32, ptr @current_test, align 4, !tbaa !11
  %86 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %85)
  %87 = add nuw nsw i32 %84, 1
  %88 = load i32, ptr @iterations, align 4, !tbaa !11
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %83, label %90, !llvm.loop !273

90:                                               ; preds = %83, %63, %3
  %91 = tail call i64 @clock() #17
  store i64 %91, ptr @end_time, align 8, !tbaa !30
  %92 = load i64, ptr @start_time, align 8, !tbaa !30
  %93 = load ptr, ptr @results, align 8, !tbaa !6
  %94 = icmp ne ptr %93, null
  %95 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %96 = load i32, ptr @current_test, align 4
  %97 = icmp slt i32 %96, %95
  %98 = select i1 %94, i1 %97, i1 false
  br i1 %98, label %110, label %99

99:                                               ; preds = %90
  %100 = add nsw i32 %95, 10
  store i32 %100, ptr @allocated_results, align 4, !tbaa !11
  %101 = sext i32 %100 to i64
  %102 = shl nsw i64 %101, 4
  %103 = tail call ptr @realloc(ptr noundef %93, i64 noundef %102) #14
  store ptr %103, ptr @results, align 8, !tbaa !6
  %104 = icmp eq ptr %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %99
  %106 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %110

107:                                              ; preds = %99
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %108)
  tail call void @exit(i32 noundef -1) #15
  unreachable

110:                                              ; preds = %90, %105
  %111 = phi i32 [ %106, %105 ], [ %96, %90 ]
  %112 = phi ptr [ %103, %105 ], [ %93, %90 ]
  %113 = sub nsw i64 %91, %92
  %114 = sitofp i64 %113 to double
  %115 = fdiv double %114, 1.000000e+06
  %116 = sext i32 %111 to i64
  %117 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116
  store double %115, ptr %117, align 8, !tbaa !13
  %118 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116, i32 1
  store ptr %2, ptr %118, align 8, !tbaa !17
  %119 = add nsw i32 %111, 1
  store i32 %119, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs27custom_multiple_constant_orIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %90

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %83

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 4
  %12 = icmp ult i32 %1, 16
  %13 = and i64 %10, 2147483632
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 12
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483644
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i16 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <8 x i16> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <8 x i16> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i16, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <8 x i16>, ptr %30, align 2, !tbaa !35
  %33 = load <8 x i16>, ptr %31, align 2, !tbaa !35
  %34 = or <8 x i16> %32, splat (i16 63)
  %35 = or <8 x i16> %33, splat (i16 63)
  %36 = add <8 x i16> %34, %28
  %37 = add <8 x i16> %35, %29
  %38 = add nuw i64 %27, 16
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !275

40:                                               ; preds = %26
  %41 = add <8 x i16> %37, %36
  %42 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i16 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <4 x i16> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i16, ptr %0, i64 %49
  %52 = load <4 x i16>, ptr %51, align 2, !tbaa !35
  %53 = or <4 x i16> %52, splat (i16 63)
  %54 = add <4 x i16> %53, %50
  %55 = add nuw i64 %49, 4
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !276

57:                                               ; preds = %48
  %58 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %90, !llvm.loop !277

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i16 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i16, ptr %0, i64 %68
  %71 = load i16, ptr %70, align 2, !tbaa !35
  %72 = or i16 %71, 63
  %73 = add i16 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !278

76:                                               ; preds = %67, %57, %40
  %77 = phi i16 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = load double, ptr @init_value, align 8, !tbaa !33
  %79 = fptosi double %78 to i16
  %80 = or i16 %79, 63
  %81 = mul i16 %80, 8000
  %82 = icmp eq i16 %77, %81
  br i1 %82, label %63, label %59

83:                                               ; preds = %7, %83
  %84 = phi i32 [ %87, %83 ], [ 0, %7 ]
  %85 = load i32, ptr @current_test, align 4, !tbaa !11
  %86 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %85)
  %87 = add nuw nsw i32 %84, 1
  %88 = load i32, ptr @iterations, align 4, !tbaa !11
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %83, label %90, !llvm.loop !277

90:                                               ; preds = %83, %63, %3
  %91 = tail call i64 @clock() #17
  store i64 %91, ptr @end_time, align 8, !tbaa !30
  %92 = load i64, ptr @start_time, align 8, !tbaa !30
  %93 = load ptr, ptr @results, align 8, !tbaa !6
  %94 = icmp ne ptr %93, null
  %95 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %96 = load i32, ptr @current_test, align 4
  %97 = icmp slt i32 %96, %95
  %98 = select i1 %94, i1 %97, i1 false
  br i1 %98, label %110, label %99

99:                                               ; preds = %90
  %100 = add nsw i32 %95, 10
  store i32 %100, ptr @allocated_results, align 4, !tbaa !11
  %101 = sext i32 %100 to i64
  %102 = shl nsw i64 %101, 4
  %103 = tail call ptr @realloc(ptr noundef %93, i64 noundef %102) #14
  store ptr %103, ptr @results, align 8, !tbaa !6
  %104 = icmp eq ptr %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %99
  %106 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %110

107:                                              ; preds = %99
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %108)
  tail call void @exit(i32 noundef -1) #15
  unreachable

110:                                              ; preds = %90, %105
  %111 = phi i32 [ %106, %105 ], [ %96, %90 ]
  %112 = phi ptr [ %103, %105 ], [ %93, %90 ]
  %113 = sub nsw i64 %91, %92
  %114 = sitofp i64 %113 to double
  %115 = fdiv double %114, 1.000000e+06
  %116 = sext i32 %111 to i64
  %117 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116
  store double %115, ptr %117, align 8, !tbaa !13
  %118 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116, i32 1
  store ptr %2, ptr %118, align 8, !tbaa !17
  %119 = add nsw i32 %111, 1
  store i32 %119, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs19custom_constant_xorIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = xor <8 x i16> %34, splat (i16 10)
  %37 = xor <8 x i16> %35, splat (i16 10)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !279

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = xor <4 x i16> %54, splat (i16 10)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !280

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !281

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = xor i16 %73, 10
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !282

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = xor i16 %81, 10
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = xor i16 %89, 10
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !281

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIs28custom_multiple_constant_xorIsEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = xor <8 x i16> %34, splat (i16 49)
  %37 = xor <8 x i16> %35, splat (i16 49)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !283

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = xor <4 x i16> %54, splat (i16 49)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !284

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !285

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = xor i16 %73, 49
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !286

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptosi double %80 to i16
  %82 = xor i16 %81, 49
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptosi double %87 to i16
  %90 = xor i16 %89, 49
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !285

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt10custom_twoItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !287

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !287

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_add_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !288

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !288

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_sub_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !289

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !289

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt25custom_multiply_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 6
  %12 = icmp eq i16 %11, -17536
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !290

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !290

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt23custom_divide_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !291

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !291

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_mod_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !292

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !292

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt22custom_equal_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt25custom_notequal_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !293

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !293

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_greaterthan_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !294

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !294

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt25custom_lessthan_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt33custom_greaterthanequal_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 65535
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !295

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !295

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt30custom_lessthanequal_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_and_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = and i32 %1, 32767
  %11 = icmp eq i32 %10, 8000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !296

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !296

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_or_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 31
  %12 = icmp eq i16 %11, -14144
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !297

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !297

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt20custom_xor_constantsItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %31

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %7
  %10 = trunc i32 %1 to i16
  %11 = mul i16 %10, 29
  %12 = icmp eq i16 %11, -30144
  br label %13

13:                                               ; preds = %9, %20
  %14 = phi i32 [ %21, %20 ], [ %5, %9 ]
  %15 = phi i32 [ %22, %20 ], [ 0, %9 ]
  br i1 %12, label %20, label %16

16:                                               ; preds = %13
  %17 = load i32, ptr @current_test, align 4, !tbaa !11
  %18 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %17)
  %19 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %20

20:                                               ; preds = %16, %13
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = add nuw nsw i32 %15, 1
  %23 = icmp slt i32 %22, %21
  br i1 %23, label %13, label %31, !llvm.loop !298

24:                                               ; preds = %7, %24
  %25 = phi i32 [ %28, %24 ], [ 0, %7 ]
  %26 = load i32, ptr @current_test, align 4, !tbaa !11
  %27 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %26)
  %28 = add nuw nsw i32 %25, 1
  %29 = load i32, ptr @iterations, align 4, !tbaa !11
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %24, label %31, !llvm.loop !298

31:                                               ; preds = %24, %20, %3
  %32 = tail call i64 @clock() #17
  store i64 %32, ptr @end_time, align 8, !tbaa !30
  %33 = load i64, ptr @start_time, align 8, !tbaa !30
  %34 = load ptr, ptr @results, align 8, !tbaa !6
  %35 = icmp ne ptr %34, null
  %36 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %37 = load i32, ptr @current_test, align 4
  %38 = icmp slt i32 %37, %36
  %39 = select i1 %35, i1 %38, i1 false
  br i1 %39, label %51, label %40

40:                                               ; preds = %31
  %41 = add nsw i32 %36, 10
  store i32 %41, ptr @allocated_results, align 4, !tbaa !11
  %42 = sext i32 %41 to i64
  %43 = shl nsw i64 %42, 4
  %44 = tail call ptr @realloc(ptr noundef %34, i64 noundef %43) #14
  store ptr %44, ptr @results, align 8, !tbaa !6
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %40
  %47 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %51

48:                                               ; preds = %40
  %49 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %50 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %49)
  tail call void @exit(i32 noundef -1) #15
  unreachable

51:                                               ; preds = %31, %46
  %52 = phi i32 [ %47, %46 ], [ %37, %31 ]
  %53 = phi ptr [ %44, %46 ], [ %34, %31 ]
  %54 = sub nsw i64 %32, %33
  %55 = sitofp i64 %54 to double
  %56 = fdiv double %55, 1.000000e+06
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57
  store double %56, ptr %58, align 8, !tbaa !13
  %59 = getelementptr inbounds %struct.one_result, ptr %53, i64 %57, i32 1
  store ptr %2, ptr %59, align 8, !tbaa !17
  %60 = add nsw i32 %52, 1
  store i32 %60, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_addItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 10)
  %37 = add <8 x i16> %31, splat (i16 10)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !299

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 10)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !300

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !301

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, 10
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !302

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, 14464
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, -14464
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !301

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_addItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 10)
  %37 = add <8 x i16> %31, splat (i16 10)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !303

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 10)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !304

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !305

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, 10
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !306

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, 14464
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, -14464
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !305

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_subItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 -10)
  %37 = add <8 x i16> %31, splat (i16 -10)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !307

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 -10)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !308

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !309

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, -10
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !310

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, -14464
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, 14464
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !309

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_subItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 -10)
  %37 = add <8 x i16> %31, splat (i16 -10)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !311

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 -10)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !312

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !313

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, -10
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !314

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, -14464
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, 14464
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !313

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt24custom_constant_multiplyItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %84

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = mul <8 x i16> %34, splat (i16 120)
  %37 = mul <8 x i16> %35, splat (i16 120)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !315

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = mul <4 x i16> %54, splat (i16 120)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !316

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %101, !llvm.loop !317

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = mul i16 %73, 120
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !318

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = mul i16 %81, -23040
  %83 = icmp eq i16 %79, %82
  br i1 %83, label %65, label %61

84:                                               ; preds = %9, %96
  %85 = phi i32 [ %97, %96 ], [ %5, %9 ]
  %86 = phi double [ %98, %96 ], [ %10, %9 ]
  %87 = phi i32 [ %99, %96 ], [ 0, %9 ]
  %88 = fptoui double %86 to i16
  %89 = mul i16 %88, -23040
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %84
  %92 = load i32, ptr @current_test, align 4, !tbaa !11
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %92)
  %94 = load double, ptr @init_value, align 8, !tbaa !33
  %95 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %96

96:                                               ; preds = %84, %91
  %97 = phi i32 [ %85, %84 ], [ %95, %91 ]
  %98 = phi double [ %86, %84 ], [ %94, %91 ]
  %99 = add nuw nsw i32 %87, 1
  %100 = icmp slt i32 %99, %97
  br i1 %100, label %84, label %101, !llvm.loop !317

101:                                              ; preds = %96, %65, %3
  %102 = tail call i64 @clock() #17
  store i64 %102, ptr @end_time, align 8, !tbaa !30
  %103 = load i64, ptr @start_time, align 8, !tbaa !30
  %104 = load ptr, ptr @results, align 8, !tbaa !6
  %105 = icmp ne ptr %104, null
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %107 = load i32, ptr @current_test, align 4
  %108 = icmp slt i32 %107, %106
  %109 = select i1 %105, i1 %108, i1 false
  br i1 %109, label %121, label %110

110:                                              ; preds = %101
  %111 = add nsw i32 %106, 10
  store i32 %111, ptr @allocated_results, align 4, !tbaa !11
  %112 = sext i32 %111 to i64
  %113 = shl nsw i64 %112, 4
  %114 = tail call ptr @realloc(ptr noundef %104, i64 noundef %113) #14
  store ptr %114, ptr @results, align 8, !tbaa !6
  %115 = icmp eq ptr %114, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %110
  %117 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %121

118:                                              ; preds = %110
  %119 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %120 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %119)
  tail call void @exit(i32 noundef -1) #15
  unreachable

121:                                              ; preds = %101, %116
  %122 = phi i32 [ %117, %116 ], [ %107, %101 ]
  %123 = phi ptr [ %114, %116 ], [ %104, %101 ]
  %124 = sub nsw i64 %102, %103
  %125 = sitofp i64 %124 to double
  %126 = fdiv double %125, 1.000000e+06
  %127 = sext i32 %122 to i64
  %128 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127
  store double %126, ptr %128, align 8, !tbaa !13
  %129 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127, i32 1
  store ptr %2, ptr %129, align 8, !tbaa !17
  %130 = add nsw i32 %122, 1
  store i32 %130, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt33custom_multiple_constant_multiplyItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %84

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = mul <8 x i16> %34, splat (i16 120)
  %37 = mul <8 x i16> %35, splat (i16 120)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !319

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = mul <4 x i16> %54, splat (i16 120)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !320

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %101, !llvm.loop !321

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = mul i16 %73, 120
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !322

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = mul i16 %81, -23040
  %83 = icmp eq i16 %79, %82
  br i1 %83, label %65, label %61

84:                                               ; preds = %9, %96
  %85 = phi i32 [ %97, %96 ], [ %5, %9 ]
  %86 = phi double [ %98, %96 ], [ %10, %9 ]
  %87 = phi i32 [ %99, %96 ], [ 0, %9 ]
  %88 = fptoui double %86 to i16
  %89 = mul i16 %88, -23040
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %84
  %92 = load i32, ptr @current_test, align 4, !tbaa !11
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %92)
  %94 = load double, ptr @init_value, align 8, !tbaa !33
  %95 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %96

96:                                               ; preds = %84, %91
  %97 = phi i32 [ %85, %84 ], [ %95, %91 ]
  %98 = phi double [ %86, %84 ], [ %94, %91 ]
  %99 = add nuw nsw i32 %87, 1
  %100 = icmp slt i32 %99, %97
  br i1 %100, label %84, label %101, !llvm.loop !321

101:                                              ; preds = %96, %65, %3
  %102 = tail call i64 @clock() #17
  store i64 %102, ptr @end_time, align 8, !tbaa !30
  %103 = load i64, ptr @start_time, align 8, !tbaa !30
  %104 = load ptr, ptr @results, align 8, !tbaa !6
  %105 = icmp ne ptr %104, null
  %106 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %107 = load i32, ptr @current_test, align 4
  %108 = icmp slt i32 %107, %106
  %109 = select i1 %105, i1 %108, i1 false
  br i1 %109, label %121, label %110

110:                                              ; preds = %101
  %111 = add nsw i32 %106, 10
  store i32 %111, ptr @allocated_results, align 4, !tbaa !11
  %112 = sext i32 %111 to i64
  %113 = shl nsw i64 %112, 4
  %114 = tail call ptr @realloc(ptr noundef %104, i64 noundef %113) #14
  store ptr %114, ptr @results, align 8, !tbaa !6
  %115 = icmp eq ptr %114, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %110
  %117 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %121

118:                                              ; preds = %110
  %119 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %120 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %119)
  tail call void @exit(i32 noundef -1) #15
  unreachable

121:                                              ; preds = %101, %116
  %122 = phi i32 [ %117, %116 ], [ %107, %101 ]
  %123 = phi ptr [ %114, %116 ], [ %104, %101 ]
  %124 = sub nsw i64 %102, %103
  %125 = sitofp i64 %124 to double
  %126 = fdiv double %125, 1.000000e+06
  %127 = sext i32 %122 to i64
  %128 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127
  store double %126, ptr %128, align 8, !tbaa !13
  %129 = getelementptr inbounds %struct.one_result, ptr %123, i64 %127, i32 1
  store ptr %2, ptr %129, align 8, !tbaa !17
  %130 = add nsw i32 %122, 1
  store i32 %130, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt34custom_multiple_constant_multiply2ItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 120)
  %37 = add <8 x i16> %31, splat (i16 120)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !323

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 120)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !324

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !325

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, 120
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !326

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, -23040
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, 23040
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !325

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt22custom_constant_divideItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = udiv <8 x i16> %34, splat (i16 5)
  %37 = udiv <8 x i16> %35, splat (i16 5)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !327

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = udiv <4 x i16> %54, splat (i16 5)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !328

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !329

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = udiv i16 %73, 5
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !330

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = udiv i16 %81, 5
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = udiv i16 %89, 5
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !329

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt31custom_multiple_constant_divideItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = udiv <8 x i16> %34, splat (i16 120)
  %37 = udiv <8 x i16> %35, splat (i16 120)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !331

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = udiv <4 x i16> %54, splat (i16 120)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !332

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !333

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = udiv i16 %73, 120
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !334

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = udiv i16 %81, 120
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = udiv i16 %89, 120
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !333

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt32custom_multiple_constant_divide2ItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %30, splat (i16 2)
  %37 = add <8 x i16> %31, splat (i16 2)
  %38 = add <8 x i16> %36, %34
  %39 = add <8 x i16> %37, %35
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !335

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = add <4 x i16> %52, splat (i16 2)
  %56 = add <4 x i16> %55, %54
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !336

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %102, !llvm.loop !337

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = add i16 %71, 2
  %75 = add i16 %74, %73
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !338

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = mul i16 %81, 8000
  %83 = add i16 %82, 16000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %97
  %86 = phi i32 [ %98, %97 ], [ %5, %9 ]
  %87 = phi double [ %99, %97 ], [ %10, %9 ]
  %88 = phi i32 [ %100, %97 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = mul i16 %89, 8000
  %91 = icmp eq i16 %90, -16000
  br i1 %91, label %97, label %92

92:                                               ; preds = %85
  %93 = load i32, ptr @current_test, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %93)
  %95 = load double, ptr @init_value, align 8, !tbaa !33
  %96 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %97

97:                                               ; preds = %85, %92
  %98 = phi i32 [ %86, %85 ], [ %96, %92 ]
  %99 = phi double [ %87, %85 ], [ %95, %92 ]
  %100 = add nuw nsw i32 %88, 1
  %101 = icmp slt i32 %100, %98
  br i1 %101, label %85, label %102, !llvm.loop !337

102:                                              ; preds = %97, %65, %3
  %103 = tail call i64 @clock() #17
  store i64 %103, ptr @end_time, align 8, !tbaa !30
  %104 = load i64, ptr @start_time, align 8, !tbaa !30
  %105 = load ptr, ptr @results, align 8, !tbaa !6
  %106 = icmp ne ptr %105, null
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = load i32, ptr @current_test, align 4
  %109 = icmp slt i32 %108, %107
  %110 = select i1 %106, i1 %109, i1 false
  br i1 %110, label %122, label %111

111:                                              ; preds = %102
  %112 = add nsw i32 %107, 10
  store i32 %112, ptr @allocated_results, align 4, !tbaa !11
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 4
  %115 = tail call ptr @realloc(ptr noundef %105, i64 noundef %114) #14
  store ptr %115, ptr @results, align 8, !tbaa !6
  %116 = icmp eq ptr %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %111
  %118 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %122

119:                                              ; preds = %111
  %120 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %121 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %120)
  tail call void @exit(i32 noundef -1) #15
  unreachable

122:                                              ; preds = %102, %117
  %123 = phi i32 [ %118, %117 ], [ %108, %102 ]
  %124 = phi ptr [ %115, %117 ], [ %105, %102 ]
  %125 = sub nsw i64 %103, %104
  %126 = sitofp i64 %125 to double
  %127 = fdiv double %126, 1.000000e+06
  %128 = sext i32 %123 to i64
  %129 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128
  store double %127, ptr %129, align 8, !tbaa !13
  %130 = getelementptr inbounds %struct.one_result, ptr %124, i64 %128, i32 1
  store ptr %2, ptr %130, align 8, !tbaa !17
  %131 = add nsw i32 %123, 1
  store i32 %131, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt30custom_multiple_constant_mixedItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %97

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %80

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %62
  %22 = phi i32 [ %63, %62 ], [ %5, %11 ]
  %23 = phi i32 [ %64, %62 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %43, %56, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %43 ], [ %19, %56 ]
  %26 = phi i16 [ 0, %21 ], [ %42, %43 ], [ %57, %56 ]
  br label %66

27:                                               ; preds = %21
  br i1 %14, label %44, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %38, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %36, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %37, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = add <8 x i16> %34, %30
  %37 = add <8 x i16> %35, %31
  %38 = add nuw i64 %29, 16
  %39 = icmp eq i64 %38, %15
  br i1 %39, label %40, label %28, !llvm.loop !339

40:                                               ; preds = %28
  %41 = add <8 x i16> %37, %36
  %42 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %41)
  br i1 %16, label %74, label %43

43:                                               ; preds = %40
  br i1 %18, label %24, label %44

44:                                               ; preds = %43, %27
  %45 = phi i64 [ %15, %43 ], [ 0, %27 ]
  %46 = phi i16 [ %42, %43 ], [ 0, %27 ]
  %47 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %54, %48 ]
  %50 = phi <4 x i16> [ %47, %44 ], [ %53, %48 ]
  %51 = getelementptr inbounds nuw i16, ptr %0, i64 %49
  %52 = load <4 x i16>, ptr %51, align 2, !tbaa !35
  %53 = add <4 x i16> %52, %50
  %54 = add nuw i64 %49, 4
  %55 = icmp eq i64 %54, %19
  br i1 %55, label %56, label %48, !llvm.loop !340

56:                                               ; preds = %48
  %57 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %53)
  br i1 %20, label %74, label %24

58:                                               ; preds = %74
  %59 = load i32, ptr @current_test, align 4, !tbaa !11
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %59)
  %61 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %62

62:                                               ; preds = %58, %74
  %63 = phi i32 [ %61, %58 ], [ %22, %74 ]
  %64 = add nuw nsw i32 %23, 1
  %65 = icmp slt i32 %64, %63
  br i1 %65, label %21, label %97, !llvm.loop !341

66:                                               ; preds = %24, %66
  %67 = phi i64 [ %72, %66 ], [ %25, %24 ]
  %68 = phi i16 [ %71, %66 ], [ %26, %24 ]
  %69 = getelementptr inbounds nuw i16, ptr %0, i64 %67
  %70 = load i16, ptr %69, align 2, !tbaa !35
  %71 = add i16 %70, %68
  %72 = add nuw nsw i64 %67, 1
  %73 = icmp eq i64 %72, %12
  br i1 %73, label %74, label %66, !llvm.loop !342

74:                                               ; preds = %66, %56, %40
  %75 = phi i16 [ %42, %40 ], [ %57, %56 ], [ %71, %66 ]
  %76 = load double, ptr @init_value, align 8, !tbaa !33
  %77 = fptoui double %76 to i16
  %78 = mul i16 %77, 8000
  %79 = icmp eq i16 %75, %78
  br i1 %79, label %62, label %58

80:                                               ; preds = %9, %92
  %81 = phi i32 [ %93, %92 ], [ %5, %9 ]
  %82 = phi double [ %94, %92 ], [ %10, %9 ]
  %83 = phi i32 [ %95, %92 ], [ 0, %9 ]
  %84 = fptoui double %82 to i16
  %85 = mul i16 %84, 8000
  %86 = icmp eq i16 %85, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %80
  %88 = load i32, ptr @current_test, align 4, !tbaa !11
  %89 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %88)
  %90 = load double, ptr @init_value, align 8, !tbaa !33
  %91 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %92

92:                                               ; preds = %80, %87
  %93 = phi i32 [ %81, %80 ], [ %91, %87 ]
  %94 = phi double [ %82, %80 ], [ %90, %87 ]
  %95 = add nuw nsw i32 %83, 1
  %96 = icmp slt i32 %95, %93
  br i1 %96, label %80, label %97, !llvm.loop !341

97:                                               ; preds = %92, %62, %3
  %98 = tail call i64 @clock() #17
  store i64 %98, ptr @end_time, align 8, !tbaa !30
  %99 = load i64, ptr @start_time, align 8, !tbaa !30
  %100 = load ptr, ptr @results, align 8, !tbaa !6
  %101 = icmp ne ptr %100, null
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %103 = load i32, ptr @current_test, align 4
  %104 = icmp slt i32 %103, %102
  %105 = select i1 %101, i1 %104, i1 false
  br i1 %105, label %117, label %106

106:                                              ; preds = %97
  %107 = add nsw i32 %102, 10
  store i32 %107, ptr @allocated_results, align 4, !tbaa !11
  %108 = sext i32 %107 to i64
  %109 = shl nsw i64 %108, 4
  %110 = tail call ptr @realloc(ptr noundef %100, i64 noundef %109) #14
  store ptr %110, ptr @results, align 8, !tbaa !6
  %111 = icmp eq ptr %110, null
  br i1 %111, label %114, label %112

112:                                              ; preds = %106
  %113 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %117

114:                                              ; preds = %106
  %115 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %116 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %115)
  tail call void @exit(i32 noundef -1) #15
  unreachable

117:                                              ; preds = %97, %112
  %118 = phi i32 [ %113, %112 ], [ %103, %97 ]
  %119 = phi ptr [ %110, %112 ], [ %100, %97 ]
  %120 = sub nsw i64 %98, %99
  %121 = sitofp i64 %120 to double
  %122 = fdiv double %121, 1.000000e+06
  %123 = sext i32 %118 to i64
  %124 = getelementptr inbounds %struct.one_result, ptr %119, i64 %123
  store double %122, ptr %124, align 8, !tbaa !13
  %125 = getelementptr inbounds %struct.one_result, ptr %119, i64 %123, i32 1
  store ptr %2, ptr %125, align 8, !tbaa !17
  %126 = add nsw i32 %118, 1
  store i32 %126, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_andItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = and <8 x i16> %34, splat (i16 10)
  %37 = and <8 x i16> %35, splat (i16 10)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !343

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = and <4 x i16> %54, splat (i16 10)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !344

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !345

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = and i16 %73, 10
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !346

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = and i16 %81, 10
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = and i16 %89, 10
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !345

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_andItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = and <8 x i16> %34, splat (i16 14)
  %37 = and <8 x i16> %35, splat (i16 14)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !347

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = and <4 x i16> %54, splat (i16 14)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !348

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !349

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = and i16 %73, 14
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !350

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = and i16 %81, 14
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = and i16 %89, 14
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !349

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt18custom_constant_orItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %90

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %83

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 4
  %12 = icmp ult i32 %1, 16
  %13 = and i64 %10, 2147483632
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 12
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483644
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i16 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <8 x i16> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <8 x i16> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i16, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <8 x i16>, ptr %30, align 2, !tbaa !35
  %33 = load <8 x i16>, ptr %31, align 2, !tbaa !35
  %34 = or <8 x i16> %32, splat (i16 10)
  %35 = or <8 x i16> %33, splat (i16 10)
  %36 = add <8 x i16> %34, %28
  %37 = add <8 x i16> %35, %29
  %38 = add nuw i64 %27, 16
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !351

40:                                               ; preds = %26
  %41 = add <8 x i16> %37, %36
  %42 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i16 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <4 x i16> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i16, ptr %0, i64 %49
  %52 = load <4 x i16>, ptr %51, align 2, !tbaa !35
  %53 = or <4 x i16> %52, splat (i16 10)
  %54 = add <4 x i16> %53, %50
  %55 = add nuw i64 %49, 4
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !352

57:                                               ; preds = %48
  %58 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %90, !llvm.loop !353

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i16 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i16, ptr %0, i64 %68
  %71 = load i16, ptr %70, align 2, !tbaa !35
  %72 = or i16 %71, 10
  %73 = add i16 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !354

76:                                               ; preds = %67, %57, %40
  %77 = phi i16 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = load double, ptr @init_value, align 8, !tbaa !33
  %79 = fptoui double %78 to i16
  %80 = or i16 %79, 10
  %81 = mul i16 %80, 8000
  %82 = icmp eq i16 %77, %81
  br i1 %82, label %63, label %59

83:                                               ; preds = %7, %83
  %84 = phi i32 [ %87, %83 ], [ 0, %7 ]
  %85 = load i32, ptr @current_test, align 4, !tbaa !11
  %86 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %85)
  %87 = add nuw nsw i32 %84, 1
  %88 = load i32, ptr @iterations, align 4, !tbaa !11
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %83, label %90, !llvm.loop !353

90:                                               ; preds = %83, %63, %3
  %91 = tail call i64 @clock() #17
  store i64 %91, ptr @end_time, align 8, !tbaa !30
  %92 = load i64, ptr @start_time, align 8, !tbaa !30
  %93 = load ptr, ptr @results, align 8, !tbaa !6
  %94 = icmp ne ptr %93, null
  %95 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %96 = load i32, ptr @current_test, align 4
  %97 = icmp slt i32 %96, %95
  %98 = select i1 %94, i1 %97, i1 false
  br i1 %98, label %110, label %99

99:                                               ; preds = %90
  %100 = add nsw i32 %95, 10
  store i32 %100, ptr @allocated_results, align 4, !tbaa !11
  %101 = sext i32 %100 to i64
  %102 = shl nsw i64 %101, 4
  %103 = tail call ptr @realloc(ptr noundef %93, i64 noundef %102) #14
  store ptr %103, ptr @results, align 8, !tbaa !6
  %104 = icmp eq ptr %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %99
  %106 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %110

107:                                              ; preds = %99
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %108)
  tail call void @exit(i32 noundef -1) #15
  unreachable

110:                                              ; preds = %90, %105
  %111 = phi i32 [ %106, %105 ], [ %96, %90 ]
  %112 = phi ptr [ %103, %105 ], [ %93, %90 ]
  %113 = sub nsw i64 %91, %92
  %114 = sitofp i64 %113 to double
  %115 = fdiv double %114, 1.000000e+06
  %116 = sext i32 %111 to i64
  %117 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116
  store double %115, ptr %117, align 8, !tbaa !13
  %118 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116, i32 1
  store ptr %2, ptr %118, align 8, !tbaa !17
  %119 = add nsw i32 %111, 1
  store i32 %119, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt27custom_multiple_constant_orItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %90

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %83

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 4
  %12 = icmp ult i32 %1, 16
  %13 = and i64 %10, 2147483632
  %14 = icmp eq i64 %13, %10
  %15 = and i64 %10, 12
  %16 = icmp eq i64 %15, 0
  %17 = and i64 %10, 2147483644
  %18 = icmp eq i64 %17, %10
  br label %19

19:                                               ; preds = %9, %63
  %20 = phi i32 [ %64, %63 ], [ %5, %9 ]
  %21 = phi i32 [ %65, %63 ], [ 0, %9 ]
  br i1 %11, label %22, label %25

22:                                               ; preds = %43, %57, %19
  %23 = phi i64 [ 0, %19 ], [ %13, %43 ], [ %17, %57 ]
  %24 = phi i16 [ 0, %19 ], [ %42, %43 ], [ %58, %57 ]
  br label %67

25:                                               ; preds = %19
  br i1 %12, label %44, label %26

26:                                               ; preds = %25, %26
  %27 = phi i64 [ %38, %26 ], [ 0, %25 ]
  %28 = phi <8 x i16> [ %36, %26 ], [ zeroinitializer, %25 ]
  %29 = phi <8 x i16> [ %37, %26 ], [ zeroinitializer, %25 ]
  %30 = getelementptr inbounds nuw i16, ptr %0, i64 %27
  %31 = getelementptr inbounds nuw i8, ptr %30, i64 16
  %32 = load <8 x i16>, ptr %30, align 2, !tbaa !35
  %33 = load <8 x i16>, ptr %31, align 2, !tbaa !35
  %34 = or <8 x i16> %32, splat (i16 63)
  %35 = or <8 x i16> %33, splat (i16 63)
  %36 = add <8 x i16> %34, %28
  %37 = add <8 x i16> %35, %29
  %38 = add nuw i64 %27, 16
  %39 = icmp eq i64 %38, %13
  br i1 %39, label %40, label %26, !llvm.loop !355

40:                                               ; preds = %26
  %41 = add <8 x i16> %37, %36
  %42 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %41)
  br i1 %14, label %76, label %43

43:                                               ; preds = %40
  br i1 %16, label %22, label %44

44:                                               ; preds = %43, %25
  %45 = phi i64 [ %13, %43 ], [ 0, %25 ]
  %46 = phi i16 [ %42, %43 ], [ 0, %25 ]
  %47 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %46, i64 0
  br label %48

48:                                               ; preds = %48, %44
  %49 = phi i64 [ %45, %44 ], [ %55, %48 ]
  %50 = phi <4 x i16> [ %47, %44 ], [ %54, %48 ]
  %51 = getelementptr inbounds nuw i16, ptr %0, i64 %49
  %52 = load <4 x i16>, ptr %51, align 2, !tbaa !35
  %53 = or <4 x i16> %52, splat (i16 63)
  %54 = add <4 x i16> %53, %50
  %55 = add nuw i64 %49, 4
  %56 = icmp eq i64 %55, %17
  br i1 %56, label %57, label %48, !llvm.loop !356

57:                                               ; preds = %48
  %58 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %54)
  br i1 %18, label %76, label %22

59:                                               ; preds = %76
  %60 = load i32, ptr @current_test, align 4, !tbaa !11
  %61 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %60)
  %62 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %63

63:                                               ; preds = %59, %76
  %64 = phi i32 [ %62, %59 ], [ %20, %76 ]
  %65 = add nuw nsw i32 %21, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %19, label %90, !llvm.loop !357

67:                                               ; preds = %22, %67
  %68 = phi i64 [ %74, %67 ], [ %23, %22 ]
  %69 = phi i16 [ %73, %67 ], [ %24, %22 ]
  %70 = getelementptr inbounds nuw i16, ptr %0, i64 %68
  %71 = load i16, ptr %70, align 2, !tbaa !35
  %72 = or i16 %71, 63
  %73 = add i16 %72, %69
  %74 = add nuw nsw i64 %68, 1
  %75 = icmp eq i64 %74, %10
  br i1 %75, label %76, label %67, !llvm.loop !358

76:                                               ; preds = %67, %57, %40
  %77 = phi i16 [ %42, %40 ], [ %58, %57 ], [ %73, %67 ]
  %78 = load double, ptr @init_value, align 8, !tbaa !33
  %79 = fptoui double %78 to i16
  %80 = or i16 %79, 63
  %81 = mul i16 %80, 8000
  %82 = icmp eq i16 %77, %81
  br i1 %82, label %63, label %59

83:                                               ; preds = %7, %83
  %84 = phi i32 [ %87, %83 ], [ 0, %7 ]
  %85 = load i32, ptr @current_test, align 4, !tbaa !11
  %86 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %85)
  %87 = add nuw nsw i32 %84, 1
  %88 = load i32, ptr @iterations, align 4, !tbaa !11
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %83, label %90, !llvm.loop !357

90:                                               ; preds = %83, %63, %3
  %91 = tail call i64 @clock() #17
  store i64 %91, ptr @end_time, align 8, !tbaa !30
  %92 = load i64, ptr @start_time, align 8, !tbaa !30
  %93 = load ptr, ptr @results, align 8, !tbaa !6
  %94 = icmp ne ptr %93, null
  %95 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %96 = load i32, ptr @current_test, align 4
  %97 = icmp slt i32 %96, %95
  %98 = select i1 %94, i1 %97, i1 false
  br i1 %98, label %110, label %99

99:                                               ; preds = %90
  %100 = add nsw i32 %95, 10
  store i32 %100, ptr @allocated_results, align 4, !tbaa !11
  %101 = sext i32 %100 to i64
  %102 = shl nsw i64 %101, 4
  %103 = tail call ptr @realloc(ptr noundef %93, i64 noundef %102) #14
  store ptr %103, ptr @results, align 8, !tbaa !6
  %104 = icmp eq ptr %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %99
  %106 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %110

107:                                              ; preds = %99
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %108)
  tail call void @exit(i32 noundef -1) #15
  unreachable

110:                                              ; preds = %90, %105
  %111 = phi i32 [ %106, %105 ], [ %96, %90 ]
  %112 = phi ptr [ %103, %105 ], [ %93, %90 ]
  %113 = sub nsw i64 %91, %92
  %114 = sitofp i64 %113 to double
  %115 = fdiv double %114, 1.000000e+06
  %116 = sext i32 %111 to i64
  %117 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116
  store double %115, ptr %117, align 8, !tbaa !13
  %118 = getelementptr inbounds %struct.one_result, ptr %112, i64 %116, i32 1
  store ptr %2, ptr %118, align 8, !tbaa !17
  %119 = add nsw i32 %111, 1
  store i32 %119, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt19custom_constant_xorItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = xor <8 x i16> %34, splat (i16 10)
  %37 = xor <8 x i16> %35, splat (i16 10)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !359

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = xor <4 x i16> %54, splat (i16 10)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !360

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !361

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = xor i16 %73, 10
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !362

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = xor i16 %81, 10
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = xor i16 %89, 10
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !361

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIt28custom_multiple_constant_xorItEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %103

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %85

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = icmp ult i32 %1, 16
  %15 = and i64 %12, 2147483632
  %16 = icmp eq i64 %15, %12
  %17 = and i64 %12, 12
  %18 = icmp eq i64 %17, 0
  %19 = and i64 %12, 2147483644
  %20 = icmp eq i64 %19, %12
  br label %21

21:                                               ; preds = %11, %65
  %22 = phi i32 [ %66, %65 ], [ %5, %11 ]
  %23 = phi i32 [ %67, %65 ], [ 0, %11 ]
  br i1 %13, label %24, label %27

24:                                               ; preds = %45, %59, %21
  %25 = phi i64 [ 0, %21 ], [ %15, %45 ], [ %19, %59 ]
  %26 = phi i16 [ 0, %21 ], [ %44, %45 ], [ %60, %59 ]
  br label %69

27:                                               ; preds = %21
  br i1 %14, label %46, label %28

28:                                               ; preds = %27, %28
  %29 = phi i64 [ %40, %28 ], [ 0, %27 ]
  %30 = phi <8 x i16> [ %38, %28 ], [ zeroinitializer, %27 ]
  %31 = phi <8 x i16> [ %39, %28 ], [ zeroinitializer, %27 ]
  %32 = getelementptr inbounds nuw i16, ptr %0, i64 %29
  %33 = getelementptr inbounds nuw i8, ptr %32, i64 16
  %34 = load <8 x i16>, ptr %32, align 2, !tbaa !35
  %35 = load <8 x i16>, ptr %33, align 2, !tbaa !35
  %36 = xor <8 x i16> %34, splat (i16 49)
  %37 = xor <8 x i16> %35, splat (i16 49)
  %38 = add <8 x i16> %36, %30
  %39 = add <8 x i16> %37, %31
  %40 = add nuw i64 %29, 16
  %41 = icmp eq i64 %40, %15
  br i1 %41, label %42, label %28, !llvm.loop !363

42:                                               ; preds = %28
  %43 = add <8 x i16> %39, %38
  %44 = tail call i16 @llvm.vector.reduce.add.v8i16(<8 x i16> %43)
  br i1 %16, label %78, label %45

45:                                               ; preds = %42
  br i1 %18, label %24, label %46

46:                                               ; preds = %45, %27
  %47 = phi i64 [ %15, %45 ], [ 0, %27 ]
  %48 = phi i16 [ %44, %45 ], [ 0, %27 ]
  %49 = insertelement <4 x i16> <i16 poison, i16 0, i16 0, i16 0>, i16 %48, i64 0
  br label %50

50:                                               ; preds = %50, %46
  %51 = phi i64 [ %47, %46 ], [ %57, %50 ]
  %52 = phi <4 x i16> [ %49, %46 ], [ %56, %50 ]
  %53 = getelementptr inbounds nuw i16, ptr %0, i64 %51
  %54 = load <4 x i16>, ptr %53, align 2, !tbaa !35
  %55 = xor <4 x i16> %54, splat (i16 49)
  %56 = add <4 x i16> %55, %52
  %57 = add nuw i64 %51, 4
  %58 = icmp eq i64 %57, %19
  br i1 %58, label %59, label %50, !llvm.loop !364

59:                                               ; preds = %50
  %60 = tail call i16 @llvm.vector.reduce.add.v4i16(<4 x i16> %56)
  br i1 %20, label %78, label %24

61:                                               ; preds = %78
  %62 = load i32, ptr @current_test, align 4, !tbaa !11
  %63 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %62)
  %64 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %65

65:                                               ; preds = %61, %78
  %66 = phi i32 [ %64, %61 ], [ %22, %78 ]
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp slt i32 %67, %66
  br i1 %68, label %21, label %103, !llvm.loop !365

69:                                               ; preds = %24, %69
  %70 = phi i64 [ %76, %69 ], [ %25, %24 ]
  %71 = phi i16 [ %75, %69 ], [ %26, %24 ]
  %72 = getelementptr inbounds nuw i16, ptr %0, i64 %70
  %73 = load i16, ptr %72, align 2, !tbaa !35
  %74 = xor i16 %73, 49
  %75 = add i16 %74, %71
  %76 = add nuw nsw i64 %70, 1
  %77 = icmp eq i64 %76, %12
  br i1 %77, label %78, label %69, !llvm.loop !366

78:                                               ; preds = %69, %59, %42
  %79 = phi i16 [ %44, %42 ], [ %60, %59 ], [ %75, %69 ]
  %80 = load double, ptr @init_value, align 8, !tbaa !33
  %81 = fptoui double %80 to i16
  %82 = xor i16 %81, 49
  %83 = mul i16 %82, 8000
  %84 = icmp eq i16 %79, %83
  br i1 %84, label %65, label %61

85:                                               ; preds = %9, %98
  %86 = phi i32 [ %99, %98 ], [ %5, %9 ]
  %87 = phi double [ %100, %98 ], [ %10, %9 ]
  %88 = phi i32 [ %101, %98 ], [ 0, %9 ]
  %89 = fptoui double %87 to i16
  %90 = xor i16 %89, 49
  %91 = mul i16 %90, 8000
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %85
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %94)
  %96 = load double, ptr @init_value, align 8, !tbaa !33
  %97 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %98

98:                                               ; preds = %85, %93
  %99 = phi i32 [ %86, %85 ], [ %97, %93 ]
  %100 = phi double [ %87, %85 ], [ %96, %93 ]
  %101 = add nuw nsw i32 %88, 1
  %102 = icmp slt i32 %101, %99
  br i1 %102, label %85, label %103, !llvm.loop !365

103:                                              ; preds = %98, %65, %3
  %104 = tail call i64 @clock() #17
  store i64 %104, ptr @end_time, align 8, !tbaa !30
  %105 = load i64, ptr @start_time, align 8, !tbaa !30
  %106 = load ptr, ptr @results, align 8, !tbaa !6
  %107 = icmp ne ptr %106, null
  %108 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %109 = load i32, ptr @current_test, align 4
  %110 = icmp slt i32 %109, %108
  %111 = select i1 %107, i1 %110, i1 false
  br i1 %111, label %123, label %112

112:                                              ; preds = %103
  %113 = add nsw i32 %108, 10
  store i32 %113, ptr @allocated_results, align 4, !tbaa !11
  %114 = sext i32 %113 to i64
  %115 = shl nsw i64 %114, 4
  %116 = tail call ptr @realloc(ptr noundef %106, i64 noundef %115) #14
  store ptr %116, ptr @results, align 8, !tbaa !6
  %117 = icmp eq ptr %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %112
  %119 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %123

120:                                              ; preds = %112
  %121 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %122 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %121)
  tail call void @exit(i32 noundef -1) #15
  unreachable

123:                                              ; preds = %103, %118
  %124 = phi i32 [ %119, %118 ], [ %109, %103 ]
  %125 = phi ptr [ %116, %118 ], [ %106, %103 ]
  %126 = sub nsw i64 %104, %105
  %127 = sitofp i64 %126 to double
  %128 = fdiv double %127, 1.000000e+06
  %129 = sext i32 %124 to i64
  %130 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129
  store double %128, ptr %130, align 8, !tbaa !13
  %131 = getelementptr inbounds %struct.one_result, ptr %125, i64 %129, i32 1
  store ptr %2, ptr %131, align 8, !tbaa !17
  %132 = add nsw i32 %124, 1
  store i32 %132, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi10custom_twoIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !367

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !367

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_add_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !368

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !368

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_sub_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !369

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !369

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi25custom_multiply_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = mul i32 %1, 6
  %11 = icmp eq i32 %10, 48000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !370

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !370

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi23custom_divide_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !371

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !371

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_mod_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !372

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !372

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi22custom_equal_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi25custom_notequal_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !373

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !373

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_greaterthan_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !374

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !374

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi25custom_lessthan_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi33custom_greaterthanequal_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !375

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !375

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi30custom_lessthanequal_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_and_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !376

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !376

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_or_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !377

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !377

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi20custom_xor_constantsIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !378

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !378

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_addIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 10)
  %28 = add <4 x i32> %22, splat (i32 10)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !379

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !380

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, 10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !381

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 80000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !380

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_addIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 10)
  %28 = add <4 x i32> %22, splat (i32 10)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !382

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !383

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, 10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !384

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 80000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !383

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_subIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 -10)
  %28 = add <4 x i32> %22, splat (i32 -10)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !385

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !386

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, -10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !387

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, -80000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !386

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_subIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 -10)
  %28 = add <4 x i32> %22, splat (i32 -10)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !388

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !389

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, -10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !390

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, -80000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !389

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi24custom_constant_multiplyIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %78

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %62

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = mul nsw <4 x i32> %25, splat (i32 120)
  %28 = mul nsw <4 x i32> %26, splat (i32 120)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !391

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %78, !llvm.loop !392

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = mul nsw i32 %51, 120
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !393

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = mul nsw i32 %59, 960000
  %61 = icmp eq i32 %57, %60
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %73
  %63 = phi i32 [ %74, %73 ], [ %5, %9 ]
  %64 = phi double [ %75, %73 ], [ %10, %9 ]
  %65 = phi i32 [ %76, %73 ], [ 0, %9 ]
  %66 = fptosi double %64 to i32
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %73, label %68

68:                                               ; preds = %62
  %69 = load i32, ptr @current_test, align 4, !tbaa !11
  %70 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %69)
  %71 = load double, ptr @init_value, align 8, !tbaa !33
  %72 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %73

73:                                               ; preds = %62, %68
  %74 = phi i32 [ %63, %62 ], [ %72, %68 ]
  %75 = phi double [ %64, %62 ], [ %71, %68 ]
  %76 = add nuw nsw i32 %65, 1
  %77 = icmp slt i32 %76, %74
  br i1 %77, label %62, label %78, !llvm.loop !392

78:                                               ; preds = %73, %43, %3
  %79 = tail call i64 @clock() #17
  store i64 %79, ptr @end_time, align 8, !tbaa !30
  %80 = load i64, ptr @start_time, align 8, !tbaa !30
  %81 = load ptr, ptr @results, align 8, !tbaa !6
  %82 = icmp ne ptr %81, null
  %83 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %84 = load i32, ptr @current_test, align 4
  %85 = icmp slt i32 %84, %83
  %86 = select i1 %82, i1 %85, i1 false
  br i1 %86, label %98, label %87

87:                                               ; preds = %78
  %88 = add nsw i32 %83, 10
  store i32 %88, ptr @allocated_results, align 4, !tbaa !11
  %89 = sext i32 %88 to i64
  %90 = shl nsw i64 %89, 4
  %91 = tail call ptr @realloc(ptr noundef %81, i64 noundef %90) #14
  store ptr %91, ptr @results, align 8, !tbaa !6
  %92 = icmp eq ptr %91, null
  br i1 %92, label %95, label %93

93:                                               ; preds = %87
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %98

95:                                               ; preds = %87
  %96 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %96)
  tail call void @exit(i32 noundef -1) #15
  unreachable

98:                                               ; preds = %78, %93
  %99 = phi i32 [ %94, %93 ], [ %84, %78 ]
  %100 = phi ptr [ %91, %93 ], [ %81, %78 ]
  %101 = sub nsw i64 %79, %80
  %102 = sitofp i64 %101 to double
  %103 = fdiv double %102, 1.000000e+06
  %104 = sext i32 %99 to i64
  %105 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104
  store double %103, ptr %105, align 8, !tbaa !13
  %106 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104, i32 1
  store ptr %2, ptr %106, align 8, !tbaa !17
  %107 = add nsw i32 %99, 1
  store i32 %107, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi33custom_multiple_constant_multiplyIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %78

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %62

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = mul nsw <4 x i32> %25, splat (i32 120)
  %28 = mul nsw <4 x i32> %26, splat (i32 120)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !394

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %78, !llvm.loop !395

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = mul nsw i32 %51, 120
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !396

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = mul nsw i32 %59, 960000
  %61 = icmp eq i32 %57, %60
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %73
  %63 = phi i32 [ %74, %73 ], [ %5, %9 ]
  %64 = phi double [ %75, %73 ], [ %10, %9 ]
  %65 = phi i32 [ %76, %73 ], [ 0, %9 ]
  %66 = fptosi double %64 to i32
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %73, label %68

68:                                               ; preds = %62
  %69 = load i32, ptr @current_test, align 4, !tbaa !11
  %70 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %69)
  %71 = load double, ptr @init_value, align 8, !tbaa !33
  %72 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %73

73:                                               ; preds = %62, %68
  %74 = phi i32 [ %63, %62 ], [ %72, %68 ]
  %75 = phi double [ %64, %62 ], [ %71, %68 ]
  %76 = add nuw nsw i32 %65, 1
  %77 = icmp slt i32 %76, %74
  br i1 %77, label %62, label %78, !llvm.loop !395

78:                                               ; preds = %73, %43, %3
  %79 = tail call i64 @clock() #17
  store i64 %79, ptr @end_time, align 8, !tbaa !30
  %80 = load i64, ptr @start_time, align 8, !tbaa !30
  %81 = load ptr, ptr @results, align 8, !tbaa !6
  %82 = icmp ne ptr %81, null
  %83 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %84 = load i32, ptr @current_test, align 4
  %85 = icmp slt i32 %84, %83
  %86 = select i1 %82, i1 %85, i1 false
  br i1 %86, label %98, label %87

87:                                               ; preds = %78
  %88 = add nsw i32 %83, 10
  store i32 %88, ptr @allocated_results, align 4, !tbaa !11
  %89 = sext i32 %88 to i64
  %90 = shl nsw i64 %89, 4
  %91 = tail call ptr @realloc(ptr noundef %81, i64 noundef %90) #14
  store ptr %91, ptr @results, align 8, !tbaa !6
  %92 = icmp eq ptr %91, null
  br i1 %92, label %95, label %93

93:                                               ; preds = %87
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %98

95:                                               ; preds = %87
  %96 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %96)
  tail call void @exit(i32 noundef -1) #15
  unreachable

98:                                               ; preds = %78, %93
  %99 = phi i32 [ %94, %93 ], [ %84, %78 ]
  %100 = phi ptr [ %91, %93 ], [ %81, %78 ]
  %101 = sub nsw i64 %79, %80
  %102 = sitofp i64 %101 to double
  %103 = fdiv double %102, 1.000000e+06
  %104 = sext i32 %99 to i64
  %105 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104
  store double %103, ptr %105, align 8, !tbaa !13
  %106 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104, i32 1
  store ptr %2, ptr %106, align 8, !tbaa !17
  %107 = add nsw i32 %99, 1
  store i32 %107, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi34custom_multiple_constant_multiply2IiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 120)
  %28 = add <4 x i32> %22, splat (i32 120)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !397

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !398

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, 120
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !399

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 960000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -960000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !398

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi22custom_constant_divideIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = sdiv <4 x i32> %25, splat (i32 5)
  %28 = sdiv <4 x i32> %26, splat (i32 5)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !400

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !401

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = sdiv i32 %51, 5
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !402

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = sdiv i32 %59, 5
  %61 = mul nsw i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = add i32 %67, 4
  %69 = icmp ult i32 %68, 9
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !401

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi31custom_multiple_constant_divideIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = sdiv <4 x i32> %25, splat (i32 120)
  %28 = sdiv <4 x i32> %26, splat (i32 120)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !403

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !404

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = sdiv i32 %51, 120
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !405

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = sdiv i32 %59, 120
  %61 = mul nsw i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = add i32 %67, 119
  %69 = icmp ult i32 %68, 239
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !404

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi32custom_multiple_constant_divide2IiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 2)
  %28 = add <4 x i32> %22, splat (i32 2)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !406

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !407

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, 2
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !408

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 16000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -16000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !407

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi30custom_multiple_constant_mixedIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %75

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %59

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %41
  %17 = phi i32 [ %42, %41 ], [ %5, %11 ]
  %18 = phi i32 [ %43, %41 ], [ 0, %11 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %29, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %27, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %28, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %25, %21
  %28 = add <4 x i32> %26, %22
  %29 = add nuw i64 %20, 8
  %30 = icmp eq i64 %29, %14
  br i1 %30, label %31, label %19, !llvm.loop !409

31:                                               ; preds = %19
  %32 = add <4 x i32> %28, %27
  %33 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %32)
  br i1 %15, label %53, label %34

34:                                               ; preds = %16, %31
  %35 = phi i64 [ 0, %16 ], [ %14, %31 ]
  %36 = phi i32 [ 0, %16 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %53
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %53
  %42 = phi i32 [ %40, %37 ], [ %17, %53 ]
  %43 = add nuw nsw i32 %18, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %16, label %75, !llvm.loop !410

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %51, %45 ], [ %35, %34 ]
  %47 = phi i32 [ %50, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !11
  %50 = add nsw i32 %49, %47
  %51 = add nuw nsw i64 %46, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %45, !llvm.loop !411

53:                                               ; preds = %45, %31
  %54 = phi i32 [ %33, %31 ], [ %50, %45 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fptosi double %55 to i32
  %57 = mul nsw i32 %56, 8000
  %58 = icmp eq i32 %54, %57
  br i1 %58, label %41, label %37

59:                                               ; preds = %9, %70
  %60 = phi i32 [ %71, %70 ], [ %5, %9 ]
  %61 = phi double [ %72, %70 ], [ %10, %9 ]
  %62 = phi i32 [ %73, %70 ], [ 0, %9 ]
  %63 = fptosi double %61 to i32
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %59
  %66 = load i32, ptr @current_test, align 4, !tbaa !11
  %67 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %66)
  %68 = load double, ptr @init_value, align 8, !tbaa !33
  %69 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %70

70:                                               ; preds = %59, %65
  %71 = phi i32 [ %60, %59 ], [ %69, %65 ]
  %72 = phi double [ %61, %59 ], [ %68, %65 ]
  %73 = add nuw nsw i32 %62, 1
  %74 = icmp slt i32 %73, %71
  br i1 %74, label %59, label %75, !llvm.loop !410

75:                                               ; preds = %70, %41, %3
  %76 = tail call i64 @clock() #17
  store i64 %76, ptr @end_time, align 8, !tbaa !30
  %77 = load i64, ptr @start_time, align 8, !tbaa !30
  %78 = load ptr, ptr @results, align 8, !tbaa !6
  %79 = icmp ne ptr %78, null
  %80 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %81 = load i32, ptr @current_test, align 4
  %82 = icmp slt i32 %81, %80
  %83 = select i1 %79, i1 %82, i1 false
  br i1 %83, label %95, label %84

84:                                               ; preds = %75
  %85 = add nsw i32 %80, 10
  store i32 %85, ptr @allocated_results, align 4, !tbaa !11
  %86 = sext i32 %85 to i64
  %87 = shl nsw i64 %86, 4
  %88 = tail call ptr @realloc(ptr noundef %78, i64 noundef %87) #14
  store ptr %88, ptr @results, align 8, !tbaa !6
  %89 = icmp eq ptr %88, null
  br i1 %89, label %92, label %90

90:                                               ; preds = %84
  %91 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %95

92:                                               ; preds = %84
  %93 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %93)
  tail call void @exit(i32 noundef -1) #15
  unreachable

95:                                               ; preds = %75, %90
  %96 = phi i32 [ %91, %90 ], [ %81, %75 ]
  %97 = phi ptr [ %88, %90 ], [ %78, %75 ]
  %98 = sub nsw i64 %76, %77
  %99 = sitofp i64 %98 to double
  %100 = fdiv double %99, 1.000000e+06
  %101 = sext i32 %96 to i64
  %102 = getelementptr inbounds %struct.one_result, ptr %97, i64 %101
  store double %100, ptr %102, align 8, !tbaa !13
  %103 = getelementptr inbounds %struct.one_result, ptr %97, i64 %101, i32 1
  store ptr %2, ptr %103, align 8, !tbaa !17
  %104 = add nsw i32 %96, 1
  store i32 %104, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_andIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = and <4 x i32> %25, splat (i32 10)
  %28 = and <4 x i32> %26, splat (i32 10)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !412

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !413

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = and i32 %51, 10
  %53 = add nuw nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !414

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = and i32 %59, 10
  %61 = mul nuw nsw i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = and i32 %67, 10
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !413

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_andIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = and <4 x i32> %25, splat (i32 14)
  %28 = and <4 x i32> %26, splat (i32 14)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !415

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !416

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = and i32 %51, 14
  %53 = add nuw nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !417

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = and i32 %59, 14
  %61 = mul nuw nsw i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = and i32 %67, 14
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !416

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi18custom_constant_orIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = and i64 %10, 2147483640
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <4 x i32> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <4 x i32> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds nuw i32, ptr %0, i64 %18
  %22 = getelementptr inbounds nuw i8, ptr %21, i64 16
  %23 = load <4 x i32>, ptr %21, align 4, !tbaa !11
  %24 = load <4 x i32>, ptr %22, align 4, !tbaa !11
  %25 = or <4 x i32> %23, splat (i32 10)
  %26 = or <4 x i32> %24, splat (i32 10)
  %27 = add <4 x i32> %25, %19
  %28 = add <4 x i32> %26, %20
  %29 = add nuw i64 %18, 8
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !418

31:                                               ; preds = %17
  %32 = add <4 x i32> %28, %27
  %33 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i32 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !419

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i32 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !11
  %50 = or i32 %49, 10
  %51 = add nsw i32 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !420

54:                                               ; preds = %45, %31
  %55 = phi i32 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !33
  %57 = fptosi double %56 to i32
  %58 = or i32 %57, 10
  %59 = mul nsw i32 %58, 8000
  %60 = icmp eq i32 %55, %59
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !11
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !11
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !419

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !30
  %70 = load i64, ptr @start_time, align 8, !tbaa !30
  %71 = load ptr, ptr @results, align 8, !tbaa !6
  %72 = icmp ne ptr %71, null
  %73 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %74 = load i32, ptr @current_test, align 4
  %75 = icmp slt i32 %74, %73
  %76 = select i1 %72, i1 %75, i1 false
  br i1 %76, label %88, label %77

77:                                               ; preds = %68
  %78 = add nsw i32 %73, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !11
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %71, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !6
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %77
  %84 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %88

85:                                               ; preds = %77
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %68, %83
  %89 = phi i32 [ %84, %83 ], [ %74, %68 ]
  %90 = phi ptr [ %81, %83 ], [ %71, %68 ]
  %91 = sub nsw i64 %69, %70
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !13
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !17
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi27custom_multiple_constant_orIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = and i64 %10, 2147483640
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <4 x i32> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <4 x i32> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds nuw i32, ptr %0, i64 %18
  %22 = getelementptr inbounds nuw i8, ptr %21, i64 16
  %23 = load <4 x i32>, ptr %21, align 4, !tbaa !11
  %24 = load <4 x i32>, ptr %22, align 4, !tbaa !11
  %25 = or <4 x i32> %23, splat (i32 63)
  %26 = or <4 x i32> %24, splat (i32 63)
  %27 = add <4 x i32> %25, %19
  %28 = add <4 x i32> %26, %20
  %29 = add nuw i64 %18, 8
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !421

31:                                               ; preds = %17
  %32 = add <4 x i32> %28, %27
  %33 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i32 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !422

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i32 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !11
  %50 = or i32 %49, 63
  %51 = add nsw i32 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !423

54:                                               ; preds = %45, %31
  %55 = phi i32 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !33
  %57 = fptosi double %56 to i32
  %58 = or i32 %57, 63
  %59 = mul nsw i32 %58, 8000
  %60 = icmp eq i32 %55, %59
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !11
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !11
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !422

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !30
  %70 = load i64, ptr @start_time, align 8, !tbaa !30
  %71 = load ptr, ptr @results, align 8, !tbaa !6
  %72 = icmp ne ptr %71, null
  %73 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %74 = load i32, ptr @current_test, align 4
  %75 = icmp slt i32 %74, %73
  %76 = select i1 %72, i1 %75, i1 false
  br i1 %76, label %88, label %77

77:                                               ; preds = %68
  %78 = add nsw i32 %73, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !11
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %71, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !6
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %77
  %84 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %88

85:                                               ; preds = %77
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %68, %83
  %89 = phi i32 [ %84, %83 ], [ %74, %68 ]
  %90 = phi ptr [ %81, %83 ], [ %71, %68 ]
  %91 = sub nsw i64 %69, %70
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !13
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !17
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi19custom_constant_xorIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = xor <4 x i32> %25, splat (i32 10)
  %28 = xor <4 x i32> %26, splat (i32 10)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !424

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !425

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = xor i32 %51, 10
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !426

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = xor i32 %59, 10
  %61 = mul nsw i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %74
  %64 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %65 = phi double [ %76, %74 ], [ %10, %9 ]
  %66 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = icmp eq i32 %67, 10
  br i1 %68, label %74, label %69

69:                                               ; preds = %63
  %70 = load i32, ptr @current_test, align 4, !tbaa !11
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !33
  %73 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %74

74:                                               ; preds = %63, %69
  %75 = phi i32 [ %64, %63 ], [ %73, %69 ]
  %76 = phi double [ %65, %63 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %66, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %63, label %79, !llvm.loop !425

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIi28custom_multiple_constant_xorIiEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = xor <4 x i32> %25, splat (i32 49)
  %28 = xor <4 x i32> %26, splat (i32 49)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !427

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !428

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = xor i32 %51, 49
  %53 = add nsw i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !429

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i32
  %60 = xor i32 %59, 49
  %61 = mul nsw i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %74
  %64 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %65 = phi double [ %76, %74 ], [ %10, %9 ]
  %66 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %67 = fptosi double %65 to i32
  %68 = icmp eq i32 %67, 49
  br i1 %68, label %74, label %69

69:                                               ; preds = %63
  %70 = load i32, ptr @current_test, align 4, !tbaa !11
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !33
  %73 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %74

74:                                               ; preds = %63, %69
  %75 = phi i32 [ %64, %63 ], [ %73, %69 ]
  %76 = phi double [ %65, %63 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %66, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %63, label %79, !llvm.loop !428

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj10custom_twoIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !430

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !430

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_add_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !431

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !431

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_sub_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !432

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !432

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj25custom_multiply_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %7
  %10 = mul i32 %1, 6
  %11 = icmp eq i32 %10, 48000
  br label %12

12:                                               ; preds = %9, %19
  %13 = phi i32 [ %20, %19 ], [ %5, %9 ]
  %14 = phi i32 [ %21, %19 ], [ 0, %9 ]
  br i1 %11, label %19, label %15

15:                                               ; preds = %12
  %16 = load i32, ptr @current_test, align 4, !tbaa !11
  %17 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %16)
  %18 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %19

19:                                               ; preds = %15, %12
  %20 = phi i32 [ %18, %15 ], [ %13, %12 ]
  %21 = add nuw nsw i32 %14, 1
  %22 = icmp slt i32 %21, %20
  br i1 %22, label %12, label %30, !llvm.loop !433

23:                                               ; preds = %7, %23
  %24 = phi i32 [ %27, %23 ], [ 0, %7 ]
  %25 = load i32, ptr @current_test, align 4, !tbaa !11
  %26 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %25)
  %27 = add nuw nsw i32 %24, 1
  %28 = load i32, ptr @iterations, align 4, !tbaa !11
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %23, label %30, !llvm.loop !433

30:                                               ; preds = %23, %19, %3
  %31 = tail call i64 @clock() #17
  store i64 %31, ptr @end_time, align 8, !tbaa !30
  %32 = load i64, ptr @start_time, align 8, !tbaa !30
  %33 = load ptr, ptr @results, align 8, !tbaa !6
  %34 = icmp ne ptr %33, null
  %35 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %36 = load i32, ptr @current_test, align 4
  %37 = icmp slt i32 %36, %35
  %38 = select i1 %34, i1 %37, i1 false
  br i1 %38, label %50, label %39

39:                                               ; preds = %30
  %40 = add nsw i32 %35, 10
  store i32 %40, ptr @allocated_results, align 4, !tbaa !11
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 4
  %43 = tail call ptr @realloc(ptr noundef %33, i64 noundef %42) #14
  store ptr %43, ptr @results, align 8, !tbaa !6
  %44 = icmp eq ptr %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %50

47:                                               ; preds = %39
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %48)
  tail call void @exit(i32 noundef -1) #15
  unreachable

50:                                               ; preds = %30, %45
  %51 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %52 = phi ptr [ %43, %45 ], [ %33, %30 ]
  %53 = sub nsw i64 %31, %32
  %54 = sitofp i64 %53 to double
  %55 = fdiv double %54, 1.000000e+06
  %56 = sext i32 %51 to i64
  %57 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56
  store double %55, ptr %57, align 8, !tbaa !13
  %58 = getelementptr inbounds %struct.one_result, ptr %52, i64 %56, i32 1
  store ptr %2, ptr %58, align 8, !tbaa !17
  %59 = add nsw i32 %51, 1
  store i32 %59, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj23custom_divide_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !434

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !434

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_mod_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !435

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !435

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj22custom_equal_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj25custom_notequal_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !436

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !436

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_greaterthan_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !437

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !437

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj25custom_lessthan_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj33custom_greaterthanequal_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !438

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !438

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj30custom_lessthanequal_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_and_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !439

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !439

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_or_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !440

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !440

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj20custom_xor_constantsIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !441

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !441

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_addIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 10)
  %28 = add <4 x i32> %22, splat (i32 10)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !442

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !443

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, 10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !444

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 80000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !443

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_addIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 10)
  %28 = add <4 x i32> %22, splat (i32 10)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !445

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !446

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, 10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !447

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 80000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !446

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_subIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 -10)
  %28 = add <4 x i32> %22, splat (i32 -10)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !448

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !449

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, -10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !450

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, -80000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !449

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_subIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 -10)
  %28 = add <4 x i32> %22, splat (i32 -10)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !451

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !452

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, -10
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !453

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, -80000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !452

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj24custom_constant_multiplyIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %62

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = mul <4 x i32> %25, splat (i32 120)
  %28 = mul <4 x i32> %26, splat (i32 120)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !454

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !455

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = mul i32 %51, 120
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !456

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 960000
  %61 = icmp eq i32 %57, %60
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptoui double %64 to i32
  %67 = mul i32 %66, 960000
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !11
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !33
  %73 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !455

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj33custom_multiple_constant_multiplyIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %62

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = mul <4 x i32> %25, splat (i32 120)
  %28 = mul <4 x i32> %26, splat (i32 120)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !457

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !458

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = mul i32 %51, 120
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !459

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 960000
  %61 = icmp eq i32 %57, %60
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptoui double %64 to i32
  %67 = mul i32 %66, 960000
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !11
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !33
  %73 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !458

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj34custom_multiple_constant_multiply2IjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 120)
  %28 = add <4 x i32> %22, splat (i32 120)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !460

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !461

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, 120
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !462

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 960000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -960000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !461

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj22custom_constant_divideIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = udiv <4 x i32> %25, splat (i32 5)
  %28 = udiv <4 x i32> %26, splat (i32 5)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !463

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !464

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = udiv i32 %51, 5
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !465

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = udiv i32 %59, 5
  %61 = mul i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = udiv i32 %67, 5
  %69 = mul i32 %68, 8000
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !11
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !33
  %75 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !464

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !30
  %83 = load i64, ptr @start_time, align 8, !tbaa !30
  %84 = load ptr, ptr @results, align 8, !tbaa !6
  %85 = icmp ne ptr %84, null
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = load i32, ptr @current_test, align 4
  %88 = icmp slt i32 %87, %86
  %89 = select i1 %85, i1 %88, i1 false
  br i1 %89, label %101, label %90

90:                                               ; preds = %81
  %91 = add nsw i32 %86, 10
  store i32 %91, ptr @allocated_results, align 4, !tbaa !11
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 4
  %94 = tail call ptr @realloc(ptr noundef %84, i64 noundef %93) #14
  store ptr %94, ptr @results, align 8, !tbaa !6
  %95 = icmp eq ptr %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %90
  %97 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %101

98:                                               ; preds = %90
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %100 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %99)
  tail call void @exit(i32 noundef -1) #15
  unreachable

101:                                              ; preds = %81, %96
  %102 = phi i32 [ %97, %96 ], [ %87, %81 ]
  %103 = phi ptr [ %94, %96 ], [ %84, %81 ]
  %104 = sub nsw i64 %82, %83
  %105 = sitofp i64 %104 to double
  %106 = fdiv double %105, 1.000000e+06
  %107 = sext i32 %102 to i64
  %108 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107
  store double %106, ptr %108, align 8, !tbaa !13
  %109 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107, i32 1
  store ptr %2, ptr %109, align 8, !tbaa !17
  %110 = add nsw i32 %102, 1
  store i32 %110, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj31custom_multiple_constant_divideIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = udiv <4 x i32> %25, splat (i32 120)
  %28 = udiv <4 x i32> %26, splat (i32 120)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !466

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !467

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = udiv i32 %51, 120
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !468

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = udiv i32 %59, 120
  %61 = mul i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = udiv i32 %67, 120
  %69 = mul i32 %68, 8000
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !11
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !33
  %75 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !467

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !30
  %83 = load i64, ptr @start_time, align 8, !tbaa !30
  %84 = load ptr, ptr @results, align 8, !tbaa !6
  %85 = icmp ne ptr %84, null
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = load i32, ptr @current_test, align 4
  %88 = icmp slt i32 %87, %86
  %89 = select i1 %85, i1 %88, i1 false
  br i1 %89, label %101, label %90

90:                                               ; preds = %81
  %91 = add nsw i32 %86, 10
  store i32 %91, ptr @allocated_results, align 4, !tbaa !11
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 4
  %94 = tail call ptr @realloc(ptr noundef %84, i64 noundef %93) #14
  store ptr %94, ptr @results, align 8, !tbaa !6
  %95 = icmp eq ptr %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %90
  %97 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %101

98:                                               ; preds = %90
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %100 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %99)
  tail call void @exit(i32 noundef -1) #15
  unreachable

101:                                              ; preds = %81, %96
  %102 = phi i32 [ %97, %96 ], [ %87, %81 ]
  %103 = phi ptr [ %94, %96 ], [ %84, %81 ]
  %104 = sub nsw i64 %82, %83
  %105 = sitofp i64 %104 to double
  %106 = fdiv double %105, 1.000000e+06
  %107 = sext i32 %102 to i64
  %108 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107
  store double %106, ptr %108, align 8, !tbaa !13
  %109 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107, i32 1
  store ptr %2, ptr %109, align 8, !tbaa !17
  %110 = add nsw i32 %102, 1
  store i32 %110, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj32custom_multiple_constant_divide2IjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %21, splat (i32 2)
  %28 = add <4 x i32> %22, splat (i32 2)
  %29 = add <4 x i32> %27, %25
  %30 = add <4 x i32> %28, %26
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !469

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !470

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = add i32 %49, 2
  %53 = add i32 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !471

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = mul i32 %59, 8000
  %61 = add i32 %60, 16000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = mul i32 %67, 8000
  %69 = icmp eq i32 %68, -16000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !470

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj30custom_multiple_constant_mixedIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %76

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %59

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %41
  %17 = phi i32 [ %42, %41 ], [ %5, %11 ]
  %18 = phi i32 [ %43, %41 ], [ 0, %11 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %29, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %27, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %28, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = add <4 x i32> %25, %21
  %28 = add <4 x i32> %26, %22
  %29 = add nuw i64 %20, 8
  %30 = icmp eq i64 %29, %14
  br i1 %30, label %31, label %19, !llvm.loop !472

31:                                               ; preds = %19
  %32 = add <4 x i32> %28, %27
  %33 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %32)
  br i1 %15, label %53, label %34

34:                                               ; preds = %16, %31
  %35 = phi i64 [ 0, %16 ], [ %14, %31 ]
  %36 = phi i32 [ 0, %16 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %53
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %53
  %42 = phi i32 [ %40, %37 ], [ %17, %53 ]
  %43 = add nuw nsw i32 %18, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %16, label %76, !llvm.loop !473

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %51, %45 ], [ %35, %34 ]
  %47 = phi i32 [ %50, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !11
  %50 = add i32 %49, %47
  %51 = add nuw nsw i64 %46, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %45, !llvm.loop !474

53:                                               ; preds = %45, %31
  %54 = phi i32 [ %33, %31 ], [ %50, %45 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fptoui double %55 to i32
  %57 = mul i32 %56, 8000
  %58 = icmp eq i32 %54, %57
  br i1 %58, label %41, label %37

59:                                               ; preds = %9, %71
  %60 = phi i32 [ %72, %71 ], [ %5, %9 ]
  %61 = phi double [ %73, %71 ], [ %10, %9 ]
  %62 = phi i32 [ %74, %71 ], [ 0, %9 ]
  %63 = fptoui double %61 to i32
  %64 = mul i32 %63, 8000
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %71, label %66

66:                                               ; preds = %59
  %67 = load i32, ptr @current_test, align 4, !tbaa !11
  %68 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %67)
  %69 = load double, ptr @init_value, align 8, !tbaa !33
  %70 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %71

71:                                               ; preds = %59, %66
  %72 = phi i32 [ %60, %59 ], [ %70, %66 ]
  %73 = phi double [ %61, %59 ], [ %69, %66 ]
  %74 = add nuw nsw i32 %62, 1
  %75 = icmp slt i32 %74, %72
  br i1 %75, label %59, label %76, !llvm.loop !473

76:                                               ; preds = %71, %41, %3
  %77 = tail call i64 @clock() #17
  store i64 %77, ptr @end_time, align 8, !tbaa !30
  %78 = load i64, ptr @start_time, align 8, !tbaa !30
  %79 = load ptr, ptr @results, align 8, !tbaa !6
  %80 = icmp ne ptr %79, null
  %81 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %82 = load i32, ptr @current_test, align 4
  %83 = icmp slt i32 %82, %81
  %84 = select i1 %80, i1 %83, i1 false
  br i1 %84, label %96, label %85

85:                                               ; preds = %76
  %86 = add nsw i32 %81, 10
  store i32 %86, ptr @allocated_results, align 4, !tbaa !11
  %87 = sext i32 %86 to i64
  %88 = shl nsw i64 %87, 4
  %89 = tail call ptr @realloc(ptr noundef %79, i64 noundef %88) #14
  store ptr %89, ptr @results, align 8, !tbaa !6
  %90 = icmp eq ptr %89, null
  br i1 %90, label %93, label %91

91:                                               ; preds = %85
  %92 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %96

93:                                               ; preds = %85
  %94 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %94)
  tail call void @exit(i32 noundef -1) #15
  unreachable

96:                                               ; preds = %76, %91
  %97 = phi i32 [ %92, %91 ], [ %82, %76 ]
  %98 = phi ptr [ %89, %91 ], [ %79, %76 ]
  %99 = sub nsw i64 %77, %78
  %100 = sitofp i64 %99 to double
  %101 = fdiv double %100, 1.000000e+06
  %102 = sext i32 %97 to i64
  %103 = getelementptr inbounds %struct.one_result, ptr %98, i64 %102
  store double %101, ptr %103, align 8, !tbaa !13
  %104 = getelementptr inbounds %struct.one_result, ptr %98, i64 %102, i32 1
  store ptr %2, ptr %104, align 8, !tbaa !17
  %105 = add nsw i32 %97, 1
  store i32 %105, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_andIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = and <4 x i32> %25, splat (i32 10)
  %28 = and <4 x i32> %26, splat (i32 10)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !475

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !476

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = and i32 %51, 10
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !477

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = and i32 %59, 10
  %61 = mul nuw nsw i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = and i32 %67, 10
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !476

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_andIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = and <4 x i32> %25, splat (i32 14)
  %28 = and <4 x i32> %26, splat (i32 14)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !478

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !479

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = and i32 %51, 14
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !480

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = and i32 %59, 14
  %61 = mul nuw nsw i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = and i32 %67, 14
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !479

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj18custom_constant_orIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = and i64 %10, 2147483640
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <4 x i32> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <4 x i32> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds nuw i32, ptr %0, i64 %18
  %22 = getelementptr inbounds nuw i8, ptr %21, i64 16
  %23 = load <4 x i32>, ptr %21, align 4, !tbaa !11
  %24 = load <4 x i32>, ptr %22, align 4, !tbaa !11
  %25 = or <4 x i32> %23, splat (i32 10)
  %26 = or <4 x i32> %24, splat (i32 10)
  %27 = add <4 x i32> %25, %19
  %28 = add <4 x i32> %26, %20
  %29 = add nuw i64 %18, 8
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !481

31:                                               ; preds = %17
  %32 = add <4 x i32> %28, %27
  %33 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i32 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !482

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i32 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !11
  %50 = or i32 %49, 10
  %51 = add i32 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !483

54:                                               ; preds = %45, %31
  %55 = phi i32 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !33
  %57 = fptoui double %56 to i32
  %58 = or i32 %57, 10
  %59 = mul i32 %58, 8000
  %60 = icmp eq i32 %55, %59
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !11
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !11
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !482

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !30
  %70 = load i64, ptr @start_time, align 8, !tbaa !30
  %71 = load ptr, ptr @results, align 8, !tbaa !6
  %72 = icmp ne ptr %71, null
  %73 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %74 = load i32, ptr @current_test, align 4
  %75 = icmp slt i32 %74, %73
  %76 = select i1 %72, i1 %75, i1 false
  br i1 %76, label %88, label %77

77:                                               ; preds = %68
  %78 = add nsw i32 %73, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !11
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %71, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !6
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %77
  %84 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %88

85:                                               ; preds = %77
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %68, %83
  %89 = phi i32 [ %84, %83 ], [ %74, %68 ]
  %90 = phi ptr [ %81, %83 ], [ %71, %68 ]
  %91 = sub nsw i64 %69, %70
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !13
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !17
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj27custom_multiple_constant_orIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 8
  %12 = and i64 %10, 2147483640
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <4 x i32> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <4 x i32> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds nuw i32, ptr %0, i64 %18
  %22 = getelementptr inbounds nuw i8, ptr %21, i64 16
  %23 = load <4 x i32>, ptr %21, align 4, !tbaa !11
  %24 = load <4 x i32>, ptr %22, align 4, !tbaa !11
  %25 = or <4 x i32> %23, splat (i32 63)
  %26 = or <4 x i32> %24, splat (i32 63)
  %27 = add <4 x i32> %25, %19
  %28 = add <4 x i32> %26, %20
  %29 = add nuw i64 %18, 8
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !484

31:                                               ; preds = %17
  %32 = add <4 x i32> %28, %27
  %33 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i32 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !485

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i32 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i32, ptr %0, i64 %46
  %49 = load i32, ptr %48, align 4, !tbaa !11
  %50 = or i32 %49, 63
  %51 = add i32 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !486

54:                                               ; preds = %45, %31
  %55 = phi i32 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !33
  %57 = fptoui double %56 to i32
  %58 = or i32 %57, 63
  %59 = mul i32 %58, 8000
  %60 = icmp eq i32 %55, %59
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !11
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !11
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !485

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !30
  %70 = load i64, ptr @start_time, align 8, !tbaa !30
  %71 = load ptr, ptr @results, align 8, !tbaa !6
  %72 = icmp ne ptr %71, null
  %73 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %74 = load i32, ptr @current_test, align 4
  %75 = icmp slt i32 %74, %73
  %76 = select i1 %72, i1 %75, i1 false
  br i1 %76, label %88, label %77

77:                                               ; preds = %68
  %78 = add nsw i32 %73, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !11
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %71, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !6
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %77
  %84 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %88

85:                                               ; preds = %77
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %68, %83
  %89 = phi i32 [ %84, %83 ], [ %74, %68 ]
  %90 = phi ptr [ %81, %83 ], [ %71, %68 ]
  %91 = sub nsw i64 %69, %70
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !13
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !17
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj19custom_constant_xorIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = xor <4 x i32> %25, splat (i32 10)
  %28 = xor <4 x i32> %26, splat (i32 10)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !487

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !488

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = xor i32 %51, 10
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !489

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = xor i32 %59, 10
  %61 = mul i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = xor i32 %67, 10
  %69 = mul i32 %68, 8000
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !11
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !33
  %75 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !488

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !30
  %83 = load i64, ptr @start_time, align 8, !tbaa !30
  %84 = load ptr, ptr @results, align 8, !tbaa !6
  %85 = icmp ne ptr %84, null
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = load i32, ptr @current_test, align 4
  %88 = icmp slt i32 %87, %86
  %89 = select i1 %85, i1 %88, i1 false
  br i1 %89, label %101, label %90

90:                                               ; preds = %81
  %91 = add nsw i32 %86, 10
  store i32 %91, ptr @allocated_results, align 4, !tbaa !11
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 4
  %94 = tail call ptr @realloc(ptr noundef %84, i64 noundef %93) #14
  store ptr %94, ptr @results, align 8, !tbaa !6
  %95 = icmp eq ptr %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %90
  %97 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %101

98:                                               ; preds = %90
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %100 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %99)
  tail call void @exit(i32 noundef -1) #15
  unreachable

101:                                              ; preds = %81, %96
  %102 = phi i32 [ %97, %96 ], [ %87, %81 ]
  %103 = phi ptr [ %94, %96 ], [ %84, %81 ]
  %104 = sub nsw i64 %82, %83
  %105 = sitofp i64 %104 to double
  %106 = fdiv double %105, 1.000000e+06
  %107 = sext i32 %102 to i64
  %108 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107
  store double %106, ptr %108, align 8, !tbaa !13
  %109 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107, i32 1
  store ptr %2, ptr %109, align 8, !tbaa !17
  %110 = add nsw i32 %102, 1
  store i32 %110, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIj28custom_multiple_constant_xorIjEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <4 x i32> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <4 x i32> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i32, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <4 x i32>, ptr %23, align 4, !tbaa !11
  %26 = load <4 x i32>, ptr %24, align 4, !tbaa !11
  %27 = xor <4 x i32> %25, splat (i32 49)
  %28 = xor <4 x i32> %26, splat (i32 49)
  %29 = add <4 x i32> %27, %21
  %30 = add <4 x i32> %28, %22
  %31 = add nuw i64 %20, 8
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !490

33:                                               ; preds = %19
  %34 = add <4 x i32> %30, %29
  %35 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i32 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !491

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i32 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i32, ptr %0, i64 %48
  %51 = load i32, ptr %50, align 4, !tbaa !11
  %52 = xor i32 %51, 49
  %53 = add i32 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !492

56:                                               ; preds = %47, %33
  %57 = phi i32 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i32
  %60 = xor i32 %59, 49
  %61 = mul i32 %60, 8000
  %62 = icmp eq i32 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i32
  %68 = xor i32 %67, 49
  %69 = mul i32 %68, 8000
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !11
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !33
  %75 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !491

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !30
  %83 = load i64, ptr @start_time, align 8, !tbaa !30
  %84 = load ptr, ptr @results, align 8, !tbaa !6
  %85 = icmp ne ptr %84, null
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = load i32, ptr @current_test, align 4
  %88 = icmp slt i32 %87, %86
  %89 = select i1 %85, i1 %88, i1 false
  br i1 %89, label %101, label %90

90:                                               ; preds = %81
  %91 = add nsw i32 %86, 10
  store i32 %91, ptr @allocated_results, align 4, !tbaa !11
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 4
  %94 = tail call ptr @realloc(ptr noundef %84, i64 noundef %93) #14
  store ptr %94, ptr @results, align 8, !tbaa !6
  %95 = icmp eq ptr %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %90
  %97 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %101

98:                                               ; preds = %90
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %100 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %99)
  tail call void @exit(i32 noundef -1) #15
  unreachable

101:                                              ; preds = %81, %96
  %102 = phi i32 [ %97, %96 ], [ %87, %81 ]
  %103 = phi ptr [ %94, %96 ], [ %84, %81 ]
  %104 = sub nsw i64 %82, %83
  %105 = sitofp i64 %104 to double
  %106 = fdiv double %105, 1.000000e+06
  %107 = sext i32 %102 to i64
  %108 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107
  store double %106, ptr %108, align 8, !tbaa !13
  %109 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107, i32 1
  store ptr %2, ptr %109, align 8, !tbaa !17
  %110 = add nsw i32 %102, 1
  store i32 %110, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl10custom_twoIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !493

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !493

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_add_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !494

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !494

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_sub_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !495

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !495

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl25custom_multiply_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !496

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !496

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl23custom_divide_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !497

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !497

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_mod_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !498

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !498

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl22custom_equal_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl25custom_notequal_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !499

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !499

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_greaterthan_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !500

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !500

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl25custom_lessthan_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl33custom_greaterthanequal_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !501

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !501

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl30custom_lessthanequal_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_and_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !502

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !502

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_or_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !503

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !503

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl20custom_xor_constantsIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !504

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !504

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_addIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 10)
  %28 = add <2 x i64> %22, splat (i64 10)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !505

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !506

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, 10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !507

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 80000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !506

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_addIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 10)
  %28 = add <2 x i64> %22, splat (i64 10)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !508

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !509

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, 10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !510

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 80000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !509

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_subIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 -10)
  %28 = add <2 x i64> %22, splat (i64 -10)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !511

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !512

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, -10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !513

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, -80000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !512

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_subIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 -10)
  %28 = add <2 x i64> %22, splat (i64 -10)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !514

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !515

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, -10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !516

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, -80000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !515

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl24custom_constant_multiplyIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %78

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %62

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp eq i32 %1, 1
  %14 = and i64 %12, 2147483646
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %32, %19 ], [ 0, %16 ]
  %21 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %22 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %25 = getelementptr inbounds nuw i8, ptr %24, i64 8
  %26 = load i64, ptr %23, align 8, !tbaa !30
  %27 = load i64, ptr %25, align 8, !tbaa !30
  %28 = mul nsw i64 %26, 120
  %29 = mul nsw i64 %27, 120
  %30 = add i64 %28, %21
  %31 = add i64 %29, %22
  %32 = add nuw i64 %20, 2
  %33 = icmp eq i64 %32, %14
  br i1 %33, label %34, label %19, !llvm.loop !517

34:                                               ; preds = %19
  %35 = add i64 %31, %30
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %34
  %37 = phi i64 [ 0, %16 ], [ %14, %34 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %34 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %78, !llvm.loop !518

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = mul nsw i64 %51, 120
  %53 = add nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !519

56:                                               ; preds = %47, %34
  %57 = phi i64 [ %35, %34 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = mul nsw i64 %59, 960000
  %61 = icmp eq i64 %57, %60
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %73
  %63 = phi i32 [ %74, %73 ], [ %5, %9 ]
  %64 = phi double [ %75, %73 ], [ %10, %9 ]
  %65 = phi i32 [ %76, %73 ], [ 0, %9 ]
  %66 = fptosi double %64 to i64
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %73, label %68

68:                                               ; preds = %62
  %69 = load i32, ptr @current_test, align 4, !tbaa !11
  %70 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %69)
  %71 = load double, ptr @init_value, align 8, !tbaa !33
  %72 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %73

73:                                               ; preds = %62, %68
  %74 = phi i32 [ %63, %62 ], [ %72, %68 ]
  %75 = phi double [ %64, %62 ], [ %71, %68 ]
  %76 = add nuw nsw i32 %65, 1
  %77 = icmp slt i32 %76, %74
  br i1 %77, label %62, label %78, !llvm.loop !518

78:                                               ; preds = %73, %43, %3
  %79 = tail call i64 @clock() #17
  store i64 %79, ptr @end_time, align 8, !tbaa !30
  %80 = load i64, ptr @start_time, align 8, !tbaa !30
  %81 = load ptr, ptr @results, align 8, !tbaa !6
  %82 = icmp ne ptr %81, null
  %83 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %84 = load i32, ptr @current_test, align 4
  %85 = icmp slt i32 %84, %83
  %86 = select i1 %82, i1 %85, i1 false
  br i1 %86, label %98, label %87

87:                                               ; preds = %78
  %88 = add nsw i32 %83, 10
  store i32 %88, ptr @allocated_results, align 4, !tbaa !11
  %89 = sext i32 %88 to i64
  %90 = shl nsw i64 %89, 4
  %91 = tail call ptr @realloc(ptr noundef %81, i64 noundef %90) #14
  store ptr %91, ptr @results, align 8, !tbaa !6
  %92 = icmp eq ptr %91, null
  br i1 %92, label %95, label %93

93:                                               ; preds = %87
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %98

95:                                               ; preds = %87
  %96 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %96)
  tail call void @exit(i32 noundef -1) #15
  unreachable

98:                                               ; preds = %78, %93
  %99 = phi i32 [ %94, %93 ], [ %84, %78 ]
  %100 = phi ptr [ %91, %93 ], [ %81, %78 ]
  %101 = sub nsw i64 %79, %80
  %102 = sitofp i64 %101 to double
  %103 = fdiv double %102, 1.000000e+06
  %104 = sext i32 %99 to i64
  %105 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104
  store double %103, ptr %105, align 8, !tbaa !13
  %106 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104, i32 1
  store ptr %2, ptr %106, align 8, !tbaa !17
  %107 = add nsw i32 %99, 1
  store i32 %107, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl33custom_multiple_constant_multiplyIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %78

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %62

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp eq i32 %1, 1
  %14 = and i64 %12, 2147483646
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %32, %19 ], [ 0, %16 ]
  %21 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %22 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %25 = getelementptr inbounds nuw i8, ptr %24, i64 8
  %26 = load i64, ptr %23, align 8, !tbaa !30
  %27 = load i64, ptr %25, align 8, !tbaa !30
  %28 = mul nsw i64 %26, 120
  %29 = mul nsw i64 %27, 120
  %30 = add i64 %28, %21
  %31 = add i64 %29, %22
  %32 = add nuw i64 %20, 2
  %33 = icmp eq i64 %32, %14
  br i1 %33, label %34, label %19, !llvm.loop !520

34:                                               ; preds = %19
  %35 = add i64 %31, %30
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %34
  %37 = phi i64 [ 0, %16 ], [ %14, %34 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %34 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %78, !llvm.loop !521

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = mul nsw i64 %51, 120
  %53 = add nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !522

56:                                               ; preds = %47, %34
  %57 = phi i64 [ %35, %34 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = mul nsw i64 %59, 960000
  %61 = icmp eq i64 %57, %60
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %73
  %63 = phi i32 [ %74, %73 ], [ %5, %9 ]
  %64 = phi double [ %75, %73 ], [ %10, %9 ]
  %65 = phi i32 [ %76, %73 ], [ 0, %9 ]
  %66 = fptosi double %64 to i64
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %73, label %68

68:                                               ; preds = %62
  %69 = load i32, ptr @current_test, align 4, !tbaa !11
  %70 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %69)
  %71 = load double, ptr @init_value, align 8, !tbaa !33
  %72 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %73

73:                                               ; preds = %62, %68
  %74 = phi i32 [ %63, %62 ], [ %72, %68 ]
  %75 = phi double [ %64, %62 ], [ %71, %68 ]
  %76 = add nuw nsw i32 %65, 1
  %77 = icmp slt i32 %76, %74
  br i1 %77, label %62, label %78, !llvm.loop !521

78:                                               ; preds = %73, %43, %3
  %79 = tail call i64 @clock() #17
  store i64 %79, ptr @end_time, align 8, !tbaa !30
  %80 = load i64, ptr @start_time, align 8, !tbaa !30
  %81 = load ptr, ptr @results, align 8, !tbaa !6
  %82 = icmp ne ptr %81, null
  %83 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %84 = load i32, ptr @current_test, align 4
  %85 = icmp slt i32 %84, %83
  %86 = select i1 %82, i1 %85, i1 false
  br i1 %86, label %98, label %87

87:                                               ; preds = %78
  %88 = add nsw i32 %83, 10
  store i32 %88, ptr @allocated_results, align 4, !tbaa !11
  %89 = sext i32 %88 to i64
  %90 = shl nsw i64 %89, 4
  %91 = tail call ptr @realloc(ptr noundef %81, i64 noundef %90) #14
  store ptr %91, ptr @results, align 8, !tbaa !6
  %92 = icmp eq ptr %91, null
  br i1 %92, label %95, label %93

93:                                               ; preds = %87
  %94 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %98

95:                                               ; preds = %87
  %96 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %97 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %96)
  tail call void @exit(i32 noundef -1) #15
  unreachable

98:                                               ; preds = %78, %93
  %99 = phi i32 [ %94, %93 ], [ %84, %78 ]
  %100 = phi ptr [ %91, %93 ], [ %81, %78 ]
  %101 = sub nsw i64 %79, %80
  %102 = sitofp i64 %101 to double
  %103 = fdiv double %102, 1.000000e+06
  %104 = sext i32 %99 to i64
  %105 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104
  store double %103, ptr %105, align 8, !tbaa !13
  %106 = getelementptr inbounds %struct.one_result, ptr %100, i64 %104, i32 1
  store ptr %2, ptr %106, align 8, !tbaa !17
  %107 = add nsw i32 %99, 1
  store i32 %107, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl34custom_multiple_constant_multiply2IlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 120)
  %28 = add <2 x i64> %22, splat (i64 120)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !523

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !524

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, 120
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !525

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 960000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -960000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !524

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl22custom_constant_divideIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = sdiv <2 x i64> %25, splat (i64 5)
  %28 = sdiv <2 x i64> %26, splat (i64 5)
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !526

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !527

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = sdiv i64 %51, 5
  %53 = add nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !528

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = sdiv i64 %59, 5
  %61 = mul nsw i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = add i64 %67, 4
  %69 = icmp ult i64 %68, 9
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !527

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl31custom_multiple_constant_divideIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = sdiv <2 x i64> %25, splat (i64 120)
  %28 = sdiv <2 x i64> %26, splat (i64 120)
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !529

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !530

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = sdiv i64 %51, 120
  %53 = add nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !531

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = sdiv i64 %59, 120
  %61 = mul nsw i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = add i64 %67, 119
  %69 = icmp ult i64 %68, 239
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !530

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl32custom_multiple_constant_divide2IlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 2)
  %28 = add <2 x i64> %22, splat (i64 2)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !532

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !533

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, 2
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !534

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 16000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -16000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !533

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl30custom_multiple_constant_mixedIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %75

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %59

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %41
  %17 = phi i32 [ %42, %41 ], [ %5, %11 ]
  %18 = phi i32 [ %43, %41 ], [ 0, %11 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %29, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %27, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %28, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %25, %21
  %28 = add <2 x i64> %26, %22
  %29 = add nuw i64 %20, 4
  %30 = icmp eq i64 %29, %14
  br i1 %30, label %31, label %19, !llvm.loop !535

31:                                               ; preds = %19
  %32 = add <2 x i64> %28, %27
  %33 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %32)
  br i1 %15, label %53, label %34

34:                                               ; preds = %16, %31
  %35 = phi i64 [ 0, %16 ], [ %14, %31 ]
  %36 = phi i64 [ 0, %16 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %53
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %53
  %42 = phi i32 [ %40, %37 ], [ %17, %53 ]
  %43 = add nuw nsw i32 %18, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %16, label %75, !llvm.loop !536

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %51, %45 ], [ %35, %34 ]
  %47 = phi i64 [ %50, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i64, ptr %0, i64 %46
  %49 = load i64, ptr %48, align 8, !tbaa !30
  %50 = add nsw i64 %49, %47
  %51 = add nuw nsw i64 %46, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %45, !llvm.loop !537

53:                                               ; preds = %45, %31
  %54 = phi i64 [ %33, %31 ], [ %50, %45 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fptosi double %55 to i64
  %57 = mul nsw i64 %56, 8000
  %58 = icmp eq i64 %54, %57
  br i1 %58, label %41, label %37

59:                                               ; preds = %9, %70
  %60 = phi i32 [ %71, %70 ], [ %5, %9 ]
  %61 = phi double [ %72, %70 ], [ %10, %9 ]
  %62 = phi i32 [ %73, %70 ], [ 0, %9 ]
  %63 = fptosi double %61 to i64
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %59
  %66 = load i32, ptr @current_test, align 4, !tbaa !11
  %67 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %66)
  %68 = load double, ptr @init_value, align 8, !tbaa !33
  %69 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %70

70:                                               ; preds = %59, %65
  %71 = phi i32 [ %60, %59 ], [ %69, %65 ]
  %72 = phi double [ %61, %59 ], [ %68, %65 ]
  %73 = add nuw nsw i32 %62, 1
  %74 = icmp slt i32 %73, %71
  br i1 %74, label %59, label %75, !llvm.loop !536

75:                                               ; preds = %70, %41, %3
  %76 = tail call i64 @clock() #17
  store i64 %76, ptr @end_time, align 8, !tbaa !30
  %77 = load i64, ptr @start_time, align 8, !tbaa !30
  %78 = load ptr, ptr @results, align 8, !tbaa !6
  %79 = icmp ne ptr %78, null
  %80 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %81 = load i32, ptr @current_test, align 4
  %82 = icmp slt i32 %81, %80
  %83 = select i1 %79, i1 %82, i1 false
  br i1 %83, label %95, label %84

84:                                               ; preds = %75
  %85 = add nsw i32 %80, 10
  store i32 %85, ptr @allocated_results, align 4, !tbaa !11
  %86 = sext i32 %85 to i64
  %87 = shl nsw i64 %86, 4
  %88 = tail call ptr @realloc(ptr noundef %78, i64 noundef %87) #14
  store ptr %88, ptr @results, align 8, !tbaa !6
  %89 = icmp eq ptr %88, null
  br i1 %89, label %92, label %90

90:                                               ; preds = %84
  %91 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %95

92:                                               ; preds = %84
  %93 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %94 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %93)
  tail call void @exit(i32 noundef -1) #15
  unreachable

95:                                               ; preds = %75, %90
  %96 = phi i32 [ %91, %90 ], [ %81, %75 ]
  %97 = phi ptr [ %88, %90 ], [ %78, %75 ]
  %98 = sub nsw i64 %76, %77
  %99 = sitofp i64 %98 to double
  %100 = fdiv double %99, 1.000000e+06
  %101 = sext i32 %96 to i64
  %102 = getelementptr inbounds %struct.one_result, ptr %97, i64 %101
  store double %100, ptr %102, align 8, !tbaa !13
  %103 = getelementptr inbounds %struct.one_result, ptr %97, i64 %101, i32 1
  store ptr %2, ptr %103, align 8, !tbaa !17
  %104 = add nsw i32 %96, 1
  store i32 %104, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_andIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = and <2 x i64> %25, splat (i64 10)
  %28 = and <2 x i64> %26, splat (i64 10)
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !538

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !539

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = and i64 %51, 10
  %53 = add nuw nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !540

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = and i64 %59, 10
  %61 = mul nuw nsw i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = and i64 %67, 10
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !539

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_andIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = and <2 x i64> %25, splat (i64 14)
  %28 = and <2 x i64> %26, splat (i64 14)
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !541

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !542

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = and i64 %51, 14
  %53 = add nuw nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !543

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = and i64 %59, 14
  %61 = mul nuw nsw i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = and i64 %67, 14
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !542

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl18custom_constant_orIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 4
  %12 = and i64 %10, 2147483644
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <2 x i64> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <2 x i64> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds nuw i64, ptr %0, i64 %18
  %22 = getelementptr inbounds nuw i8, ptr %21, i64 16
  %23 = load <2 x i64>, ptr %21, align 8, !tbaa !30
  %24 = load <2 x i64>, ptr %22, align 8, !tbaa !30
  %25 = or <2 x i64> %23, splat (i64 10)
  %26 = or <2 x i64> %24, splat (i64 10)
  %27 = add <2 x i64> %25, %19
  %28 = add <2 x i64> %26, %20
  %29 = add nuw i64 %18, 4
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !544

31:                                               ; preds = %17
  %32 = add <2 x i64> %28, %27
  %33 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i64 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !545

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i64 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i64, ptr %0, i64 %46
  %49 = load i64, ptr %48, align 8, !tbaa !30
  %50 = or i64 %49, 10
  %51 = add nsw i64 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !546

54:                                               ; preds = %45, %31
  %55 = phi i64 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !33
  %57 = fptosi double %56 to i64
  %58 = or i64 %57, 10
  %59 = mul nsw i64 %58, 8000
  %60 = icmp eq i64 %55, %59
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !11
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !11
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !545

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !30
  %70 = load i64, ptr @start_time, align 8, !tbaa !30
  %71 = load ptr, ptr @results, align 8, !tbaa !6
  %72 = icmp ne ptr %71, null
  %73 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %74 = load i32, ptr @current_test, align 4
  %75 = icmp slt i32 %74, %73
  %76 = select i1 %72, i1 %75, i1 false
  br i1 %76, label %88, label %77

77:                                               ; preds = %68
  %78 = add nsw i32 %73, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !11
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %71, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !6
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %77
  %84 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %88

85:                                               ; preds = %77
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %68, %83
  %89 = phi i32 [ %84, %83 ], [ %74, %68 ]
  %90 = phi ptr [ %81, %83 ], [ %71, %68 ]
  %91 = sub nsw i64 %69, %70
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !13
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !17
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl27custom_multiple_constant_orIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 4
  %12 = and i64 %10, 2147483644
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <2 x i64> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <2 x i64> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds nuw i64, ptr %0, i64 %18
  %22 = getelementptr inbounds nuw i8, ptr %21, i64 16
  %23 = load <2 x i64>, ptr %21, align 8, !tbaa !30
  %24 = load <2 x i64>, ptr %22, align 8, !tbaa !30
  %25 = or <2 x i64> %23, splat (i64 63)
  %26 = or <2 x i64> %24, splat (i64 63)
  %27 = add <2 x i64> %25, %19
  %28 = add <2 x i64> %26, %20
  %29 = add nuw i64 %18, 4
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !547

31:                                               ; preds = %17
  %32 = add <2 x i64> %28, %27
  %33 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i64 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !548

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i64 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i64, ptr %0, i64 %46
  %49 = load i64, ptr %48, align 8, !tbaa !30
  %50 = or i64 %49, 63
  %51 = add nsw i64 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !549

54:                                               ; preds = %45, %31
  %55 = phi i64 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !33
  %57 = fptosi double %56 to i64
  %58 = or i64 %57, 63
  %59 = mul nsw i64 %58, 8000
  %60 = icmp eq i64 %55, %59
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !11
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !11
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !548

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !30
  %70 = load i64, ptr @start_time, align 8, !tbaa !30
  %71 = load ptr, ptr @results, align 8, !tbaa !6
  %72 = icmp ne ptr %71, null
  %73 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %74 = load i32, ptr @current_test, align 4
  %75 = icmp slt i32 %74, %73
  %76 = select i1 %72, i1 %75, i1 false
  br i1 %76, label %88, label %77

77:                                               ; preds = %68
  %78 = add nsw i32 %73, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !11
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %71, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !6
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %77
  %84 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %88

85:                                               ; preds = %77
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %68, %83
  %89 = phi i32 [ %84, %83 ], [ %74, %68 ]
  %90 = phi ptr [ %81, %83 ], [ %71, %68 ]
  %91 = sub nsw i64 %69, %70
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !13
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !17
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl19custom_constant_xorIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = xor <2 x i64> %25, splat (i64 10)
  %28 = xor <2 x i64> %26, splat (i64 10)
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !550

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !551

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = xor i64 %51, 10
  %53 = add nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !552

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = xor i64 %59, 10
  %61 = mul nsw i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %74
  %64 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %65 = phi double [ %76, %74 ], [ %10, %9 ]
  %66 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = icmp eq i64 %67, 10
  br i1 %68, label %74, label %69

69:                                               ; preds = %63
  %70 = load i32, ptr @current_test, align 4, !tbaa !11
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !33
  %73 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %74

74:                                               ; preds = %63, %69
  %75 = phi i32 [ %64, %63 ], [ %73, %69 ]
  %76 = phi double [ %65, %63 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %66, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %63, label %79, !llvm.loop !551

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIl28custom_multiple_constant_xorIlEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = xor <2 x i64> %25, splat (i64 49)
  %28 = xor <2 x i64> %26, splat (i64 49)
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !553

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !554

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = xor i64 %51, 49
  %53 = add nsw i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !555

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptosi double %58 to i64
  %60 = xor i64 %59, 49
  %61 = mul nsw i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %74
  %64 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %65 = phi double [ %76, %74 ], [ %10, %9 ]
  %66 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %67 = fptosi double %65 to i64
  %68 = icmp eq i64 %67, 49
  br i1 %68, label %74, label %69

69:                                               ; preds = %63
  %70 = load i32, ptr @current_test, align 4, !tbaa !11
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !33
  %73 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %74

74:                                               ; preds = %63, %69
  %75 = phi i32 [ %64, %63 ], [ %73, %69 ]
  %76 = phi double [ %65, %63 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %66, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %63, label %79, !llvm.loop !554

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm10custom_twoImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !556

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !556

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_add_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !557

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !557

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_sub_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !558

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !558

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm25custom_multiply_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !559

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !559

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm23custom_divide_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !560

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !560

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_mod_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !561

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !561

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm22custom_equal_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm25custom_notequal_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !562

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !562

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_greaterthan_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !563

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !563

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm25custom_lessthan_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm33custom_greaterthanequal_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !564

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !564

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm30custom_lessthanequal_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = tail call i64 @clock() #17
  store i64 %5, ptr @end_time, align 8, !tbaa !30
  %6 = load i64, ptr @start_time, align 8, !tbaa !30
  %7 = load ptr, ptr @results, align 8, !tbaa !6
  %8 = icmp ne ptr %7, null
  %9 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %10 = load i32, ptr @current_test, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %8, i1 %11, i1 false
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = add nsw i32 %9, 10
  store i32 %14, ptr @allocated_results, align 4, !tbaa !11
  %15 = sext i32 %14 to i64
  %16 = shl nsw i64 %15, 4
  %17 = tail call ptr @realloc(ptr noundef %7, i64 noundef %16) #14
  store ptr %17, ptr @results, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %24

21:                                               ; preds = %13
  %22 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %23 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %22)
  tail call void @exit(i32 noundef -1) #15
  unreachable

24:                                               ; preds = %3, %19
  %25 = phi i32 [ %20, %19 ], [ %10, %3 ]
  %26 = phi ptr [ %17, %19 ], [ %7, %3 ]
  %27 = sub nsw i64 %5, %6
  %28 = sitofp i64 %27 to double
  %29 = fdiv double %28, 1.000000e+06
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30
  store double %29, ptr %31, align 8, !tbaa !13
  %32 = getelementptr inbounds %struct.one_result, ptr %26, i64 %30, i32 1
  store ptr %2, ptr %32, align 8, !tbaa !17
  %33 = add nsw i32 %25, 1
  store i32 %33, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_and_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !565

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !565

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_or_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !566

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !566

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm20custom_xor_constantsImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %29

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %22

9:                                                ; preds = %7
  %10 = icmp eq i32 %1, 8000
  br label %11

11:                                               ; preds = %9, %18
  %12 = phi i32 [ %19, %18 ], [ %5, %9 ]
  %13 = phi i32 [ %20, %18 ], [ 0, %9 ]
  br i1 %10, label %18, label %14

14:                                               ; preds = %11
  %15 = load i32, ptr @current_test, align 4, !tbaa !11
  %16 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %15)
  %17 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %18

18:                                               ; preds = %14, %11
  %19 = phi i32 [ %17, %14 ], [ %12, %11 ]
  %20 = add nuw nsw i32 %13, 1
  %21 = icmp slt i32 %20, %19
  br i1 %21, label %11, label %29, !llvm.loop !567

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %26, %22 ], [ 0, %7 ]
  %24 = load i32, ptr @current_test, align 4, !tbaa !11
  %25 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %24)
  %26 = add nuw nsw i32 %23, 1
  %27 = load i32, ptr @iterations, align 4, !tbaa !11
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %22, label %29, !llvm.loop !567

29:                                               ; preds = %22, %18, %3
  %30 = tail call i64 @clock() #17
  store i64 %30, ptr @end_time, align 8, !tbaa !30
  %31 = load i64, ptr @start_time, align 8, !tbaa !30
  %32 = load ptr, ptr @results, align 8, !tbaa !6
  %33 = icmp ne ptr %32, null
  %34 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %35 = load i32, ptr @current_test, align 4
  %36 = icmp slt i32 %35, %34
  %37 = select i1 %33, i1 %36, i1 false
  br i1 %37, label %49, label %38

38:                                               ; preds = %29
  %39 = add nsw i32 %34, 10
  store i32 %39, ptr @allocated_results, align 4, !tbaa !11
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call ptr @realloc(ptr noundef %32, i64 noundef %41) #14
  store ptr %42, ptr @results, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %38
  %45 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %49

46:                                               ; preds = %38
  %47 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %48 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %47)
  tail call void @exit(i32 noundef -1) #15
  unreachable

49:                                               ; preds = %29, %44
  %50 = phi i32 [ %45, %44 ], [ %35, %29 ]
  %51 = phi ptr [ %42, %44 ], [ %32, %29 ]
  %52 = sub nsw i64 %30, %31
  %53 = sitofp i64 %52 to double
  %54 = fdiv double %53, 1.000000e+06
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55
  store double %54, ptr %56, align 8, !tbaa !13
  %57 = getelementptr inbounds %struct.one_result, ptr %51, i64 %55, i32 1
  store ptr %2, ptr %57, align 8, !tbaa !17
  %58 = add nsw i32 %50, 1
  store i32 %58, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_addImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 10)
  %28 = add <2 x i64> %22, splat (i64 10)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !568

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !569

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, 10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !570

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 80000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !569

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_addImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 10)
  %28 = add <2 x i64> %22, splat (i64 10)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !571

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !572

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, 10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !573

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 80000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !572

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_subImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 -10)
  %28 = add <2 x i64> %22, splat (i64 -10)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !574

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !575

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, -10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !576

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, -80000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !575

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_subImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 -10)
  %28 = add <2 x i64> %22, splat (i64 -10)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !577

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !578

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, -10
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !579

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, -80000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, 80000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !578

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm24custom_constant_multiplyImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %62

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp eq i32 %1, 1
  %14 = and i64 %12, 2147483646
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %32, %19 ], [ 0, %16 ]
  %21 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %22 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %25 = getelementptr inbounds nuw i8, ptr %24, i64 8
  %26 = load i64, ptr %23, align 8, !tbaa !30
  %27 = load i64, ptr %25, align 8, !tbaa !30
  %28 = mul i64 %26, 120
  %29 = mul i64 %27, 120
  %30 = add i64 %28, %21
  %31 = add i64 %29, %22
  %32 = add nuw i64 %20, 2
  %33 = icmp eq i64 %32, %14
  br i1 %33, label %34, label %19, !llvm.loop !580

34:                                               ; preds = %19
  %35 = add i64 %31, %30
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %34
  %37 = phi i64 [ 0, %16 ], [ %14, %34 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %34 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !581

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = mul i64 %51, 120
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !582

56:                                               ; preds = %47, %34
  %57 = phi i64 [ %35, %34 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 960000
  %61 = icmp eq i64 %57, %60
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptoui double %64 to i64
  %67 = mul i64 %66, 960000
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !11
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !33
  %73 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !581

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm33custom_multiple_constant_multiplyImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %79

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %62

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp eq i32 %1, 1
  %14 = and i64 %12, 2147483646
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %32, %19 ], [ 0, %16 ]
  %21 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %22 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %25 = getelementptr inbounds nuw i8, ptr %24, i64 8
  %26 = load i64, ptr %23, align 8, !tbaa !30
  %27 = load i64, ptr %25, align 8, !tbaa !30
  %28 = mul i64 %26, 120
  %29 = mul i64 %27, 120
  %30 = add i64 %28, %21
  %31 = add i64 %29, %22
  %32 = add nuw i64 %20, 2
  %33 = icmp eq i64 %32, %14
  br i1 %33, label %34, label %19, !llvm.loop !583

34:                                               ; preds = %19
  %35 = add i64 %31, %30
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %34
  %37 = phi i64 [ 0, %16 ], [ %14, %34 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %34 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %79, !llvm.loop !584

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = mul i64 %51, 120
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !585

56:                                               ; preds = %47, %34
  %57 = phi i64 [ %35, %34 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 960000
  %61 = icmp eq i64 %57, %60
  br i1 %61, label %43, label %39

62:                                               ; preds = %9, %74
  %63 = phi i32 [ %75, %74 ], [ %5, %9 ]
  %64 = phi double [ %76, %74 ], [ %10, %9 ]
  %65 = phi i32 [ %77, %74 ], [ 0, %9 ]
  %66 = fptoui double %64 to i64
  %67 = mul i64 %66, 960000
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %74, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr @current_test, align 4, !tbaa !11
  %71 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %70)
  %72 = load double, ptr @init_value, align 8, !tbaa !33
  %73 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %74

74:                                               ; preds = %62, %69
  %75 = phi i32 [ %63, %62 ], [ %73, %69 ]
  %76 = phi double [ %64, %62 ], [ %72, %69 ]
  %77 = add nuw nsw i32 %65, 1
  %78 = icmp slt i32 %77, %75
  br i1 %78, label %62, label %79, !llvm.loop !584

79:                                               ; preds = %74, %43, %3
  %80 = tail call i64 @clock() #17
  store i64 %80, ptr @end_time, align 8, !tbaa !30
  %81 = load i64, ptr @start_time, align 8, !tbaa !30
  %82 = load ptr, ptr @results, align 8, !tbaa !6
  %83 = icmp ne ptr %82, null
  %84 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %85 = load i32, ptr @current_test, align 4
  %86 = icmp slt i32 %85, %84
  %87 = select i1 %83, i1 %86, i1 false
  br i1 %87, label %99, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %84, 10
  store i32 %89, ptr @allocated_results, align 4, !tbaa !11
  %90 = sext i32 %89 to i64
  %91 = shl nsw i64 %90, 4
  %92 = tail call ptr @realloc(ptr noundef %82, i64 noundef %91) #14
  store ptr %92, ptr @results, align 8, !tbaa !6
  %93 = icmp eq ptr %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %88
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %99

96:                                               ; preds = %88
  %97 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %98 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %97)
  tail call void @exit(i32 noundef -1) #15
  unreachable

99:                                               ; preds = %79, %94
  %100 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %101 = phi ptr [ %92, %94 ], [ %82, %79 ]
  %102 = sub nsw i64 %80, %81
  %103 = sitofp i64 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = sext i32 %100 to i64
  %106 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105
  store double %104, ptr %106, align 8, !tbaa !13
  %107 = getelementptr inbounds %struct.one_result, ptr %101, i64 %105, i32 1
  store ptr %2, ptr %107, align 8, !tbaa !17
  %108 = add nsw i32 %100, 1
  store i32 %108, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm34custom_multiple_constant_multiply2ImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 120)
  %28 = add <2 x i64> %22, splat (i64 120)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !586

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !587

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, 120
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !588

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 960000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -960000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !587

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm22custom_constant_divideImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp eq i32 %1, 1
  %14 = and i64 %12, 2147483646
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %32, %19 ], [ 0, %16 ]
  %21 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %22 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %25 = getelementptr inbounds nuw i8, ptr %24, i64 8
  %26 = load i64, ptr %23, align 8, !tbaa !30
  %27 = load i64, ptr %25, align 8, !tbaa !30
  %28 = udiv i64 %26, 5
  %29 = udiv i64 %27, 5
  %30 = add i64 %28, %21
  %31 = add i64 %29, %22
  %32 = add nuw i64 %20, 2
  %33 = icmp eq i64 %32, %14
  br i1 %33, label %34, label %19, !llvm.loop !589

34:                                               ; preds = %19
  %35 = add i64 %31, %30
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %34
  %37 = phi i64 [ 0, %16 ], [ %14, %34 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %34 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !590

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = udiv i64 %51, 5
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !591

56:                                               ; preds = %47, %34
  %57 = phi i64 [ %35, %34 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = udiv i64 %59, 5
  %61 = mul i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = udiv i64 %67, 5
  %69 = mul i64 %68, 8000
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !11
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !33
  %75 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !590

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !30
  %83 = load i64, ptr @start_time, align 8, !tbaa !30
  %84 = load ptr, ptr @results, align 8, !tbaa !6
  %85 = icmp ne ptr %84, null
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = load i32, ptr @current_test, align 4
  %88 = icmp slt i32 %87, %86
  %89 = select i1 %85, i1 %88, i1 false
  br i1 %89, label %101, label %90

90:                                               ; preds = %81
  %91 = add nsw i32 %86, 10
  store i32 %91, ptr @allocated_results, align 4, !tbaa !11
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 4
  %94 = tail call ptr @realloc(ptr noundef %84, i64 noundef %93) #14
  store ptr %94, ptr @results, align 8, !tbaa !6
  %95 = icmp eq ptr %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %90
  %97 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %101

98:                                               ; preds = %90
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %100 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %99)
  tail call void @exit(i32 noundef -1) #15
  unreachable

101:                                              ; preds = %81, %96
  %102 = phi i32 [ %97, %96 ], [ %87, %81 ]
  %103 = phi ptr [ %94, %96 ], [ %84, %81 ]
  %104 = sub nsw i64 %82, %83
  %105 = sitofp i64 %104 to double
  %106 = fdiv double %105, 1.000000e+06
  %107 = sext i32 %102 to i64
  %108 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107
  store double %106, ptr %108, align 8, !tbaa !13
  %109 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107, i32 1
  store ptr %2, ptr %109, align 8, !tbaa !17
  %110 = add nsw i32 %102, 1
  store i32 %110, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm31custom_multiple_constant_divideImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp eq i32 %1, 1
  %14 = and i64 %12, 2147483646
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %32, %19 ], [ 0, %16 ]
  %21 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %22 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %25 = getelementptr inbounds nuw i8, ptr %24, i64 8
  %26 = load i64, ptr %23, align 8, !tbaa !30
  %27 = load i64, ptr %25, align 8, !tbaa !30
  %28 = udiv i64 %26, 120
  %29 = udiv i64 %27, 120
  %30 = add i64 %28, %21
  %31 = add i64 %29, %22
  %32 = add nuw i64 %20, 2
  %33 = icmp eq i64 %32, %14
  br i1 %33, label %34, label %19, !llvm.loop !592

34:                                               ; preds = %19
  %35 = add i64 %31, %30
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %34
  %37 = phi i64 [ 0, %16 ], [ %14, %34 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %34 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !593

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = udiv i64 %51, 120
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !594

56:                                               ; preds = %47, %34
  %57 = phi i64 [ %35, %34 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = udiv i64 %59, 120
  %61 = mul i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = udiv i64 %67, 120
  %69 = mul i64 %68, 8000
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !11
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !33
  %75 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !593

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !30
  %83 = load i64, ptr @start_time, align 8, !tbaa !30
  %84 = load ptr, ptr @results, align 8, !tbaa !6
  %85 = icmp ne ptr %84, null
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = load i32, ptr @current_test, align 4
  %88 = icmp slt i32 %87, %86
  %89 = select i1 %85, i1 %88, i1 false
  br i1 %89, label %101, label %90

90:                                               ; preds = %81
  %91 = add nsw i32 %86, 10
  store i32 %91, ptr @allocated_results, align 4, !tbaa !11
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 4
  %94 = tail call ptr @realloc(ptr noundef %84, i64 noundef %93) #14
  store ptr %94, ptr @results, align 8, !tbaa !6
  %95 = icmp eq ptr %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %90
  %97 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %101

98:                                               ; preds = %90
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %100 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %99)
  tail call void @exit(i32 noundef -1) #15
  unreachable

101:                                              ; preds = %81, %96
  %102 = phi i32 [ %97, %96 ], [ %87, %81 ]
  %103 = phi ptr [ %94, %96 ], [ %84, %81 ]
  %104 = sub nsw i64 %82, %83
  %105 = sitofp i64 %104 to double
  %106 = fdiv double %105, 1.000000e+06
  %107 = sext i32 %102 to i64
  %108 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107
  store double %106, ptr %108, align 8, !tbaa !13
  %109 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107, i32 1
  store ptr %2, ptr %109, align 8, !tbaa !17
  %110 = add nsw i32 %102, 1
  store i32 %110, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm32custom_multiple_constant_divide2ImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %21, splat (i64 2)
  %28 = add <2 x i64> %22, splat (i64 2)
  %29 = add <2 x i64> %27, %25
  %30 = add <2 x i64> %28, %26
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !595

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !596

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = add i64 %49, 2
  %53 = add i64 %52, %51
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !597

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = mul i64 %59, 8000
  %61 = add i64 %60, 16000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = mul i64 %67, 8000
  %69 = icmp eq i64 %68, -16000
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !596

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm30custom_multiple_constant_mixedImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %76

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %59

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %41
  %17 = phi i32 [ %42, %41 ], [ %5, %11 ]
  %18 = phi i32 [ %43, %41 ], [ 0, %11 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %29, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %27, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %28, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = add <2 x i64> %25, %21
  %28 = add <2 x i64> %26, %22
  %29 = add nuw i64 %20, 4
  %30 = icmp eq i64 %29, %14
  br i1 %30, label %31, label %19, !llvm.loop !598

31:                                               ; preds = %19
  %32 = add <2 x i64> %28, %27
  %33 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %32)
  br i1 %15, label %53, label %34

34:                                               ; preds = %16, %31
  %35 = phi i64 [ 0, %16 ], [ %14, %31 ]
  %36 = phi i64 [ 0, %16 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %53
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %53
  %42 = phi i32 [ %40, %37 ], [ %17, %53 ]
  %43 = add nuw nsw i32 %18, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %16, label %76, !llvm.loop !599

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %51, %45 ], [ %35, %34 ]
  %47 = phi i64 [ %50, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i64, ptr %0, i64 %46
  %49 = load i64, ptr %48, align 8, !tbaa !30
  %50 = add i64 %49, %47
  %51 = add nuw nsw i64 %46, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %45, !llvm.loop !600

53:                                               ; preds = %45, %31
  %54 = phi i64 [ %33, %31 ], [ %50, %45 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fptoui double %55 to i64
  %57 = mul i64 %56, 8000
  %58 = icmp eq i64 %54, %57
  br i1 %58, label %41, label %37

59:                                               ; preds = %9, %71
  %60 = phi i32 [ %72, %71 ], [ %5, %9 ]
  %61 = phi double [ %73, %71 ], [ %10, %9 ]
  %62 = phi i32 [ %74, %71 ], [ 0, %9 ]
  %63 = fptoui double %61 to i64
  %64 = mul i64 %63, 8000
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %71, label %66

66:                                               ; preds = %59
  %67 = load i32, ptr @current_test, align 4, !tbaa !11
  %68 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %67)
  %69 = load double, ptr @init_value, align 8, !tbaa !33
  %70 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %71

71:                                               ; preds = %59, %66
  %72 = phi i32 [ %60, %59 ], [ %70, %66 ]
  %73 = phi double [ %61, %59 ], [ %69, %66 ]
  %74 = add nuw nsw i32 %62, 1
  %75 = icmp slt i32 %74, %72
  br i1 %75, label %59, label %76, !llvm.loop !599

76:                                               ; preds = %71, %41, %3
  %77 = tail call i64 @clock() #17
  store i64 %77, ptr @end_time, align 8, !tbaa !30
  %78 = load i64, ptr @start_time, align 8, !tbaa !30
  %79 = load ptr, ptr @results, align 8, !tbaa !6
  %80 = icmp ne ptr %79, null
  %81 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %82 = load i32, ptr @current_test, align 4
  %83 = icmp slt i32 %82, %81
  %84 = select i1 %80, i1 %83, i1 false
  br i1 %84, label %96, label %85

85:                                               ; preds = %76
  %86 = add nsw i32 %81, 10
  store i32 %86, ptr @allocated_results, align 4, !tbaa !11
  %87 = sext i32 %86 to i64
  %88 = shl nsw i64 %87, 4
  %89 = tail call ptr @realloc(ptr noundef %79, i64 noundef %88) #14
  store ptr %89, ptr @results, align 8, !tbaa !6
  %90 = icmp eq ptr %89, null
  br i1 %90, label %93, label %91

91:                                               ; preds = %85
  %92 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %96

93:                                               ; preds = %85
  %94 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %95 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %94)
  tail call void @exit(i32 noundef -1) #15
  unreachable

96:                                               ; preds = %76, %91
  %97 = phi i32 [ %92, %91 ], [ %82, %76 ]
  %98 = phi ptr [ %89, %91 ], [ %79, %76 ]
  %99 = sub nsw i64 %77, %78
  %100 = sitofp i64 %99 to double
  %101 = fdiv double %100, 1.000000e+06
  %102 = sext i32 %97 to i64
  %103 = getelementptr inbounds %struct.one_result, ptr %98, i64 %102
  store double %101, ptr %103, align 8, !tbaa !13
  %104 = getelementptr inbounds %struct.one_result, ptr %98, i64 %102, i32 1
  store ptr %2, ptr %104, align 8, !tbaa !17
  %105 = add nsw i32 %97, 1
  store i32 %105, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_andImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = and <2 x i64> %25, splat (i64 10)
  %28 = and <2 x i64> %26, splat (i64 10)
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !601

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !602

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = and i64 %51, 10
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !603

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = and i64 %59, 10
  %61 = mul nuw nsw i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = and i64 %67, 10
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !602

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_andImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %80

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = and <2 x i64> %25, splat (i64 14)
  %28 = and <2 x i64> %26, splat (i64 14)
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !604

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %80, !llvm.loop !605

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = and i64 %51, 14
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !606

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = and i64 %59, 14
  %61 = mul nuw nsw i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %75
  %64 = phi i32 [ %76, %75 ], [ %5, %9 ]
  %65 = phi double [ %77, %75 ], [ %10, %9 ]
  %66 = phi i32 [ %78, %75 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = and i64 %67, 14
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i32, ptr @current_test, align 4, !tbaa !11
  %72 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %71)
  %73 = load double, ptr @init_value, align 8, !tbaa !33
  %74 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %75

75:                                               ; preds = %63, %70
  %76 = phi i32 [ %64, %63 ], [ %74, %70 ]
  %77 = phi double [ %65, %63 ], [ %73, %70 ]
  %78 = add nuw nsw i32 %66, 1
  %79 = icmp slt i32 %78, %76
  br i1 %79, label %63, label %80, !llvm.loop !605

80:                                               ; preds = %75, %43, %3
  %81 = tail call i64 @clock() #17
  store i64 %81, ptr @end_time, align 8, !tbaa !30
  %82 = load i64, ptr @start_time, align 8, !tbaa !30
  %83 = load ptr, ptr @results, align 8, !tbaa !6
  %84 = icmp ne ptr %83, null
  %85 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %86 = load i32, ptr @current_test, align 4
  %87 = icmp slt i32 %86, %85
  %88 = select i1 %84, i1 %87, i1 false
  br i1 %88, label %100, label %89

89:                                               ; preds = %80
  %90 = add nsw i32 %85, 10
  store i32 %90, ptr @allocated_results, align 4, !tbaa !11
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 4
  %93 = tail call ptr @realloc(ptr noundef %83, i64 noundef %92) #14
  store ptr %93, ptr @results, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %89
  %96 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %100

97:                                               ; preds = %89
  %98 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %99 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %98)
  tail call void @exit(i32 noundef -1) #15
  unreachable

100:                                              ; preds = %80, %95
  %101 = phi i32 [ %96, %95 ], [ %86, %80 ]
  %102 = phi ptr [ %93, %95 ], [ %83, %80 ]
  %103 = sub nsw i64 %81, %82
  %104 = sitofp i64 %103 to double
  %105 = fdiv double %104, 1.000000e+06
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106
  store double %105, ptr %107, align 8, !tbaa !13
  %108 = getelementptr inbounds %struct.one_result, ptr %102, i64 %106, i32 1
  store ptr %2, ptr %108, align 8, !tbaa !17
  %109 = add nsw i32 %101, 1
  store i32 %109, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm18custom_constant_orImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 4
  %12 = and i64 %10, 2147483644
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <2 x i64> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <2 x i64> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds nuw i64, ptr %0, i64 %18
  %22 = getelementptr inbounds nuw i8, ptr %21, i64 16
  %23 = load <2 x i64>, ptr %21, align 8, !tbaa !30
  %24 = load <2 x i64>, ptr %22, align 8, !tbaa !30
  %25 = or <2 x i64> %23, splat (i64 10)
  %26 = or <2 x i64> %24, splat (i64 10)
  %27 = add <2 x i64> %25, %19
  %28 = add <2 x i64> %26, %20
  %29 = add nuw i64 %18, 4
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !607

31:                                               ; preds = %17
  %32 = add <2 x i64> %28, %27
  %33 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i64 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !608

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i64 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i64, ptr %0, i64 %46
  %49 = load i64, ptr %48, align 8, !tbaa !30
  %50 = or i64 %49, 10
  %51 = add i64 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !609

54:                                               ; preds = %45, %31
  %55 = phi i64 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !33
  %57 = fptoui double %56 to i64
  %58 = or i64 %57, 10
  %59 = mul i64 %58, 8000
  %60 = icmp eq i64 %55, %59
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !11
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !11
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !608

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !30
  %70 = load i64, ptr @start_time, align 8, !tbaa !30
  %71 = load ptr, ptr @results, align 8, !tbaa !6
  %72 = icmp ne ptr %71, null
  %73 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %74 = load i32, ptr @current_test, align 4
  %75 = icmp slt i32 %74, %73
  %76 = select i1 %72, i1 %75, i1 false
  br i1 %76, label %88, label %77

77:                                               ; preds = %68
  %78 = add nsw i32 %73, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !11
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %71, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !6
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %77
  %84 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %88

85:                                               ; preds = %77
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %68, %83
  %89 = phi i32 [ %84, %83 ], [ %74, %68 ]
  %90 = phi ptr [ %81, %83 ], [ %71, %68 ]
  %91 = sub nsw i64 %69, %70
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !13
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !17
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm27custom_multiple_constant_orImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %68

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %7
  %10 = zext nneg i32 %1 to i64
  %11 = icmp ult i32 %1, 4
  %12 = and i64 %10, 2147483644
  %13 = icmp eq i64 %12, %10
  br label %14

14:                                               ; preds = %9, %41
  %15 = phi i32 [ %42, %41 ], [ %5, %9 ]
  %16 = phi i32 [ %43, %41 ], [ 0, %9 ]
  br i1 %11, label %34, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %29, %17 ], [ 0, %14 ]
  %19 = phi <2 x i64> [ %27, %17 ], [ zeroinitializer, %14 ]
  %20 = phi <2 x i64> [ %28, %17 ], [ zeroinitializer, %14 ]
  %21 = getelementptr inbounds nuw i64, ptr %0, i64 %18
  %22 = getelementptr inbounds nuw i8, ptr %21, i64 16
  %23 = load <2 x i64>, ptr %21, align 8, !tbaa !30
  %24 = load <2 x i64>, ptr %22, align 8, !tbaa !30
  %25 = or <2 x i64> %23, splat (i64 63)
  %26 = or <2 x i64> %24, splat (i64 63)
  %27 = add <2 x i64> %25, %19
  %28 = add <2 x i64> %26, %20
  %29 = add nuw i64 %18, 4
  %30 = icmp eq i64 %29, %12
  br i1 %30, label %31, label %17, !llvm.loop !610

31:                                               ; preds = %17
  %32 = add <2 x i64> %28, %27
  %33 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %32)
  br i1 %13, label %54, label %34

34:                                               ; preds = %14, %31
  %35 = phi i64 [ 0, %14 ], [ %12, %31 ]
  %36 = phi i64 [ 0, %14 ], [ %33, %31 ]
  br label %45

37:                                               ; preds = %54
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %41

41:                                               ; preds = %37, %54
  %42 = phi i32 [ %40, %37 ], [ %15, %54 ]
  %43 = add nuw nsw i32 %16, 1
  %44 = icmp slt i32 %43, %42
  br i1 %44, label %14, label %68, !llvm.loop !611

45:                                               ; preds = %34, %45
  %46 = phi i64 [ %52, %45 ], [ %35, %34 ]
  %47 = phi i64 [ %51, %45 ], [ %36, %34 ]
  %48 = getelementptr inbounds nuw i64, ptr %0, i64 %46
  %49 = load i64, ptr %48, align 8, !tbaa !30
  %50 = or i64 %49, 63
  %51 = add i64 %50, %47
  %52 = add nuw nsw i64 %46, 1
  %53 = icmp eq i64 %52, %10
  br i1 %53, label %54, label %45, !llvm.loop !612

54:                                               ; preds = %45, %31
  %55 = phi i64 [ %33, %31 ], [ %51, %45 ]
  %56 = load double, ptr @init_value, align 8, !tbaa !33
  %57 = fptoui double %56 to i64
  %58 = or i64 %57, 63
  %59 = mul i64 %58, 8000
  %60 = icmp eq i64 %55, %59
  br i1 %60, label %41, label %37

61:                                               ; preds = %7, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %7 ]
  %63 = load i32, ptr @current_test, align 4, !tbaa !11
  %64 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %63)
  %65 = add nuw nsw i32 %62, 1
  %66 = load i32, ptr @iterations, align 4, !tbaa !11
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %61, label %68, !llvm.loop !611

68:                                               ; preds = %61, %41, %3
  %69 = tail call i64 @clock() #17
  store i64 %69, ptr @end_time, align 8, !tbaa !30
  %70 = load i64, ptr @start_time, align 8, !tbaa !30
  %71 = load ptr, ptr @results, align 8, !tbaa !6
  %72 = icmp ne ptr %71, null
  %73 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %74 = load i32, ptr @current_test, align 4
  %75 = icmp slt i32 %74, %73
  %76 = select i1 %72, i1 %75, i1 false
  br i1 %76, label %88, label %77

77:                                               ; preds = %68
  %78 = add nsw i32 %73, 10
  store i32 %78, ptr @allocated_results, align 4, !tbaa !11
  %79 = sext i32 %78 to i64
  %80 = shl nsw i64 %79, 4
  %81 = tail call ptr @realloc(ptr noundef %71, i64 noundef %80) #14
  store ptr %81, ptr @results, align 8, !tbaa !6
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %77
  %84 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %88

85:                                               ; preds = %77
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %86)
  tail call void @exit(i32 noundef -1) #15
  unreachable

88:                                               ; preds = %68, %83
  %89 = phi i32 [ %84, %83 ], [ %74, %68 ]
  %90 = phi ptr [ %81, %83 ], [ %71, %68 ]
  %91 = sub nsw i64 %69, %70
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = sext i32 %89 to i64
  %95 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94
  store double %93, ptr %95, align 8, !tbaa !13
  %96 = getelementptr inbounds %struct.one_result, ptr %90, i64 %94, i32 1
  store ptr %2, ptr %96, align 8, !tbaa !17
  %97 = add nsw i32 %89, 1
  store i32 %97, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm19custom_constant_xorImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = xor <2 x i64> %25, splat (i64 10)
  %28 = xor <2 x i64> %26, splat (i64 10)
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !613

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !614

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = xor i64 %51, 10
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !615

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = xor i64 %59, 10
  %61 = mul i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = xor i64 %67, 10
  %69 = mul i64 %68, 8000
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !11
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !33
  %75 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !614

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !30
  %83 = load i64, ptr @start_time, align 8, !tbaa !30
  %84 = load ptr, ptr @results, align 8, !tbaa !6
  %85 = icmp ne ptr %84, null
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = load i32, ptr @current_test, align 4
  %88 = icmp slt i32 %87, %86
  %89 = select i1 %85, i1 %88, i1 false
  br i1 %89, label %101, label %90

90:                                               ; preds = %81
  %91 = add nsw i32 %86, 10
  store i32 %91, ptr @allocated_results, align 4, !tbaa !11
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 4
  %94 = tail call ptr @realloc(ptr noundef %84, i64 noundef %93) #14
  store ptr %94, ptr @results, align 8, !tbaa !6
  %95 = icmp eq ptr %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %90
  %97 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %101

98:                                               ; preds = %90
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %100 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %99)
  tail call void @exit(i32 noundef -1) #15
  unreachable

101:                                              ; preds = %81, %96
  %102 = phi i32 [ %97, %96 ], [ %87, %81 ]
  %103 = phi ptr [ %94, %96 ], [ %84, %81 ]
  %104 = sub nsw i64 %82, %83
  %105 = sitofp i64 %104 to double
  %106 = fdiv double %105, 1.000000e+06
  %107 = sext i32 %102 to i64
  %108 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107
  store double %106, ptr %108, align 8, !tbaa !13
  %109 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107, i32 1
  store ptr %2, ptr %109, align 8, !tbaa !17
  %110 = add nsw i32 %102, 1
  store i32 %110, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIm28custom_multiple_constant_xorImEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %81

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %63

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %43
  %17 = phi i32 [ %44, %43 ], [ %5, %11 ]
  %18 = phi i32 [ %45, %43 ], [ 0, %11 ]
  br i1 %13, label %36, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %31, %19 ], [ 0, %16 ]
  %21 = phi <2 x i64> [ %29, %19 ], [ zeroinitializer, %16 ]
  %22 = phi <2 x i64> [ %30, %19 ], [ zeroinitializer, %16 ]
  %23 = getelementptr inbounds nuw i64, ptr %0, i64 %20
  %24 = getelementptr inbounds nuw i8, ptr %23, i64 16
  %25 = load <2 x i64>, ptr %23, align 8, !tbaa !30
  %26 = load <2 x i64>, ptr %24, align 8, !tbaa !30
  %27 = xor <2 x i64> %25, splat (i64 49)
  %28 = xor <2 x i64> %26, splat (i64 49)
  %29 = add <2 x i64> %27, %21
  %30 = add <2 x i64> %28, %22
  %31 = add nuw i64 %20, 4
  %32 = icmp eq i64 %31, %14
  br i1 %32, label %33, label %19, !llvm.loop !616

33:                                               ; preds = %19
  %34 = add <2 x i64> %30, %29
  %35 = tail call i64 @llvm.vector.reduce.add.v2i64(<2 x i64> %34)
  br i1 %15, label %56, label %36

36:                                               ; preds = %16, %33
  %37 = phi i64 [ 0, %16 ], [ %14, %33 ]
  %38 = phi i64 [ 0, %16 ], [ %35, %33 ]
  br label %47

39:                                               ; preds = %56
  %40 = load i32, ptr @current_test, align 4, !tbaa !11
  %41 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %40)
  %42 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %39, %56
  %44 = phi i32 [ %42, %39 ], [ %17, %56 ]
  %45 = add nuw nsw i32 %18, 1
  %46 = icmp slt i32 %45, %44
  br i1 %46, label %16, label %81, !llvm.loop !617

47:                                               ; preds = %36, %47
  %48 = phi i64 [ %54, %47 ], [ %37, %36 ]
  %49 = phi i64 [ %53, %47 ], [ %38, %36 ]
  %50 = getelementptr inbounds nuw i64, ptr %0, i64 %48
  %51 = load i64, ptr %50, align 8, !tbaa !30
  %52 = xor i64 %51, 49
  %53 = add i64 %52, %49
  %54 = add nuw nsw i64 %48, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %47, !llvm.loop !618

56:                                               ; preds = %47, %33
  %57 = phi i64 [ %35, %33 ], [ %53, %47 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptoui double %58 to i64
  %60 = xor i64 %59, 49
  %61 = mul i64 %60, 8000
  %62 = icmp eq i64 %57, %61
  br i1 %62, label %43, label %39

63:                                               ; preds = %9, %76
  %64 = phi i32 [ %77, %76 ], [ %5, %9 ]
  %65 = phi double [ %78, %76 ], [ %10, %9 ]
  %66 = phi i32 [ %79, %76 ], [ 0, %9 ]
  %67 = fptoui double %65 to i64
  %68 = xor i64 %67, 49
  %69 = mul i64 %68, 8000
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %76, label %71

71:                                               ; preds = %63
  %72 = load i32, ptr @current_test, align 4, !tbaa !11
  %73 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %72)
  %74 = load double, ptr @init_value, align 8, !tbaa !33
  %75 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %76

76:                                               ; preds = %63, %71
  %77 = phi i32 [ %64, %63 ], [ %75, %71 ]
  %78 = phi double [ %65, %63 ], [ %74, %71 ]
  %79 = add nuw nsw i32 %66, 1
  %80 = icmp slt i32 %79, %77
  br i1 %80, label %63, label %81, !llvm.loop !617

81:                                               ; preds = %76, %43, %3
  %82 = tail call i64 @clock() #17
  store i64 %82, ptr @end_time, align 8, !tbaa !30
  %83 = load i64, ptr @start_time, align 8, !tbaa !30
  %84 = load ptr, ptr @results, align 8, !tbaa !6
  %85 = icmp ne ptr %84, null
  %86 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %87 = load i32, ptr @current_test, align 4
  %88 = icmp slt i32 %87, %86
  %89 = select i1 %85, i1 %88, i1 false
  br i1 %89, label %101, label %90

90:                                               ; preds = %81
  %91 = add nsw i32 %86, 10
  store i32 %91, ptr @allocated_results, align 4, !tbaa !11
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 4
  %94 = tail call ptr @realloc(ptr noundef %84, i64 noundef %93) #14
  store ptr %94, ptr @results, align 8, !tbaa !6
  %95 = icmp eq ptr %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %90
  %97 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %101

98:                                               ; preds = %90
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %100 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %99)
  tail call void @exit(i32 noundef -1) #15
  unreachable

101:                                              ; preds = %81, %96
  %102 = phi i32 [ %97, %96 ], [ %87, %81 ]
  %103 = phi ptr [ %94, %96 ], [ %84, %81 ]
  %104 = sub nsw i64 %82, %83
  %105 = sitofp i64 %104 to double
  %106 = fdiv double %105, 1.000000e+06
  %107 = sext i32 %102 to i64
  %108 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107
  store double %106, ptr %108, align 8, !tbaa !13
  %109 = getelementptr inbounds %struct.one_result, ptr %103, i64 %107, i32 1
  store ptr %2, ptr %109, align 8, !tbaa !17
  %110 = add nsw i32 %102, 1
  store i32 %110, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf10custom_twoIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %43

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %36

9:                                                ; preds = %7, %16
  %10 = phi i32 [ %17, %16 ], [ %5, %7 ]
  %11 = phi i32 [ %18, %16 ], [ 0, %7 ]
  br label %20

12:                                               ; preds = %26
  %13 = load i32, ptr @current_test, align 4, !tbaa !11
  %14 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %15 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %16

16:                                               ; preds = %12, %26
  %17 = phi i32 [ %15, %12 ], [ %10, %26 ]
  %18 = add nuw nsw i32 %11, 1
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %9, label %43, !llvm.loop !619

20:                                               ; preds = %9, %20
  %21 = phi i32 [ 0, %9 ], [ %24, %20 ]
  %22 = phi float [ 0.000000e+00, %9 ], [ %23, %20 ]
  %23 = fadd float %22, 2.000000e+00
  %24 = add nuw nsw i32 %21, 1
  %25 = icmp eq i32 %24, %1
  br i1 %25, label %26, label %20, !llvm.loop !620

26:                                               ; preds = %20
  %27 = fadd float %23, -1.600000e+04
  %28 = tail call noundef float @llvm.fabs.f32(float %23)
  %29 = fpext float %28 to double
  %30 = fcmp ogt double %29, 1.000000e-04
  %31 = fdiv float %27, %23
  %32 = select i1 %30, float %31, float %27
  %33 = tail call float @llvm.fabs.f32(float %32)
  %34 = fpext float %33 to double
  %35 = fcmp olt double %34, 1.000000e-03
  br i1 %35, label %16, label %12

36:                                               ; preds = %7, %36
  %37 = phi i32 [ %40, %36 ], [ 0, %7 ]
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = add nuw nsw i32 %37, 1
  %41 = load i32, ptr @iterations, align 4, !tbaa !11
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %36, label %43, !llvm.loop !619

43:                                               ; preds = %36, %16, %3
  %44 = tail call i64 @clock() #17
  store i64 %44, ptr @end_time, align 8, !tbaa !30
  %45 = load i64, ptr @start_time, align 8, !tbaa !30
  %46 = load ptr, ptr @results, align 8, !tbaa !6
  %47 = icmp ne ptr %46, null
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = load i32, ptr @current_test, align 4
  %50 = icmp slt i32 %49, %48
  %51 = select i1 %47, i1 %50, i1 false
  br i1 %51, label %63, label %52

52:                                               ; preds = %43
  %53 = add nsw i32 %48, 10
  store i32 %53, ptr @allocated_results, align 4, !tbaa !11
  %54 = sext i32 %53 to i64
  %55 = shl nsw i64 %54, 4
  %56 = tail call ptr @realloc(ptr noundef %46, i64 noundef %55) #14
  store ptr %56, ptr @results, align 8, !tbaa !6
  %57 = icmp eq ptr %56, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %52
  %59 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %63

60:                                               ; preds = %52
  %61 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %62 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %61)
  tail call void @exit(i32 noundef -1) #15
  unreachable

63:                                               ; preds = %43, %58
  %64 = phi i32 [ %59, %58 ], [ %49, %43 ]
  %65 = phi ptr [ %56, %58 ], [ %46, %43 ]
  %66 = sub nsw i64 %44, %45
  %67 = sitofp i64 %66 to double
  %68 = fdiv double %67, 1.000000e+06
  %69 = sext i32 %64 to i64
  %70 = getelementptr inbounds %struct.one_result, ptr %65, i64 %69
  store double %68, ptr %70, align 8, !tbaa !13
  %71 = getelementptr inbounds %struct.one_result, ptr %65, i64 %69, i32 1
  store ptr %2, ptr %71, align 8, !tbaa !17
  %72 = add nsw i32 %64, 1
  store i32 %72, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf20custom_add_constantsIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %43

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %36

9:                                                ; preds = %7, %16
  %10 = phi i32 [ %17, %16 ], [ %5, %7 ]
  %11 = phi i32 [ %18, %16 ], [ 0, %7 ]
  br label %20

12:                                               ; preds = %26
  %13 = load i32, ptr @current_test, align 4, !tbaa !11
  %14 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %15 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %16

16:                                               ; preds = %12, %26
  %17 = phi i32 [ %15, %12 ], [ %10, %26 ]
  %18 = add nuw nsw i32 %11, 1
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %9, label %43, !llvm.loop !621

20:                                               ; preds = %9, %20
  %21 = phi i32 [ 0, %9 ], [ %24, %20 ]
  %22 = phi float [ 0.000000e+00, %9 ], [ %23, %20 ]
  %23 = fadd float %22, 3.000000e+00
  %24 = add nuw nsw i32 %21, 1
  %25 = icmp eq i32 %24, %1
  br i1 %25, label %26, label %20, !llvm.loop !622

26:                                               ; preds = %20
  %27 = fadd float %23, -2.400000e+04
  %28 = tail call noundef float @llvm.fabs.f32(float %23)
  %29 = fpext float %28 to double
  %30 = fcmp ogt double %29, 1.000000e-04
  %31 = fdiv float %27, %23
  %32 = select i1 %30, float %31, float %27
  %33 = tail call float @llvm.fabs.f32(float %32)
  %34 = fpext float %33 to double
  %35 = fcmp olt double %34, 1.000000e-03
  br i1 %35, label %16, label %12

36:                                               ; preds = %7, %36
  %37 = phi i32 [ %40, %36 ], [ 0, %7 ]
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = add nuw nsw i32 %37, 1
  %41 = load i32, ptr @iterations, align 4, !tbaa !11
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %36, label %43, !llvm.loop !621

43:                                               ; preds = %36, %16, %3
  %44 = tail call i64 @clock() #17
  store i64 %44, ptr @end_time, align 8, !tbaa !30
  %45 = load i64, ptr @start_time, align 8, !tbaa !30
  %46 = load ptr, ptr @results, align 8, !tbaa !6
  %47 = icmp ne ptr %46, null
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = load i32, ptr @current_test, align 4
  %50 = icmp slt i32 %49, %48
  %51 = select i1 %47, i1 %50, i1 false
  br i1 %51, label %63, label %52

52:                                               ; preds = %43
  %53 = add nsw i32 %48, 10
  store i32 %53, ptr @allocated_results, align 4, !tbaa !11
  %54 = sext i32 %53 to i64
  %55 = shl nsw i64 %54, 4
  %56 = tail call ptr @realloc(ptr noundef %46, i64 noundef %55) #14
  store ptr %56, ptr @results, align 8, !tbaa !6
  %57 = icmp eq ptr %56, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %52
  %59 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %63

60:                                               ; preds = %52
  %61 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %62 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %61)
  tail call void @exit(i32 noundef -1) #15
  unreachable

63:                                               ; preds = %43, %58
  %64 = phi i32 [ %59, %58 ], [ %49, %43 ]
  %65 = phi ptr [ %56, %58 ], [ %46, %43 ]
  %66 = sub nsw i64 %44, %45
  %67 = sitofp i64 %66 to double
  %68 = fdiv double %67, 1.000000e+06
  %69 = sext i32 %64 to i64
  %70 = getelementptr inbounds %struct.one_result, ptr %65, i64 %69
  store double %68, ptr %70, align 8, !tbaa !13
  %71 = getelementptr inbounds %struct.one_result, ptr %65, i64 %69, i32 1
  store ptr %2, ptr %71, align 8, !tbaa !17
  %72 = add nsw i32 %64, 1
  store i32 %72, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf20custom_sub_constantsIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %43

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %36

9:                                                ; preds = %7, %16
  %10 = phi i32 [ %17, %16 ], [ %5, %7 ]
  %11 = phi i32 [ %18, %16 ], [ 0, %7 ]
  br label %20

12:                                               ; preds = %26
  %13 = load i32, ptr @current_test, align 4, !tbaa !11
  %14 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %15 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %16

16:                                               ; preds = %12, %26
  %17 = phi i32 [ %15, %12 ], [ %10, %26 ]
  %18 = add nuw nsw i32 %11, 1
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %9, label %43, !llvm.loop !623

20:                                               ; preds = %9, %20
  %21 = phi i32 [ 0, %9 ], [ %24, %20 ]
  %22 = phi float [ 0.000000e+00, %9 ], [ %23, %20 ]
  %23 = fadd float %22, 1.000000e+00
  %24 = add nuw nsw i32 %21, 1
  %25 = icmp eq i32 %24, %1
  br i1 %25, label %26, label %20, !llvm.loop !624

26:                                               ; preds = %20
  %27 = fadd float %23, -8.000000e+03
  %28 = tail call noundef float @llvm.fabs.f32(float %23)
  %29 = fpext float %28 to double
  %30 = fcmp ogt double %29, 1.000000e-04
  %31 = fdiv float %27, %23
  %32 = select i1 %30, float %31, float %27
  %33 = tail call float @llvm.fabs.f32(float %32)
  %34 = fpext float %33 to double
  %35 = fcmp olt double %34, 1.000000e-03
  br i1 %35, label %16, label %12

36:                                               ; preds = %7, %36
  %37 = phi i32 [ %40, %36 ], [ 0, %7 ]
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = add nuw nsw i32 %37, 1
  %41 = load i32, ptr @iterations, align 4, !tbaa !11
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %36, label %43, !llvm.loop !623

43:                                               ; preds = %36, %16, %3
  %44 = tail call i64 @clock() #17
  store i64 %44, ptr @end_time, align 8, !tbaa !30
  %45 = load i64, ptr @start_time, align 8, !tbaa !30
  %46 = load ptr, ptr @results, align 8, !tbaa !6
  %47 = icmp ne ptr %46, null
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = load i32, ptr @current_test, align 4
  %50 = icmp slt i32 %49, %48
  %51 = select i1 %47, i1 %50, i1 false
  br i1 %51, label %63, label %52

52:                                               ; preds = %43
  %53 = add nsw i32 %48, 10
  store i32 %53, ptr @allocated_results, align 4, !tbaa !11
  %54 = sext i32 %53 to i64
  %55 = shl nsw i64 %54, 4
  %56 = tail call ptr @realloc(ptr noundef %46, i64 noundef %55) #14
  store ptr %56, ptr @results, align 8, !tbaa !6
  %57 = icmp eq ptr %56, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %52
  %59 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %63

60:                                               ; preds = %52
  %61 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %62 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %61)
  tail call void @exit(i32 noundef -1) #15
  unreachable

63:                                               ; preds = %43, %58
  %64 = phi i32 [ %59, %58 ], [ %49, %43 ]
  %65 = phi ptr [ %56, %58 ], [ %46, %43 ]
  %66 = sub nsw i64 %44, %45
  %67 = sitofp i64 %66 to double
  %68 = fdiv double %67, 1.000000e+06
  %69 = sext i32 %64 to i64
  %70 = getelementptr inbounds %struct.one_result, ptr %65, i64 %69
  store double %68, ptr %70, align 8, !tbaa !13
  %71 = getelementptr inbounds %struct.one_result, ptr %65, i64 %69, i32 1
  store ptr %2, ptr %71, align 8, !tbaa !17
  %72 = add nsw i32 %64, 1
  store i32 %72, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf25custom_multiply_constantsIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %43

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %36

9:                                                ; preds = %7, %16
  %10 = phi i32 [ %17, %16 ], [ %5, %7 ]
  %11 = phi i32 [ %18, %16 ], [ 0, %7 ]
  br label %20

12:                                               ; preds = %26
  %13 = load i32, ptr @current_test, align 4, !tbaa !11
  %14 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %15 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %16

16:                                               ; preds = %12, %26
  %17 = phi i32 [ %15, %12 ], [ %10, %26 ]
  %18 = add nuw nsw i32 %11, 1
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %9, label %43, !llvm.loop !625

20:                                               ; preds = %9, %20
  %21 = phi i32 [ 0, %9 ], [ %24, %20 ]
  %22 = phi float [ 0.000000e+00, %9 ], [ %23, %20 ]
  %23 = fadd float %22, 6.000000e+00
  %24 = add nuw nsw i32 %21, 1
  %25 = icmp eq i32 %24, %1
  br i1 %25, label %26, label %20, !llvm.loop !626

26:                                               ; preds = %20
  %27 = fadd float %23, -4.800000e+04
  %28 = tail call noundef float @llvm.fabs.f32(float %23)
  %29 = fpext float %28 to double
  %30 = fcmp ogt double %29, 1.000000e-04
  %31 = fdiv float %27, %23
  %32 = select i1 %30, float %31, float %27
  %33 = tail call float @llvm.fabs.f32(float %32)
  %34 = fpext float %33 to double
  %35 = fcmp olt double %34, 1.000000e-03
  br i1 %35, label %16, label %12

36:                                               ; preds = %7, %36
  %37 = phi i32 [ %40, %36 ], [ 0, %7 ]
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = add nuw nsw i32 %37, 1
  %41 = load i32, ptr @iterations, align 4, !tbaa !11
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %36, label %43, !llvm.loop !625

43:                                               ; preds = %36, %16, %3
  %44 = tail call i64 @clock() #17
  store i64 %44, ptr @end_time, align 8, !tbaa !30
  %45 = load i64, ptr @start_time, align 8, !tbaa !30
  %46 = load ptr, ptr @results, align 8, !tbaa !6
  %47 = icmp ne ptr %46, null
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = load i32, ptr @current_test, align 4
  %50 = icmp slt i32 %49, %48
  %51 = select i1 %47, i1 %50, i1 false
  br i1 %51, label %63, label %52

52:                                               ; preds = %43
  %53 = add nsw i32 %48, 10
  store i32 %53, ptr @allocated_results, align 4, !tbaa !11
  %54 = sext i32 %53 to i64
  %55 = shl nsw i64 %54, 4
  %56 = tail call ptr @realloc(ptr noundef %46, i64 noundef %55) #14
  store ptr %56, ptr @results, align 8, !tbaa !6
  %57 = icmp eq ptr %56, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %52
  %59 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %63

60:                                               ; preds = %52
  %61 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %62 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %61)
  tail call void @exit(i32 noundef -1) #15
  unreachable

63:                                               ; preds = %43, %58
  %64 = phi i32 [ %59, %58 ], [ %49, %43 ]
  %65 = phi ptr [ %56, %58 ], [ %46, %43 ]
  %66 = sub nsw i64 %44, %45
  %67 = sitofp i64 %66 to double
  %68 = fdiv double %67, 1.000000e+06
  %69 = sext i32 %64 to i64
  %70 = getelementptr inbounds %struct.one_result, ptr %65, i64 %69
  store double %68, ptr %70, align 8, !tbaa !13
  %71 = getelementptr inbounds %struct.one_result, ptr %65, i64 %69, i32 1
  store ptr %2, ptr %71, align 8, !tbaa !17
  %72 = add nsw i32 %64, 1
  store i32 %72, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf23custom_divide_constantsIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %43

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %36

9:                                                ; preds = %7, %16
  %10 = phi i32 [ %17, %16 ], [ %5, %7 ]
  %11 = phi i32 [ %18, %16 ], [ 0, %7 ]
  br label %20

12:                                               ; preds = %26
  %13 = load i32, ptr @current_test, align 4, !tbaa !11
  %14 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %15 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %16

16:                                               ; preds = %12, %26
  %17 = phi i32 [ %15, %12 ], [ %10, %26 ]
  %18 = add nuw nsw i32 %11, 1
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %9, label %43, !llvm.loop !627

20:                                               ; preds = %9, %20
  %21 = phi i32 [ 0, %9 ], [ %24, %20 ]
  %22 = phi float [ 0.000000e+00, %9 ], [ %23, %20 ]
  %23 = fadd float %22, 2.000000e+00
  %24 = add nuw nsw i32 %21, 1
  %25 = icmp eq i32 %24, %1
  br i1 %25, label %26, label %20, !llvm.loop !628

26:                                               ; preds = %20
  %27 = fadd float %23, -1.600000e+04
  %28 = tail call noundef float @llvm.fabs.f32(float %23)
  %29 = fpext float %28 to double
  %30 = fcmp ogt double %29, 1.000000e-04
  %31 = fdiv float %27, %23
  %32 = select i1 %30, float %31, float %27
  %33 = tail call float @llvm.fabs.f32(float %32)
  %34 = fpext float %33 to double
  %35 = fcmp olt double %34, 1.000000e-03
  br i1 %35, label %16, label %12

36:                                               ; preds = %7, %36
  %37 = phi i32 [ %40, %36 ], [ 0, %7 ]
  %38 = load i32, ptr @current_test, align 4, !tbaa !11
  %39 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %38)
  %40 = add nuw nsw i32 %37, 1
  %41 = load i32, ptr @iterations, align 4, !tbaa !11
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %36, label %43, !llvm.loop !627

43:                                               ; preds = %36, %16, %3
  %44 = tail call i64 @clock() #17
  store i64 %44, ptr @end_time, align 8, !tbaa !30
  %45 = load i64, ptr @start_time, align 8, !tbaa !30
  %46 = load ptr, ptr @results, align 8, !tbaa !6
  %47 = icmp ne ptr %46, null
  %48 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %49 = load i32, ptr @current_test, align 4
  %50 = icmp slt i32 %49, %48
  %51 = select i1 %47, i1 %50, i1 false
  br i1 %51, label %63, label %52

52:                                               ; preds = %43
  %53 = add nsw i32 %48, 10
  store i32 %53, ptr @allocated_results, align 4, !tbaa !11
  %54 = sext i32 %53 to i64
  %55 = shl nsw i64 %54, 4
  %56 = tail call ptr @realloc(ptr noundef %46, i64 noundef %55) #14
  store ptr %56, ptr @results, align 8, !tbaa !6
  %57 = icmp eq ptr %56, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %52
  %59 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %63

60:                                               ; preds = %52
  %61 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %62 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %61)
  tail call void @exit(i32 noundef -1) #15
  unreachable

63:                                               ; preds = %43, %58
  %64 = phi i32 [ %59, %58 ], [ %49, %43 ]
  %65 = phi ptr [ %56, %58 ], [ %46, %43 ]
  %66 = sub nsw i64 %44, %45
  %67 = sitofp i64 %66 to double
  %68 = fdiv double %67, 1.000000e+06
  %69 = sext i32 %64 to i64
  %70 = getelementptr inbounds %struct.one_result, ptr %65, i64 %69
  store double %68, ptr %70, align 8, !tbaa !13
  %71 = getelementptr inbounds %struct.one_result, ptr %65, i64 %69, i32 1
  store ptr %2, ptr %71, align 8, !tbaa !17
  %72 = add nsw i32 %64, 1
  store i32 %72, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf19custom_constant_addIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %89

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %68

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi float [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw float, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <4 x float>, ptr %22, align 4, !tbaa !43
  %25 = load <4 x float>, ptr %23, align 4, !tbaa !43
  %26 = fadd <4 x float> %24, splat (float 1.000000e+01)
  %27 = fadd <4 x float> %25, splat (float 1.000000e+01)
  %28 = tail call float @llvm.vector.reduce.fadd.v4f32(float %21, <4 x float> %26)
  %29 = tail call float @llvm.vector.reduce.fadd.v4f32(float %28, <4 x float> %27)
  %30 = add nuw i64 %20, 8
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !629

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi float [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %89, !llvm.loop !630

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi float [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw float, ptr %0, i64 %45
  %48 = load float, ptr %47, align 4, !tbaa !43
  %49 = fadd float %48, 1.000000e+01
  %50 = fadd float %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !631

53:                                               ; preds = %44, %32
  %54 = phi float [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fptrunc double %55 to float
  %57 = fadd float %56, 1.000000e+01
  %58 = fmul float %57, 8.000000e+03
  %59 = fsub float %54, %58
  %60 = tail call noundef float @llvm.fabs.f32(float %54)
  %61 = fpext float %60 to double
  %62 = fcmp ogt double %61, 1.000000e-04
  %63 = fdiv float %59, %54
  %64 = select i1 %62, float %63, float %59
  %65 = tail call float @llvm.fabs.f32(float %64)
  %66 = fpext float %65 to double
  %67 = fcmp olt double %66, 1.000000e-03
  br i1 %67, label %40, label %36

68:                                               ; preds = %9, %84
  %69 = phi i32 [ %85, %84 ], [ %5, %9 ]
  %70 = phi double [ %86, %84 ], [ %10, %9 ]
  %71 = phi i32 [ %87, %84 ], [ 0, %9 ]
  %72 = fptrunc double %70 to float
  %73 = fadd float %72, 1.000000e+01
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float 0.000000e+00, %74
  %76 = tail call float @llvm.fabs.f32(float %75)
  %77 = fpext float %76 to double
  %78 = fcmp olt double %77, 1.000000e-03
  br i1 %78, label %84, label %79

79:                                               ; preds = %68
  %80 = load i32, ptr @current_test, align 4, !tbaa !11
  %81 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %80)
  %82 = load double, ptr @init_value, align 8, !tbaa !33
  %83 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %84

84:                                               ; preds = %68, %79
  %85 = phi i32 [ %69, %68 ], [ %83, %79 ]
  %86 = phi double [ %70, %68 ], [ %82, %79 ]
  %87 = add nuw nsw i32 %71, 1
  %88 = icmp slt i32 %87, %85
  br i1 %88, label %68, label %89, !llvm.loop !630

89:                                               ; preds = %84, %40, %3
  %90 = tail call i64 @clock() #17
  store i64 %90, ptr @end_time, align 8, !tbaa !30
  %91 = load i64, ptr @start_time, align 8, !tbaa !30
  %92 = load ptr, ptr @results, align 8, !tbaa !6
  %93 = icmp ne ptr %92, null
  %94 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %95 = load i32, ptr @current_test, align 4
  %96 = icmp slt i32 %95, %94
  %97 = select i1 %93, i1 %96, i1 false
  br i1 %97, label %109, label %98

98:                                               ; preds = %89
  %99 = add nsw i32 %94, 10
  store i32 %99, ptr @allocated_results, align 4, !tbaa !11
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 4
  %102 = tail call ptr @realloc(ptr noundef %92, i64 noundef %101) #14
  store ptr %102, ptr @results, align 8, !tbaa !6
  %103 = icmp eq ptr %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %98
  %105 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %109

106:                                              ; preds = %98
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %107)
  tail call void @exit(i32 noundef -1) #15
  unreachable

109:                                              ; preds = %89, %104
  %110 = phi i32 [ %105, %104 ], [ %95, %89 ]
  %111 = phi ptr [ %102, %104 ], [ %92, %89 ]
  %112 = sub nsw i64 %90, %91
  %113 = sitofp i64 %112 to double
  %114 = fdiv double %113, 1.000000e+06
  %115 = sext i32 %110 to i64
  %116 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115
  store double %114, ptr %116, align 8, !tbaa !13
  %117 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115, i32 1
  store ptr %2, ptr %117, align 8, !tbaa !17
  %118 = add nsw i32 %110, 1
  store i32 %118, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf28custom_multiple_constant_addIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %104

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %80

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %46
  %17 = phi i32 [ %47, %46 ], [ %5, %11 ]
  %18 = phi i32 [ %48, %46 ], [ 0, %11 ]
  br i1 %13, label %39, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %36, %19 ], [ 0, %16 ]
  %21 = phi float [ %35, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw float, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <4 x float>, ptr %22, align 4, !tbaa !43
  %25 = load <4 x float>, ptr %23, align 4, !tbaa !43
  %26 = fadd <4 x float> %24, splat (float 1.000000e+00)
  %27 = fadd <4 x float> %25, splat (float 1.000000e+00)
  %28 = fadd <4 x float> %26, splat (float 2.000000e+00)
  %29 = fadd <4 x float> %27, splat (float 2.000000e+00)
  %30 = fadd <4 x float> %28, splat (float 3.000000e+00)
  %31 = fadd <4 x float> %29, splat (float 3.000000e+00)
  %32 = fadd <4 x float> %30, splat (float 4.000000e+00)
  %33 = fadd <4 x float> %31, splat (float 4.000000e+00)
  %34 = tail call float @llvm.vector.reduce.fadd.v4f32(float %21, <4 x float> %32)
  %35 = tail call float @llvm.vector.reduce.fadd.v4f32(float %34, <4 x float> %33)
  %36 = add nuw i64 %20, 8
  %37 = icmp eq i64 %36, %14
  br i1 %37, label %38, label %19, !llvm.loop !632

38:                                               ; preds = %19
  br i1 %15, label %62, label %39

39:                                               ; preds = %16, %38
  %40 = phi i64 [ 0, %16 ], [ %14, %38 ]
  %41 = phi float [ 0.000000e+00, %16 ], [ %35, %38 ]
  br label %50

42:                                               ; preds = %62
  %43 = load i32, ptr @current_test, align 4, !tbaa !11
  %44 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %43)
  %45 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %46

46:                                               ; preds = %42, %62
  %47 = phi i32 [ %45, %42 ], [ %17, %62 ]
  %48 = add nuw nsw i32 %18, 1
  %49 = icmp slt i32 %48, %47
  br i1 %49, label %16, label %104, !llvm.loop !633

50:                                               ; preds = %39, %50
  %51 = phi i64 [ %60, %50 ], [ %40, %39 ]
  %52 = phi float [ %59, %50 ], [ %41, %39 ]
  %53 = getelementptr inbounds nuw float, ptr %0, i64 %51
  %54 = load float, ptr %53, align 4, !tbaa !43
  %55 = fadd float %54, 1.000000e+00
  %56 = fadd float %55, 2.000000e+00
  %57 = fadd float %56, 3.000000e+00
  %58 = fadd float %57, 4.000000e+00
  %59 = fadd float %52, %58
  %60 = add nuw nsw i64 %51, 1
  %61 = icmp eq i64 %60, %12
  br i1 %61, label %62, label %50, !llvm.loop !634

62:                                               ; preds = %50, %38
  %63 = phi float [ %35, %38 ], [ %59, %50 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !33
  %65 = fptrunc double %64 to float
  %66 = fadd float %65, 1.000000e+00
  %67 = fadd float %66, 2.000000e+00
  %68 = fadd float %67, 3.000000e+00
  %69 = fadd float %68, 4.000000e+00
  %70 = fmul float %69, 8.000000e+03
  %71 = fsub float %63, %70
  %72 = tail call noundef float @llvm.fabs.f32(float %63)
  %73 = fpext float %72 to double
  %74 = fcmp ogt double %73, 1.000000e-04
  %75 = fdiv float %71, %63
  %76 = select i1 %74, float %75, float %71
  %77 = tail call float @llvm.fabs.f32(float %76)
  %78 = fpext float %77 to double
  %79 = fcmp olt double %78, 1.000000e-03
  br i1 %79, label %46, label %42

80:                                               ; preds = %9, %99
  %81 = phi i32 [ %100, %99 ], [ %5, %9 ]
  %82 = phi double [ %101, %99 ], [ %10, %9 ]
  %83 = phi i32 [ %102, %99 ], [ 0, %9 ]
  %84 = fptrunc double %82 to float
  %85 = fadd float %84, 1.000000e+00
  %86 = fadd float %85, 2.000000e+00
  %87 = fadd float %86, 3.000000e+00
  %88 = fadd float %87, 4.000000e+00
  %89 = fmul float %88, 8.000000e+03
  %90 = fsub float 0.000000e+00, %89
  %91 = tail call float @llvm.fabs.f32(float %90)
  %92 = fpext float %91 to double
  %93 = fcmp olt double %92, 1.000000e-03
  br i1 %93, label %99, label %94

94:                                               ; preds = %80
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  %96 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %95)
  %97 = load double, ptr @init_value, align 8, !tbaa !33
  %98 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %99

99:                                               ; preds = %80, %94
  %100 = phi i32 [ %81, %80 ], [ %98, %94 ]
  %101 = phi double [ %82, %80 ], [ %97, %94 ]
  %102 = add nuw nsw i32 %83, 1
  %103 = icmp slt i32 %102, %100
  br i1 %103, label %80, label %104, !llvm.loop !633

104:                                              ; preds = %99, %46, %3
  %105 = tail call i64 @clock() #17
  store i64 %105, ptr @end_time, align 8, !tbaa !30
  %106 = load i64, ptr @start_time, align 8, !tbaa !30
  %107 = load ptr, ptr @results, align 8, !tbaa !6
  %108 = icmp ne ptr %107, null
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %110 = load i32, ptr @current_test, align 4
  %111 = icmp slt i32 %110, %109
  %112 = select i1 %108, i1 %111, i1 false
  br i1 %112, label %124, label %113

113:                                              ; preds = %104
  %114 = add nsw i32 %109, 10
  store i32 %114, ptr @allocated_results, align 4, !tbaa !11
  %115 = sext i32 %114 to i64
  %116 = shl nsw i64 %115, 4
  %117 = tail call ptr @realloc(ptr noundef %107, i64 noundef %116) #14
  store ptr %117, ptr @results, align 8, !tbaa !6
  %118 = icmp eq ptr %117, null
  br i1 %118, label %121, label %119

119:                                              ; preds = %113
  %120 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %124

121:                                              ; preds = %113
  %122 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %123 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %122)
  tail call void @exit(i32 noundef -1) #15
  unreachable

124:                                              ; preds = %104, %119
  %125 = phi i32 [ %120, %119 ], [ %110, %104 ]
  %126 = phi ptr [ %117, %119 ], [ %107, %104 ]
  %127 = sub nsw i64 %105, %106
  %128 = sitofp i64 %127 to double
  %129 = fdiv double %128, 1.000000e+06
  %130 = sext i32 %125 to i64
  %131 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130
  store double %129, ptr %131, align 8, !tbaa !13
  %132 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130, i32 1
  store ptr %2, ptr %132, align 8, !tbaa !17
  %133 = add nsw i32 %125, 1
  store i32 %133, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf19custom_constant_subIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %89

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %68

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi float [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw float, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <4 x float>, ptr %22, align 4, !tbaa !43
  %25 = load <4 x float>, ptr %23, align 4, !tbaa !43
  %26 = fadd <4 x float> %24, splat (float -1.000000e+01)
  %27 = fadd <4 x float> %25, splat (float -1.000000e+01)
  %28 = tail call float @llvm.vector.reduce.fadd.v4f32(float %21, <4 x float> %26)
  %29 = tail call float @llvm.vector.reduce.fadd.v4f32(float %28, <4 x float> %27)
  %30 = add nuw i64 %20, 8
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !635

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi float [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %89, !llvm.loop !636

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi float [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw float, ptr %0, i64 %45
  %48 = load float, ptr %47, align 4, !tbaa !43
  %49 = fadd float %48, -1.000000e+01
  %50 = fadd float %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !637

53:                                               ; preds = %44, %32
  %54 = phi float [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fptrunc double %55 to float
  %57 = fadd float %56, -1.000000e+01
  %58 = fmul float %57, 8.000000e+03
  %59 = fsub float %54, %58
  %60 = tail call noundef float @llvm.fabs.f32(float %54)
  %61 = fpext float %60 to double
  %62 = fcmp ogt double %61, 1.000000e-04
  %63 = fdiv float %59, %54
  %64 = select i1 %62, float %63, float %59
  %65 = tail call float @llvm.fabs.f32(float %64)
  %66 = fpext float %65 to double
  %67 = fcmp olt double %66, 1.000000e-03
  br i1 %67, label %40, label %36

68:                                               ; preds = %9, %84
  %69 = phi i32 [ %85, %84 ], [ %5, %9 ]
  %70 = phi double [ %86, %84 ], [ %10, %9 ]
  %71 = phi i32 [ %87, %84 ], [ 0, %9 ]
  %72 = fptrunc double %70 to float
  %73 = fadd float %72, -1.000000e+01
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float 0.000000e+00, %74
  %76 = tail call float @llvm.fabs.f32(float %75)
  %77 = fpext float %76 to double
  %78 = fcmp olt double %77, 1.000000e-03
  br i1 %78, label %84, label %79

79:                                               ; preds = %68
  %80 = load i32, ptr @current_test, align 4, !tbaa !11
  %81 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %80)
  %82 = load double, ptr @init_value, align 8, !tbaa !33
  %83 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %84

84:                                               ; preds = %68, %79
  %85 = phi i32 [ %69, %68 ], [ %83, %79 ]
  %86 = phi double [ %70, %68 ], [ %82, %79 ]
  %87 = add nuw nsw i32 %71, 1
  %88 = icmp slt i32 %87, %85
  br i1 %88, label %68, label %89, !llvm.loop !636

89:                                               ; preds = %84, %40, %3
  %90 = tail call i64 @clock() #17
  store i64 %90, ptr @end_time, align 8, !tbaa !30
  %91 = load i64, ptr @start_time, align 8, !tbaa !30
  %92 = load ptr, ptr @results, align 8, !tbaa !6
  %93 = icmp ne ptr %92, null
  %94 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %95 = load i32, ptr @current_test, align 4
  %96 = icmp slt i32 %95, %94
  %97 = select i1 %93, i1 %96, i1 false
  br i1 %97, label %109, label %98

98:                                               ; preds = %89
  %99 = add nsw i32 %94, 10
  store i32 %99, ptr @allocated_results, align 4, !tbaa !11
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 4
  %102 = tail call ptr @realloc(ptr noundef %92, i64 noundef %101) #14
  store ptr %102, ptr @results, align 8, !tbaa !6
  %103 = icmp eq ptr %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %98
  %105 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %109

106:                                              ; preds = %98
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %107)
  tail call void @exit(i32 noundef -1) #15
  unreachable

109:                                              ; preds = %89, %104
  %110 = phi i32 [ %105, %104 ], [ %95, %89 ]
  %111 = phi ptr [ %102, %104 ], [ %92, %89 ]
  %112 = sub nsw i64 %90, %91
  %113 = sitofp i64 %112 to double
  %114 = fdiv double %113, 1.000000e+06
  %115 = sext i32 %110 to i64
  %116 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115
  store double %114, ptr %116, align 8, !tbaa !13
  %117 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115, i32 1
  store ptr %2, ptr %117, align 8, !tbaa !17
  %118 = add nsw i32 %110, 1
  store i32 %118, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf28custom_multiple_constant_subIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %104

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %80

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %46
  %17 = phi i32 [ %47, %46 ], [ %5, %11 ]
  %18 = phi i32 [ %48, %46 ], [ 0, %11 ]
  br i1 %13, label %39, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %36, %19 ], [ 0, %16 ]
  %21 = phi float [ %35, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw float, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <4 x float>, ptr %22, align 4, !tbaa !43
  %25 = load <4 x float>, ptr %23, align 4, !tbaa !43
  %26 = fadd <4 x float> %24, splat (float -1.000000e+00)
  %27 = fadd <4 x float> %25, splat (float -1.000000e+00)
  %28 = fadd <4 x float> %26, splat (float -2.000000e+00)
  %29 = fadd <4 x float> %27, splat (float -2.000000e+00)
  %30 = fadd <4 x float> %28, splat (float -3.000000e+00)
  %31 = fadd <4 x float> %29, splat (float -3.000000e+00)
  %32 = fadd <4 x float> %30, splat (float -4.000000e+00)
  %33 = fadd <4 x float> %31, splat (float -4.000000e+00)
  %34 = tail call float @llvm.vector.reduce.fadd.v4f32(float %21, <4 x float> %32)
  %35 = tail call float @llvm.vector.reduce.fadd.v4f32(float %34, <4 x float> %33)
  %36 = add nuw i64 %20, 8
  %37 = icmp eq i64 %36, %14
  br i1 %37, label %38, label %19, !llvm.loop !638

38:                                               ; preds = %19
  br i1 %15, label %62, label %39

39:                                               ; preds = %16, %38
  %40 = phi i64 [ 0, %16 ], [ %14, %38 ]
  %41 = phi float [ 0.000000e+00, %16 ], [ %35, %38 ]
  br label %50

42:                                               ; preds = %62
  %43 = load i32, ptr @current_test, align 4, !tbaa !11
  %44 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %43)
  %45 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %46

46:                                               ; preds = %42, %62
  %47 = phi i32 [ %45, %42 ], [ %17, %62 ]
  %48 = add nuw nsw i32 %18, 1
  %49 = icmp slt i32 %48, %47
  br i1 %49, label %16, label %104, !llvm.loop !639

50:                                               ; preds = %39, %50
  %51 = phi i64 [ %60, %50 ], [ %40, %39 ]
  %52 = phi float [ %59, %50 ], [ %41, %39 ]
  %53 = getelementptr inbounds nuw float, ptr %0, i64 %51
  %54 = load float, ptr %53, align 4, !tbaa !43
  %55 = fadd float %54, -1.000000e+00
  %56 = fadd float %55, -2.000000e+00
  %57 = fadd float %56, -3.000000e+00
  %58 = fadd float %57, -4.000000e+00
  %59 = fadd float %52, %58
  %60 = add nuw nsw i64 %51, 1
  %61 = icmp eq i64 %60, %12
  br i1 %61, label %62, label %50, !llvm.loop !640

62:                                               ; preds = %50, %38
  %63 = phi float [ %35, %38 ], [ %59, %50 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !33
  %65 = fptrunc double %64 to float
  %66 = fadd float %65, -1.000000e+00
  %67 = fadd float %66, -2.000000e+00
  %68 = fadd float %67, -3.000000e+00
  %69 = fadd float %68, -4.000000e+00
  %70 = fmul float %69, 8.000000e+03
  %71 = fsub float %63, %70
  %72 = tail call noundef float @llvm.fabs.f32(float %63)
  %73 = fpext float %72 to double
  %74 = fcmp ogt double %73, 1.000000e-04
  %75 = fdiv float %71, %63
  %76 = select i1 %74, float %75, float %71
  %77 = tail call float @llvm.fabs.f32(float %76)
  %78 = fpext float %77 to double
  %79 = fcmp olt double %78, 1.000000e-03
  br i1 %79, label %46, label %42

80:                                               ; preds = %9, %99
  %81 = phi i32 [ %100, %99 ], [ %5, %9 ]
  %82 = phi double [ %101, %99 ], [ %10, %9 ]
  %83 = phi i32 [ %102, %99 ], [ 0, %9 ]
  %84 = fptrunc double %82 to float
  %85 = fadd float %84, -1.000000e+00
  %86 = fadd float %85, -2.000000e+00
  %87 = fadd float %86, -3.000000e+00
  %88 = fadd float %87, -4.000000e+00
  %89 = fmul float %88, 8.000000e+03
  %90 = fsub float 0.000000e+00, %89
  %91 = tail call float @llvm.fabs.f32(float %90)
  %92 = fpext float %91 to double
  %93 = fcmp olt double %92, 1.000000e-03
  br i1 %93, label %99, label %94

94:                                               ; preds = %80
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  %96 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %95)
  %97 = load double, ptr @init_value, align 8, !tbaa !33
  %98 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %99

99:                                               ; preds = %80, %94
  %100 = phi i32 [ %81, %80 ], [ %98, %94 ]
  %101 = phi double [ %82, %80 ], [ %97, %94 ]
  %102 = add nuw nsw i32 %83, 1
  %103 = icmp slt i32 %102, %100
  br i1 %103, label %80, label %104, !llvm.loop !639

104:                                              ; preds = %99, %46, %3
  %105 = tail call i64 @clock() #17
  store i64 %105, ptr @end_time, align 8, !tbaa !30
  %106 = load i64, ptr @start_time, align 8, !tbaa !30
  %107 = load ptr, ptr @results, align 8, !tbaa !6
  %108 = icmp ne ptr %107, null
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %110 = load i32, ptr @current_test, align 4
  %111 = icmp slt i32 %110, %109
  %112 = select i1 %108, i1 %111, i1 false
  br i1 %112, label %124, label %113

113:                                              ; preds = %104
  %114 = add nsw i32 %109, 10
  store i32 %114, ptr @allocated_results, align 4, !tbaa !11
  %115 = sext i32 %114 to i64
  %116 = shl nsw i64 %115, 4
  %117 = tail call ptr @realloc(ptr noundef %107, i64 noundef %116) #14
  store ptr %117, ptr @results, align 8, !tbaa !6
  %118 = icmp eq ptr %117, null
  br i1 %118, label %121, label %119

119:                                              ; preds = %113
  %120 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %124

121:                                              ; preds = %113
  %122 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %123 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %122)
  tail call void @exit(i32 noundef -1) #15
  unreachable

124:                                              ; preds = %104, %119
  %125 = phi i32 [ %120, %119 ], [ %110, %104 ]
  %126 = phi ptr [ %117, %119 ], [ %107, %104 ]
  %127 = sub nsw i64 %105, %106
  %128 = sitofp i64 %127 to double
  %129 = fdiv double %128, 1.000000e+06
  %130 = sext i32 %125 to i64
  %131 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130
  store double %129, ptr %131, align 8, !tbaa !13
  %132 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130, i32 1
  store ptr %2, ptr %132, align 8, !tbaa !17
  %133 = add nsw i32 %125, 1
  store i32 %133, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf24custom_constant_multiplyIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %89

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %68

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi float [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw float, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <4 x float>, ptr %22, align 4, !tbaa !43
  %25 = load <4 x float>, ptr %23, align 4, !tbaa !43
  %26 = fmul <4 x float> %24, splat (float 1.200000e+02)
  %27 = fmul <4 x float> %25, splat (float 1.200000e+02)
  %28 = tail call float @llvm.vector.reduce.fadd.v4f32(float %21, <4 x float> %26)
  %29 = tail call float @llvm.vector.reduce.fadd.v4f32(float %28, <4 x float> %27)
  %30 = add nuw i64 %20, 8
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !641

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi float [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %89, !llvm.loop !642

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi float [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw float, ptr %0, i64 %45
  %48 = load float, ptr %47, align 4, !tbaa !43
  %49 = fmul float %48, 1.200000e+02
  %50 = fadd float %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !643

53:                                               ; preds = %44, %32
  %54 = phi float [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fptrunc double %55 to float
  %57 = fmul float %56, 1.200000e+02
  %58 = fmul float %57, 8.000000e+03
  %59 = fsub float %54, %58
  %60 = tail call noundef float @llvm.fabs.f32(float %54)
  %61 = fpext float %60 to double
  %62 = fcmp ogt double %61, 1.000000e-04
  %63 = fdiv float %59, %54
  %64 = select i1 %62, float %63, float %59
  %65 = tail call float @llvm.fabs.f32(float %64)
  %66 = fpext float %65 to double
  %67 = fcmp olt double %66, 1.000000e-03
  br i1 %67, label %40, label %36

68:                                               ; preds = %9, %84
  %69 = phi i32 [ %85, %84 ], [ %5, %9 ]
  %70 = phi double [ %86, %84 ], [ %10, %9 ]
  %71 = phi i32 [ %87, %84 ], [ 0, %9 ]
  %72 = fptrunc double %70 to float
  %73 = fmul float %72, 1.200000e+02
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float 0.000000e+00, %74
  %76 = tail call float @llvm.fabs.f32(float %75)
  %77 = fpext float %76 to double
  %78 = fcmp olt double %77, 1.000000e-03
  br i1 %78, label %84, label %79

79:                                               ; preds = %68
  %80 = load i32, ptr @current_test, align 4, !tbaa !11
  %81 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %80)
  %82 = load double, ptr @init_value, align 8, !tbaa !33
  %83 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %84

84:                                               ; preds = %68, %79
  %85 = phi i32 [ %69, %68 ], [ %83, %79 ]
  %86 = phi double [ %70, %68 ], [ %82, %79 ]
  %87 = add nuw nsw i32 %71, 1
  %88 = icmp slt i32 %87, %85
  br i1 %88, label %68, label %89, !llvm.loop !642

89:                                               ; preds = %84, %40, %3
  %90 = tail call i64 @clock() #17
  store i64 %90, ptr @end_time, align 8, !tbaa !30
  %91 = load i64, ptr @start_time, align 8, !tbaa !30
  %92 = load ptr, ptr @results, align 8, !tbaa !6
  %93 = icmp ne ptr %92, null
  %94 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %95 = load i32, ptr @current_test, align 4
  %96 = icmp slt i32 %95, %94
  %97 = select i1 %93, i1 %96, i1 false
  br i1 %97, label %109, label %98

98:                                               ; preds = %89
  %99 = add nsw i32 %94, 10
  store i32 %99, ptr @allocated_results, align 4, !tbaa !11
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 4
  %102 = tail call ptr @realloc(ptr noundef %92, i64 noundef %101) #14
  store ptr %102, ptr @results, align 8, !tbaa !6
  %103 = icmp eq ptr %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %98
  %105 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %109

106:                                              ; preds = %98
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %107)
  tail call void @exit(i32 noundef -1) #15
  unreachable

109:                                              ; preds = %89, %104
  %110 = phi i32 [ %105, %104 ], [ %95, %89 ]
  %111 = phi ptr [ %102, %104 ], [ %92, %89 ]
  %112 = sub nsw i64 %90, %91
  %113 = sitofp i64 %112 to double
  %114 = fdiv double %113, 1.000000e+06
  %115 = sext i32 %110 to i64
  %116 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115
  store double %114, ptr %116, align 8, !tbaa !13
  %117 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115, i32 1
  store ptr %2, ptr %117, align 8, !tbaa !17
  %118 = add nsw i32 %110, 1
  store i32 %118, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf33custom_multiple_constant_multiplyIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %104

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %80

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %46
  %17 = phi i32 [ %47, %46 ], [ %5, %11 ]
  %18 = phi i32 [ %48, %46 ], [ 0, %11 ]
  br i1 %13, label %39, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %36, %19 ], [ 0, %16 ]
  %21 = phi float [ %35, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw float, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <4 x float>, ptr %22, align 4, !tbaa !43
  %25 = load <4 x float>, ptr %23, align 4, !tbaa !43
  %26 = fmul <4 x float> %24, splat (float 2.000000e+00)
  %27 = fmul <4 x float> %25, splat (float 2.000000e+00)
  %28 = fmul <4 x float> %26, splat (float 3.000000e+00)
  %29 = fmul <4 x float> %27, splat (float 3.000000e+00)
  %30 = fmul <4 x float> %28, splat (float 4.000000e+00)
  %31 = fmul <4 x float> %29, splat (float 4.000000e+00)
  %32 = fmul <4 x float> %30, splat (float 5.000000e+00)
  %33 = fmul <4 x float> %31, splat (float 5.000000e+00)
  %34 = tail call float @llvm.vector.reduce.fadd.v4f32(float %21, <4 x float> %32)
  %35 = tail call float @llvm.vector.reduce.fadd.v4f32(float %34, <4 x float> %33)
  %36 = add nuw i64 %20, 8
  %37 = icmp eq i64 %36, %14
  br i1 %37, label %38, label %19, !llvm.loop !644

38:                                               ; preds = %19
  br i1 %15, label %62, label %39

39:                                               ; preds = %16, %38
  %40 = phi i64 [ 0, %16 ], [ %14, %38 ]
  %41 = phi float [ 0.000000e+00, %16 ], [ %35, %38 ]
  br label %50

42:                                               ; preds = %62
  %43 = load i32, ptr @current_test, align 4, !tbaa !11
  %44 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %43)
  %45 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %46

46:                                               ; preds = %42, %62
  %47 = phi i32 [ %45, %42 ], [ %17, %62 ]
  %48 = add nuw nsw i32 %18, 1
  %49 = icmp slt i32 %48, %47
  br i1 %49, label %16, label %104, !llvm.loop !645

50:                                               ; preds = %39, %50
  %51 = phi i64 [ %60, %50 ], [ %40, %39 ]
  %52 = phi float [ %59, %50 ], [ %41, %39 ]
  %53 = getelementptr inbounds nuw float, ptr %0, i64 %51
  %54 = load float, ptr %53, align 4, !tbaa !43
  %55 = fmul float %54, 2.000000e+00
  %56 = fmul float %55, 3.000000e+00
  %57 = fmul float %56, 4.000000e+00
  %58 = fmul float %57, 5.000000e+00
  %59 = fadd float %52, %58
  %60 = add nuw nsw i64 %51, 1
  %61 = icmp eq i64 %60, %12
  br i1 %61, label %62, label %50, !llvm.loop !646

62:                                               ; preds = %50, %38
  %63 = phi float [ %35, %38 ], [ %59, %50 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !33
  %65 = fptrunc double %64 to float
  %66 = fmul float %65, 2.000000e+00
  %67 = fmul float %66, 3.000000e+00
  %68 = fmul float %67, 4.000000e+00
  %69 = fmul float %68, 5.000000e+00
  %70 = fmul float %69, 8.000000e+03
  %71 = fsub float %63, %70
  %72 = tail call noundef float @llvm.fabs.f32(float %63)
  %73 = fpext float %72 to double
  %74 = fcmp ogt double %73, 1.000000e-04
  %75 = fdiv float %71, %63
  %76 = select i1 %74, float %75, float %71
  %77 = tail call float @llvm.fabs.f32(float %76)
  %78 = fpext float %77 to double
  %79 = fcmp olt double %78, 1.000000e-03
  br i1 %79, label %46, label %42

80:                                               ; preds = %9, %99
  %81 = phi i32 [ %100, %99 ], [ %5, %9 ]
  %82 = phi double [ %101, %99 ], [ %10, %9 ]
  %83 = phi i32 [ %102, %99 ], [ 0, %9 ]
  %84 = fptrunc double %82 to float
  %85 = fmul float %84, 2.000000e+00
  %86 = fmul float %85, 3.000000e+00
  %87 = fmul float %86, 4.000000e+00
  %88 = fmul float %87, 5.000000e+00
  %89 = fmul float %88, 8.000000e+03
  %90 = fsub float 0.000000e+00, %89
  %91 = tail call float @llvm.fabs.f32(float %90)
  %92 = fpext float %91 to double
  %93 = fcmp olt double %92, 1.000000e-03
  br i1 %93, label %99, label %94

94:                                               ; preds = %80
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  %96 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %95)
  %97 = load double, ptr @init_value, align 8, !tbaa !33
  %98 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %99

99:                                               ; preds = %80, %94
  %100 = phi i32 [ %81, %80 ], [ %98, %94 ]
  %101 = phi double [ %82, %80 ], [ %97, %94 ]
  %102 = add nuw nsw i32 %83, 1
  %103 = icmp slt i32 %102, %100
  br i1 %103, label %80, label %104, !llvm.loop !645

104:                                              ; preds = %99, %46, %3
  %105 = tail call i64 @clock() #17
  store i64 %105, ptr @end_time, align 8, !tbaa !30
  %106 = load i64, ptr @start_time, align 8, !tbaa !30
  %107 = load ptr, ptr @results, align 8, !tbaa !6
  %108 = icmp ne ptr %107, null
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %110 = load i32, ptr @current_test, align 4
  %111 = icmp slt i32 %110, %109
  %112 = select i1 %108, i1 %111, i1 false
  br i1 %112, label %124, label %113

113:                                              ; preds = %104
  %114 = add nsw i32 %109, 10
  store i32 %114, ptr @allocated_results, align 4, !tbaa !11
  %115 = sext i32 %114 to i64
  %116 = shl nsw i64 %115, 4
  %117 = tail call ptr @realloc(ptr noundef %107, i64 noundef %116) #14
  store ptr %117, ptr @results, align 8, !tbaa !6
  %118 = icmp eq ptr %117, null
  br i1 %118, label %121, label %119

119:                                              ; preds = %113
  %120 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %124

121:                                              ; preds = %113
  %122 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %123 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %122)
  tail call void @exit(i32 noundef -1) #15
  unreachable

124:                                              ; preds = %104, %119
  %125 = phi i32 [ %120, %119 ], [ %110, %104 ]
  %126 = phi ptr [ %117, %119 ], [ %107, %104 ]
  %127 = sub nsw i64 %105, %106
  %128 = sitofp i64 %127 to double
  %129 = fdiv double %128, 1.000000e+06
  %130 = sext i32 %125 to i64
  %131 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130
  store double %129, ptr %131, align 8, !tbaa !13
  %132 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130, i32 1
  store ptr %2, ptr %132, align 8, !tbaa !17
  %133 = add nsw i32 %125, 1
  store i32 %133, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf34custom_multiple_constant_multiply2IfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %89

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %68

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi float [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw float, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <4 x float>, ptr %22, align 4, !tbaa !43
  %25 = load <4 x float>, ptr %23, align 4, !tbaa !43
  %26 = fadd <4 x float> %24, splat (float 1.200000e+02)
  %27 = fadd <4 x float> %25, splat (float 1.200000e+02)
  %28 = tail call float @llvm.vector.reduce.fadd.v4f32(float %21, <4 x float> %26)
  %29 = tail call float @llvm.vector.reduce.fadd.v4f32(float %28, <4 x float> %27)
  %30 = add nuw i64 %20, 8
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !647

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi float [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %89, !llvm.loop !648

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi float [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw float, ptr %0, i64 %45
  %48 = load float, ptr %47, align 4, !tbaa !43
  %49 = fadd float %48, 1.200000e+02
  %50 = fadd float %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !649

53:                                               ; preds = %44, %32
  %54 = phi float [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fptrunc double %55 to float
  %57 = fadd float %56, 1.200000e+02
  %58 = fmul float %57, 8.000000e+03
  %59 = fsub float %54, %58
  %60 = tail call noundef float @llvm.fabs.f32(float %54)
  %61 = fpext float %60 to double
  %62 = fcmp ogt double %61, 1.000000e-04
  %63 = fdiv float %59, %54
  %64 = select i1 %62, float %63, float %59
  %65 = tail call float @llvm.fabs.f32(float %64)
  %66 = fpext float %65 to double
  %67 = fcmp olt double %66, 1.000000e-03
  br i1 %67, label %40, label %36

68:                                               ; preds = %9, %84
  %69 = phi i32 [ %85, %84 ], [ %5, %9 ]
  %70 = phi double [ %86, %84 ], [ %10, %9 ]
  %71 = phi i32 [ %87, %84 ], [ 0, %9 ]
  %72 = fptrunc double %70 to float
  %73 = fadd float %72, 1.200000e+02
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float 0.000000e+00, %74
  %76 = tail call float @llvm.fabs.f32(float %75)
  %77 = fpext float %76 to double
  %78 = fcmp olt double %77, 1.000000e-03
  br i1 %78, label %84, label %79

79:                                               ; preds = %68
  %80 = load i32, ptr @current_test, align 4, !tbaa !11
  %81 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %80)
  %82 = load double, ptr @init_value, align 8, !tbaa !33
  %83 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %84

84:                                               ; preds = %68, %79
  %85 = phi i32 [ %69, %68 ], [ %83, %79 ]
  %86 = phi double [ %70, %68 ], [ %82, %79 ]
  %87 = add nuw nsw i32 %71, 1
  %88 = icmp slt i32 %87, %85
  br i1 %88, label %68, label %89, !llvm.loop !648

89:                                               ; preds = %84, %40, %3
  %90 = tail call i64 @clock() #17
  store i64 %90, ptr @end_time, align 8, !tbaa !30
  %91 = load i64, ptr @start_time, align 8, !tbaa !30
  %92 = load ptr, ptr @results, align 8, !tbaa !6
  %93 = icmp ne ptr %92, null
  %94 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %95 = load i32, ptr @current_test, align 4
  %96 = icmp slt i32 %95, %94
  %97 = select i1 %93, i1 %96, i1 false
  br i1 %97, label %109, label %98

98:                                               ; preds = %89
  %99 = add nsw i32 %94, 10
  store i32 %99, ptr @allocated_results, align 4, !tbaa !11
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 4
  %102 = tail call ptr @realloc(ptr noundef %92, i64 noundef %101) #14
  store ptr %102, ptr @results, align 8, !tbaa !6
  %103 = icmp eq ptr %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %98
  %105 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %109

106:                                              ; preds = %98
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %107)
  tail call void @exit(i32 noundef -1) #15
  unreachable

109:                                              ; preds = %89, %104
  %110 = phi i32 [ %105, %104 ], [ %95, %89 ]
  %111 = phi ptr [ %102, %104 ], [ %92, %89 ]
  %112 = sub nsw i64 %90, %91
  %113 = sitofp i64 %112 to double
  %114 = fdiv double %113, 1.000000e+06
  %115 = sext i32 %110 to i64
  %116 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115
  store double %114, ptr %116, align 8, !tbaa !13
  %117 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115, i32 1
  store ptr %2, ptr %117, align 8, !tbaa !17
  %118 = add nsw i32 %110, 1
  store i32 %118, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf22custom_constant_divideIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %89

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %68

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi float [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw float, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <4 x float>, ptr %22, align 4, !tbaa !43
  %25 = load <4 x float>, ptr %23, align 4, !tbaa !43
  %26 = fdiv <4 x float> %24, splat (float 5.000000e+00)
  %27 = fdiv <4 x float> %25, splat (float 5.000000e+00)
  %28 = tail call float @llvm.vector.reduce.fadd.v4f32(float %21, <4 x float> %26)
  %29 = tail call float @llvm.vector.reduce.fadd.v4f32(float %28, <4 x float> %27)
  %30 = add nuw i64 %20, 8
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !650

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi float [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %89, !llvm.loop !651

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi float [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw float, ptr %0, i64 %45
  %48 = load float, ptr %47, align 4, !tbaa !43
  %49 = fdiv float %48, 5.000000e+00
  %50 = fadd float %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !652

53:                                               ; preds = %44, %32
  %54 = phi float [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fptrunc double %55 to float
  %57 = fdiv float %56, 5.000000e+00
  %58 = fmul float %57, 8.000000e+03
  %59 = fsub float %54, %58
  %60 = tail call noundef float @llvm.fabs.f32(float %54)
  %61 = fpext float %60 to double
  %62 = fcmp ogt double %61, 1.000000e-04
  %63 = fdiv float %59, %54
  %64 = select i1 %62, float %63, float %59
  %65 = tail call float @llvm.fabs.f32(float %64)
  %66 = fpext float %65 to double
  %67 = fcmp olt double %66, 1.000000e-03
  br i1 %67, label %40, label %36

68:                                               ; preds = %9, %84
  %69 = phi i32 [ %85, %84 ], [ %5, %9 ]
  %70 = phi double [ %86, %84 ], [ %10, %9 ]
  %71 = phi i32 [ %87, %84 ], [ 0, %9 ]
  %72 = fptrunc double %70 to float
  %73 = fdiv float %72, 5.000000e+00
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float 0.000000e+00, %74
  %76 = tail call float @llvm.fabs.f32(float %75)
  %77 = fpext float %76 to double
  %78 = fcmp olt double %77, 1.000000e-03
  br i1 %78, label %84, label %79

79:                                               ; preds = %68
  %80 = load i32, ptr @current_test, align 4, !tbaa !11
  %81 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %80)
  %82 = load double, ptr @init_value, align 8, !tbaa !33
  %83 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %84

84:                                               ; preds = %68, %79
  %85 = phi i32 [ %69, %68 ], [ %83, %79 ]
  %86 = phi double [ %70, %68 ], [ %82, %79 ]
  %87 = add nuw nsw i32 %71, 1
  %88 = icmp slt i32 %87, %85
  br i1 %88, label %68, label %89, !llvm.loop !651

89:                                               ; preds = %84, %40, %3
  %90 = tail call i64 @clock() #17
  store i64 %90, ptr @end_time, align 8, !tbaa !30
  %91 = load i64, ptr @start_time, align 8, !tbaa !30
  %92 = load ptr, ptr @results, align 8, !tbaa !6
  %93 = icmp ne ptr %92, null
  %94 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %95 = load i32, ptr @current_test, align 4
  %96 = icmp slt i32 %95, %94
  %97 = select i1 %93, i1 %96, i1 false
  br i1 %97, label %109, label %98

98:                                               ; preds = %89
  %99 = add nsw i32 %94, 10
  store i32 %99, ptr @allocated_results, align 4, !tbaa !11
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 4
  %102 = tail call ptr @realloc(ptr noundef %92, i64 noundef %101) #14
  store ptr %102, ptr @results, align 8, !tbaa !6
  %103 = icmp eq ptr %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %98
  %105 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %109

106:                                              ; preds = %98
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %107)
  tail call void @exit(i32 noundef -1) #15
  unreachable

109:                                              ; preds = %89, %104
  %110 = phi i32 [ %105, %104 ], [ %95, %89 ]
  %111 = phi ptr [ %102, %104 ], [ %92, %89 ]
  %112 = sub nsw i64 %90, %91
  %113 = sitofp i64 %112 to double
  %114 = fdiv double %113, 1.000000e+06
  %115 = sext i32 %110 to i64
  %116 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115
  store double %114, ptr %116, align 8, !tbaa !13
  %117 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115, i32 1
  store ptr %2, ptr %117, align 8, !tbaa !17
  %118 = add nsw i32 %110, 1
  store i32 %118, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf31custom_multiple_constant_divideIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %104

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %80

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %46
  %17 = phi i32 [ %47, %46 ], [ %5, %11 ]
  %18 = phi i32 [ %48, %46 ], [ 0, %11 ]
  br i1 %13, label %39, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %36, %19 ], [ 0, %16 ]
  %21 = phi float [ %35, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw float, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <4 x float>, ptr %22, align 4, !tbaa !43
  %25 = load <4 x float>, ptr %23, align 4, !tbaa !43
  %26 = fmul <4 x float> %24, splat (float 5.000000e-01)
  %27 = fmul <4 x float> %25, splat (float 5.000000e-01)
  %28 = fdiv <4 x float> %26, splat (float 3.000000e+00)
  %29 = fdiv <4 x float> %27, splat (float 3.000000e+00)
  %30 = fmul <4 x float> %28, splat (float 2.500000e-01)
  %31 = fmul <4 x float> %29, splat (float 2.500000e-01)
  %32 = fdiv <4 x float> %30, splat (float 5.000000e+00)
  %33 = fdiv <4 x float> %31, splat (float 5.000000e+00)
  %34 = tail call float @llvm.vector.reduce.fadd.v4f32(float %21, <4 x float> %32)
  %35 = tail call float @llvm.vector.reduce.fadd.v4f32(float %34, <4 x float> %33)
  %36 = add nuw i64 %20, 8
  %37 = icmp eq i64 %36, %14
  br i1 %37, label %38, label %19, !llvm.loop !653

38:                                               ; preds = %19
  br i1 %15, label %62, label %39

39:                                               ; preds = %16, %38
  %40 = phi i64 [ 0, %16 ], [ %14, %38 ]
  %41 = phi float [ 0.000000e+00, %16 ], [ %35, %38 ]
  br label %50

42:                                               ; preds = %62
  %43 = load i32, ptr @current_test, align 4, !tbaa !11
  %44 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %43)
  %45 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %46

46:                                               ; preds = %42, %62
  %47 = phi i32 [ %45, %42 ], [ %17, %62 ]
  %48 = add nuw nsw i32 %18, 1
  %49 = icmp slt i32 %48, %47
  br i1 %49, label %16, label %104, !llvm.loop !654

50:                                               ; preds = %39, %50
  %51 = phi i64 [ %60, %50 ], [ %40, %39 ]
  %52 = phi float [ %59, %50 ], [ %41, %39 ]
  %53 = getelementptr inbounds nuw float, ptr %0, i64 %51
  %54 = load float, ptr %53, align 4, !tbaa !43
  %55 = fmul float %54, 5.000000e-01
  %56 = fdiv float %55, 3.000000e+00
  %57 = fmul float %56, 2.500000e-01
  %58 = fdiv float %57, 5.000000e+00
  %59 = fadd float %52, %58
  %60 = add nuw nsw i64 %51, 1
  %61 = icmp eq i64 %60, %12
  br i1 %61, label %62, label %50, !llvm.loop !655

62:                                               ; preds = %50, %38
  %63 = phi float [ %35, %38 ], [ %59, %50 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !33
  %65 = fptrunc double %64 to float
  %66 = fmul float %65, 5.000000e-01
  %67 = fdiv float %66, 3.000000e+00
  %68 = fmul float %67, 2.500000e-01
  %69 = fdiv float %68, 5.000000e+00
  %70 = fmul float %69, 8.000000e+03
  %71 = fsub float %63, %70
  %72 = tail call noundef float @llvm.fabs.f32(float %63)
  %73 = fpext float %72 to double
  %74 = fcmp ogt double %73, 1.000000e-04
  %75 = fdiv float %71, %63
  %76 = select i1 %74, float %75, float %71
  %77 = tail call float @llvm.fabs.f32(float %76)
  %78 = fpext float %77 to double
  %79 = fcmp olt double %78, 1.000000e-03
  br i1 %79, label %46, label %42

80:                                               ; preds = %9, %99
  %81 = phi i32 [ %100, %99 ], [ %5, %9 ]
  %82 = phi double [ %101, %99 ], [ %10, %9 ]
  %83 = phi i32 [ %102, %99 ], [ 0, %9 ]
  %84 = fptrunc double %82 to float
  %85 = fmul float %84, 5.000000e-01
  %86 = fdiv float %85, 3.000000e+00
  %87 = fmul float %86, 2.500000e-01
  %88 = fdiv float %87, 5.000000e+00
  %89 = fmul float %88, 8.000000e+03
  %90 = fsub float 0.000000e+00, %89
  %91 = tail call float @llvm.fabs.f32(float %90)
  %92 = fpext float %91 to double
  %93 = fcmp olt double %92, 1.000000e-03
  br i1 %93, label %99, label %94

94:                                               ; preds = %80
  %95 = load i32, ptr @current_test, align 4, !tbaa !11
  %96 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %95)
  %97 = load double, ptr @init_value, align 8, !tbaa !33
  %98 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %99

99:                                               ; preds = %80, %94
  %100 = phi i32 [ %81, %80 ], [ %98, %94 ]
  %101 = phi double [ %82, %80 ], [ %97, %94 ]
  %102 = add nuw nsw i32 %83, 1
  %103 = icmp slt i32 %102, %100
  br i1 %103, label %80, label %104, !llvm.loop !654

104:                                              ; preds = %99, %46, %3
  %105 = tail call i64 @clock() #17
  store i64 %105, ptr @end_time, align 8, !tbaa !30
  %106 = load i64, ptr @start_time, align 8, !tbaa !30
  %107 = load ptr, ptr @results, align 8, !tbaa !6
  %108 = icmp ne ptr %107, null
  %109 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %110 = load i32, ptr @current_test, align 4
  %111 = icmp slt i32 %110, %109
  %112 = select i1 %108, i1 %111, i1 false
  br i1 %112, label %124, label %113

113:                                              ; preds = %104
  %114 = add nsw i32 %109, 10
  store i32 %114, ptr @allocated_results, align 4, !tbaa !11
  %115 = sext i32 %114 to i64
  %116 = shl nsw i64 %115, 4
  %117 = tail call ptr @realloc(ptr noundef %107, i64 noundef %116) #14
  store ptr %117, ptr @results, align 8, !tbaa !6
  %118 = icmp eq ptr %117, null
  br i1 %118, label %121, label %119

119:                                              ; preds = %113
  %120 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %124

121:                                              ; preds = %113
  %122 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %123 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %122)
  tail call void @exit(i32 noundef -1) #15
  unreachable

124:                                              ; preds = %104, %119
  %125 = phi i32 [ %120, %119 ], [ %110, %104 ]
  %126 = phi ptr [ %117, %119 ], [ %107, %104 ]
  %127 = sub nsw i64 %105, %106
  %128 = sitofp i64 %127 to double
  %129 = fdiv double %128, 1.000000e+06
  %130 = sext i32 %125 to i64
  %131 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130
  store double %129, ptr %131, align 8, !tbaa !13
  %132 = getelementptr inbounds %struct.one_result, ptr %126, i64 %130, i32 1
  store ptr %2, ptr %132, align 8, !tbaa !17
  %133 = add nsw i32 %125, 1
  store i32 %133, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf32custom_multiple_constant_divide2IfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %89

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %68

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi float [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw float, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <4 x float>, ptr %22, align 4, !tbaa !43
  %25 = load <4 x float>, ptr %23, align 4, !tbaa !43
  %26 = fadd <4 x float> %24, splat (float 2.000000e+00)
  %27 = fadd <4 x float> %25, splat (float 2.000000e+00)
  %28 = tail call float @llvm.vector.reduce.fadd.v4f32(float %21, <4 x float> %26)
  %29 = tail call float @llvm.vector.reduce.fadd.v4f32(float %28, <4 x float> %27)
  %30 = add nuw i64 %20, 8
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !656

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi float [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %89, !llvm.loop !657

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi float [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw float, ptr %0, i64 %45
  %48 = load float, ptr %47, align 4, !tbaa !43
  %49 = fadd float %48, 2.000000e+00
  %50 = fadd float %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !658

53:                                               ; preds = %44, %32
  %54 = phi float [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fptrunc double %55 to float
  %57 = fadd float %56, 2.000000e+00
  %58 = fmul float %57, 8.000000e+03
  %59 = fsub float %54, %58
  %60 = tail call noundef float @llvm.fabs.f32(float %54)
  %61 = fpext float %60 to double
  %62 = fcmp ogt double %61, 1.000000e-04
  %63 = fdiv float %59, %54
  %64 = select i1 %62, float %63, float %59
  %65 = tail call float @llvm.fabs.f32(float %64)
  %66 = fpext float %65 to double
  %67 = fcmp olt double %66, 1.000000e-03
  br i1 %67, label %40, label %36

68:                                               ; preds = %9, %84
  %69 = phi i32 [ %85, %84 ], [ %5, %9 ]
  %70 = phi double [ %86, %84 ], [ %10, %9 ]
  %71 = phi i32 [ %87, %84 ], [ 0, %9 ]
  %72 = fptrunc double %70 to float
  %73 = fadd float %72, 2.000000e+00
  %74 = fmul float %73, 8.000000e+03
  %75 = fsub float 0.000000e+00, %74
  %76 = tail call float @llvm.fabs.f32(float %75)
  %77 = fpext float %76 to double
  %78 = fcmp olt double %77, 1.000000e-03
  br i1 %78, label %84, label %79

79:                                               ; preds = %68
  %80 = load i32, ptr @current_test, align 4, !tbaa !11
  %81 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %80)
  %82 = load double, ptr @init_value, align 8, !tbaa !33
  %83 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %84

84:                                               ; preds = %68, %79
  %85 = phi i32 [ %69, %68 ], [ %83, %79 ]
  %86 = phi double [ %70, %68 ], [ %82, %79 ]
  %87 = add nuw nsw i32 %71, 1
  %88 = icmp slt i32 %87, %85
  br i1 %88, label %68, label %89, !llvm.loop !657

89:                                               ; preds = %84, %40, %3
  %90 = tail call i64 @clock() #17
  store i64 %90, ptr @end_time, align 8, !tbaa !30
  %91 = load i64, ptr @start_time, align 8, !tbaa !30
  %92 = load ptr, ptr @results, align 8, !tbaa !6
  %93 = icmp ne ptr %92, null
  %94 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %95 = load i32, ptr @current_test, align 4
  %96 = icmp slt i32 %95, %94
  %97 = select i1 %93, i1 %96, i1 false
  br i1 %97, label %109, label %98

98:                                               ; preds = %89
  %99 = add nsw i32 %94, 10
  store i32 %99, ptr @allocated_results, align 4, !tbaa !11
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 4
  %102 = tail call ptr @realloc(ptr noundef %92, i64 noundef %101) #14
  store ptr %102, ptr @results, align 8, !tbaa !6
  %103 = icmp eq ptr %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %98
  %105 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %109

106:                                              ; preds = %98
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %107)
  tail call void @exit(i32 noundef -1) #15
  unreachable

109:                                              ; preds = %89, %104
  %110 = phi i32 [ %105, %104 ], [ %95, %89 ]
  %111 = phi ptr [ %102, %104 ], [ %92, %89 ]
  %112 = sub nsw i64 %90, %91
  %113 = sitofp i64 %112 to double
  %114 = fdiv double %113, 1.000000e+06
  %115 = sext i32 %110 to i64
  %116 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115
  store double %114, ptr %116, align 8, !tbaa !13
  %117 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115, i32 1
  store ptr %2, ptr %117, align 8, !tbaa !17
  %118 = add nsw i32 %110, 1
  store i32 %118, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantIf30custom_multiple_constant_mixedIfEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %94

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %72

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 8
  %14 = and i64 %12, 2147483640
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %42
  %17 = phi i32 [ %43, %42 ], [ %5, %11 ]
  %18 = phi i32 [ %44, %42 ], [ 0, %11 ]
  br i1 %13, label %35, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %32, %19 ], [ 0, %16 ]
  %21 = phi float [ %31, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw float, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <4 x float>, ptr %22, align 4, !tbaa !43
  %25 = load <4 x float>, ptr %23, align 4, !tbaa !43
  %26 = fadd <4 x float> %24, splat (float 2.000000e+00)
  %27 = fadd <4 x float> %25, splat (float 2.000000e+00)
  %28 = fadd <4 x float> %26, splat (float 0xC003333340000000)
  %29 = fadd <4 x float> %27, splat (float 0xC003333340000000)
  %30 = tail call float @llvm.vector.reduce.fadd.v4f32(float %21, <4 x float> %28)
  %31 = tail call float @llvm.vector.reduce.fadd.v4f32(float %30, <4 x float> %29)
  %32 = add nuw i64 %20, 8
  %33 = icmp eq i64 %32, %14
  br i1 %33, label %34, label %19, !llvm.loop !659

34:                                               ; preds = %19
  br i1 %15, label %56, label %35

35:                                               ; preds = %16, %34
  %36 = phi i64 [ 0, %16 ], [ %14, %34 ]
  %37 = phi float [ 0.000000e+00, %16 ], [ %31, %34 ]
  br label %46

38:                                               ; preds = %56
  %39 = load i32, ptr @current_test, align 4, !tbaa !11
  %40 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %39)
  %41 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %42

42:                                               ; preds = %38, %56
  %43 = phi i32 [ %41, %38 ], [ %17, %56 ]
  %44 = add nuw nsw i32 %18, 1
  %45 = icmp slt i32 %44, %43
  br i1 %45, label %16, label %94, !llvm.loop !660

46:                                               ; preds = %35, %46
  %47 = phi i64 [ %54, %46 ], [ %36, %35 ]
  %48 = phi float [ %53, %46 ], [ %37, %35 ]
  %49 = getelementptr inbounds nuw float, ptr %0, i64 %47
  %50 = load float, ptr %49, align 4, !tbaa !43
  %51 = fadd float %50, 2.000000e+00
  %52 = fadd float %51, 0xC003333340000000
  %53 = fadd float %48, %52
  %54 = add nuw nsw i64 %47, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %46, !llvm.loop !661

56:                                               ; preds = %46, %34
  %57 = phi float [ %31, %34 ], [ %53, %46 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fptrunc double %58 to float
  %60 = fadd float %59, 2.000000e+00
  %61 = fadd float %60, 0xC003333340000000
  %62 = fmul float %61, 8.000000e+03
  %63 = fsub float %57, %62
  %64 = tail call noundef float @llvm.fabs.f32(float %57)
  %65 = fpext float %64 to double
  %66 = fcmp ogt double %65, 1.000000e-04
  %67 = fdiv float %63, %57
  %68 = select i1 %66, float %67, float %63
  %69 = tail call float @llvm.fabs.f32(float %68)
  %70 = fpext float %69 to double
  %71 = fcmp olt double %70, 1.000000e-03
  br i1 %71, label %42, label %38

72:                                               ; preds = %9, %89
  %73 = phi i32 [ %90, %89 ], [ %5, %9 ]
  %74 = phi double [ %91, %89 ], [ %10, %9 ]
  %75 = phi i32 [ %92, %89 ], [ 0, %9 ]
  %76 = fptrunc double %74 to float
  %77 = fadd float %76, 2.000000e+00
  %78 = fadd float %77, 0xC003333340000000
  %79 = fmul float %78, 8.000000e+03
  %80 = fsub float 0.000000e+00, %79
  %81 = tail call float @llvm.fabs.f32(float %80)
  %82 = fpext float %81 to double
  %83 = fcmp olt double %82, 1.000000e-03
  br i1 %83, label %89, label %84

84:                                               ; preds = %72
  %85 = load i32, ptr @current_test, align 4, !tbaa !11
  %86 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %85)
  %87 = load double, ptr @init_value, align 8, !tbaa !33
  %88 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %89

89:                                               ; preds = %72, %84
  %90 = phi i32 [ %73, %72 ], [ %88, %84 ]
  %91 = phi double [ %74, %72 ], [ %87, %84 ]
  %92 = add nuw nsw i32 %75, 1
  %93 = icmp slt i32 %92, %90
  br i1 %93, label %72, label %94, !llvm.loop !660

94:                                               ; preds = %89, %42, %3
  %95 = tail call i64 @clock() #17
  store i64 %95, ptr @end_time, align 8, !tbaa !30
  %96 = load i64, ptr @start_time, align 8, !tbaa !30
  %97 = load ptr, ptr @results, align 8, !tbaa !6
  %98 = icmp ne ptr %97, null
  %99 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %100 = load i32, ptr @current_test, align 4
  %101 = icmp slt i32 %100, %99
  %102 = select i1 %98, i1 %101, i1 false
  br i1 %102, label %114, label %103

103:                                              ; preds = %94
  %104 = add nsw i32 %99, 10
  store i32 %104, ptr @allocated_results, align 4, !tbaa !11
  %105 = sext i32 %104 to i64
  %106 = shl nsw i64 %105, 4
  %107 = tail call ptr @realloc(ptr noundef %97, i64 noundef %106) #14
  store ptr %107, ptr @results, align 8, !tbaa !6
  %108 = icmp eq ptr %107, null
  br i1 %108, label %111, label %109

109:                                              ; preds = %103
  %110 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %114

111:                                              ; preds = %103
  %112 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %113 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %112)
  tail call void @exit(i32 noundef -1) #15
  unreachable

114:                                              ; preds = %94, %109
  %115 = phi i32 [ %110, %109 ], [ %100, %94 ]
  %116 = phi ptr [ %107, %109 ], [ %97, %94 ]
  %117 = sub nsw i64 %95, %96
  %118 = sitofp i64 %117 to double
  %119 = fdiv double %118, 1.000000e+06
  %120 = sext i32 %115 to i64
  %121 = getelementptr inbounds %struct.one_result, ptr %116, i64 %120
  store double %119, ptr %121, align 8, !tbaa !13
  %122 = getelementptr inbounds %struct.one_result, ptr %116, i64 %120, i32 1
  store ptr %2, ptr %122, align 8, !tbaa !17
  %123 = add nsw i32 %115, 1
  store i32 %123, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId10custom_twoIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %41

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %34

9:                                                ; preds = %7, %16
  %10 = phi i32 [ %17, %16 ], [ %5, %7 ]
  %11 = phi i32 [ %18, %16 ], [ 0, %7 ]
  br label %20

12:                                               ; preds = %26
  %13 = load i32, ptr @current_test, align 4, !tbaa !11
  %14 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %15 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %16

16:                                               ; preds = %12, %26
  %17 = phi i32 [ %15, %12 ], [ %10, %26 ]
  %18 = add nuw nsw i32 %11, 1
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %9, label %41, !llvm.loop !662

20:                                               ; preds = %9, %20
  %21 = phi i32 [ 0, %9 ], [ %24, %20 ]
  %22 = phi double [ 0.000000e+00, %9 ], [ %23, %20 ]
  %23 = fadd double %22, 2.000000e+00
  %24 = add nuw nsw i32 %21, 1
  %25 = icmp eq i32 %24, %1
  br i1 %25, label %26, label %20, !llvm.loop !663

26:                                               ; preds = %20
  %27 = fadd double %23, -1.600000e+04
  %28 = tail call double @llvm.fabs.f64(double %23)
  %29 = fcmp ogt double %28, 1.000000e-08
  %30 = fdiv double %27, %23
  %31 = select i1 %29, double %30, double %27
  %32 = tail call double @llvm.fabs.f64(double %31)
  %33 = fcmp olt double %32, 0x3EB0C6F7A0B5ED8D
  br i1 %33, label %16, label %12

34:                                               ; preds = %7, %34
  %35 = phi i32 [ %38, %34 ], [ 0, %7 ]
  %36 = load i32, ptr @current_test, align 4, !tbaa !11
  %37 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %36)
  %38 = add nuw nsw i32 %35, 1
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %34, label %41, !llvm.loop !662

41:                                               ; preds = %34, %16, %3
  %42 = tail call i64 @clock() #17
  store i64 %42, ptr @end_time, align 8, !tbaa !30
  %43 = load i64, ptr @start_time, align 8, !tbaa !30
  %44 = load ptr, ptr @results, align 8, !tbaa !6
  %45 = icmp ne ptr %44, null
  %46 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %47 = load i32, ptr @current_test, align 4
  %48 = icmp slt i32 %47, %46
  %49 = select i1 %45, i1 %48, i1 false
  br i1 %49, label %61, label %50

50:                                               ; preds = %41
  %51 = add nsw i32 %46, 10
  store i32 %51, ptr @allocated_results, align 4, !tbaa !11
  %52 = sext i32 %51 to i64
  %53 = shl nsw i64 %52, 4
  %54 = tail call ptr @realloc(ptr noundef %44, i64 noundef %53) #14
  store ptr %54, ptr @results, align 8, !tbaa !6
  %55 = icmp eq ptr %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %50
  %57 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %61

58:                                               ; preds = %50
  %59 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %59)
  tail call void @exit(i32 noundef -1) #15
  unreachable

61:                                               ; preds = %41, %56
  %62 = phi i32 [ %57, %56 ], [ %47, %41 ]
  %63 = phi ptr [ %54, %56 ], [ %44, %41 ]
  %64 = sub nsw i64 %42, %43
  %65 = sitofp i64 %64 to double
  %66 = fdiv double %65, 1.000000e+06
  %67 = sext i32 %62 to i64
  %68 = getelementptr inbounds %struct.one_result, ptr %63, i64 %67
  store double %66, ptr %68, align 8, !tbaa !13
  %69 = getelementptr inbounds %struct.one_result, ptr %63, i64 %67, i32 1
  store ptr %2, ptr %69, align 8, !tbaa !17
  %70 = add nsw i32 %62, 1
  store i32 %70, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId20custom_add_constantsIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %41

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %34

9:                                                ; preds = %7, %16
  %10 = phi i32 [ %17, %16 ], [ %5, %7 ]
  %11 = phi i32 [ %18, %16 ], [ 0, %7 ]
  br label %20

12:                                               ; preds = %26
  %13 = load i32, ptr @current_test, align 4, !tbaa !11
  %14 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %15 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %16

16:                                               ; preds = %12, %26
  %17 = phi i32 [ %15, %12 ], [ %10, %26 ]
  %18 = add nuw nsw i32 %11, 1
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %9, label %41, !llvm.loop !664

20:                                               ; preds = %9, %20
  %21 = phi i32 [ 0, %9 ], [ %24, %20 ]
  %22 = phi double [ 0.000000e+00, %9 ], [ %23, %20 ]
  %23 = fadd double %22, 3.000000e+00
  %24 = add nuw nsw i32 %21, 1
  %25 = icmp eq i32 %24, %1
  br i1 %25, label %26, label %20, !llvm.loop !665

26:                                               ; preds = %20
  %27 = fadd double %23, -2.400000e+04
  %28 = tail call double @llvm.fabs.f64(double %23)
  %29 = fcmp ogt double %28, 1.000000e-08
  %30 = fdiv double %27, %23
  %31 = select i1 %29, double %30, double %27
  %32 = tail call double @llvm.fabs.f64(double %31)
  %33 = fcmp olt double %32, 0x3EB0C6F7A0B5ED8D
  br i1 %33, label %16, label %12

34:                                               ; preds = %7, %34
  %35 = phi i32 [ %38, %34 ], [ 0, %7 ]
  %36 = load i32, ptr @current_test, align 4, !tbaa !11
  %37 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %36)
  %38 = add nuw nsw i32 %35, 1
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %34, label %41, !llvm.loop !664

41:                                               ; preds = %34, %16, %3
  %42 = tail call i64 @clock() #17
  store i64 %42, ptr @end_time, align 8, !tbaa !30
  %43 = load i64, ptr @start_time, align 8, !tbaa !30
  %44 = load ptr, ptr @results, align 8, !tbaa !6
  %45 = icmp ne ptr %44, null
  %46 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %47 = load i32, ptr @current_test, align 4
  %48 = icmp slt i32 %47, %46
  %49 = select i1 %45, i1 %48, i1 false
  br i1 %49, label %61, label %50

50:                                               ; preds = %41
  %51 = add nsw i32 %46, 10
  store i32 %51, ptr @allocated_results, align 4, !tbaa !11
  %52 = sext i32 %51 to i64
  %53 = shl nsw i64 %52, 4
  %54 = tail call ptr @realloc(ptr noundef %44, i64 noundef %53) #14
  store ptr %54, ptr @results, align 8, !tbaa !6
  %55 = icmp eq ptr %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %50
  %57 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %61

58:                                               ; preds = %50
  %59 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %59)
  tail call void @exit(i32 noundef -1) #15
  unreachable

61:                                               ; preds = %41, %56
  %62 = phi i32 [ %57, %56 ], [ %47, %41 ]
  %63 = phi ptr [ %54, %56 ], [ %44, %41 ]
  %64 = sub nsw i64 %42, %43
  %65 = sitofp i64 %64 to double
  %66 = fdiv double %65, 1.000000e+06
  %67 = sext i32 %62 to i64
  %68 = getelementptr inbounds %struct.one_result, ptr %63, i64 %67
  store double %66, ptr %68, align 8, !tbaa !13
  %69 = getelementptr inbounds %struct.one_result, ptr %63, i64 %67, i32 1
  store ptr %2, ptr %69, align 8, !tbaa !17
  %70 = add nsw i32 %62, 1
  store i32 %70, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId20custom_sub_constantsIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %41

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %34

9:                                                ; preds = %7, %16
  %10 = phi i32 [ %17, %16 ], [ %5, %7 ]
  %11 = phi i32 [ %18, %16 ], [ 0, %7 ]
  br label %20

12:                                               ; preds = %26
  %13 = load i32, ptr @current_test, align 4, !tbaa !11
  %14 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %15 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %16

16:                                               ; preds = %12, %26
  %17 = phi i32 [ %15, %12 ], [ %10, %26 ]
  %18 = add nuw nsw i32 %11, 1
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %9, label %41, !llvm.loop !666

20:                                               ; preds = %9, %20
  %21 = phi i32 [ 0, %9 ], [ %24, %20 ]
  %22 = phi double [ 0.000000e+00, %9 ], [ %23, %20 ]
  %23 = fadd double %22, 1.000000e+00
  %24 = add nuw nsw i32 %21, 1
  %25 = icmp eq i32 %24, %1
  br i1 %25, label %26, label %20, !llvm.loop !667

26:                                               ; preds = %20
  %27 = fadd double %23, -8.000000e+03
  %28 = tail call double @llvm.fabs.f64(double %23)
  %29 = fcmp ogt double %28, 1.000000e-08
  %30 = fdiv double %27, %23
  %31 = select i1 %29, double %30, double %27
  %32 = tail call double @llvm.fabs.f64(double %31)
  %33 = fcmp olt double %32, 0x3EB0C6F7A0B5ED8D
  br i1 %33, label %16, label %12

34:                                               ; preds = %7, %34
  %35 = phi i32 [ %38, %34 ], [ 0, %7 ]
  %36 = load i32, ptr @current_test, align 4, !tbaa !11
  %37 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %36)
  %38 = add nuw nsw i32 %35, 1
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %34, label %41, !llvm.loop !666

41:                                               ; preds = %34, %16, %3
  %42 = tail call i64 @clock() #17
  store i64 %42, ptr @end_time, align 8, !tbaa !30
  %43 = load i64, ptr @start_time, align 8, !tbaa !30
  %44 = load ptr, ptr @results, align 8, !tbaa !6
  %45 = icmp ne ptr %44, null
  %46 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %47 = load i32, ptr @current_test, align 4
  %48 = icmp slt i32 %47, %46
  %49 = select i1 %45, i1 %48, i1 false
  br i1 %49, label %61, label %50

50:                                               ; preds = %41
  %51 = add nsw i32 %46, 10
  store i32 %51, ptr @allocated_results, align 4, !tbaa !11
  %52 = sext i32 %51 to i64
  %53 = shl nsw i64 %52, 4
  %54 = tail call ptr @realloc(ptr noundef %44, i64 noundef %53) #14
  store ptr %54, ptr @results, align 8, !tbaa !6
  %55 = icmp eq ptr %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %50
  %57 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %61

58:                                               ; preds = %50
  %59 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %59)
  tail call void @exit(i32 noundef -1) #15
  unreachable

61:                                               ; preds = %41, %56
  %62 = phi i32 [ %57, %56 ], [ %47, %41 ]
  %63 = phi ptr [ %54, %56 ], [ %44, %41 ]
  %64 = sub nsw i64 %42, %43
  %65 = sitofp i64 %64 to double
  %66 = fdiv double %65, 1.000000e+06
  %67 = sext i32 %62 to i64
  %68 = getelementptr inbounds %struct.one_result, ptr %63, i64 %67
  store double %66, ptr %68, align 8, !tbaa !13
  %69 = getelementptr inbounds %struct.one_result, ptr %63, i64 %67, i32 1
  store ptr %2, ptr %69, align 8, !tbaa !17
  %70 = add nsw i32 %62, 1
  store i32 %70, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId25custom_multiply_constantsIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %41

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %34

9:                                                ; preds = %7, %16
  %10 = phi i32 [ %17, %16 ], [ %5, %7 ]
  %11 = phi i32 [ %18, %16 ], [ 0, %7 ]
  br label %20

12:                                               ; preds = %26
  %13 = load i32, ptr @current_test, align 4, !tbaa !11
  %14 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %15 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %16

16:                                               ; preds = %12, %26
  %17 = phi i32 [ %15, %12 ], [ %10, %26 ]
  %18 = add nuw nsw i32 %11, 1
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %9, label %41, !llvm.loop !668

20:                                               ; preds = %9, %20
  %21 = phi i32 [ 0, %9 ], [ %24, %20 ]
  %22 = phi double [ 0.000000e+00, %9 ], [ %23, %20 ]
  %23 = fadd double %22, 6.000000e+00
  %24 = add nuw nsw i32 %21, 1
  %25 = icmp eq i32 %24, %1
  br i1 %25, label %26, label %20, !llvm.loop !669

26:                                               ; preds = %20
  %27 = fadd double %23, -4.800000e+04
  %28 = tail call double @llvm.fabs.f64(double %23)
  %29 = fcmp ogt double %28, 1.000000e-08
  %30 = fdiv double %27, %23
  %31 = select i1 %29, double %30, double %27
  %32 = tail call double @llvm.fabs.f64(double %31)
  %33 = fcmp olt double %32, 0x3EB0C6F7A0B5ED8D
  br i1 %33, label %16, label %12

34:                                               ; preds = %7, %34
  %35 = phi i32 [ %38, %34 ], [ 0, %7 ]
  %36 = load i32, ptr @current_test, align 4, !tbaa !11
  %37 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %36)
  %38 = add nuw nsw i32 %35, 1
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %34, label %41, !llvm.loop !668

41:                                               ; preds = %34, %16, %3
  %42 = tail call i64 @clock() #17
  store i64 %42, ptr @end_time, align 8, !tbaa !30
  %43 = load i64, ptr @start_time, align 8, !tbaa !30
  %44 = load ptr, ptr @results, align 8, !tbaa !6
  %45 = icmp ne ptr %44, null
  %46 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %47 = load i32, ptr @current_test, align 4
  %48 = icmp slt i32 %47, %46
  %49 = select i1 %45, i1 %48, i1 false
  br i1 %49, label %61, label %50

50:                                               ; preds = %41
  %51 = add nsw i32 %46, 10
  store i32 %51, ptr @allocated_results, align 4, !tbaa !11
  %52 = sext i32 %51 to i64
  %53 = shl nsw i64 %52, 4
  %54 = tail call ptr @realloc(ptr noundef %44, i64 noundef %53) #14
  store ptr %54, ptr @results, align 8, !tbaa !6
  %55 = icmp eq ptr %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %50
  %57 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %61

58:                                               ; preds = %50
  %59 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %59)
  tail call void @exit(i32 noundef -1) #15
  unreachable

61:                                               ; preds = %41, %56
  %62 = phi i32 [ %57, %56 ], [ %47, %41 ]
  %63 = phi ptr [ %54, %56 ], [ %44, %41 ]
  %64 = sub nsw i64 %42, %43
  %65 = sitofp i64 %64 to double
  %66 = fdiv double %65, 1.000000e+06
  %67 = sext i32 %62 to i64
  %68 = getelementptr inbounds %struct.one_result, ptr %63, i64 %67
  store double %66, ptr %68, align 8, !tbaa !13
  %69 = getelementptr inbounds %struct.one_result, ptr %63, i64 %67, i32 1
  store ptr %2, ptr %69, align 8, !tbaa !17
  %70 = add nsw i32 %62, 1
  store i32 %70, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId23custom_divide_constantsIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %41

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %34

9:                                                ; preds = %7, %16
  %10 = phi i32 [ %17, %16 ], [ %5, %7 ]
  %11 = phi i32 [ %18, %16 ], [ 0, %7 ]
  br label %20

12:                                               ; preds = %26
  %13 = load i32, ptr @current_test, align 4, !tbaa !11
  %14 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %13)
  %15 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %16

16:                                               ; preds = %12, %26
  %17 = phi i32 [ %15, %12 ], [ %10, %26 ]
  %18 = add nuw nsw i32 %11, 1
  %19 = icmp slt i32 %18, %17
  br i1 %19, label %9, label %41, !llvm.loop !670

20:                                               ; preds = %9, %20
  %21 = phi i32 [ 0, %9 ], [ %24, %20 ]
  %22 = phi double [ 0.000000e+00, %9 ], [ %23, %20 ]
  %23 = fadd double %22, 2.000000e+00
  %24 = add nuw nsw i32 %21, 1
  %25 = icmp eq i32 %24, %1
  br i1 %25, label %26, label %20, !llvm.loop !671

26:                                               ; preds = %20
  %27 = fadd double %23, -1.600000e+04
  %28 = tail call double @llvm.fabs.f64(double %23)
  %29 = fcmp ogt double %28, 1.000000e-08
  %30 = fdiv double %27, %23
  %31 = select i1 %29, double %30, double %27
  %32 = tail call double @llvm.fabs.f64(double %31)
  %33 = fcmp olt double %32, 0x3EB0C6F7A0B5ED8D
  br i1 %33, label %16, label %12

34:                                               ; preds = %7, %34
  %35 = phi i32 [ %38, %34 ], [ 0, %7 ]
  %36 = load i32, ptr @current_test, align 4, !tbaa !11
  %37 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %36)
  %38 = add nuw nsw i32 %35, 1
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %34, label %41, !llvm.loop !670

41:                                               ; preds = %34, %16, %3
  %42 = tail call i64 @clock() #17
  store i64 %42, ptr @end_time, align 8, !tbaa !30
  %43 = load i64, ptr @start_time, align 8, !tbaa !30
  %44 = load ptr, ptr @results, align 8, !tbaa !6
  %45 = icmp ne ptr %44, null
  %46 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %47 = load i32, ptr @current_test, align 4
  %48 = icmp slt i32 %47, %46
  %49 = select i1 %45, i1 %48, i1 false
  br i1 %49, label %61, label %50

50:                                               ; preds = %41
  %51 = add nsw i32 %46, 10
  store i32 %51, ptr @allocated_results, align 4, !tbaa !11
  %52 = sext i32 %51 to i64
  %53 = shl nsw i64 %52, 4
  %54 = tail call ptr @realloc(ptr noundef %44, i64 noundef %53) #14
  store ptr %54, ptr @results, align 8, !tbaa !6
  %55 = icmp eq ptr %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %50
  %57 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %61

58:                                               ; preds = %50
  %59 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %60 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %59)
  tail call void @exit(i32 noundef -1) #15
  unreachable

61:                                               ; preds = %41, %56
  %62 = phi i32 [ %57, %56 ], [ %47, %41 ]
  %63 = phi ptr [ %54, %56 ], [ %44, %41 ]
  %64 = sub nsw i64 %42, %43
  %65 = sitofp i64 %64 to double
  %66 = fdiv double %65, 1.000000e+06
  %67 = sext i32 %62 to i64
  %68 = getelementptr inbounds %struct.one_result, ptr %63, i64 %67
  store double %66, ptr %68, align 8, !tbaa !13
  %69 = getelementptr inbounds %struct.one_result, ptr %63, i64 %67, i32 1
  store ptr %2, ptr %69, align 8, !tbaa !17
  %70 = add nsw i32 %62, 1
  store i32 %70, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId19custom_constant_addIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %84

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %65

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi double [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw double, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <2 x double>, ptr %22, align 8, !tbaa !33
  %25 = load <2 x double>, ptr %23, align 8, !tbaa !33
  %26 = fadd <2 x double> %24, splat (double 1.000000e+01)
  %27 = fadd <2 x double> %25, splat (double 1.000000e+01)
  %28 = tail call double @llvm.vector.reduce.fadd.v2f64(double %21, <2 x double> %26)
  %29 = tail call double @llvm.vector.reduce.fadd.v2f64(double %28, <2 x double> %27)
  %30 = add nuw i64 %20, 4
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !672

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi double [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %84, !llvm.loop !673

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi double [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw double, ptr %0, i64 %45
  %48 = load double, ptr %47, align 8, !tbaa !33
  %49 = fadd double %48, 1.000000e+01
  %50 = fadd double %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !674

53:                                               ; preds = %44, %32
  %54 = phi double [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fadd double %55, 1.000000e+01
  %57 = fmul double %56, 8.000000e+03
  %58 = fsub double %54, %57
  %59 = tail call double @llvm.fabs.f64(double %54)
  %60 = fcmp ogt double %59, 1.000000e-08
  %61 = fdiv double %58, %54
  %62 = select i1 %60, double %61, double %58
  %63 = tail call double @llvm.fabs.f64(double %62)
  %64 = fcmp olt double %63, 0x3EB0C6F7A0B5ED8D
  br i1 %64, label %40, label %36

65:                                               ; preds = %9, %79
  %66 = phi i32 [ %80, %79 ], [ %5, %9 ]
  %67 = phi double [ %81, %79 ], [ %10, %9 ]
  %68 = phi i32 [ %82, %79 ], [ 0, %9 ]
  %69 = fadd double %67, 1.000000e+01
  %70 = fmul double %69, 8.000000e+03
  %71 = fsub double 0.000000e+00, %70
  %72 = tail call double @llvm.fabs.f64(double %71)
  %73 = fcmp olt double %72, 0x3EB0C6F7A0B5ED8D
  br i1 %73, label %79, label %74

74:                                               ; preds = %65
  %75 = load i32, ptr @current_test, align 4, !tbaa !11
  %76 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %75)
  %77 = load double, ptr @init_value, align 8, !tbaa !33
  %78 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %79

79:                                               ; preds = %65, %74
  %80 = phi i32 [ %66, %65 ], [ %78, %74 ]
  %81 = phi double [ %67, %65 ], [ %77, %74 ]
  %82 = add nuw nsw i32 %68, 1
  %83 = icmp slt i32 %82, %80
  br i1 %83, label %65, label %84, !llvm.loop !673

84:                                               ; preds = %79, %40, %3
  %85 = tail call i64 @clock() #17
  store i64 %85, ptr @end_time, align 8, !tbaa !30
  %86 = load i64, ptr @start_time, align 8, !tbaa !30
  %87 = load ptr, ptr @results, align 8, !tbaa !6
  %88 = icmp ne ptr %87, null
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %90 = load i32, ptr @current_test, align 4
  %91 = icmp slt i32 %90, %89
  %92 = select i1 %88, i1 %91, i1 false
  br i1 %92, label %104, label %93

93:                                               ; preds = %84
  %94 = add nsw i32 %89, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !11
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %87, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !6
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %93
  %100 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %104

101:                                              ; preds = %93
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %84, %99
  %105 = phi i32 [ %100, %99 ], [ %90, %84 ]
  %106 = phi ptr [ %97, %99 ], [ %87, %84 ]
  %107 = sub nsw i64 %85, %86
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !13
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !17
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId28custom_multiple_constant_addIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %99

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %77

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %46
  %17 = phi i32 [ %47, %46 ], [ %5, %11 ]
  %18 = phi i32 [ %48, %46 ], [ 0, %11 ]
  br i1 %13, label %39, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %36, %19 ], [ 0, %16 ]
  %21 = phi double [ %35, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw double, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <2 x double>, ptr %22, align 8, !tbaa !33
  %25 = load <2 x double>, ptr %23, align 8, !tbaa !33
  %26 = fadd <2 x double> %24, splat (double 1.000000e+00)
  %27 = fadd <2 x double> %25, splat (double 1.000000e+00)
  %28 = fadd <2 x double> %26, splat (double 2.000000e+00)
  %29 = fadd <2 x double> %27, splat (double 2.000000e+00)
  %30 = fadd <2 x double> %28, splat (double 3.000000e+00)
  %31 = fadd <2 x double> %29, splat (double 3.000000e+00)
  %32 = fadd <2 x double> %30, splat (double 4.000000e+00)
  %33 = fadd <2 x double> %31, splat (double 4.000000e+00)
  %34 = tail call double @llvm.vector.reduce.fadd.v2f64(double %21, <2 x double> %32)
  %35 = tail call double @llvm.vector.reduce.fadd.v2f64(double %34, <2 x double> %33)
  %36 = add nuw i64 %20, 4
  %37 = icmp eq i64 %36, %14
  br i1 %37, label %38, label %19, !llvm.loop !675

38:                                               ; preds = %19
  br i1 %15, label %62, label %39

39:                                               ; preds = %16, %38
  %40 = phi i64 [ 0, %16 ], [ %14, %38 ]
  %41 = phi double [ 0.000000e+00, %16 ], [ %35, %38 ]
  br label %50

42:                                               ; preds = %62
  %43 = load i32, ptr @current_test, align 4, !tbaa !11
  %44 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %43)
  %45 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %46

46:                                               ; preds = %42, %62
  %47 = phi i32 [ %45, %42 ], [ %17, %62 ]
  %48 = add nuw nsw i32 %18, 1
  %49 = icmp slt i32 %48, %47
  br i1 %49, label %16, label %99, !llvm.loop !676

50:                                               ; preds = %39, %50
  %51 = phi i64 [ %60, %50 ], [ %40, %39 ]
  %52 = phi double [ %59, %50 ], [ %41, %39 ]
  %53 = getelementptr inbounds nuw double, ptr %0, i64 %51
  %54 = load double, ptr %53, align 8, !tbaa !33
  %55 = fadd double %54, 1.000000e+00
  %56 = fadd double %55, 2.000000e+00
  %57 = fadd double %56, 3.000000e+00
  %58 = fadd double %57, 4.000000e+00
  %59 = fadd double %52, %58
  %60 = add nuw nsw i64 %51, 1
  %61 = icmp eq i64 %60, %12
  br i1 %61, label %62, label %50, !llvm.loop !677

62:                                               ; preds = %50, %38
  %63 = phi double [ %35, %38 ], [ %59, %50 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !33
  %65 = fadd double %64, 1.000000e+00
  %66 = fadd double %65, 2.000000e+00
  %67 = fadd double %66, 3.000000e+00
  %68 = fadd double %67, 4.000000e+00
  %69 = fmul double %68, 8.000000e+03
  %70 = fsub double %63, %69
  %71 = tail call double @llvm.fabs.f64(double %63)
  %72 = fcmp ogt double %71, 1.000000e-08
  %73 = fdiv double %70, %63
  %74 = select i1 %72, double %73, double %70
  %75 = tail call double @llvm.fabs.f64(double %74)
  %76 = fcmp olt double %75, 0x3EB0C6F7A0B5ED8D
  br i1 %76, label %46, label %42

77:                                               ; preds = %9, %94
  %78 = phi i32 [ %95, %94 ], [ %5, %9 ]
  %79 = phi double [ %96, %94 ], [ %10, %9 ]
  %80 = phi i32 [ %97, %94 ], [ 0, %9 ]
  %81 = fadd double %79, 1.000000e+00
  %82 = fadd double %81, 2.000000e+00
  %83 = fadd double %82, 3.000000e+00
  %84 = fadd double %83, 4.000000e+00
  %85 = fmul double %84, 8.000000e+03
  %86 = fsub double 0.000000e+00, %85
  %87 = tail call double @llvm.fabs.f64(double %86)
  %88 = fcmp olt double %87, 0x3EB0C6F7A0B5ED8D
  br i1 %88, label %94, label %89

89:                                               ; preds = %77
  %90 = load i32, ptr @current_test, align 4, !tbaa !11
  %91 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %90)
  %92 = load double, ptr @init_value, align 8, !tbaa !33
  %93 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %94

94:                                               ; preds = %77, %89
  %95 = phi i32 [ %78, %77 ], [ %93, %89 ]
  %96 = phi double [ %79, %77 ], [ %92, %89 ]
  %97 = add nuw nsw i32 %80, 1
  %98 = icmp slt i32 %97, %95
  br i1 %98, label %77, label %99, !llvm.loop !676

99:                                               ; preds = %94, %46, %3
  %100 = tail call i64 @clock() #17
  store i64 %100, ptr @end_time, align 8, !tbaa !30
  %101 = load i64, ptr @start_time, align 8, !tbaa !30
  %102 = load ptr, ptr @results, align 8, !tbaa !6
  %103 = icmp ne ptr %102, null
  %104 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %105 = load i32, ptr @current_test, align 4
  %106 = icmp slt i32 %105, %104
  %107 = select i1 %103, i1 %106, i1 false
  br i1 %107, label %119, label %108

108:                                              ; preds = %99
  %109 = add nsw i32 %104, 10
  store i32 %109, ptr @allocated_results, align 4, !tbaa !11
  %110 = sext i32 %109 to i64
  %111 = shl nsw i64 %110, 4
  %112 = tail call ptr @realloc(ptr noundef %102, i64 noundef %111) #14
  store ptr %112, ptr @results, align 8, !tbaa !6
  %113 = icmp eq ptr %112, null
  br i1 %113, label %116, label %114

114:                                              ; preds = %108
  %115 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %119

116:                                              ; preds = %108
  %117 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %118 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %117)
  tail call void @exit(i32 noundef -1) #15
  unreachable

119:                                              ; preds = %99, %114
  %120 = phi i32 [ %115, %114 ], [ %105, %99 ]
  %121 = phi ptr [ %112, %114 ], [ %102, %99 ]
  %122 = sub nsw i64 %100, %101
  %123 = sitofp i64 %122 to double
  %124 = fdiv double %123, 1.000000e+06
  %125 = sext i32 %120 to i64
  %126 = getelementptr inbounds %struct.one_result, ptr %121, i64 %125
  store double %124, ptr %126, align 8, !tbaa !13
  %127 = getelementptr inbounds %struct.one_result, ptr %121, i64 %125, i32 1
  store ptr %2, ptr %127, align 8, !tbaa !17
  %128 = add nsw i32 %120, 1
  store i32 %128, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId19custom_constant_subIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %84

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %65

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi double [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw double, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <2 x double>, ptr %22, align 8, !tbaa !33
  %25 = load <2 x double>, ptr %23, align 8, !tbaa !33
  %26 = fadd <2 x double> %24, splat (double -1.000000e+01)
  %27 = fadd <2 x double> %25, splat (double -1.000000e+01)
  %28 = tail call double @llvm.vector.reduce.fadd.v2f64(double %21, <2 x double> %26)
  %29 = tail call double @llvm.vector.reduce.fadd.v2f64(double %28, <2 x double> %27)
  %30 = add nuw i64 %20, 4
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !678

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi double [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %84, !llvm.loop !679

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi double [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw double, ptr %0, i64 %45
  %48 = load double, ptr %47, align 8, !tbaa !33
  %49 = fadd double %48, -1.000000e+01
  %50 = fadd double %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !680

53:                                               ; preds = %44, %32
  %54 = phi double [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fadd double %55, -1.000000e+01
  %57 = fmul double %56, 8.000000e+03
  %58 = fsub double %54, %57
  %59 = tail call double @llvm.fabs.f64(double %54)
  %60 = fcmp ogt double %59, 1.000000e-08
  %61 = fdiv double %58, %54
  %62 = select i1 %60, double %61, double %58
  %63 = tail call double @llvm.fabs.f64(double %62)
  %64 = fcmp olt double %63, 0x3EB0C6F7A0B5ED8D
  br i1 %64, label %40, label %36

65:                                               ; preds = %9, %79
  %66 = phi i32 [ %80, %79 ], [ %5, %9 ]
  %67 = phi double [ %81, %79 ], [ %10, %9 ]
  %68 = phi i32 [ %82, %79 ], [ 0, %9 ]
  %69 = fadd double %67, -1.000000e+01
  %70 = fmul double %69, 8.000000e+03
  %71 = fsub double 0.000000e+00, %70
  %72 = tail call double @llvm.fabs.f64(double %71)
  %73 = fcmp olt double %72, 0x3EB0C6F7A0B5ED8D
  br i1 %73, label %79, label %74

74:                                               ; preds = %65
  %75 = load i32, ptr @current_test, align 4, !tbaa !11
  %76 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %75)
  %77 = load double, ptr @init_value, align 8, !tbaa !33
  %78 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %79

79:                                               ; preds = %65, %74
  %80 = phi i32 [ %66, %65 ], [ %78, %74 ]
  %81 = phi double [ %67, %65 ], [ %77, %74 ]
  %82 = add nuw nsw i32 %68, 1
  %83 = icmp slt i32 %82, %80
  br i1 %83, label %65, label %84, !llvm.loop !679

84:                                               ; preds = %79, %40, %3
  %85 = tail call i64 @clock() #17
  store i64 %85, ptr @end_time, align 8, !tbaa !30
  %86 = load i64, ptr @start_time, align 8, !tbaa !30
  %87 = load ptr, ptr @results, align 8, !tbaa !6
  %88 = icmp ne ptr %87, null
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %90 = load i32, ptr @current_test, align 4
  %91 = icmp slt i32 %90, %89
  %92 = select i1 %88, i1 %91, i1 false
  br i1 %92, label %104, label %93

93:                                               ; preds = %84
  %94 = add nsw i32 %89, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !11
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %87, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !6
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %93
  %100 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %104

101:                                              ; preds = %93
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %84, %99
  %105 = phi i32 [ %100, %99 ], [ %90, %84 ]
  %106 = phi ptr [ %97, %99 ], [ %87, %84 ]
  %107 = sub nsw i64 %85, %86
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !13
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !17
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId28custom_multiple_constant_subIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %99

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %77

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %46
  %17 = phi i32 [ %47, %46 ], [ %5, %11 ]
  %18 = phi i32 [ %48, %46 ], [ 0, %11 ]
  br i1 %13, label %39, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %36, %19 ], [ 0, %16 ]
  %21 = phi double [ %35, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw double, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <2 x double>, ptr %22, align 8, !tbaa !33
  %25 = load <2 x double>, ptr %23, align 8, !tbaa !33
  %26 = fadd <2 x double> %24, splat (double -1.000000e+00)
  %27 = fadd <2 x double> %25, splat (double -1.000000e+00)
  %28 = fadd <2 x double> %26, splat (double -2.000000e+00)
  %29 = fadd <2 x double> %27, splat (double -2.000000e+00)
  %30 = fadd <2 x double> %28, splat (double -3.000000e+00)
  %31 = fadd <2 x double> %29, splat (double -3.000000e+00)
  %32 = fadd <2 x double> %30, splat (double -4.000000e+00)
  %33 = fadd <2 x double> %31, splat (double -4.000000e+00)
  %34 = tail call double @llvm.vector.reduce.fadd.v2f64(double %21, <2 x double> %32)
  %35 = tail call double @llvm.vector.reduce.fadd.v2f64(double %34, <2 x double> %33)
  %36 = add nuw i64 %20, 4
  %37 = icmp eq i64 %36, %14
  br i1 %37, label %38, label %19, !llvm.loop !681

38:                                               ; preds = %19
  br i1 %15, label %62, label %39

39:                                               ; preds = %16, %38
  %40 = phi i64 [ 0, %16 ], [ %14, %38 ]
  %41 = phi double [ 0.000000e+00, %16 ], [ %35, %38 ]
  br label %50

42:                                               ; preds = %62
  %43 = load i32, ptr @current_test, align 4, !tbaa !11
  %44 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %43)
  %45 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %46

46:                                               ; preds = %42, %62
  %47 = phi i32 [ %45, %42 ], [ %17, %62 ]
  %48 = add nuw nsw i32 %18, 1
  %49 = icmp slt i32 %48, %47
  br i1 %49, label %16, label %99, !llvm.loop !682

50:                                               ; preds = %39, %50
  %51 = phi i64 [ %60, %50 ], [ %40, %39 ]
  %52 = phi double [ %59, %50 ], [ %41, %39 ]
  %53 = getelementptr inbounds nuw double, ptr %0, i64 %51
  %54 = load double, ptr %53, align 8, !tbaa !33
  %55 = fadd double %54, -1.000000e+00
  %56 = fadd double %55, -2.000000e+00
  %57 = fadd double %56, -3.000000e+00
  %58 = fadd double %57, -4.000000e+00
  %59 = fadd double %52, %58
  %60 = add nuw nsw i64 %51, 1
  %61 = icmp eq i64 %60, %12
  br i1 %61, label %62, label %50, !llvm.loop !683

62:                                               ; preds = %50, %38
  %63 = phi double [ %35, %38 ], [ %59, %50 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !33
  %65 = fadd double %64, -1.000000e+00
  %66 = fadd double %65, -2.000000e+00
  %67 = fadd double %66, -3.000000e+00
  %68 = fadd double %67, -4.000000e+00
  %69 = fmul double %68, 8.000000e+03
  %70 = fsub double %63, %69
  %71 = tail call double @llvm.fabs.f64(double %63)
  %72 = fcmp ogt double %71, 1.000000e-08
  %73 = fdiv double %70, %63
  %74 = select i1 %72, double %73, double %70
  %75 = tail call double @llvm.fabs.f64(double %74)
  %76 = fcmp olt double %75, 0x3EB0C6F7A0B5ED8D
  br i1 %76, label %46, label %42

77:                                               ; preds = %9, %94
  %78 = phi i32 [ %95, %94 ], [ %5, %9 ]
  %79 = phi double [ %96, %94 ], [ %10, %9 ]
  %80 = phi i32 [ %97, %94 ], [ 0, %9 ]
  %81 = fadd double %79, -1.000000e+00
  %82 = fadd double %81, -2.000000e+00
  %83 = fadd double %82, -3.000000e+00
  %84 = fadd double %83, -4.000000e+00
  %85 = fmul double %84, 8.000000e+03
  %86 = fsub double 0.000000e+00, %85
  %87 = tail call double @llvm.fabs.f64(double %86)
  %88 = fcmp olt double %87, 0x3EB0C6F7A0B5ED8D
  br i1 %88, label %94, label %89

89:                                               ; preds = %77
  %90 = load i32, ptr @current_test, align 4, !tbaa !11
  %91 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %90)
  %92 = load double, ptr @init_value, align 8, !tbaa !33
  %93 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %94

94:                                               ; preds = %77, %89
  %95 = phi i32 [ %78, %77 ], [ %93, %89 ]
  %96 = phi double [ %79, %77 ], [ %92, %89 ]
  %97 = add nuw nsw i32 %80, 1
  %98 = icmp slt i32 %97, %95
  br i1 %98, label %77, label %99, !llvm.loop !682

99:                                               ; preds = %94, %46, %3
  %100 = tail call i64 @clock() #17
  store i64 %100, ptr @end_time, align 8, !tbaa !30
  %101 = load i64, ptr @start_time, align 8, !tbaa !30
  %102 = load ptr, ptr @results, align 8, !tbaa !6
  %103 = icmp ne ptr %102, null
  %104 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %105 = load i32, ptr @current_test, align 4
  %106 = icmp slt i32 %105, %104
  %107 = select i1 %103, i1 %106, i1 false
  br i1 %107, label %119, label %108

108:                                              ; preds = %99
  %109 = add nsw i32 %104, 10
  store i32 %109, ptr @allocated_results, align 4, !tbaa !11
  %110 = sext i32 %109 to i64
  %111 = shl nsw i64 %110, 4
  %112 = tail call ptr @realloc(ptr noundef %102, i64 noundef %111) #14
  store ptr %112, ptr @results, align 8, !tbaa !6
  %113 = icmp eq ptr %112, null
  br i1 %113, label %116, label %114

114:                                              ; preds = %108
  %115 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %119

116:                                              ; preds = %108
  %117 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %118 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %117)
  tail call void @exit(i32 noundef -1) #15
  unreachable

119:                                              ; preds = %99, %114
  %120 = phi i32 [ %115, %114 ], [ %105, %99 ]
  %121 = phi ptr [ %112, %114 ], [ %102, %99 ]
  %122 = sub nsw i64 %100, %101
  %123 = sitofp i64 %122 to double
  %124 = fdiv double %123, 1.000000e+06
  %125 = sext i32 %120 to i64
  %126 = getelementptr inbounds %struct.one_result, ptr %121, i64 %125
  store double %124, ptr %126, align 8, !tbaa !13
  %127 = getelementptr inbounds %struct.one_result, ptr %121, i64 %125, i32 1
  store ptr %2, ptr %127, align 8, !tbaa !17
  %128 = add nsw i32 %120, 1
  store i32 %128, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId24custom_constant_multiplyIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %84

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %65

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi double [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw double, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <2 x double>, ptr %22, align 8, !tbaa !33
  %25 = load <2 x double>, ptr %23, align 8, !tbaa !33
  %26 = fmul <2 x double> %24, splat (double 1.200000e+02)
  %27 = fmul <2 x double> %25, splat (double 1.200000e+02)
  %28 = tail call double @llvm.vector.reduce.fadd.v2f64(double %21, <2 x double> %26)
  %29 = tail call double @llvm.vector.reduce.fadd.v2f64(double %28, <2 x double> %27)
  %30 = add nuw i64 %20, 4
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !684

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi double [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %84, !llvm.loop !685

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi double [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw double, ptr %0, i64 %45
  %48 = load double, ptr %47, align 8, !tbaa !33
  %49 = fmul double %48, 1.200000e+02
  %50 = fadd double %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !686

53:                                               ; preds = %44, %32
  %54 = phi double [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fmul double %55, 1.200000e+02
  %57 = fmul double %56, 8.000000e+03
  %58 = fsub double %54, %57
  %59 = tail call double @llvm.fabs.f64(double %54)
  %60 = fcmp ogt double %59, 1.000000e-08
  %61 = fdiv double %58, %54
  %62 = select i1 %60, double %61, double %58
  %63 = tail call double @llvm.fabs.f64(double %62)
  %64 = fcmp olt double %63, 0x3EB0C6F7A0B5ED8D
  br i1 %64, label %40, label %36

65:                                               ; preds = %9, %79
  %66 = phi i32 [ %80, %79 ], [ %5, %9 ]
  %67 = phi double [ %81, %79 ], [ %10, %9 ]
  %68 = phi i32 [ %82, %79 ], [ 0, %9 ]
  %69 = fmul double %67, 1.200000e+02
  %70 = fmul double %69, 8.000000e+03
  %71 = fsub double 0.000000e+00, %70
  %72 = tail call double @llvm.fabs.f64(double %71)
  %73 = fcmp olt double %72, 0x3EB0C6F7A0B5ED8D
  br i1 %73, label %79, label %74

74:                                               ; preds = %65
  %75 = load i32, ptr @current_test, align 4, !tbaa !11
  %76 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %75)
  %77 = load double, ptr @init_value, align 8, !tbaa !33
  %78 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %79

79:                                               ; preds = %65, %74
  %80 = phi i32 [ %66, %65 ], [ %78, %74 ]
  %81 = phi double [ %67, %65 ], [ %77, %74 ]
  %82 = add nuw nsw i32 %68, 1
  %83 = icmp slt i32 %82, %80
  br i1 %83, label %65, label %84, !llvm.loop !685

84:                                               ; preds = %79, %40, %3
  %85 = tail call i64 @clock() #17
  store i64 %85, ptr @end_time, align 8, !tbaa !30
  %86 = load i64, ptr @start_time, align 8, !tbaa !30
  %87 = load ptr, ptr @results, align 8, !tbaa !6
  %88 = icmp ne ptr %87, null
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %90 = load i32, ptr @current_test, align 4
  %91 = icmp slt i32 %90, %89
  %92 = select i1 %88, i1 %91, i1 false
  br i1 %92, label %104, label %93

93:                                               ; preds = %84
  %94 = add nsw i32 %89, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !11
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %87, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !6
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %93
  %100 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %104

101:                                              ; preds = %93
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %84, %99
  %105 = phi i32 [ %100, %99 ], [ %90, %84 ]
  %106 = phi ptr [ %97, %99 ], [ %87, %84 ]
  %107 = sub nsw i64 %85, %86
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !13
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !17
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId33custom_multiple_constant_multiplyIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %99

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %77

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %46
  %17 = phi i32 [ %47, %46 ], [ %5, %11 ]
  %18 = phi i32 [ %48, %46 ], [ 0, %11 ]
  br i1 %13, label %39, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %36, %19 ], [ 0, %16 ]
  %21 = phi double [ %35, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw double, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <2 x double>, ptr %22, align 8, !tbaa !33
  %25 = load <2 x double>, ptr %23, align 8, !tbaa !33
  %26 = fmul <2 x double> %24, splat (double 2.000000e+00)
  %27 = fmul <2 x double> %25, splat (double 2.000000e+00)
  %28 = fmul <2 x double> %26, splat (double 3.000000e+00)
  %29 = fmul <2 x double> %27, splat (double 3.000000e+00)
  %30 = fmul <2 x double> %28, splat (double 4.000000e+00)
  %31 = fmul <2 x double> %29, splat (double 4.000000e+00)
  %32 = fmul <2 x double> %30, splat (double 5.000000e+00)
  %33 = fmul <2 x double> %31, splat (double 5.000000e+00)
  %34 = tail call double @llvm.vector.reduce.fadd.v2f64(double %21, <2 x double> %32)
  %35 = tail call double @llvm.vector.reduce.fadd.v2f64(double %34, <2 x double> %33)
  %36 = add nuw i64 %20, 4
  %37 = icmp eq i64 %36, %14
  br i1 %37, label %38, label %19, !llvm.loop !687

38:                                               ; preds = %19
  br i1 %15, label %62, label %39

39:                                               ; preds = %16, %38
  %40 = phi i64 [ 0, %16 ], [ %14, %38 ]
  %41 = phi double [ 0.000000e+00, %16 ], [ %35, %38 ]
  br label %50

42:                                               ; preds = %62
  %43 = load i32, ptr @current_test, align 4, !tbaa !11
  %44 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %43)
  %45 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %46

46:                                               ; preds = %42, %62
  %47 = phi i32 [ %45, %42 ], [ %17, %62 ]
  %48 = add nuw nsw i32 %18, 1
  %49 = icmp slt i32 %48, %47
  br i1 %49, label %16, label %99, !llvm.loop !688

50:                                               ; preds = %39, %50
  %51 = phi i64 [ %60, %50 ], [ %40, %39 ]
  %52 = phi double [ %59, %50 ], [ %41, %39 ]
  %53 = getelementptr inbounds nuw double, ptr %0, i64 %51
  %54 = load double, ptr %53, align 8, !tbaa !33
  %55 = fmul double %54, 2.000000e+00
  %56 = fmul double %55, 3.000000e+00
  %57 = fmul double %56, 4.000000e+00
  %58 = fmul double %57, 5.000000e+00
  %59 = fadd double %52, %58
  %60 = add nuw nsw i64 %51, 1
  %61 = icmp eq i64 %60, %12
  br i1 %61, label %62, label %50, !llvm.loop !689

62:                                               ; preds = %50, %38
  %63 = phi double [ %35, %38 ], [ %59, %50 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !33
  %65 = fmul double %64, 2.000000e+00
  %66 = fmul double %65, 3.000000e+00
  %67 = fmul double %66, 4.000000e+00
  %68 = fmul double %67, 5.000000e+00
  %69 = fmul double %68, 8.000000e+03
  %70 = fsub double %63, %69
  %71 = tail call double @llvm.fabs.f64(double %63)
  %72 = fcmp ogt double %71, 1.000000e-08
  %73 = fdiv double %70, %63
  %74 = select i1 %72, double %73, double %70
  %75 = tail call double @llvm.fabs.f64(double %74)
  %76 = fcmp olt double %75, 0x3EB0C6F7A0B5ED8D
  br i1 %76, label %46, label %42

77:                                               ; preds = %9, %94
  %78 = phi i32 [ %95, %94 ], [ %5, %9 ]
  %79 = phi double [ %96, %94 ], [ %10, %9 ]
  %80 = phi i32 [ %97, %94 ], [ 0, %9 ]
  %81 = fmul double %79, 2.000000e+00
  %82 = fmul double %81, 3.000000e+00
  %83 = fmul double %82, 4.000000e+00
  %84 = fmul double %83, 5.000000e+00
  %85 = fmul double %84, 8.000000e+03
  %86 = fsub double 0.000000e+00, %85
  %87 = tail call double @llvm.fabs.f64(double %86)
  %88 = fcmp olt double %87, 0x3EB0C6F7A0B5ED8D
  br i1 %88, label %94, label %89

89:                                               ; preds = %77
  %90 = load i32, ptr @current_test, align 4, !tbaa !11
  %91 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %90)
  %92 = load double, ptr @init_value, align 8, !tbaa !33
  %93 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %94

94:                                               ; preds = %77, %89
  %95 = phi i32 [ %78, %77 ], [ %93, %89 ]
  %96 = phi double [ %79, %77 ], [ %92, %89 ]
  %97 = add nuw nsw i32 %80, 1
  %98 = icmp slt i32 %97, %95
  br i1 %98, label %77, label %99, !llvm.loop !688

99:                                               ; preds = %94, %46, %3
  %100 = tail call i64 @clock() #17
  store i64 %100, ptr @end_time, align 8, !tbaa !30
  %101 = load i64, ptr @start_time, align 8, !tbaa !30
  %102 = load ptr, ptr @results, align 8, !tbaa !6
  %103 = icmp ne ptr %102, null
  %104 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %105 = load i32, ptr @current_test, align 4
  %106 = icmp slt i32 %105, %104
  %107 = select i1 %103, i1 %106, i1 false
  br i1 %107, label %119, label %108

108:                                              ; preds = %99
  %109 = add nsw i32 %104, 10
  store i32 %109, ptr @allocated_results, align 4, !tbaa !11
  %110 = sext i32 %109 to i64
  %111 = shl nsw i64 %110, 4
  %112 = tail call ptr @realloc(ptr noundef %102, i64 noundef %111) #14
  store ptr %112, ptr @results, align 8, !tbaa !6
  %113 = icmp eq ptr %112, null
  br i1 %113, label %116, label %114

114:                                              ; preds = %108
  %115 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %119

116:                                              ; preds = %108
  %117 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %118 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %117)
  tail call void @exit(i32 noundef -1) #15
  unreachable

119:                                              ; preds = %99, %114
  %120 = phi i32 [ %115, %114 ], [ %105, %99 ]
  %121 = phi ptr [ %112, %114 ], [ %102, %99 ]
  %122 = sub nsw i64 %100, %101
  %123 = sitofp i64 %122 to double
  %124 = fdiv double %123, 1.000000e+06
  %125 = sext i32 %120 to i64
  %126 = getelementptr inbounds %struct.one_result, ptr %121, i64 %125
  store double %124, ptr %126, align 8, !tbaa !13
  %127 = getelementptr inbounds %struct.one_result, ptr %121, i64 %125, i32 1
  store ptr %2, ptr %127, align 8, !tbaa !17
  %128 = add nsw i32 %120, 1
  store i32 %128, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId34custom_multiple_constant_multiply2IdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %84

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %65

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi double [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw double, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <2 x double>, ptr %22, align 8, !tbaa !33
  %25 = load <2 x double>, ptr %23, align 8, !tbaa !33
  %26 = fadd <2 x double> %24, splat (double 1.200000e+02)
  %27 = fadd <2 x double> %25, splat (double 1.200000e+02)
  %28 = tail call double @llvm.vector.reduce.fadd.v2f64(double %21, <2 x double> %26)
  %29 = tail call double @llvm.vector.reduce.fadd.v2f64(double %28, <2 x double> %27)
  %30 = add nuw i64 %20, 4
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !690

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi double [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %84, !llvm.loop !691

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi double [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw double, ptr %0, i64 %45
  %48 = load double, ptr %47, align 8, !tbaa !33
  %49 = fadd double %48, 1.200000e+02
  %50 = fadd double %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !692

53:                                               ; preds = %44, %32
  %54 = phi double [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fadd double %55, 1.200000e+02
  %57 = fmul double %56, 8.000000e+03
  %58 = fsub double %54, %57
  %59 = tail call double @llvm.fabs.f64(double %54)
  %60 = fcmp ogt double %59, 1.000000e-08
  %61 = fdiv double %58, %54
  %62 = select i1 %60, double %61, double %58
  %63 = tail call double @llvm.fabs.f64(double %62)
  %64 = fcmp olt double %63, 0x3EB0C6F7A0B5ED8D
  br i1 %64, label %40, label %36

65:                                               ; preds = %9, %79
  %66 = phi i32 [ %80, %79 ], [ %5, %9 ]
  %67 = phi double [ %81, %79 ], [ %10, %9 ]
  %68 = phi i32 [ %82, %79 ], [ 0, %9 ]
  %69 = fadd double %67, 1.200000e+02
  %70 = fmul double %69, 8.000000e+03
  %71 = fsub double 0.000000e+00, %70
  %72 = tail call double @llvm.fabs.f64(double %71)
  %73 = fcmp olt double %72, 0x3EB0C6F7A0B5ED8D
  br i1 %73, label %79, label %74

74:                                               ; preds = %65
  %75 = load i32, ptr @current_test, align 4, !tbaa !11
  %76 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %75)
  %77 = load double, ptr @init_value, align 8, !tbaa !33
  %78 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %79

79:                                               ; preds = %65, %74
  %80 = phi i32 [ %66, %65 ], [ %78, %74 ]
  %81 = phi double [ %67, %65 ], [ %77, %74 ]
  %82 = add nuw nsw i32 %68, 1
  %83 = icmp slt i32 %82, %80
  br i1 %83, label %65, label %84, !llvm.loop !691

84:                                               ; preds = %79, %40, %3
  %85 = tail call i64 @clock() #17
  store i64 %85, ptr @end_time, align 8, !tbaa !30
  %86 = load i64, ptr @start_time, align 8, !tbaa !30
  %87 = load ptr, ptr @results, align 8, !tbaa !6
  %88 = icmp ne ptr %87, null
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %90 = load i32, ptr @current_test, align 4
  %91 = icmp slt i32 %90, %89
  %92 = select i1 %88, i1 %91, i1 false
  br i1 %92, label %104, label %93

93:                                               ; preds = %84
  %94 = add nsw i32 %89, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !11
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %87, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !6
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %93
  %100 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %104

101:                                              ; preds = %93
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %84, %99
  %105 = phi i32 [ %100, %99 ], [ %90, %84 ]
  %106 = phi ptr [ %97, %99 ], [ %87, %84 ]
  %107 = sub nsw i64 %85, %86
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !13
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !17
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId22custom_constant_divideIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %84

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %65

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi double [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw double, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <2 x double>, ptr %22, align 8, !tbaa !33
  %25 = load <2 x double>, ptr %23, align 8, !tbaa !33
  %26 = fdiv <2 x double> %24, splat (double 5.000000e+00)
  %27 = fdiv <2 x double> %25, splat (double 5.000000e+00)
  %28 = tail call double @llvm.vector.reduce.fadd.v2f64(double %21, <2 x double> %26)
  %29 = tail call double @llvm.vector.reduce.fadd.v2f64(double %28, <2 x double> %27)
  %30 = add nuw i64 %20, 4
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !693

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi double [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %84, !llvm.loop !694

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi double [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw double, ptr %0, i64 %45
  %48 = load double, ptr %47, align 8, !tbaa !33
  %49 = fdiv double %48, 5.000000e+00
  %50 = fadd double %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !695

53:                                               ; preds = %44, %32
  %54 = phi double [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fdiv double %55, 5.000000e+00
  %57 = fmul double %56, 8.000000e+03
  %58 = fsub double %54, %57
  %59 = tail call double @llvm.fabs.f64(double %54)
  %60 = fcmp ogt double %59, 1.000000e-08
  %61 = fdiv double %58, %54
  %62 = select i1 %60, double %61, double %58
  %63 = tail call double @llvm.fabs.f64(double %62)
  %64 = fcmp olt double %63, 0x3EB0C6F7A0B5ED8D
  br i1 %64, label %40, label %36

65:                                               ; preds = %9, %79
  %66 = phi i32 [ %80, %79 ], [ %5, %9 ]
  %67 = phi double [ %81, %79 ], [ %10, %9 ]
  %68 = phi i32 [ %82, %79 ], [ 0, %9 ]
  %69 = fdiv double %67, 5.000000e+00
  %70 = fmul double %69, 8.000000e+03
  %71 = fsub double 0.000000e+00, %70
  %72 = tail call double @llvm.fabs.f64(double %71)
  %73 = fcmp olt double %72, 0x3EB0C6F7A0B5ED8D
  br i1 %73, label %79, label %74

74:                                               ; preds = %65
  %75 = load i32, ptr @current_test, align 4, !tbaa !11
  %76 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %75)
  %77 = load double, ptr @init_value, align 8, !tbaa !33
  %78 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %79

79:                                               ; preds = %65, %74
  %80 = phi i32 [ %66, %65 ], [ %78, %74 ]
  %81 = phi double [ %67, %65 ], [ %77, %74 ]
  %82 = add nuw nsw i32 %68, 1
  %83 = icmp slt i32 %82, %80
  br i1 %83, label %65, label %84, !llvm.loop !694

84:                                               ; preds = %79, %40, %3
  %85 = tail call i64 @clock() #17
  store i64 %85, ptr @end_time, align 8, !tbaa !30
  %86 = load i64, ptr @start_time, align 8, !tbaa !30
  %87 = load ptr, ptr @results, align 8, !tbaa !6
  %88 = icmp ne ptr %87, null
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %90 = load i32, ptr @current_test, align 4
  %91 = icmp slt i32 %90, %89
  %92 = select i1 %88, i1 %91, i1 false
  br i1 %92, label %104, label %93

93:                                               ; preds = %84
  %94 = add nsw i32 %89, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !11
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %87, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !6
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %93
  %100 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %104

101:                                              ; preds = %93
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %84, %99
  %105 = phi i32 [ %100, %99 ], [ %90, %84 ]
  %106 = phi ptr [ %97, %99 ], [ %87, %84 ]
  %107 = sub nsw i64 %85, %86
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !13
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !17
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId31custom_multiple_constant_divideIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %99

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %77

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %46
  %17 = phi i32 [ %47, %46 ], [ %5, %11 ]
  %18 = phi i32 [ %48, %46 ], [ 0, %11 ]
  br i1 %13, label %39, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %36, %19 ], [ 0, %16 ]
  %21 = phi double [ %35, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw double, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <2 x double>, ptr %22, align 8, !tbaa !33
  %25 = load <2 x double>, ptr %23, align 8, !tbaa !33
  %26 = fmul <2 x double> %24, splat (double 5.000000e-01)
  %27 = fmul <2 x double> %25, splat (double 5.000000e-01)
  %28 = fdiv <2 x double> %26, splat (double 3.000000e+00)
  %29 = fdiv <2 x double> %27, splat (double 3.000000e+00)
  %30 = fmul <2 x double> %28, splat (double 2.500000e-01)
  %31 = fmul <2 x double> %29, splat (double 2.500000e-01)
  %32 = fdiv <2 x double> %30, splat (double 5.000000e+00)
  %33 = fdiv <2 x double> %31, splat (double 5.000000e+00)
  %34 = tail call double @llvm.vector.reduce.fadd.v2f64(double %21, <2 x double> %32)
  %35 = tail call double @llvm.vector.reduce.fadd.v2f64(double %34, <2 x double> %33)
  %36 = add nuw i64 %20, 4
  %37 = icmp eq i64 %36, %14
  br i1 %37, label %38, label %19, !llvm.loop !696

38:                                               ; preds = %19
  br i1 %15, label %62, label %39

39:                                               ; preds = %16, %38
  %40 = phi i64 [ 0, %16 ], [ %14, %38 ]
  %41 = phi double [ 0.000000e+00, %16 ], [ %35, %38 ]
  br label %50

42:                                               ; preds = %62
  %43 = load i32, ptr @current_test, align 4, !tbaa !11
  %44 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %43)
  %45 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %46

46:                                               ; preds = %42, %62
  %47 = phi i32 [ %45, %42 ], [ %17, %62 ]
  %48 = add nuw nsw i32 %18, 1
  %49 = icmp slt i32 %48, %47
  br i1 %49, label %16, label %99, !llvm.loop !697

50:                                               ; preds = %39, %50
  %51 = phi i64 [ %60, %50 ], [ %40, %39 ]
  %52 = phi double [ %59, %50 ], [ %41, %39 ]
  %53 = getelementptr inbounds nuw double, ptr %0, i64 %51
  %54 = load double, ptr %53, align 8, !tbaa !33
  %55 = fmul double %54, 5.000000e-01
  %56 = fdiv double %55, 3.000000e+00
  %57 = fmul double %56, 2.500000e-01
  %58 = fdiv double %57, 5.000000e+00
  %59 = fadd double %52, %58
  %60 = add nuw nsw i64 %51, 1
  %61 = icmp eq i64 %60, %12
  br i1 %61, label %62, label %50, !llvm.loop !698

62:                                               ; preds = %50, %38
  %63 = phi double [ %35, %38 ], [ %59, %50 ]
  %64 = load double, ptr @init_value, align 8, !tbaa !33
  %65 = fmul double %64, 5.000000e-01
  %66 = fdiv double %65, 3.000000e+00
  %67 = fmul double %66, 2.500000e-01
  %68 = fdiv double %67, 5.000000e+00
  %69 = fmul double %68, 8.000000e+03
  %70 = fsub double %63, %69
  %71 = tail call double @llvm.fabs.f64(double %63)
  %72 = fcmp ogt double %71, 1.000000e-08
  %73 = fdiv double %70, %63
  %74 = select i1 %72, double %73, double %70
  %75 = tail call double @llvm.fabs.f64(double %74)
  %76 = fcmp olt double %75, 0x3EB0C6F7A0B5ED8D
  br i1 %76, label %46, label %42

77:                                               ; preds = %9, %94
  %78 = phi i32 [ %95, %94 ], [ %5, %9 ]
  %79 = phi double [ %96, %94 ], [ %10, %9 ]
  %80 = phi i32 [ %97, %94 ], [ 0, %9 ]
  %81 = fmul double %79, 5.000000e-01
  %82 = fdiv double %81, 3.000000e+00
  %83 = fmul double %82, 2.500000e-01
  %84 = fdiv double %83, 5.000000e+00
  %85 = fmul double %84, 8.000000e+03
  %86 = fsub double 0.000000e+00, %85
  %87 = tail call double @llvm.fabs.f64(double %86)
  %88 = fcmp olt double %87, 0x3EB0C6F7A0B5ED8D
  br i1 %88, label %94, label %89

89:                                               ; preds = %77
  %90 = load i32, ptr @current_test, align 4, !tbaa !11
  %91 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %90)
  %92 = load double, ptr @init_value, align 8, !tbaa !33
  %93 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %94

94:                                               ; preds = %77, %89
  %95 = phi i32 [ %78, %77 ], [ %93, %89 ]
  %96 = phi double [ %79, %77 ], [ %92, %89 ]
  %97 = add nuw nsw i32 %80, 1
  %98 = icmp slt i32 %97, %95
  br i1 %98, label %77, label %99, !llvm.loop !697

99:                                               ; preds = %94, %46, %3
  %100 = tail call i64 @clock() #17
  store i64 %100, ptr @end_time, align 8, !tbaa !30
  %101 = load i64, ptr @start_time, align 8, !tbaa !30
  %102 = load ptr, ptr @results, align 8, !tbaa !6
  %103 = icmp ne ptr %102, null
  %104 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %105 = load i32, ptr @current_test, align 4
  %106 = icmp slt i32 %105, %104
  %107 = select i1 %103, i1 %106, i1 false
  br i1 %107, label %119, label %108

108:                                              ; preds = %99
  %109 = add nsw i32 %104, 10
  store i32 %109, ptr @allocated_results, align 4, !tbaa !11
  %110 = sext i32 %109 to i64
  %111 = shl nsw i64 %110, 4
  %112 = tail call ptr @realloc(ptr noundef %102, i64 noundef %111) #14
  store ptr %112, ptr @results, align 8, !tbaa !6
  %113 = icmp eq ptr %112, null
  br i1 %113, label %116, label %114

114:                                              ; preds = %108
  %115 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %119

116:                                              ; preds = %108
  %117 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %118 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %117)
  tail call void @exit(i32 noundef -1) #15
  unreachable

119:                                              ; preds = %99, %114
  %120 = phi i32 [ %115, %114 ], [ %105, %99 ]
  %121 = phi ptr [ %112, %114 ], [ %102, %99 ]
  %122 = sub nsw i64 %100, %101
  %123 = sitofp i64 %122 to double
  %124 = fdiv double %123, 1.000000e+06
  %125 = sext i32 %120 to i64
  %126 = getelementptr inbounds %struct.one_result, ptr %121, i64 %125
  store double %124, ptr %126, align 8, !tbaa !13
  %127 = getelementptr inbounds %struct.one_result, ptr %121, i64 %125, i32 1
  store ptr %2, ptr %127, align 8, !tbaa !17
  %128 = add nsw i32 %120, 1
  store i32 %128, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId32custom_multiple_constant_divide2IdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %84

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %65

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %40
  %17 = phi i32 [ %41, %40 ], [ %5, %11 ]
  %18 = phi i32 [ %42, %40 ], [ 0, %11 ]
  br i1 %13, label %33, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %30, %19 ], [ 0, %16 ]
  %21 = phi double [ %29, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw double, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <2 x double>, ptr %22, align 8, !tbaa !33
  %25 = load <2 x double>, ptr %23, align 8, !tbaa !33
  %26 = fadd <2 x double> %24, splat (double 2.000000e+00)
  %27 = fadd <2 x double> %25, splat (double 2.000000e+00)
  %28 = tail call double @llvm.vector.reduce.fadd.v2f64(double %21, <2 x double> %26)
  %29 = tail call double @llvm.vector.reduce.fadd.v2f64(double %28, <2 x double> %27)
  %30 = add nuw i64 %20, 4
  %31 = icmp eq i64 %30, %14
  br i1 %31, label %32, label %19, !llvm.loop !699

32:                                               ; preds = %19
  br i1 %15, label %53, label %33

33:                                               ; preds = %16, %32
  %34 = phi i64 [ 0, %16 ], [ %14, %32 ]
  %35 = phi double [ 0.000000e+00, %16 ], [ %29, %32 ]
  br label %44

36:                                               ; preds = %53
  %37 = load i32, ptr @current_test, align 4, !tbaa !11
  %38 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %37)
  %39 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %40

40:                                               ; preds = %36, %53
  %41 = phi i32 [ %39, %36 ], [ %17, %53 ]
  %42 = add nuw nsw i32 %18, 1
  %43 = icmp slt i32 %42, %41
  br i1 %43, label %16, label %84, !llvm.loop !700

44:                                               ; preds = %33, %44
  %45 = phi i64 [ %51, %44 ], [ %34, %33 ]
  %46 = phi double [ %50, %44 ], [ %35, %33 ]
  %47 = getelementptr inbounds nuw double, ptr %0, i64 %45
  %48 = load double, ptr %47, align 8, !tbaa !33
  %49 = fadd double %48, 2.000000e+00
  %50 = fadd double %46, %49
  %51 = add nuw nsw i64 %45, 1
  %52 = icmp eq i64 %51, %12
  br i1 %52, label %53, label %44, !llvm.loop !701

53:                                               ; preds = %44, %32
  %54 = phi double [ %29, %32 ], [ %50, %44 ]
  %55 = load double, ptr @init_value, align 8, !tbaa !33
  %56 = fadd double %55, 2.000000e+00
  %57 = fmul double %56, 8.000000e+03
  %58 = fsub double %54, %57
  %59 = tail call double @llvm.fabs.f64(double %54)
  %60 = fcmp ogt double %59, 1.000000e-08
  %61 = fdiv double %58, %54
  %62 = select i1 %60, double %61, double %58
  %63 = tail call double @llvm.fabs.f64(double %62)
  %64 = fcmp olt double %63, 0x3EB0C6F7A0B5ED8D
  br i1 %64, label %40, label %36

65:                                               ; preds = %9, %79
  %66 = phi i32 [ %80, %79 ], [ %5, %9 ]
  %67 = phi double [ %81, %79 ], [ %10, %9 ]
  %68 = phi i32 [ %82, %79 ], [ 0, %9 ]
  %69 = fadd double %67, 2.000000e+00
  %70 = fmul double %69, 8.000000e+03
  %71 = fsub double 0.000000e+00, %70
  %72 = tail call double @llvm.fabs.f64(double %71)
  %73 = fcmp olt double %72, 0x3EB0C6F7A0B5ED8D
  br i1 %73, label %79, label %74

74:                                               ; preds = %65
  %75 = load i32, ptr @current_test, align 4, !tbaa !11
  %76 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %75)
  %77 = load double, ptr @init_value, align 8, !tbaa !33
  %78 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %79

79:                                               ; preds = %65, %74
  %80 = phi i32 [ %66, %65 ], [ %78, %74 ]
  %81 = phi double [ %67, %65 ], [ %77, %74 ]
  %82 = add nuw nsw i32 %68, 1
  %83 = icmp slt i32 %82, %80
  br i1 %83, label %65, label %84, !llvm.loop !700

84:                                               ; preds = %79, %40, %3
  %85 = tail call i64 @clock() #17
  store i64 %85, ptr @end_time, align 8, !tbaa !30
  %86 = load i64, ptr @start_time, align 8, !tbaa !30
  %87 = load ptr, ptr @results, align 8, !tbaa !6
  %88 = icmp ne ptr %87, null
  %89 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %90 = load i32, ptr @current_test, align 4
  %91 = icmp slt i32 %90, %89
  %92 = select i1 %88, i1 %91, i1 false
  br i1 %92, label %104, label %93

93:                                               ; preds = %84
  %94 = add nsw i32 %89, 10
  store i32 %94, ptr @allocated_results, align 4, !tbaa !11
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 4
  %97 = tail call ptr @realloc(ptr noundef %87, i64 noundef %96) #14
  store ptr %97, ptr @results, align 8, !tbaa !6
  %98 = icmp eq ptr %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %93
  %100 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %104

101:                                              ; preds = %93
  %102 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %103 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %102)
  tail call void @exit(i32 noundef -1) #15
  unreachable

104:                                              ; preds = %84, %99
  %105 = phi i32 [ %100, %99 ], [ %90, %84 ]
  %106 = phi ptr [ %97, %99 ], [ %87, %84 ]
  %107 = sub nsw i64 %85, %86
  %108 = sitofp i64 %107 to double
  %109 = fdiv double %108, 1.000000e+06
  %110 = sext i32 %105 to i64
  %111 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110
  store double %109, ptr %111, align 8, !tbaa !13
  %112 = getelementptr inbounds %struct.one_result, ptr %106, i64 %110, i32 1
  store ptr %2, ptr %112, align 8, !tbaa !17
  %113 = add nsw i32 %105, 1
  store i32 %113, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: mustprogress uwtable
define linkonce_odr dso_local void @_Z13test_constantId30custom_multiple_constant_mixedIdEEvPT_iPKc(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 comdat {
  %4 = tail call i64 @clock() #17
  store i64 %4, ptr @start_time, align 8, !tbaa !30
  %5 = load i32, ptr @iterations, align 4, !tbaa !11
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %89

7:                                                ; preds = %3
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %7
  %10 = load double, ptr @init_value, align 8, !tbaa !33
  br label %69

11:                                               ; preds = %7
  %12 = zext nneg i32 %1 to i64
  %13 = icmp ult i32 %1, 4
  %14 = and i64 %12, 2147483644
  %15 = icmp eq i64 %14, %12
  br label %16

16:                                               ; preds = %11, %42
  %17 = phi i32 [ %43, %42 ], [ %5, %11 ]
  %18 = phi i32 [ %44, %42 ], [ 0, %11 ]
  br i1 %13, label %35, label %19

19:                                               ; preds = %16, %19
  %20 = phi i64 [ %32, %19 ], [ 0, %16 ]
  %21 = phi double [ %31, %19 ], [ 0.000000e+00, %16 ]
  %22 = getelementptr inbounds nuw double, ptr %0, i64 %20
  %23 = getelementptr inbounds nuw i8, ptr %22, i64 16
  %24 = load <2 x double>, ptr %22, align 8, !tbaa !33
  %25 = load <2 x double>, ptr %23, align 8, !tbaa !33
  %26 = fadd <2 x double> %24, splat (double 2.000000e+00)
  %27 = fadd <2 x double> %25, splat (double 2.000000e+00)
  %28 = fadd <2 x double> %26, splat (double -2.400000e+00)
  %29 = fadd <2 x double> %27, splat (double -2.400000e+00)
  %30 = tail call double @llvm.vector.reduce.fadd.v2f64(double %21, <2 x double> %28)
  %31 = tail call double @llvm.vector.reduce.fadd.v2f64(double %30, <2 x double> %29)
  %32 = add nuw i64 %20, 4
  %33 = icmp eq i64 %32, %14
  br i1 %33, label %34, label %19, !llvm.loop !702

34:                                               ; preds = %19
  br i1 %15, label %56, label %35

35:                                               ; preds = %16, %34
  %36 = phi i64 [ 0, %16 ], [ %14, %34 ]
  %37 = phi double [ 0.000000e+00, %16 ], [ %31, %34 ]
  br label %46

38:                                               ; preds = %56
  %39 = load i32, ptr @current_test, align 4, !tbaa !11
  %40 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %39)
  %41 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %42

42:                                               ; preds = %38, %56
  %43 = phi i32 [ %41, %38 ], [ %17, %56 ]
  %44 = add nuw nsw i32 %18, 1
  %45 = icmp slt i32 %44, %43
  br i1 %45, label %16, label %89, !llvm.loop !703

46:                                               ; preds = %35, %46
  %47 = phi i64 [ %54, %46 ], [ %36, %35 ]
  %48 = phi double [ %53, %46 ], [ %37, %35 ]
  %49 = getelementptr inbounds nuw double, ptr %0, i64 %47
  %50 = load double, ptr %49, align 8, !tbaa !33
  %51 = fadd double %50, 2.000000e+00
  %52 = fadd double %51, -2.400000e+00
  %53 = fadd double %48, %52
  %54 = add nuw nsw i64 %47, 1
  %55 = icmp eq i64 %54, %12
  br i1 %55, label %56, label %46, !llvm.loop !704

56:                                               ; preds = %46, %34
  %57 = phi double [ %31, %34 ], [ %53, %46 ]
  %58 = load double, ptr @init_value, align 8, !tbaa !33
  %59 = fadd double %58, 2.000000e+00
  %60 = fadd double %59, -2.400000e+00
  %61 = fmul double %60, 8.000000e+03
  %62 = fsub double %57, %61
  %63 = tail call double @llvm.fabs.f64(double %57)
  %64 = fcmp ogt double %63, 1.000000e-08
  %65 = fdiv double %62, %57
  %66 = select i1 %64, double %65, double %62
  %67 = tail call double @llvm.fabs.f64(double %66)
  %68 = fcmp olt double %67, 0x3EB0C6F7A0B5ED8D
  br i1 %68, label %42, label %38

69:                                               ; preds = %9, %84
  %70 = phi i32 [ %85, %84 ], [ %5, %9 ]
  %71 = phi double [ %86, %84 ], [ %10, %9 ]
  %72 = phi i32 [ %87, %84 ], [ 0, %9 ]
  %73 = fadd double %71, 2.000000e+00
  %74 = fadd double %73, -2.400000e+00
  %75 = fmul double %74, 8.000000e+03
  %76 = fsub double 0.000000e+00, %75
  %77 = tail call double @llvm.fabs.f64(double %76)
  %78 = fcmp olt double %77, 0x3EB0C6F7A0B5ED8D
  br i1 %78, label %84, label %79

79:                                               ; preds = %69
  %80 = load i32, ptr @current_test, align 4, !tbaa !11
  %81 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.299, i32 noundef %80)
  %82 = load double, ptr @init_value, align 8, !tbaa !33
  %83 = load i32, ptr @iterations, align 4, !tbaa !11
  br label %84

84:                                               ; preds = %69, %79
  %85 = phi i32 [ %70, %69 ], [ %83, %79 ]
  %86 = phi double [ %71, %69 ], [ %82, %79 ]
  %87 = add nuw nsw i32 %72, 1
  %88 = icmp slt i32 %87, %85
  br i1 %88, label %69, label %89, !llvm.loop !703

89:                                               ; preds = %84, %42, %3
  %90 = tail call i64 @clock() #17
  store i64 %90, ptr @end_time, align 8, !tbaa !30
  %91 = load i64, ptr @start_time, align 8, !tbaa !30
  %92 = load ptr, ptr @results, align 8, !tbaa !6
  %93 = icmp ne ptr %92, null
  %94 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %95 = load i32, ptr @current_test, align 4
  %96 = icmp slt i32 %95, %94
  %97 = select i1 %93, i1 %96, i1 false
  br i1 %97, label %109, label %98

98:                                               ; preds = %89
  %99 = add nsw i32 %94, 10
  store i32 %99, ptr @allocated_results, align 4, !tbaa !11
  %100 = sext i32 %99 to i64
  %101 = shl nsw i64 %100, 4
  %102 = tail call ptr @realloc(ptr noundef %92, i64 noundef %101) #14
  store ptr %102, ptr @results, align 8, !tbaa !6
  %103 = icmp eq ptr %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %98
  %105 = load i32, ptr @current_test, align 4, !tbaa !11
  br label %109

106:                                              ; preds = %98
  %107 = load i32, ptr @allocated_results, align 4, !tbaa !11
  %108 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %107)
  tail call void @exit(i32 noundef -1) #15
  unreachable

109:                                              ; preds = %89, %104
  %110 = phi i32 [ %105, %104 ], [ %95, %89 ]
  %111 = phi ptr [ %102, %104 ], [ %92, %89 ]
  %112 = sub nsw i64 %90, %91
  %113 = sitofp i64 %112 to double
  %114 = fdiv double %113, 1.000000e+06
  %115 = sext i32 %110 to i64
  %116 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115
  store double %114, ptr %116, align 8, !tbaa !13
  %117 = getelementptr inbounds %struct.one_result, ptr %111, i64 %115, i32 1
  store ptr %2, ptr %117, align 8, !tbaa !17
  %118 = add nsw i32 %110, 1
  store i32 %118, ptr @current_test, align 4, !tbaa !11
  ret void
}

; Function Attrs: nounwind
declare i64 @__isoc23_strtol(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #7

; Function Attrs: mustprogress nocallback nofree nounwind willreturn
declare double @strtod(ptr noundef readonly, ptr noundef captures(none)) local_unnamed_addr #10

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #11

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #12

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr writeonly captures(none), i8, i64, i1 immarg) #13

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.vector.reduce.add.v16i8(<16 x i8>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.vector.reduce.add.v8i8(<8 x i8>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.vector.reduce.add.v8i16(<8 x i16>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.vector.reduce.add.v4i16(<4 x i16>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.add.v2i64(<2 x i64>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.vector.reduce.fadd.v4f32(float, <4 x float>) #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.vector.reduce.fadd.v2f64(double, <2 x double>) #12

attributes #0 = { mustprogress nounwind uwtable "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #1 = { mustprogress nounwind willreturn allockind("realloc") allocsize(1) memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #2 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #3 = { nofree noreturn nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #4 = { mustprogress nofree nounwind uwtable "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #5 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: read) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #6 = { mustprogress nocallback nofree nounwind willreturn memory(errnomem: write) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #7 = { nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #8 = { mustprogress norecurse uwtable "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #9 = { mustprogress uwtable "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #10 = { mustprogress nocallback nofree nounwind willreturn "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #11 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #12 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #13 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #14 = { nounwind allocsize(1) }
attributes #15 = { cold noreturn nounwind }
attributes #16 = { nounwind willreturn memory(read) }
attributes #17 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 1}
!5 = !{!"clang version 22.0.0git (https://github.com/steven-studio/llvm-project.git c2901ea177a93cdcea513ae5bdc6a189f274f4ca)"}
!6 = !{!7, !7, i64 0}
!7 = !{!"p1 _ZTS10one_result", !8, i64 0}
!8 = !{!"any pointer", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
!11 = !{!12, !12, i64 0}
!12 = !{!"int", !9, i64 0}
!13 = !{!14, !15, i64 0}
!14 = !{!"_ZTS10one_result", !15, i64 0, !16, i64 8}
!15 = !{!"double", !9, i64 0}
!16 = !{!"p1 omnipotent char", !8, i64 0}
!17 = !{!14, !16, i64 8}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.mustprogress"}
!20 = distinct !{!20, !19, !21, !22}
!21 = !{!"llvm.loop.isvectorized", i32 1}
!22 = !{!"llvm.loop.unroll.runtime.disable"}
!23 = distinct !{!23, !19}
!24 = distinct !{!24, !19, !21}
!25 = distinct !{!25, !19}
!26 = distinct !{!26, !19}
!27 = distinct !{!27, !19, !21, !22}
!28 = distinct !{!28, !19}
!29 = distinct !{!29, !19, !21}
!30 = !{!31, !31, i64 0}
!31 = !{!"long", !9, i64 0}
!32 = !{!16, !16, i64 0}
!33 = !{!15, !15, i64 0}
!34 = !{!9, !9, i64 0}
!35 = !{!36, !36, i64 0}
!36 = !{!"short", !9, i64 0}
!37 = distinct !{!37, !19, !21, !22}
!38 = distinct !{!38, !19, !21, !22}
!39 = distinct !{!39, !19, !21, !22}
!40 = distinct !{!40, !19, !21, !22}
!41 = distinct !{!41, !19, !21, !22}
!42 = distinct !{!42, !19, !21, !22}
!43 = !{!44, !44, i64 0}
!44 = !{!"float", !9, i64 0}
!45 = distinct !{!45, !19, !21, !22}
!46 = distinct !{!46, !19, !21, !22}
!47 = distinct !{!47, !19}
!48 = distinct !{!48, !19}
!49 = distinct !{!49, !19}
!50 = distinct !{!50, !19}
!51 = distinct !{!51, !19}
!52 = distinct !{!52, !19}
!53 = distinct !{!53, !19}
!54 = distinct !{!54, !19}
!55 = distinct !{!55, !19}
!56 = distinct !{!56, !19}
!57 = distinct !{!57, !19}
!58 = distinct !{!58, !19}
!59 = distinct !{!59, !19, !21, !22}
!60 = distinct !{!60, !19, !21, !22}
!61 = distinct !{!61, !19}
!62 = distinct !{!62, !19, !22, !21}
!63 = distinct !{!63, !19, !21, !22}
!64 = distinct !{!64, !19, !21, !22}
!65 = distinct !{!65, !19}
!66 = distinct !{!66, !19, !22, !21}
!67 = distinct !{!67, !19, !21, !22}
!68 = distinct !{!68, !19, !21, !22}
!69 = distinct !{!69, !19}
!70 = distinct !{!70, !19, !22, !21}
!71 = distinct !{!71, !19, !21, !22}
!72 = distinct !{!72, !19, !21, !22}
!73 = distinct !{!73, !19}
!74 = distinct !{!74, !19, !22, !21}
!75 = distinct !{!75, !19, !21, !22}
!76 = distinct !{!76, !19, !21, !22}
!77 = distinct !{!77, !19}
!78 = distinct !{!78, !19, !22, !21}
!79 = distinct !{!79, !19, !21, !22}
!80 = distinct !{!80, !19, !21, !22}
!81 = distinct !{!81, !19}
!82 = distinct !{!82, !19, !22, !21}
!83 = distinct !{!83, !19, !21, !22}
!84 = distinct !{!84, !19, !21, !22}
!85 = distinct !{!85, !19}
!86 = distinct !{!86, !19, !22, !21}
!87 = distinct !{!87, !19, !21, !22}
!88 = distinct !{!88, !19, !21, !22}
!89 = distinct !{!89, !19}
!90 = distinct !{!90, !19, !22, !21}
!91 = distinct !{!91, !19, !21, !22}
!92 = distinct !{!92, !19, !21, !22}
!93 = distinct !{!93, !19}
!94 = distinct !{!94, !19, !22, !21}
!95 = distinct !{!95, !19, !21, !22}
!96 = distinct !{!96, !19, !21, !22}
!97 = distinct !{!97, !19}
!98 = distinct !{!98, !19, !22, !21}
!99 = distinct !{!99, !19, !21, !22}
!100 = distinct !{!100, !19, !21, !22}
!101 = distinct !{!101, !19}
!102 = distinct !{!102, !19, !22, !21}
!103 = distinct !{!103, !19, !21, !22}
!104 = distinct !{!104, !19, !21, !22}
!105 = distinct !{!105, !19}
!106 = distinct !{!106, !19, !22, !21}
!107 = distinct !{!107, !19, !21, !22}
!108 = distinct !{!108, !19, !21, !22}
!109 = distinct !{!109, !19}
!110 = distinct !{!110, !19, !22, !21}
!111 = distinct !{!111, !19, !21, !22}
!112 = distinct !{!112, !19, !21, !22}
!113 = distinct !{!113, !19}
!114 = distinct !{!114, !19, !22, !21}
!115 = distinct !{!115, !19, !21, !22}
!116 = distinct !{!116, !19, !21, !22}
!117 = distinct !{!117, !19}
!118 = distinct !{!118, !19, !22, !21}
!119 = distinct !{!119, !19, !21, !22}
!120 = distinct !{!120, !19, !21, !22}
!121 = distinct !{!121, !19}
!122 = distinct !{!122, !19, !22, !21}
!123 = distinct !{!123, !19, !21, !22}
!124 = distinct !{!124, !19, !21, !22}
!125 = distinct !{!125, !19}
!126 = distinct !{!126, !19, !22, !21}
!127 = distinct !{!127, !19}
!128 = distinct !{!128, !19}
!129 = distinct !{!129, !19}
!130 = distinct !{!130, !19}
!131 = distinct !{!131, !19}
!132 = distinct !{!132, !19}
!133 = distinct !{!133, !19}
!134 = distinct !{!134, !19}
!135 = distinct !{!135, !19}
!136 = distinct !{!136, !19}
!137 = distinct !{!137, !19}
!138 = distinct !{!138, !19}
!139 = distinct !{!139, !19, !21, !22}
!140 = distinct !{!140, !19, !21, !22}
!141 = distinct !{!141, !19}
!142 = distinct !{!142, !19, !22, !21}
!143 = distinct !{!143, !19, !21, !22}
!144 = distinct !{!144, !19, !21, !22}
!145 = distinct !{!145, !19}
!146 = distinct !{!146, !19, !22, !21}
!147 = distinct !{!147, !19, !21, !22}
!148 = distinct !{!148, !19, !21, !22}
!149 = distinct !{!149, !19}
!150 = distinct !{!150, !19, !22, !21}
!151 = distinct !{!151, !19, !21, !22}
!152 = distinct !{!152, !19, !21, !22}
!153 = distinct !{!153, !19}
!154 = distinct !{!154, !19, !22, !21}
!155 = distinct !{!155, !19, !21, !22}
!156 = distinct !{!156, !19, !21, !22}
!157 = distinct !{!157, !19}
!158 = distinct !{!158, !19, !22, !21}
!159 = distinct !{!159, !19, !21, !22}
!160 = distinct !{!160, !19, !21, !22}
!161 = distinct !{!161, !19}
!162 = distinct !{!162, !19, !22, !21}
!163 = distinct !{!163, !19, !21, !22}
!164 = distinct !{!164, !19, !21, !22}
!165 = distinct !{!165, !19}
!166 = distinct !{!166, !19, !22, !21}
!167 = distinct !{!167, !19, !21, !22}
!168 = distinct !{!168, !19, !21, !22}
!169 = distinct !{!169, !19}
!170 = distinct !{!170, !19, !22, !21}
!171 = distinct !{!171, !19, !21, !22}
!172 = distinct !{!172, !19, !21, !22}
!173 = distinct !{!173, !19}
!174 = distinct !{!174, !19, !22, !21}
!175 = distinct !{!175, !19, !21, !22}
!176 = distinct !{!176, !19, !21, !22}
!177 = distinct !{!177, !19}
!178 = distinct !{!178, !19, !22, !21}
!179 = distinct !{!179, !19, !21, !22}
!180 = distinct !{!180, !19, !21, !22}
!181 = distinct !{!181, !19}
!182 = distinct !{!182, !19, !22, !21}
!183 = distinct !{!183, !19, !21, !22}
!184 = distinct !{!184, !19, !21, !22}
!185 = distinct !{!185, !19}
!186 = distinct !{!186, !19, !22, !21}
!187 = distinct !{!187, !19, !21, !22}
!188 = distinct !{!188, !19, !21, !22}
!189 = distinct !{!189, !19}
!190 = distinct !{!190, !19, !22, !21}
!191 = distinct !{!191, !19, !21, !22}
!192 = distinct !{!192, !19, !21, !22}
!193 = distinct !{!193, !19}
!194 = distinct !{!194, !19, !22, !21}
!195 = distinct !{!195, !19, !21, !22}
!196 = distinct !{!196, !19, !21, !22}
!197 = distinct !{!197, !19}
!198 = distinct !{!198, !19, !22, !21}
!199 = distinct !{!199, !19, !21, !22}
!200 = distinct !{!200, !19, !21, !22}
!201 = distinct !{!201, !19}
!202 = distinct !{!202, !19, !22, !21}
!203 = distinct !{!203, !19, !21, !22}
!204 = distinct !{!204, !19, !21, !22}
!205 = distinct !{!205, !19}
!206 = distinct !{!206, !19, !22, !21}
!207 = distinct !{!207, !19}
!208 = distinct !{!208, !19}
!209 = distinct !{!209, !19}
!210 = distinct !{!210, !19}
!211 = distinct !{!211, !19}
!212 = distinct !{!212, !19}
!213 = distinct !{!213, !19}
!214 = distinct !{!214, !19}
!215 = distinct !{!215, !19}
!216 = distinct !{!216, !19}
!217 = distinct !{!217, !19}
!218 = distinct !{!218, !19}
!219 = distinct !{!219, !19, !21, !22}
!220 = distinct !{!220, !19, !21, !22}
!221 = distinct !{!221, !19}
!222 = distinct !{!222, !19, !22, !21}
!223 = distinct !{!223, !19, !21, !22}
!224 = distinct !{!224, !19, !21, !22}
!225 = distinct !{!225, !19}
!226 = distinct !{!226, !19, !22, !21}
!227 = distinct !{!227, !19, !21, !22}
!228 = distinct !{!228, !19, !21, !22}
!229 = distinct !{!229, !19}
!230 = distinct !{!230, !19, !22, !21}
!231 = distinct !{!231, !19, !21, !22}
!232 = distinct !{!232, !19, !21, !22}
!233 = distinct !{!233, !19}
!234 = distinct !{!234, !19, !22, !21}
!235 = distinct !{!235, !19, !21, !22}
!236 = distinct !{!236, !19, !21, !22}
!237 = distinct !{!237, !19}
!238 = distinct !{!238, !19, !22, !21}
!239 = distinct !{!239, !19, !21, !22}
!240 = distinct !{!240, !19, !21, !22}
!241 = distinct !{!241, !19}
!242 = distinct !{!242, !19, !22, !21}
!243 = distinct !{!243, !19, !21, !22}
!244 = distinct !{!244, !19, !21, !22}
!245 = distinct !{!245, !19}
!246 = distinct !{!246, !19, !22, !21}
!247 = distinct !{!247, !19, !21, !22}
!248 = distinct !{!248, !19, !21, !22}
!249 = distinct !{!249, !19}
!250 = distinct !{!250, !19, !22, !21}
!251 = distinct !{!251, !19, !21, !22}
!252 = distinct !{!252, !19, !21, !22}
!253 = distinct !{!253, !19}
!254 = distinct !{!254, !19, !22, !21}
!255 = distinct !{!255, !19, !21, !22}
!256 = distinct !{!256, !19, !21, !22}
!257 = distinct !{!257, !19}
!258 = distinct !{!258, !19, !22, !21}
!259 = distinct !{!259, !19, !21, !22}
!260 = distinct !{!260, !19, !21, !22}
!261 = distinct !{!261, !19}
!262 = distinct !{!262, !19, !22, !21}
!263 = distinct !{!263, !19, !21, !22}
!264 = distinct !{!264, !19, !21, !22}
!265 = distinct !{!265, !19}
!266 = distinct !{!266, !19, !22, !21}
!267 = distinct !{!267, !19, !21, !22}
!268 = distinct !{!268, !19, !21, !22}
!269 = distinct !{!269, !19}
!270 = distinct !{!270, !19, !22, !21}
!271 = distinct !{!271, !19, !21, !22}
!272 = distinct !{!272, !19, !21, !22}
!273 = distinct !{!273, !19}
!274 = distinct !{!274, !19, !22, !21}
!275 = distinct !{!275, !19, !21, !22}
!276 = distinct !{!276, !19, !21, !22}
!277 = distinct !{!277, !19}
!278 = distinct !{!278, !19, !22, !21}
!279 = distinct !{!279, !19, !21, !22}
!280 = distinct !{!280, !19, !21, !22}
!281 = distinct !{!281, !19}
!282 = distinct !{!282, !19, !22, !21}
!283 = distinct !{!283, !19, !21, !22}
!284 = distinct !{!284, !19, !21, !22}
!285 = distinct !{!285, !19}
!286 = distinct !{!286, !19, !22, !21}
!287 = distinct !{!287, !19}
!288 = distinct !{!288, !19}
!289 = distinct !{!289, !19}
!290 = distinct !{!290, !19}
!291 = distinct !{!291, !19}
!292 = distinct !{!292, !19}
!293 = distinct !{!293, !19}
!294 = distinct !{!294, !19}
!295 = distinct !{!295, !19}
!296 = distinct !{!296, !19}
!297 = distinct !{!297, !19}
!298 = distinct !{!298, !19}
!299 = distinct !{!299, !19, !21, !22}
!300 = distinct !{!300, !19, !21, !22}
!301 = distinct !{!301, !19}
!302 = distinct !{!302, !19, !22, !21}
!303 = distinct !{!303, !19, !21, !22}
!304 = distinct !{!304, !19, !21, !22}
!305 = distinct !{!305, !19}
!306 = distinct !{!306, !19, !22, !21}
!307 = distinct !{!307, !19, !21, !22}
!308 = distinct !{!308, !19, !21, !22}
!309 = distinct !{!309, !19}
!310 = distinct !{!310, !19, !22, !21}
!311 = distinct !{!311, !19, !21, !22}
!312 = distinct !{!312, !19, !21, !22}
!313 = distinct !{!313, !19}
!314 = distinct !{!314, !19, !22, !21}
!315 = distinct !{!315, !19, !21, !22}
!316 = distinct !{!316, !19, !21, !22}
!317 = distinct !{!317, !19}
!318 = distinct !{!318, !19, !22, !21}
!319 = distinct !{!319, !19, !21, !22}
!320 = distinct !{!320, !19, !21, !22}
!321 = distinct !{!321, !19}
!322 = distinct !{!322, !19, !22, !21}
!323 = distinct !{!323, !19, !21, !22}
!324 = distinct !{!324, !19, !21, !22}
!325 = distinct !{!325, !19}
!326 = distinct !{!326, !19, !22, !21}
!327 = distinct !{!327, !19, !21, !22}
!328 = distinct !{!328, !19, !21, !22}
!329 = distinct !{!329, !19}
!330 = distinct !{!330, !19, !22, !21}
!331 = distinct !{!331, !19, !21, !22}
!332 = distinct !{!332, !19, !21, !22}
!333 = distinct !{!333, !19}
!334 = distinct !{!334, !19, !22, !21}
!335 = distinct !{!335, !19, !21, !22}
!336 = distinct !{!336, !19, !21, !22}
!337 = distinct !{!337, !19}
!338 = distinct !{!338, !19, !22, !21}
!339 = distinct !{!339, !19, !21, !22}
!340 = distinct !{!340, !19, !21, !22}
!341 = distinct !{!341, !19}
!342 = distinct !{!342, !19, !22, !21}
!343 = distinct !{!343, !19, !21, !22}
!344 = distinct !{!344, !19, !21, !22}
!345 = distinct !{!345, !19}
!346 = distinct !{!346, !19, !22, !21}
!347 = distinct !{!347, !19, !21, !22}
!348 = distinct !{!348, !19, !21, !22}
!349 = distinct !{!349, !19}
!350 = distinct !{!350, !19, !22, !21}
!351 = distinct !{!351, !19, !21, !22}
!352 = distinct !{!352, !19, !21, !22}
!353 = distinct !{!353, !19}
!354 = distinct !{!354, !19, !22, !21}
!355 = distinct !{!355, !19, !21, !22}
!356 = distinct !{!356, !19, !21, !22}
!357 = distinct !{!357, !19}
!358 = distinct !{!358, !19, !22, !21}
!359 = distinct !{!359, !19, !21, !22}
!360 = distinct !{!360, !19, !21, !22}
!361 = distinct !{!361, !19}
!362 = distinct !{!362, !19, !22, !21}
!363 = distinct !{!363, !19, !21, !22}
!364 = distinct !{!364, !19, !21, !22}
!365 = distinct !{!365, !19}
!366 = distinct !{!366, !19, !22, !21}
!367 = distinct !{!367, !19}
!368 = distinct !{!368, !19}
!369 = distinct !{!369, !19}
!370 = distinct !{!370, !19}
!371 = distinct !{!371, !19}
!372 = distinct !{!372, !19}
!373 = distinct !{!373, !19}
!374 = distinct !{!374, !19}
!375 = distinct !{!375, !19}
!376 = distinct !{!376, !19}
!377 = distinct !{!377, !19}
!378 = distinct !{!378, !19}
!379 = distinct !{!379, !19, !21, !22}
!380 = distinct !{!380, !19}
!381 = distinct !{!381, !19, !22, !21}
!382 = distinct !{!382, !19, !21, !22}
!383 = distinct !{!383, !19}
!384 = distinct !{!384, !19, !22, !21}
!385 = distinct !{!385, !19, !21, !22}
!386 = distinct !{!386, !19}
!387 = distinct !{!387, !19, !22, !21}
!388 = distinct !{!388, !19, !21, !22}
!389 = distinct !{!389, !19}
!390 = distinct !{!390, !19, !22, !21}
!391 = distinct !{!391, !19, !21, !22}
!392 = distinct !{!392, !19}
!393 = distinct !{!393, !19, !22, !21}
!394 = distinct !{!394, !19, !21, !22}
!395 = distinct !{!395, !19}
!396 = distinct !{!396, !19, !22, !21}
!397 = distinct !{!397, !19, !21, !22}
!398 = distinct !{!398, !19}
!399 = distinct !{!399, !19, !22, !21}
!400 = distinct !{!400, !19, !21, !22}
!401 = distinct !{!401, !19}
!402 = distinct !{!402, !19, !22, !21}
!403 = distinct !{!403, !19, !21, !22}
!404 = distinct !{!404, !19}
!405 = distinct !{!405, !19, !22, !21}
!406 = distinct !{!406, !19, !21, !22}
!407 = distinct !{!407, !19}
!408 = distinct !{!408, !19, !22, !21}
!409 = distinct !{!409, !19, !21, !22}
!410 = distinct !{!410, !19}
!411 = distinct !{!411, !19, !22, !21}
!412 = distinct !{!412, !19, !21, !22}
!413 = distinct !{!413, !19}
!414 = distinct !{!414, !19, !22, !21}
!415 = distinct !{!415, !19, !21, !22}
!416 = distinct !{!416, !19}
!417 = distinct !{!417, !19, !22, !21}
!418 = distinct !{!418, !19, !21, !22}
!419 = distinct !{!419, !19}
!420 = distinct !{!420, !19, !22, !21}
!421 = distinct !{!421, !19, !21, !22}
!422 = distinct !{!422, !19}
!423 = distinct !{!423, !19, !22, !21}
!424 = distinct !{!424, !19, !21, !22}
!425 = distinct !{!425, !19}
!426 = distinct !{!426, !19, !22, !21}
!427 = distinct !{!427, !19, !21, !22}
!428 = distinct !{!428, !19}
!429 = distinct !{!429, !19, !22, !21}
!430 = distinct !{!430, !19}
!431 = distinct !{!431, !19}
!432 = distinct !{!432, !19}
!433 = distinct !{!433, !19}
!434 = distinct !{!434, !19}
!435 = distinct !{!435, !19}
!436 = distinct !{!436, !19}
!437 = distinct !{!437, !19}
!438 = distinct !{!438, !19}
!439 = distinct !{!439, !19}
!440 = distinct !{!440, !19}
!441 = distinct !{!441, !19}
!442 = distinct !{!442, !19, !21, !22}
!443 = distinct !{!443, !19}
!444 = distinct !{!444, !19, !22, !21}
!445 = distinct !{!445, !19, !21, !22}
!446 = distinct !{!446, !19}
!447 = distinct !{!447, !19, !22, !21}
!448 = distinct !{!448, !19, !21, !22}
!449 = distinct !{!449, !19}
!450 = distinct !{!450, !19, !22, !21}
!451 = distinct !{!451, !19, !21, !22}
!452 = distinct !{!452, !19}
!453 = distinct !{!453, !19, !22, !21}
!454 = distinct !{!454, !19, !21, !22}
!455 = distinct !{!455, !19}
!456 = distinct !{!456, !19, !22, !21}
!457 = distinct !{!457, !19, !21, !22}
!458 = distinct !{!458, !19}
!459 = distinct !{!459, !19, !22, !21}
!460 = distinct !{!460, !19, !21, !22}
!461 = distinct !{!461, !19}
!462 = distinct !{!462, !19, !22, !21}
!463 = distinct !{!463, !19, !21, !22}
!464 = distinct !{!464, !19}
!465 = distinct !{!465, !19, !22, !21}
!466 = distinct !{!466, !19, !21, !22}
!467 = distinct !{!467, !19}
!468 = distinct !{!468, !19, !22, !21}
!469 = distinct !{!469, !19, !21, !22}
!470 = distinct !{!470, !19}
!471 = distinct !{!471, !19, !22, !21}
!472 = distinct !{!472, !19, !21, !22}
!473 = distinct !{!473, !19}
!474 = distinct !{!474, !19, !22, !21}
!475 = distinct !{!475, !19, !21, !22}
!476 = distinct !{!476, !19}
!477 = distinct !{!477, !19, !22, !21}
!478 = distinct !{!478, !19, !21, !22}
!479 = distinct !{!479, !19}
!480 = distinct !{!480, !19, !22, !21}
!481 = distinct !{!481, !19, !21, !22}
!482 = distinct !{!482, !19}
!483 = distinct !{!483, !19, !22, !21}
!484 = distinct !{!484, !19, !21, !22}
!485 = distinct !{!485, !19}
!486 = distinct !{!486, !19, !22, !21}
!487 = distinct !{!487, !19, !21, !22}
!488 = distinct !{!488, !19}
!489 = distinct !{!489, !19, !22, !21}
!490 = distinct !{!490, !19, !21, !22}
!491 = distinct !{!491, !19}
!492 = distinct !{!492, !19, !22, !21}
!493 = distinct !{!493, !19}
!494 = distinct !{!494, !19}
!495 = distinct !{!495, !19}
!496 = distinct !{!496, !19}
!497 = distinct !{!497, !19}
!498 = distinct !{!498, !19}
!499 = distinct !{!499, !19}
!500 = distinct !{!500, !19}
!501 = distinct !{!501, !19}
!502 = distinct !{!502, !19}
!503 = distinct !{!503, !19}
!504 = distinct !{!504, !19}
!505 = distinct !{!505, !19, !21, !22}
!506 = distinct !{!506, !19}
!507 = distinct !{!507, !19, !22, !21}
!508 = distinct !{!508, !19, !21, !22}
!509 = distinct !{!509, !19}
!510 = distinct !{!510, !19, !22, !21}
!511 = distinct !{!511, !19, !21, !22}
!512 = distinct !{!512, !19}
!513 = distinct !{!513, !19, !22, !21}
!514 = distinct !{!514, !19, !21, !22}
!515 = distinct !{!515, !19}
!516 = distinct !{!516, !19, !22, !21}
!517 = distinct !{!517, !19, !21, !22}
!518 = distinct !{!518, !19}
!519 = distinct !{!519, !19, !21}
!520 = distinct !{!520, !19, !21, !22}
!521 = distinct !{!521, !19}
!522 = distinct !{!522, !19, !21}
!523 = distinct !{!523, !19, !21, !22}
!524 = distinct !{!524, !19}
!525 = distinct !{!525, !19, !22, !21}
!526 = distinct !{!526, !19, !21, !22}
!527 = distinct !{!527, !19}
!528 = distinct !{!528, !19, !22, !21}
!529 = distinct !{!529, !19, !21, !22}
!530 = distinct !{!530, !19}
!531 = distinct !{!531, !19, !22, !21}
!532 = distinct !{!532, !19, !21, !22}
!533 = distinct !{!533, !19}
!534 = distinct !{!534, !19, !22, !21}
!535 = distinct !{!535, !19, !21, !22}
!536 = distinct !{!536, !19}
!537 = distinct !{!537, !19, !22, !21}
!538 = distinct !{!538, !19, !21, !22}
!539 = distinct !{!539, !19}
!540 = distinct !{!540, !19, !22, !21}
!541 = distinct !{!541, !19, !21, !22}
!542 = distinct !{!542, !19}
!543 = distinct !{!543, !19, !22, !21}
!544 = distinct !{!544, !19, !21, !22}
!545 = distinct !{!545, !19}
!546 = distinct !{!546, !19, !22, !21}
!547 = distinct !{!547, !19, !21, !22}
!548 = distinct !{!548, !19}
!549 = distinct !{!549, !19, !22, !21}
!550 = distinct !{!550, !19, !21, !22}
!551 = distinct !{!551, !19}
!552 = distinct !{!552, !19, !22, !21}
!553 = distinct !{!553, !19, !21, !22}
!554 = distinct !{!554, !19}
!555 = distinct !{!555, !19, !22, !21}
!556 = distinct !{!556, !19}
!557 = distinct !{!557, !19}
!558 = distinct !{!558, !19}
!559 = distinct !{!559, !19}
!560 = distinct !{!560, !19}
!561 = distinct !{!561, !19}
!562 = distinct !{!562, !19}
!563 = distinct !{!563, !19}
!564 = distinct !{!564, !19}
!565 = distinct !{!565, !19}
!566 = distinct !{!566, !19}
!567 = distinct !{!567, !19}
!568 = distinct !{!568, !19, !21, !22}
!569 = distinct !{!569, !19}
!570 = distinct !{!570, !19, !22, !21}
!571 = distinct !{!571, !19, !21, !22}
!572 = distinct !{!572, !19}
!573 = distinct !{!573, !19, !22, !21}
!574 = distinct !{!574, !19, !21, !22}
!575 = distinct !{!575, !19}
!576 = distinct !{!576, !19, !22, !21}
!577 = distinct !{!577, !19, !21, !22}
!578 = distinct !{!578, !19}
!579 = distinct !{!579, !19, !22, !21}
!580 = distinct !{!580, !19, !21, !22}
!581 = distinct !{!581, !19}
!582 = distinct !{!582, !19, !21}
!583 = distinct !{!583, !19, !21, !22}
!584 = distinct !{!584, !19}
!585 = distinct !{!585, !19, !21}
!586 = distinct !{!586, !19, !21, !22}
!587 = distinct !{!587, !19}
!588 = distinct !{!588, !19, !22, !21}
!589 = distinct !{!589, !19, !21, !22}
!590 = distinct !{!590, !19}
!591 = distinct !{!591, !19, !21}
!592 = distinct !{!592, !19, !21, !22}
!593 = distinct !{!593, !19}
!594 = distinct !{!594, !19, !21}
!595 = distinct !{!595, !19, !21, !22}
!596 = distinct !{!596, !19}
!597 = distinct !{!597, !19, !22, !21}
!598 = distinct !{!598, !19, !21, !22}
!599 = distinct !{!599, !19}
!600 = distinct !{!600, !19, !22, !21}
!601 = distinct !{!601, !19, !21, !22}
!602 = distinct !{!602, !19}
!603 = distinct !{!603, !19, !22, !21}
!604 = distinct !{!604, !19, !21, !22}
!605 = distinct !{!605, !19}
!606 = distinct !{!606, !19, !22, !21}
!607 = distinct !{!607, !19, !21, !22}
!608 = distinct !{!608, !19}
!609 = distinct !{!609, !19, !22, !21}
!610 = distinct !{!610, !19, !21, !22}
!611 = distinct !{!611, !19}
!612 = distinct !{!612, !19, !22, !21}
!613 = distinct !{!613, !19, !21, !22}
!614 = distinct !{!614, !19}
!615 = distinct !{!615, !19, !22, !21}
!616 = distinct !{!616, !19, !21, !22}
!617 = distinct !{!617, !19}
!618 = distinct !{!618, !19, !22, !21}
!619 = distinct !{!619, !19}
!620 = distinct !{!620, !19}
!621 = distinct !{!621, !19}
!622 = distinct !{!622, !19}
!623 = distinct !{!623, !19}
!624 = distinct !{!624, !19}
!625 = distinct !{!625, !19}
!626 = distinct !{!626, !19}
!627 = distinct !{!627, !19}
!628 = distinct !{!628, !19}
!629 = distinct !{!629, !19, !21, !22}
!630 = distinct !{!630, !19}
!631 = distinct !{!631, !19, !22, !21}
!632 = distinct !{!632, !19, !21, !22}
!633 = distinct !{!633, !19}
!634 = distinct !{!634, !19, !22, !21}
!635 = distinct !{!635, !19, !21, !22}
!636 = distinct !{!636, !19}
!637 = distinct !{!637, !19, !22, !21}
!638 = distinct !{!638, !19, !21, !22}
!639 = distinct !{!639, !19}
!640 = distinct !{!640, !19, !22, !21}
!641 = distinct !{!641, !19, !21, !22}
!642 = distinct !{!642, !19}
!643 = distinct !{!643, !19, !22, !21}
!644 = distinct !{!644, !19, !21, !22}
!645 = distinct !{!645, !19}
!646 = distinct !{!646, !19, !22, !21}
!647 = distinct !{!647, !19, !21, !22}
!648 = distinct !{!648, !19}
!649 = distinct !{!649, !19, !22, !21}
!650 = distinct !{!650, !19, !21, !22}
!651 = distinct !{!651, !19}
!652 = distinct !{!652, !19, !22, !21}
!653 = distinct !{!653, !19, !21, !22}
!654 = distinct !{!654, !19}
!655 = distinct !{!655, !19, !22, !21}
!656 = distinct !{!656, !19, !21, !22}
!657 = distinct !{!657, !19}
!658 = distinct !{!658, !19, !22, !21}
!659 = distinct !{!659, !19, !21, !22}
!660 = distinct !{!660, !19}
!661 = distinct !{!661, !19, !22, !21}
!662 = distinct !{!662, !19}
!663 = distinct !{!663, !19}
!664 = distinct !{!664, !19}
!665 = distinct !{!665, !19}
!666 = distinct !{!666, !19}
!667 = distinct !{!667, !19}
!668 = distinct !{!668, !19}
!669 = distinct !{!669, !19}
!670 = distinct !{!670, !19}
!671 = distinct !{!671, !19}
!672 = distinct !{!672, !19, !21, !22}
!673 = distinct !{!673, !19}
!674 = distinct !{!674, !19, !22, !21}
!675 = distinct !{!675, !19, !21, !22}
!676 = distinct !{!676, !19}
!677 = distinct !{!677, !19, !22, !21}
!678 = distinct !{!678, !19, !21, !22}
!679 = distinct !{!679, !19}
!680 = distinct !{!680, !19, !22, !21}
!681 = distinct !{!681, !19, !21, !22}
!682 = distinct !{!682, !19}
!683 = distinct !{!683, !19, !22, !21}
!684 = distinct !{!684, !19, !21, !22}
!685 = distinct !{!685, !19}
!686 = distinct !{!686, !19, !22, !21}
!687 = distinct !{!687, !19, !21, !22}
!688 = distinct !{!688, !19}
!689 = distinct !{!689, !19, !22, !21}
!690 = distinct !{!690, !19, !21, !22}
!691 = distinct !{!691, !19}
!692 = distinct !{!692, !19, !22, !21}
!693 = distinct !{!693, !19, !21, !22}
!694 = distinct !{!694, !19}
!695 = distinct !{!695, !19, !22, !21}
!696 = distinct !{!696, !19, !21, !22}
!697 = distinct !{!697, !19}
!698 = distinct !{!698, !19, !22, !21}
!699 = distinct !{!699, !19, !21, !22}
!700 = distinct !{!700, !19}
!701 = distinct !{!701, !19, !22, !21}
!702 = distinct !{!702, !19, !21, !22}
!703 = distinct !{!703, !19}
!704 = distinct !{!704, !19, !22, !21}
